
Simon-Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000634c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08006490  08006490  00016490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006900  08006900  00016900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006904  08006904  00016904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000004  08006908  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000450  200001e0  08006ae4  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000630  08006ae4  00020630  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d497  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003c79  00000000  00000000  0003d6a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000af15  00000000  00000000  00041320  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001060  00000000  00000000  0004c238  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001a60  00000000  00000000  0004d298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00024620  00000000  00000000  0004ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00010af1  00000000  00000000  00073318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000e2db2  00000000  00000000  00083e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00166bbb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003ad8  00000000  00000000  00166c38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08006474 	.word	0x08006474

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	08006474 	.word	0x08006474

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b972 	b.w	8000e54 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4688      	mov	r8, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14b      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4615      	mov	r5, r2
 8000b9a:	d967      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0720 	rsb	r7, r2, #32
 8000ba6:	fa01 f302 	lsl.w	r3, r1, r2
 8000baa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bae:	4095      	lsls	r5, r2
 8000bb0:	ea47 0803 	orr.w	r8, r7, r3
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bc0:	fa1f fc85 	uxth.w	ip, r5
 8000bc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bcc:	fb07 f10c 	mul.w	r1, r7, ip
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18eb      	adds	r3, r5, r3
 8000bd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bda:	f080 811b 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8118 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000be4:	3f02      	subs	r7, #2
 8000be6:	442b      	add	r3, r5
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x290>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x290>
 8000c10:	3802      	subs	r0, #2
 8000c12:	442c      	add	r4, r5
 8000c14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c18:	eba4 040c 	sub.w	r4, r4, ip
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	b11e      	cbz	r6, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c6 4300 	strd	r4, r3, [r6]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xbe>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	f000 80eb 	beq.w	8000e0e <__udivmoddi4+0x286>
 8000c38:	2700      	movs	r7, #0
 8000c3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c3e:	4638      	mov	r0, r7
 8000c40:	4639      	mov	r1, r7
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f783 	clz	r7, r3
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d147      	bne.n	8000cde <__udivmoddi4+0x156>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd0>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80fa 	bhi.w	8000e4c <__udivmoddi4+0x2c4>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4698      	mov	r8, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000c66:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xe8>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 808f 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c7a:	1b49      	subs	r1, r1, r5
 8000c7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c80:	fa1f f885 	uxth.w	r8, r5
 8000c84:	2701      	movs	r7, #1
 8000c86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb08 f10c 	mul.w	r1, r8, ip
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x124>
 8000c9c:	18eb      	adds	r3, r5, r3
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x122>
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	f200 80cd 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x14c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x14a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80b6 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e79f      	b.n	8000c1e <__udivmoddi4+0x96>
 8000cde:	f1c7 0c20 	rsb	ip, r7, #32
 8000ce2:	40bb      	lsls	r3, r7
 8000ce4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cec:	fa01 f407 	lsl.w	r4, r1, r7
 8000cf0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cfc:	4325      	orrs	r5, r4
 8000cfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d02:	0c2c      	lsrs	r4, r5, #16
 8000d04:	fb08 3319 	mls	r3, r8, r9, r3
 8000d08:	fa1f fa8e 	uxth.w	sl, lr
 8000d0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d10:	fb09 f40a 	mul.w	r4, r9, sl
 8000d14:	429c      	cmp	r4, r3
 8000d16:	fa02 f207 	lsl.w	r2, r2, r7
 8000d1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b0>
 8000d20:	eb1e 0303 	adds.w	r3, lr, r3
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d28:	f080 8087 	bcs.w	8000e3a <__udivmoddi4+0x2b2>
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	f240 8084 	bls.w	8000e3a <__udivmoddi4+0x2b2>
 8000d32:	f1a9 0902 	sub.w	r9, r9, #2
 8000d36:	4473      	add	r3, lr
 8000d38:	1b1b      	subs	r3, r3, r4
 8000d3a:	b2ad      	uxth	r5, r5
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d4c:	45a2      	cmp	sl, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1da>
 8000d50:	eb1e 0404 	adds.w	r4, lr, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	d26b      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5a:	45a2      	cmp	sl, r4
 8000d5c:	d969      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4474      	add	r4, lr
 8000d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d66:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6a:	eba4 040a 	sub.w	r4, r4, sl
 8000d6e:	454c      	cmp	r4, r9
 8000d70:	46c2      	mov	sl, r8
 8000d72:	464b      	mov	r3, r9
 8000d74:	d354      	bcc.n	8000e20 <__udivmoddi4+0x298>
 8000d76:	d051      	beq.n	8000e1c <__udivmoddi4+0x294>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d069      	beq.n	8000e50 <__udivmoddi4+0x2c8>
 8000d7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d80:	eb64 0403 	sbc.w	r4, r4, r3
 8000d84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d88:	40fd      	lsrs	r5, r7
 8000d8a:	40fc      	lsrs	r4, r7
 8000d8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d90:	e9c6 5400 	strd	r5, r4, [r6]
 8000d94:	2700      	movs	r7, #0
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000da0:	4095      	lsls	r5, r2
 8000da2:	fa01 f002 	lsl.w	r0, r1, r2
 8000da6:	fa21 f303 	lsr.w	r3, r1, r3
 8000daa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dae:	4338      	orrs	r0, r7
 8000db0:	0c01      	lsrs	r1, r0, #16
 8000db2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000db6:	fa1f f885 	uxth.w	r8, r5
 8000dba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb07 f308 	mul.w	r3, r7, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x256>
 8000dce:	1869      	adds	r1, r5, r1
 8000dd0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dd4:	d22f      	bcs.n	8000e36 <__udivmoddi4+0x2ae>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d92d      	bls.n	8000e36 <__udivmoddi4+0x2ae>
 8000dda:	3f02      	subs	r7, #2
 8000ddc:	4429      	add	r1, r5
 8000dde:	1acb      	subs	r3, r1, r3
 8000de0:	b281      	uxth	r1, r0
 8000de2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb00 f308 	mul.w	r3, r0, r8
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x27e>
 8000df6:	1869      	adds	r1, r5, r1
 8000df8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dfc:	d217      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d915      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4429      	add	r1, r5
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e0c:	e73b      	b.n	8000c86 <__udivmoddi4+0xfe>
 8000e0e:	4637      	mov	r7, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e709      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e14:	4607      	mov	r7, r0
 8000e16:	e6e7      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e1c:	4541      	cmp	r1, r8
 8000e1e:	d2ab      	bcs.n	8000d78 <__udivmoddi4+0x1f0>
 8000e20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e24:	eb69 020e 	sbc.w	r2, r9, lr
 8000e28:	3801      	subs	r0, #1
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	e7a4      	b.n	8000d78 <__udivmoddi4+0x1f0>
 8000e2e:	4660      	mov	r0, ip
 8000e30:	e7e9      	b.n	8000e06 <__udivmoddi4+0x27e>
 8000e32:	4618      	mov	r0, r3
 8000e34:	e795      	b.n	8000d62 <__udivmoddi4+0x1da>
 8000e36:	4667      	mov	r7, ip
 8000e38:	e7d1      	b.n	8000dde <__udivmoddi4+0x256>
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	e77c      	b.n	8000d38 <__udivmoddi4+0x1b0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	442c      	add	r4, r5
 8000e42:	e747      	b.n	8000cd4 <__udivmoddi4+0x14c>
 8000e44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e48:	442b      	add	r3, r5
 8000e4a:	e72f      	b.n	8000cac <__udivmoddi4+0x124>
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xda>
 8000e50:	4637      	mov	r7, r6
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0xa0>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000e5a:	4c10      	ldr	r4, [pc, #64]	; (8000e9c <HAL_InitTick+0x44>)
 8000e5c:	6823      	ldr	r3, [r4, #0]
{
 8000e5e:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000e60:	b90b      	cbnz	r3, 8000e66 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e62:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000e64:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8000e66:	f001 f9a3 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
 8000e6a:	6822      	ldr	r2, [r4, #0]
 8000e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e74:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e78:	f000 f8aa 	bl	8000fd0 <HAL_SYSTICK_Config>
 8000e7c:	4604      	mov	r4, r0
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d1ef      	bne.n	8000e62 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	2d0f      	cmp	r5, #15
 8000e84:	d8ed      	bhi.n	8000e62 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e86:	4602      	mov	r2, r0
 8000e88:	4629      	mov	r1, r5
 8000e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8e:	f000 f85d 	bl	8000f4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e92:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_InitTick+0x48>)
 8000e94:	4620      	mov	r0, r4
 8000e96:	601d      	str	r5, [r3, #0]
 8000e98:	e7e4      	b.n	8000e64 <HAL_InitTick+0xc>
 8000e9a:	bf00      	nop
 8000e9c:	20000004 	.word	0x20000004
 8000ea0:	20000008 	.word	0x20000008

08000ea4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea4:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <HAL_Init+0x28>)
 8000ea6:	6813      	ldr	r3, [r2, #0]
 8000ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000eac:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eae:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb2:	f000 f839 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff ffce 	bl	8000e58 <HAL_InitTick>
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	b918      	cbnz	r0, 8000ec8 <HAL_Init+0x24>
    HAL_MspInit();
 8000ec0:	f002 fd0e 	bl	80038e0 <HAL_MspInit>
}
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000ec8:	2401      	movs	r4, #1
 8000eca:	e7fb      	b.n	8000ec4 <HAL_Init+0x20>
 8000ecc:	58004000 	.word	0x58004000

08000ed0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000ed0:	4a03      	ldr	r2, [pc, #12]	; (8000ee0 <HAL_IncTick+0x10>)
 8000ed2:	4904      	ldr	r1, [pc, #16]	; (8000ee4 <HAL_IncTick+0x14>)
 8000ed4:	6813      	ldr	r3, [r2, #0]
 8000ed6:	6809      	ldr	r1, [r1, #0]
 8000ed8:	440b      	add	r3, r1
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	2000020c 	.word	0x2000020c
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ee8:	4b01      	ldr	r3, [pc, #4]	; (8000ef0 <HAL_GetTick+0x8>)
 8000eea:	6818      	ldr	r0, [r3, #0]
}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	2000020c 	.word	0x2000020c

08000ef4 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8000ef4:	4b01      	ldr	r3, [pc, #4]	; (8000efc <HAL_GetTickPrio+0x8>)
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008

08000f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000f00:	b538      	push	{r3, r4, r5, lr}
 8000f02:	4604      	mov	r4, r0
    uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff fff0 	bl	8000ee8 <HAL_GetTick>
    uint32_t wait = Delay;
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000f08:	1c63      	adds	r3, r4, #1
    {
      wait += (uint32_t)(uwTickFreq);
 8000f0a:	bf1c      	itt	ne
 8000f0c:	4b05      	ldrne	r3, [pc, #20]	; (8000f24 <HAL_Delay+0x24>)
 8000f0e:	681b      	ldrne	r3, [r3, #0]
    uint32_t tickstart = HAL_GetTick();
 8000f10:	4605      	mov	r5, r0
      wait += (uint32_t)(uwTickFreq);
 8000f12:	bf18      	it	ne
 8000f14:	18e4      	addne	r4, r4, r3
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000f16:	f7ff ffe7 	bl	8000ee8 <HAL_GetTick>
 8000f1a:	1b40      	subs	r0, r0, r5
 8000f1c:	42a0      	cmp	r0, r4
 8000f1e:	d3fa      	bcc.n	8000f16 <HAL_Delay+0x16>
    {
    }
  }
 8000f20:	bd38      	pop	{r3, r4, r5, pc}
 8000f22:	bf00      	nop
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f2a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f30:	041b      	lsls	r3, r3, #16
 8000f32:	0c1b      	lsrs	r3, r3, #16
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	0200      	lsls	r0, r0, #8
 8000f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000f42:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f44:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4e:	b570      	push	{r4, r5, r6, lr}
 8000f50:	68dc      	ldr	r4, [r3, #12]
 8000f52:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f56:	f1c4 0507 	rsb	r5, r4, #7
 8000f5a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	bf28      	it	cs
 8000f62:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f68:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	bf8c      	ite	hi
 8000f70:	3c03      	subhi	r4, #3
 8000f72:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	ea21 0303 	bic.w	r3, r1, r3
 8000f78:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7a:	fa06 f404 	lsl.w	r4, r6, r4
 8000f7e:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000f82:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	bfa8      	it	ge
 8000f8a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000f8e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	bfbc      	itt	lt
 8000f94:	f000 000f 	andlt.w	r0, r0, #15
 8000f98:	4a05      	ldrlt	r2, [pc, #20]	; (8000fb0 <HAL_NVIC_SetPriority+0x64>)
 8000f9a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	bfaa      	itet	ge
 8000f9e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000fa8:	bd70      	pop	{r4, r5, r6, pc}
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00
 8000fb0:	e000ed14 	.word	0xe000ed14

08000fb4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	db08      	blt.n	8000fca <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb8:	0942      	lsrs	r2, r0, #5
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f000 001f 	and.w	r0, r0, #31
 8000fc0:	fa03 f000 	lsl.w	r0, r3, r0
 8000fc4:	4b01      	ldr	r3, [pc, #4]	; (8000fcc <HAL_NVIC_EnableIRQ+0x18>)
 8000fc6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fd6:	d20a      	bcs.n	8000fee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fdc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	21f0      	movs	r1, #240	; 0xf0
 8000fe0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e010 	.word	0xe000e010
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001000:	4a55      	ldr	r2, [pc, #340]	; (8001158 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001002:	f8d1 8000 	ldr.w	r8, [r1]
  uint32_t position = 0x00u;
 8001006:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001008:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100c:	fa38 f403 	lsrs.w	r4, r8, r3
 8001010:	d101      	bne.n	8001016 <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 8001012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001016:	2401      	movs	r4, #1
 8001018:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 800101c:	ea1a 0508 	ands.w	r5, sl, r8
 8001020:	f000 808f 	beq.w	8001142 <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001024:	684c      	ldr	r4, [r1, #4]
 8001026:	f024 0b10 	bic.w	fp, r4, #16
 800102a:	f1bb 0f02 	cmp.w	fp, #2
 800102e:	d111      	bne.n	8001054 <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3u];
 8001030:	08df      	lsrs	r7, r3, #3
 8001032:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001036:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800103a:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800103c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001040:	fa09 fe0c 	lsl.w	lr, r9, ip
 8001044:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001048:	690e      	ldr	r6, [r1, #16]
 800104a:	fa06 f60c 	lsl.w	r6, r6, ip
 800104e:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001052:	623e      	str	r6, [r7, #32]
 8001054:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001058:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 800105a:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800105c:	fa07 f70e 	lsl.w	r7, r7, lr
 8001060:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001062:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001066:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001068:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800106c:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001070:	ea4c 0606 	orr.w	r6, ip, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001074:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001078:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800107a:	d811      	bhi.n	80010a0 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 800107c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800107e:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001082:	68ce      	ldr	r6, [r1, #12]
 8001084:	fa06 fc0e 	lsl.w	ip, r6, lr
 8001088:	ea4c 060b 	orr.w	r6, ip, fp
        GPIOx->OSPEEDR = temp;
 800108c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800108e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001090:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001094:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001098:	409e      	lsls	r6, r3
 800109a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 800109e:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80010a0:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010a2:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010a4:	688e      	ldr	r6, [r1, #8]
 80010a6:	fa06 f60e 	lsl.w	r6, r6, lr
 80010aa:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ac:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80010ae:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b0:	d547      	bpl.n	8001142 <HAL_GPIO_Init+0x146>
 80010b2:	f023 0703 	bic.w	r7, r3, #3
 80010b6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80010ba:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010be:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80010c2:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80010c8:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010cc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010d0:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d4:	d037      	beq.n	8001146 <HAL_GPIO_Init+0x14a>
 80010d6:	4e21      	ldr	r6, [pc, #132]	; (800115c <HAL_GPIO_Init+0x160>)
 80010d8:	42b0      	cmp	r0, r6
 80010da:	d036      	beq.n	800114a <HAL_GPIO_Init+0x14e>
 80010dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010e0:	42b0      	cmp	r0, r6
 80010e2:	d034      	beq.n	800114e <HAL_GPIO_Init+0x152>
 80010e4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010e8:	42b0      	cmp	r0, r6
 80010ea:	d032      	beq.n	8001152 <HAL_GPIO_Init+0x156>
 80010ec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010f0:	42b0      	cmp	r0, r6
 80010f2:	bf14      	ite	ne
 80010f4:	2607      	movne	r6, #7
 80010f6:	2604      	moveq	r6, #4
 80010f8:	fa06 f60c 	lsl.w	r6, r6, ip
 80010fc:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001100:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8001102:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8001106:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001108:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 800110c:	bf0c      	ite	eq
 800110e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001110:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8001112:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 8001116:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800111a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 800111e:	bf0c      	ite	eq
 8001120:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001122:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8001124:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 8001128:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800112a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800112e:	bf0c      	ite	eq
 8001130:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001132:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8001134:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 8001136:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001138:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800113a:	bf54      	ite	pl
 800113c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800113e:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8001140:	6056      	str	r6, [r2, #4]
    position++;
 8001142:	3301      	adds	r3, #1
 8001144:	e762      	b.n	800100c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001146:	2600      	movs	r6, #0
 8001148:	e7d6      	b.n	80010f8 <HAL_GPIO_Init+0xfc>
 800114a:	2601      	movs	r6, #1
 800114c:	e7d4      	b.n	80010f8 <HAL_GPIO_Init+0xfc>
 800114e:	2602      	movs	r6, #2
 8001150:	e7d2      	b.n	80010f8 <HAL_GPIO_Init+0xfc>
 8001152:	2603      	movs	r6, #3
 8001154:	e7d0      	b.n	80010f8 <HAL_GPIO_Init+0xfc>
 8001156:	bf00      	nop
 8001158:	58000800 	.word	0x58000800
 800115c:	48000400 	.word	0x48000400

08001160 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001160:	b10a      	cbz	r2, 8001166 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001162:	6181      	str	r1, [r0, #24]
 8001164:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001166:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001168:	4770      	bx	lr

0800116a <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800116a:	4770      	bx	lr

0800116c <HAL_GPIO_EXTI_IRQHandler>:
{
 800116c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001170:	68d9      	ldr	r1, [r3, #12]
 8001172:	4201      	tst	r1, r0
 8001174:	d002      	beq.n	800117c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001176:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001178:	f7ff fff7 	bl	800116a <HAL_GPIO_EXTI_Callback>
}
 800117c:	bd08      	pop	{r3, pc}
 800117e:	bf00      	nop
 8001180:	58000800 	.word	0x58000800

08001184 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001184:	6803      	ldr	r3, [r0, #0]
 8001186:	699a      	ldr	r2, [r3, #24]
 8001188:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800118a:	bf44      	itt	mi
 800118c:	2200      	movmi	r2, #0
 800118e:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001194:	bf5e      	ittt	pl
 8001196:	699a      	ldrpl	r2, [r3, #24]
 8001198:	f042 0201 	orrpl.w	r2, r2, #1
 800119c:	619a      	strpl	r2, [r3, #24]
  }
}
 800119e:	4770      	bx	lr

080011a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80011a0:	b530      	push	{r4, r5, lr}
 80011a2:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80011a4:	6804      	ldr	r4, [r0, #0]
 80011a6:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 80011aa:	4313      	orrs	r3, r2
 80011ac:	f3c1 0209 	ubfx	r2, r1, #0, #10
 80011b0:	431a      	orrs	r2, r3
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <I2C_TransferConfig+0x24>)
 80011b4:	6860      	ldr	r0, [r4, #4]
 80011b6:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 80011ba:	ea20 0003 	bic.w	r0, r0, r3
 80011be:	4302      	orrs	r2, r0
 80011c0:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80011c2:	bd30      	pop	{r4, r5, pc}
 80011c4:	03ff63ff 	.word	0x03ff63ff

080011c8 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011c8:	6803      	ldr	r3, [r0, #0]
{
 80011ca:	b570      	push	{r4, r5, r6, lr}
 80011cc:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011ce:	6998      	ldr	r0, [r3, #24]
 80011d0:	f010 0010 	ands.w	r0, r0, #16
{
 80011d4:	460d      	mov	r5, r1
 80011d6:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011d8:	d116      	bne.n	8001208 <I2C_IsAcknowledgeFailed+0x40>
}
 80011da:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80011dc:	1c69      	adds	r1, r5, #1
 80011de:	d014      	beq.n	800120a <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011e0:	f7ff fe82 	bl	8000ee8 <HAL_GetTick>
 80011e4:	1b80      	subs	r0, r0, r6
 80011e6:	42a8      	cmp	r0, r5
 80011e8:	d800      	bhi.n	80011ec <I2C_IsAcknowledgeFailed+0x24>
 80011ea:	b96d      	cbnz	r5, 8001208 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011ee:	f043 0320 	orr.w	r3, r3, #32
 80011f2:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80011f4:	2320      	movs	r3, #32
 80011f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001200:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001204:	2001      	movs	r0, #1
 8001206:	e7e8      	b.n	80011da <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	6999      	ldr	r1, [r3, #24]
 800120c:	068a      	lsls	r2, r1, #26
 800120e:	d5e5      	bpl.n	80011dc <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001210:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001212:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001214:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001216:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001218:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800121a:	f7ff ffb3 	bl	8001184 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800121e:	6822      	ldr	r2, [r4, #0]
 8001220:	6853      	ldr	r3, [r2, #4]
 8001222:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001226:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800122a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800122e:	f023 0301 	bic.w	r3, r3, #1
 8001232:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001234:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800123c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8001240:	e7db      	b.n	80011fa <I2C_IsAcknowledgeFailed+0x32>

08001242 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001242:	b570      	push	{r4, r5, r6, lr}
 8001244:	4604      	mov	r4, r0
 8001246:	460d      	mov	r5, r1
 8001248:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	069b      	lsls	r3, r3, #26
 8001250:	d501      	bpl.n	8001256 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001252:	2000      	movs	r0, #0
}
 8001254:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001256:	4632      	mov	r2, r6
 8001258:	4629      	mov	r1, r5
 800125a:	4620      	mov	r0, r4
 800125c:	f7ff ffb4 	bl	80011c8 <I2C_IsAcknowledgeFailed>
 8001260:	b990      	cbnz	r0, 8001288 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001262:	f7ff fe41 	bl	8000ee8 <HAL_GetTick>
 8001266:	1b80      	subs	r0, r0, r6
 8001268:	42a8      	cmp	r0, r5
 800126a:	d801      	bhi.n	8001270 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800126c:	2d00      	cmp	r5, #0
 800126e:	d1ec      	bne.n	800124a <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001270:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001272:	f043 0320 	orr.w	r3, r3, #32
 8001276:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001278:	2320      	movs	r3, #32
 800127a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800127e:	2300      	movs	r3, #0
 8001280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001284:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001288:	2001      	movs	r0, #1
 800128a:	e7e3      	b.n	8001254 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800128c <I2C_WaitOnFlagUntilTimeout>:
{
 800128c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001290:	9f06      	ldr	r7, [sp, #24]
 8001292:	4604      	mov	r4, r0
 8001294:	4688      	mov	r8, r1
 8001296:	4616      	mov	r6, r2
 8001298:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800129a:	6822      	ldr	r2, [r4, #0]
 800129c:	6993      	ldr	r3, [r2, #24]
 800129e:	ea38 0303 	bics.w	r3, r8, r3
 80012a2:	bf0c      	ite	eq
 80012a4:	2301      	moveq	r3, #1
 80012a6:	2300      	movne	r3, #0
 80012a8:	42b3      	cmp	r3, r6
 80012aa:	d001      	beq.n	80012b0 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80012ac:	2000      	movs	r0, #0
 80012ae:	e015      	b.n	80012dc <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80012b0:	1c6b      	adds	r3, r5, #1
 80012b2:	d0f3      	beq.n	800129c <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012b4:	f7ff fe18 	bl	8000ee8 <HAL_GetTick>
 80012b8:	1bc0      	subs	r0, r0, r7
 80012ba:	42a8      	cmp	r0, r5
 80012bc:	d801      	bhi.n	80012c2 <I2C_WaitOnFlagUntilTimeout+0x36>
 80012be:	2d00      	cmp	r5, #0
 80012c0:	d1eb      	bne.n	800129a <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012c4:	f043 0320 	orr.w	r3, r3, #32
 80012c8:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80012ca:	2320      	movs	r3, #32
 80012cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80012d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80012da:	2001      	movs	r0, #1
}
 80012dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080012e0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80012e0:	b570      	push	{r4, r5, r6, lr}
 80012e2:	4604      	mov	r4, r0
 80012e4:	460d      	mov	r5, r1
 80012e6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012e8:	6823      	ldr	r3, [r4, #0]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	079b      	lsls	r3, r3, #30
 80012ee:	d501      	bpl.n	80012f4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80012f0:	2000      	movs	r0, #0
}
 80012f2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012f4:	4632      	mov	r2, r6
 80012f6:	4629      	mov	r1, r5
 80012f8:	4620      	mov	r0, r4
 80012fa:	f7ff ff65 	bl	80011c8 <I2C_IsAcknowledgeFailed>
 80012fe:	b9a0      	cbnz	r0, 800132a <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001300:	1c6a      	adds	r2, r5, #1
 8001302:	d0f1      	beq.n	80012e8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001304:	f7ff fdf0 	bl	8000ee8 <HAL_GetTick>
 8001308:	1b80      	subs	r0, r0, r6
 800130a:	42a8      	cmp	r0, r5
 800130c:	d801      	bhi.n	8001312 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800130e:	2d00      	cmp	r5, #0
 8001310:	d1ea      	bne.n	80012e8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001312:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001314:	f043 0320 	orr.w	r3, r3, #32
 8001318:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800131a:	2320      	movs	r3, #32
 800131c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001320:	2300      	movs	r3, #0
 8001322:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001326:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800132a:	2001      	movs	r0, #1
 800132c:	e7e1      	b.n	80012f2 <I2C_WaitOnTXISFlagUntilTimeout+0x12>
	...

08001330 <I2C_RequestMemoryRead>:
{
 8001330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001332:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001334:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <I2C_RequestMemoryRead+0x60>)
 8001338:	9300      	str	r3, [sp, #0]
{
 800133a:	4605      	mov	r5, r0
 800133c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800133e:	2300      	movs	r3, #0
 8001340:	b2fa      	uxtb	r2, r7
 8001342:	f7ff ff2d 	bl	80011a0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001346:	4632      	mov	r2, r6
 8001348:	9908      	ldr	r1, [sp, #32]
 800134a:	4628      	mov	r0, r5
 800134c:	f7ff ffc8 	bl	80012e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001350:	b110      	cbz	r0, 8001358 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8001352:	2001      	movs	r0, #1
}
 8001354:	b003      	add	sp, #12
 8001356:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001358:	2f01      	cmp	r7, #1
 800135a:	682b      	ldr	r3, [r5, #0]
 800135c:	d10c      	bne.n	8001378 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800135e:	b2e4      	uxtb	r4, r4
 8001360:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001362:	9b08      	ldr	r3, [sp, #32]
 8001364:	9600      	str	r6, [sp, #0]
 8001366:	2200      	movs	r2, #0
 8001368:	2140      	movs	r1, #64	; 0x40
 800136a:	4628      	mov	r0, r5
 800136c:	f7ff ff8e 	bl	800128c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001370:	3000      	adds	r0, #0
 8001372:	bf18      	it	ne
 8001374:	2001      	movne	r0, #1
 8001376:	e7ed      	b.n	8001354 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001378:	0a22      	lsrs	r2, r4, #8
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800137c:	9908      	ldr	r1, [sp, #32]
 800137e:	4632      	mov	r2, r6
 8001380:	4628      	mov	r0, r5
 8001382:	f7ff ffad 	bl	80012e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001386:	2800      	cmp	r0, #0
 8001388:	d1e3      	bne.n	8001352 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	e7e7      	b.n	800135e <I2C_RequestMemoryRead+0x2e>
 800138e:	bf00      	nop
 8001390:	80002000 	.word	0x80002000

08001394 <HAL_I2C_Init>:
{
 8001394:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001396:	4604      	mov	r4, r0
 8001398:	2800      	cmp	r0, #0
 800139a:	d04a      	beq.n	8001432 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800139c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80013a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013a4:	b91b      	cbnz	r3, 80013ae <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80013a6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80013aa:	f002 faa7 	bl	80038fc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80013ae:	2324      	movs	r3, #36	; 0x24
 80013b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	f022 0201 	bic.w	r2, r2, #1
 80013bc:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013be:	6862      	ldr	r2, [r4, #4]
 80013c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013c4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013d2:	2901      	cmp	r1, #1
 80013d4:	d124      	bne.n	8001420 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013da:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80013e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013e6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ee:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80013f0:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	69a1      	ldr	r1, [r4, #24]
 80013f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013fc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013fe:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	f042 0201 	orr.w	r2, r2, #1
 800140c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800140e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001410:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001412:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001414:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001418:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800141a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800141e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001420:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001424:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001426:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001428:	bf04      	itt	eq
 800142a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800142e:	605a      	streq	r2, [r3, #4]
 8001430:	e7d4      	b.n	80013dc <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001432:	2001      	movs	r0, #1
 8001434:	e7f3      	b.n	800141e <HAL_I2C_Init+0x8a>
	...

08001438 <HAL_I2C_Master_Transmit>:
{
 8001438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800143c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800143e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001442:	2b20      	cmp	r3, #32
{
 8001444:	4604      	mov	r4, r0
 8001446:	460e      	mov	r6, r1
 8001448:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800144a:	f040 8082 	bne.w	8001552 <HAL_I2C_Master_Transmit+0x11a>
    __HAL_LOCK(hi2c);
 800144e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001452:	2b01      	cmp	r3, #1
 8001454:	d07d      	beq.n	8001552 <HAL_I2C_Master_Transmit+0x11a>
 8001456:	2701      	movs	r7, #1
 8001458:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800145c:	f7ff fd44 	bl	8000ee8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001460:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001462:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001464:	9000      	str	r0, [sp, #0]
 8001466:	463a      	mov	r2, r7
 8001468:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff ff0d 	bl	800128c <I2C_WaitOnFlagUntilTimeout>
 8001472:	b118      	cbz	r0, 800147c <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8001474:	2001      	movs	r0, #1
}
 8001476:	b003      	add	sp, #12
 8001478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800147c:	2321      	movs	r3, #33	; 0x21
 800147e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001482:	2310      	movs	r3, #16
 8001484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001488:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800148a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800148e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001490:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001494:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001496:	6360      	str	r0, [r4, #52]	; 0x34
 8001498:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <HAL_I2C_Master_Transmit+0x120>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800149a:	d926      	bls.n	80014ea <HAL_I2C_Master_Transmit+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800149c:	22ff      	movs	r2, #255	; 0xff
 800149e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80014a0:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014a6:	4631      	mov	r1, r6
 80014a8:	4620      	mov	r0, r4
 80014aa:	f7ff fe79 	bl	80011a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014b0:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80014b2:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014b4:	462a      	mov	r2, r5
 80014b6:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80014b8:	b9fb      	cbnz	r3, 80014fa <HAL_I2C_Master_Transmit+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ba:	f7ff fec2 	bl	8001242 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014be:	2800      	cmp	r0, #0
 80014c0:	d1d8      	bne.n	8001474 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	2120      	movs	r1, #32
 80014c6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80014ce:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80014d2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80014d6:	f022 0201 	bic.w	r2, r2, #1
 80014da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80014dc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80014e0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014e4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80014e8:	e7c5      	b.n	8001476 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 80014ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80014ec:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80014ee:	b292      	uxth	r2, r2
 80014f0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	e7d5      	b.n	80014a6 <HAL_I2C_Master_Transmit+0x6e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014fa:	f7ff fef1 	bl	80012e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80014fe:	2800      	cmp	r0, #0
 8001500:	d1b8      	bne.n	8001474 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001504:	6822      	ldr	r2, [r4, #0]
 8001506:	f813 1b01 	ldrb.w	r1, [r3], #1
 800150a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800150c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800150e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001510:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001512:	3b01      	subs	r3, #1
 8001514:	b29b      	uxth	r3, r3
 8001516:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001518:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800151a:	3a01      	subs	r2, #1
 800151c:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800151e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001520:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0c3      	beq.n	80014ae <HAL_I2C_Master_Transmit+0x76>
 8001526:	2a00      	cmp	r2, #0
 8001528:	d1c1      	bne.n	80014ae <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800152a:	9500      	str	r5, [sp, #0]
 800152c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800152e:	2180      	movs	r1, #128	; 0x80
 8001530:	4620      	mov	r0, r4
 8001532:	f7ff feab 	bl	800128c <I2C_WaitOnFlagUntilTimeout>
 8001536:	2800      	cmp	r0, #0
 8001538:	d19c      	bne.n	8001474 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800153a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800153c:	2bff      	cmp	r3, #255	; 0xff
 800153e:	d903      	bls.n	8001548 <HAL_I2C_Master_Transmit+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001540:	22ff      	movs	r2, #255	; 0xff
 8001542:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001544:	9000      	str	r0, [sp, #0]
 8001546:	e7ac      	b.n	80014a2 <HAL_I2C_Master_Transmit+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 8001548:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800154a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800154c:	b292      	uxth	r2, r2
 800154e:	8522      	strh	r2, [r4, #40]	; 0x28
 8001550:	e7cf      	b.n	80014f2 <HAL_I2C_Master_Transmit+0xba>
    return HAL_BUSY;
 8001552:	2002      	movs	r0, #2
 8001554:	e78f      	b.n	8001476 <HAL_I2C_Master_Transmit+0x3e>
 8001556:	bf00      	nop
 8001558:	80002000 	.word	0x80002000

0800155c <HAL_I2C_Mem_Read>:
{
 800155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001560:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001562:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001566:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001568:	2b20      	cmp	r3, #32
{
 800156a:	4604      	mov	r4, r0
 800156c:	460f      	mov	r7, r1
 800156e:	9203      	str	r2, [sp, #12]
 8001570:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001574:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001578:	f040 80a6 	bne.w	80016c8 <HAL_I2C_Mem_Read+0x16c>
    if ((pData == NULL) || (Size == 0U))
 800157c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800157e:	b113      	cbz	r3, 8001586 <HAL_I2C_Mem_Read+0x2a>
 8001580:	f1ba 0f00 	cmp.w	sl, #0
 8001584:	d106      	bne.n	8001594 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800158a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800158c:	2001      	movs	r0, #1
}
 800158e:	b005      	add	sp, #20
 8001590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001594:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001598:	2b01      	cmp	r3, #1
 800159a:	f000 8095 	beq.w	80016c8 <HAL_I2C_Mem_Read+0x16c>
 800159e:	2501      	movs	r5, #1
 80015a0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80015a4:	f7ff fca0 	bl	8000ee8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015a8:	2319      	movs	r3, #25
 80015aa:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80015ac:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015ae:	462a      	mov	r2, r5
 80015b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015b4:	4620      	mov	r0, r4
 80015b6:	f7ff fe69 	bl	800128c <I2C_WaitOnFlagUntilTimeout>
 80015ba:	4681      	mov	r9, r0
 80015bc:	2800      	cmp	r0, #0
 80015be:	d1e5      	bne.n	800158c <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015c0:	2322      	movs	r3, #34	; 0x22
 80015c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015c6:	2340      	movs	r3, #64	; 0x40
 80015c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80015cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ce:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80015d0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80015d2:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80015d4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015d8:	e9cd 8600 	strd	r8, r6, [sp]
 80015dc:	465b      	mov	r3, fp
 80015de:	9a03      	ldr	r2, [sp, #12]
 80015e0:	4639      	mov	r1, r7
 80015e2:	4620      	mov	r0, r4
 80015e4:	f7ff fea4 	bl	8001330 <I2C_RequestMemoryRead>
 80015e8:	b110      	cbz	r0, 80015f0 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 80015ea:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80015ee:	e7cd      	b.n	800158c <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015f2:	2bff      	cmp	r3, #255	; 0xff
 80015f4:	4b35      	ldr	r3, [pc, #212]	; (80016cc <HAL_I2C_Mem_Read+0x170>)
 80015f6:	d957      	bls.n	80016a8 <HAL_I2C_Mem_Read+0x14c>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015f8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80015fa:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015fc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80015fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001602:	4639      	mov	r1, r7
 8001604:	4620      	mov	r0, r4
 8001606:	f7ff fdcb 	bl	80011a0 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800160a:	9600      	str	r6, [sp, #0]
 800160c:	4643      	mov	r3, r8
 800160e:	2200      	movs	r2, #0
 8001610:	2104      	movs	r1, #4
 8001612:	4620      	mov	r0, r4
 8001614:	f7ff fe3a 	bl	800128c <I2C_WaitOnFlagUntilTimeout>
 8001618:	2800      	cmp	r0, #0
 800161a:	d1b7      	bne.n	800158c <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001622:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001624:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001626:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001628:	3301      	adds	r3, #1
 800162a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800162c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800162e:	3b01      	subs	r3, #1
 8001630:	b29b      	uxth	r3, r3
 8001632:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001634:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001636:	3a01      	subs	r2, #1
 8001638:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800163a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800163c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800163e:	b1a3      	cbz	r3, 800166a <HAL_I2C_Mem_Read+0x10e>
 8001640:	b99a      	cbnz	r2, 800166a <HAL_I2C_Mem_Read+0x10e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001642:	9600      	str	r6, [sp, #0]
 8001644:	4643      	mov	r3, r8
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	4620      	mov	r0, r4
 800164a:	f7ff fe1f 	bl	800128c <I2C_WaitOnFlagUntilTimeout>
 800164e:	2800      	cmp	r0, #0
 8001650:	d19c      	bne.n	800158c <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001652:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001654:	2bff      	cmp	r3, #255	; 0xff
 8001656:	d92f      	bls.n	80016b8 <HAL_I2C_Mem_Read+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001658:	22ff      	movs	r2, #255	; 0xff
 800165a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800165c:	9000      	str	r0, [sp, #0]
 800165e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001662:	4639      	mov	r1, r7
 8001664:	4620      	mov	r0, r4
 8001666:	f7ff fd9b 	bl	80011a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800166a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800166c:	b29b      	uxth	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1cb      	bne.n	800160a <HAL_I2C_Mem_Read+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001672:	4632      	mov	r2, r6
 8001674:	4641      	mov	r1, r8
 8001676:	4620      	mov	r0, r4
 8001678:	f7ff fde3 	bl	8001242 <I2C_WaitOnSTOPFlagUntilTimeout>
 800167c:	2800      	cmp	r0, #0
 800167e:	d185      	bne.n	800158c <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	2120      	movs	r1, #32
 8001684:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800168c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001690:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001694:	f022 0201 	bic.w	r2, r2, #1
 8001698:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800169a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800169e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016a2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80016a6:	e772      	b.n	800158e <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80016a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80016aa:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80016ac:	b292      	uxth	r2, r2
 80016ae:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80016b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	e7a4      	b.n	8001602 <HAL_I2C_Mem_Read+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 80016b8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016ba:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80016bc:	b292      	uxth	r2, r2
 80016be:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	e7cc      	b.n	8001662 <HAL_I2C_Mem_Read+0x106>
    return HAL_BUSY;
 80016c8:	2002      	movs	r0, #2
 80016ca:	e760      	b.n	800158e <HAL_I2C_Mem_Read+0x32>
 80016cc:	80002400 	.word	0x80002400

080016d0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	2a20      	cmp	r2, #32
{
 80016d8:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016da:	d11d      	bne.n	8001718 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016dc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d019      	beq.n	8001718 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016e4:	2324      	movs	r3, #36	; 0x24
 80016e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016ea:	6803      	ldr	r3, [r0, #0]
 80016ec:	681c      	ldr	r4, [r3, #0]
 80016ee:	f024 0401 	bic.w	r4, r4, #1
 80016f2:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016f4:	681c      	ldr	r4, [r3, #0]
 80016f6:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80016fa:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016fc:	681c      	ldr	r4, [r3, #0]
 80016fe:	4321      	orrs	r1, r4
 8001700:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001702:	6819      	ldr	r1, [r3, #0]
 8001704:	f041 0101 	orr.w	r1, r1, #1
 8001708:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800170a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800170c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001710:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001714:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001716:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001718:	2002      	movs	r0, #2
 800171a:	e7fc      	b.n	8001716 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800171c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800171c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800171e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001722:	b2e4      	uxtb	r4, r4
 8001724:	2c20      	cmp	r4, #32
 8001726:	d11c      	bne.n	8001762 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001728:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800172c:	2b01      	cmp	r3, #1
 800172e:	d018      	beq.n	8001762 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001730:	2324      	movs	r3, #36	; 0x24
 8001732:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001736:	6803      	ldr	r3, [r0, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001740:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001742:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001746:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800174a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	f042 0201 	orr.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001754:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001756:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800175a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800175e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001760:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001762:	2002      	movs	r0, #2
 8001764:	e7fc      	b.n	8001760 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08001766 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001766:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001768:	4604      	mov	r4, r0
{
 800176a:	b086      	sub	sp, #24
  if (hpcd == NULL)
 800176c:	2800      	cmp	r0, #0
 800176e:	d057      	beq.n	8001820 <HAL_PCD_Init+0xba>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001770:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8001774:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001778:	b91b      	cbnz	r3, 8001782 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800177a:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800177e:	f002 f94b 	bl	8003a18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001782:	2303      	movs	r3, #3
 8001784:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001788:	6820      	ldr	r0, [r4, #0]
 800178a:	f001 fdba 	bl	8003302 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800178e:	2200      	movs	r2, #0
 8001790:	6860      	ldr	r0, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001792:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001794:	4615      	mov	r5, r2
 8001796:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001798:	4298      	cmp	r0, r3
 800179a:	f102 0201 	add.w	r2, r2, #1
 800179e:	d820      	bhi.n	80017e2 <HAL_PCD_Init+0x7c>
 80017a0:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017a2:	4611      	mov	r1, r2
 80017a4:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a6:	4298      	cmp	r0, r3
 80017a8:	f102 0201 	add.w	r2, r2, #1
 80017ac:	d828      	bhi.n	8001800 <HAL_PCD_Init+0x9a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80017ae:	f104 0610 	add.w	r6, r4, #16
 80017b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80017b4:	466d      	mov	r5, sp
 80017b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b8:	6833      	ldr	r3, [r6, #0]
 80017ba:	602b      	str	r3, [r5, #0]
 80017bc:	1d23      	adds	r3, r4, #4
 80017be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c0:	6820      	ldr	r0, [r4, #0]
 80017c2:	f001 fda8 	bl	8003316 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80017c6:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80017c8:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80017ca:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80017ce:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017d2:	69e3      	ldr	r3, [r4, #28]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d102      	bne.n	80017de <HAL_PCD_Init+0x78>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017d8:	4620      	mov	r0, r4
 80017da:	f000 f824 	bl	8001826 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80017de:	4628      	mov	r0, r5
 80017e0:	e01f      	b.n	8001822 <HAL_PCD_Init+0xbc>
    hpcd->IN_ep[i].is_in = 1U;
 80017e2:	eb04 1143 	add.w	r1, r4, r3, lsl #5
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017e6:	e9c1 550e 	strd	r5, r5, [r1, #56]	; 0x38
    hpcd->IN_ep[i].num = i;
 80017ea:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017ee:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].xfer_len = 0U;
 80017f0:	3302      	adds	r3, #2
 80017f2:	015b      	lsls	r3, r3, #5
    hpcd->IN_ep[i].is_in = 1U;
 80017f4:	f881 6029 	strb.w	r6, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017f8:	f881 502b 	strb.w	r5, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80017fc:	50e5      	str	r5, [r4, r3]
 80017fe:	e7ca      	b.n	8001796 <HAL_PCD_Init+0x30>
    hpcd->OUT_ep[i].is_in = 0U;
 8001800:	eb04 1543 	add.w	r5, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8001804:	f885 3128 	strb.w	r3, [r5, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001808:	330a      	adds	r3, #10
 800180a:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 800180c:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001810:	f885 112b 	strb.w	r1, [r5, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001814:	f8c5 1138 	str.w	r1, [r5, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001818:	f8c5 113c 	str.w	r1, [r5, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800181c:	50e1      	str	r1, [r4, r3]
 800181e:	e7c1      	b.n	80017a4 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8001820:	2001      	movs	r0, #1
}
 8001822:	b006      	add	sp, #24
 8001824:	bd70      	pop	{r4, r5, r6, pc}

08001826 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8001826:	6803      	ldr	r3, [r0, #0]
{
 8001828:	4602      	mov	r2, r0
  hpcd->lpm_active = 1U;
 800182a:	2101      	movs	r1, #1
 800182c:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001830:	2000      	movs	r0, #0
 8001832:	f882 0260 	strb.w	r0, [r2, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001836:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800183a:	430a      	orrs	r2, r1
 800183c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001840:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001844:	f042 0202 	orr.w	r2, r2, #2
 8001848:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
}
 800184c:	4770      	bx	lr
	...

08001850 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001850:	4a02      	ldr	r2, [pc, #8]	; (800185c <HAL_PWR_EnableBkUpAccess+0xc>)
 8001852:	6813      	ldr	r3, [r2, #0]
 8001854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001858:	6013      	str	r3, [r2, #0]
}
 800185a:	4770      	bx	lr
 800185c:	58000400 	.word	0x58000400

08001860 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <HAL_PWREx_GetVoltageRange+0xc>)
 8001862:	6818      	ldr	r0, [r3, #0]
}
 8001864:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	58000400 	.word	0x58000400

08001870 <LL_RCC_HSE_IsReady>:
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001874:	6818      	ldr	r0, [r3, #0]
}
 8001876:	f3c0 4040 	ubfx	r0, r0, #17, #1
 800187a:	4770      	bx	lr

0800187c <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	6818      	ldr	r0, [r3, #0]
}
 8001882:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8001886:	4770      	bx	lr

08001888 <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188c:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 8001890:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001894:	4770      	bx	lr

08001896 <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189a:	6818      	ldr	r0, [r3, #0]
}
 800189c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80018a0:	4770      	bx	lr

080018a2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80018a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018a6:	6813      	ldr	r3, [r2, #0]
 80018a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ac:	4318      	orrs	r0, r3
 80018ae:	6010      	str	r0, [r2, #0]
}
 80018b0:	4770      	bx	lr

080018b2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80018b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
  {
    msiRange = LL_RCC_MSIRANGE_11;
  }
  return msiRange;
}
 80018bc:	28b0      	cmp	r0, #176	; 0xb0
 80018be:	bf28      	it	cs
 80018c0:	20b0      	movcs	r0, #176	; 0xb0
 80018c2:	4770      	bx	lr

080018c4 <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80018c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c8:	6853      	ldr	r3, [r2, #4]
 80018ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80018ce:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80018d2:	6050      	str	r0, [r2, #4]
}
 80018d4:	4770      	bx	lr

080018d6 <LL_RCC_PLL_IsReady>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80018d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018da:	6818      	ldr	r0, [r3, #0]
}
 80018dc:	f3c0 6040 	ubfx	r0, r0, #25, #1
 80018e0:	4770      	bx	lr
	...

080018e4 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80018e4:	28b0      	cmp	r0, #176	; 0xb0
 80018e6:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80018e8:	4a2e      	ldr	r2, [pc, #184]	; (80019a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80018ea:	bf98      	it	ls
 80018ec:	0900      	lsrls	r0, r0, #4
{
 80018ee:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80018f0:	bf8c      	ite	hi
 80018f2:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80018f4:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80018f8:	4c2b      	ldr	r4, [pc, #172]	; (80019a8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80018fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001904:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001908:	466e      	mov	r6, sp
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <RCC_SetFlashLatencyFromMSIRange+0xc8>)
 8001914:	fbb5 f5f3 	udiv	r5, r5, r3
 8001918:	f7ff ffa2 	bl	8001860 <HAL_PWREx_GetVoltageRange>
 800191c:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800191e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001922:	3410      	adds	r4, #16
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001924:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001928:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800192c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001930:	ac08      	add	r4, sp, #32
 8001932:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001936:	d017      	beq.n	8001968 <RCC_SetFlashLatencyFromMSIRange+0x84>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001938:	2d06      	cmp	r5, #6
 800193a:	d924      	bls.n	8001986 <RCC_SetFlashLatencyFromMSIRange+0xa2>
 800193c:	2d0c      	cmp	r5, #12
 800193e:	d924      	bls.n	800198a <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8001940:	2d10      	cmp	r5, #16
 8001942:	d924      	bls.n	800198e <RCC_SetFlashLatencyFromMSIRange+0xaa>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001944:	2400      	movs	r4, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8001946:	4d1a      	ldr	r5, [pc, #104]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8001948:	682b      	ldr	r3, [r5, #0]
 800194a:	f023 0307 	bic.w	r3, r3, #7
 800194e:	4323      	orrs	r3, r4
 8001950:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001952:	f7ff fac9 	bl	8000ee8 <HAL_GetTick>
 8001956:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001958:	682b      	ldr	r3, [r5, #0]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	429c      	cmp	r4, r3
 8001960:	d117      	bne.n	8001992 <RCC_SetFlashLatencyFromMSIRange+0xae>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001962:	2000      	movs	r0, #0
}
 8001964:	b009      	add	sp, #36	; 0x24
 8001966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001968:	2300      	movs	r3, #0
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800196a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800196e:	4295      	cmp	r5, r2
 8001970:	d805      	bhi.n	800197e <RCC_SetFlashLatencyFromMSIRange+0x9a>
        latency = FLASH_LATENCY_RANGE[index];
 8001972:	aa08      	add	r2, sp, #32
 8001974:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001978:	f853 4c10 	ldr.w	r4, [r3, #-16]
 800197c:	e7e3      	b.n	8001946 <RCC_SetFlashLatencyFromMSIRange+0x62>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800197e:	3301      	adds	r3, #1
 8001980:	2b04      	cmp	r3, #4
 8001982:	d1f2      	bne.n	800196a <RCC_SetFlashLatencyFromMSIRange+0x86>
 8001984:	e7de      	b.n	8001944 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001986:	2300      	movs	r3, #0
 8001988:	e7f3      	b.n	8001972 <RCC_SetFlashLatencyFromMSIRange+0x8e>
 800198a:	2301      	movs	r3, #1
 800198c:	e7f1      	b.n	8001972 <RCC_SetFlashLatencyFromMSIRange+0x8e>
 800198e:	2302      	movs	r3, #2
 8001990:	e7ef      	b.n	8001972 <RCC_SetFlashLatencyFromMSIRange+0x8e>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001992:	f7ff faa9 	bl	8000ee8 <HAL_GetTick>
 8001996:	1b80      	subs	r0, r0, r6
 8001998:	2802      	cmp	r0, #2
 800199a:	d9dd      	bls.n	8001958 <RCC_SetFlashLatencyFromMSIRange+0x74>
      return HAL_TIMEOUT;
 800199c:	2003      	movs	r0, #3
 800199e:	e7e1      	b.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x80>
 80019a0:	080065f4 	.word	0x080065f4
 80019a4:	08006594 	.word	0x08006594
 80019a8:	08006490 	.word	0x08006490
 80019ac:	000f4240 	.word	0x000f4240
 80019b0:	58004000 	.word	0x58004000

080019b4 <HAL_RCC_OscConfig>:
{
 80019b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 80019b6:	4604      	mov	r4, r0
 80019b8:	b908      	cbnz	r0, 80019be <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80019ba:	2001      	movs	r0, #1
 80019bc:	e081      	b.n	8001ac2 <HAL_RCC_OscConfig+0x10e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019be:	6803      	ldr	r3, [r0, #0]
 80019c0:	069e      	lsls	r6, r3, #26
 80019c2:	d52a      	bpl.n	8001a1a <HAL_RCC_OscConfig+0x66>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019c8:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80019ca:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80019cc:	f013 030c 	ands.w	r3, r3, #12
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x2a>
 80019d2:	2b0c      	cmp	r3, #12
 80019d4:	d15a      	bne.n	8001a8c <HAL_RCC_OscConfig+0xd8>
 80019d6:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d156      	bne.n	8001a8c <HAL_RCC_OscConfig+0xd8>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019de:	f7ff ff5a 	bl	8001896 <LL_RCC_MSI_IsReady>
 80019e2:	b110      	cbz	r0, 80019ea <HAL_RCC_OscConfig+0x36>
 80019e4:	69e3      	ldr	r3, [r4, #28]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0e7      	beq.n	80019ba <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019ec:	f7ff ff61 	bl	80018b2 <LL_RCC_MSI_GetRange>
 80019f0:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019f4:	d93f      	bls.n	8001a76 <HAL_RCC_OscConfig+0xc2>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019f6:	f7ff ff75 	bl	80018e4 <RCC_SetFlashLatencyFromMSIRange>
 80019fa:	2800      	cmp	r0, #0
 80019fc:	d1dd      	bne.n	80019ba <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a00:	f7ff ff4f 	bl	80018a2 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a04:	6a20      	ldr	r0, [r4, #32]
 8001a06:	f7ff ff5d 	bl	80018c4 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();
 8001a0a:	f002 f903 	bl	8003c14 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a0e:	4bba      	ldr	r3, [pc, #744]	; (8001cf8 <HAL_RCC_OscConfig+0x344>)
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	f7ff fa21 	bl	8000e58 <HAL_InitTick>
 8001a16:	2800      	cmp	r0, #0
 8001a18:	d1cf      	bne.n	80019ba <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	07dd      	lsls	r5, r3, #31
 8001a1e:	d462      	bmi.n	8001ae6 <HAL_RCC_OscConfig+0x132>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	0798      	lsls	r0, r3, #30
 8001a24:	f100 80ad 	bmi.w	8001b82 <HAL_RCC_OscConfig+0x1ce>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001a28:	6823      	ldr	r3, [r4, #0]
 8001a2a:	f013 0f18 	tst.w	r3, #24
 8001a2e:	f040 80ee 	bne.w	8001c0e <HAL_RCC_OscConfig+0x25a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	0759      	lsls	r1, r3, #29
 8001a36:	f100 8188 	bmi.w	8001d4a <HAL_RCC_OscConfig+0x396>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	0659      	lsls	r1, r3, #25
 8001a3e:	f140 81ed 	bpl.w	8001e1c <HAL_RCC_OscConfig+0x468>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a44:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 81d4 	beq.w	8001df6 <HAL_RCC_OscConfig+0x442>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001a4e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fa45 	bl	8000ee8 <HAL_GetTick>
 8001a5e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001a60:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001a64:	079a      	lsls	r2, r3, #30
 8001a66:	f100 81d9 	bmi.w	8001e1c <HAL_RCC_OscConfig+0x468>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a6a:	f7ff fa3d 	bl	8000ee8 <HAL_GetTick>
 8001a6e:	1b80      	subs	r0, r0, r6
 8001a70:	2802      	cmp	r0, #2
 8001a72:	d9f5      	bls.n	8001a60 <HAL_RCC_OscConfig+0xac>
 8001a74:	e024      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a76:	f7ff ff14 	bl	80018a2 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a7a:	6a20      	ldr	r0, [r4, #32]
 8001a7c:	f7ff ff22 	bl	80018c4 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a80:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a82:	f7ff ff2f 	bl	80018e4 <RCC_SetFlashLatencyFromMSIRange>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d0bf      	beq.n	8001a0a <HAL_RCC_OscConfig+0x56>
 8001a8a:	e796      	b.n	80019ba <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a8c:	69e2      	ldr	r2, [r4, #28]
 8001a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a92:	b1ba      	cbz	r2, 8001ac4 <HAL_RCC_OscConfig+0x110>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	f042 0201 	orr.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fa24 	bl	8000ee8 <HAL_GetTick>
 8001aa0:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 8001aa2:	f7ff fef8 	bl	8001896 <LL_RCC_MSI_IsReady>
 8001aa6:	b130      	cbz	r0, 8001ab6 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001aaa:	f7ff fefa 	bl	80018a2 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aae:	6a20      	ldr	r0, [r4, #32]
 8001ab0:	f7ff ff08 	bl	80018c4 <LL_RCC_MSI_SetCalibTrimming>
 8001ab4:	e7b1      	b.n	8001a1a <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fa17 	bl	8000ee8 <HAL_GetTick>
 8001aba:	1b40      	subs	r0, r0, r5
 8001abc:	2802      	cmp	r0, #2
 8001abe:	d9f0      	bls.n	8001aa2 <HAL_RCC_OscConfig+0xee>
            return HAL_TIMEOUT;
 8001ac0:	2003      	movs	r0, #3
}
 8001ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	f022 0201 	bic.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001acc:	f7ff fa0c 	bl	8000ee8 <HAL_GetTick>
 8001ad0:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 8001ad2:	f7ff fee0 	bl	8001896 <LL_RCC_MSI_IsReady>
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	d09f      	beq.n	8001a1a <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ada:	f7ff fa05 	bl	8000ee8 <HAL_GetTick>
 8001ade:	1b40      	subs	r0, r0, r5
 8001ae0:	2802      	cmp	r0, #2
 8001ae2:	d9f6      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x11e>
 8001ae4:	e7ec      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ae6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aea:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001aec:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001aee:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d005      	beq.n	8001b02 <HAL_RCC_OscConfig+0x14e>
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d10b      	bne.n	8001b12 <HAL_RCC_OscConfig+0x15e>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001afa:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_OscConfig+0x15e>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b02:	f7ff feb5 	bl	8001870 <LL_RCC_HSE_IsReady>
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d08a      	beq.n	8001a20 <HAL_RCC_OscConfig+0x6c>
 8001b0a:	6863      	ldr	r3, [r4, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d187      	bne.n	8001a20 <HAL_RCC_OscConfig+0x6c>
 8001b10:	e753      	b.n	80019ba <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b12:	6862      	ldr	r2, [r4, #4]
 8001b14:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1c:	d111      	bne.n	8001b42 <HAL_RCC_OscConfig+0x18e>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b24:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b26:	f7ff f9df 	bl	8000ee8 <HAL_GetTick>
 8001b2a:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 8001b2c:	f7ff fea0 	bl	8001870 <LL_RCC_HSE_IsReady>
 8001b30:	2800      	cmp	r0, #0
 8001b32:	f47f af75 	bne.w	8001a20 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b36:	f7ff f9d7 	bl	8000ee8 <HAL_GetTick>
 8001b3a:	1b40      	subs	r0, r0, r5
 8001b3c:	2864      	cmp	r0, #100	; 0x64
 8001b3e:	d9f5      	bls.n	8001b2c <HAL_RCC_OscConfig+0x178>
 8001b40:	e7be      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b42:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001b46:	d104      	bne.n	8001b52 <HAL_RCC_OscConfig+0x19e>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e7e5      	b.n	8001b1e <HAL_RCC_OscConfig+0x16a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001b52:	6819      	ldr	r1, [r3, #0]
 8001b54:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001b58:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001b5a:	6819      	ldr	r1, [r3, #0]
 8001b5c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001b60:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b62:	2a00      	cmp	r2, #0
 8001b64:	d1df      	bne.n	8001b26 <HAL_RCC_OscConfig+0x172>
        tickstart = HAL_GetTick();
 8001b66:	f7ff f9bf 	bl	8000ee8 <HAL_GetTick>
 8001b6a:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 8001b6c:	f7ff fe80 	bl	8001870 <LL_RCC_HSE_IsReady>
 8001b70:	2800      	cmp	r0, #0
 8001b72:	f43f af55 	beq.w	8001a20 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b76:	f7ff f9b7 	bl	8000ee8 <HAL_GetTick>
 8001b7a:	1b40      	subs	r0, r0, r5
 8001b7c:	2864      	cmp	r0, #100	; 0x64
 8001b7e:	d9f5      	bls.n	8001b6c <HAL_RCC_OscConfig+0x1b8>
 8001b80:	e79e      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b86:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b88:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b8a:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d005      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1ea>
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	d114      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x20c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b96:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d110      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x20c>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9e:	f7ff fe6d 	bl	800187c <LL_RCC_HSI_IsReady>
 8001ba2:	b118      	cbz	r0, 8001bac <HAL_RCC_OscConfig+0x1f8>
 8001ba4:	68e3      	ldr	r3, [r4, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f43f af07 	beq.w	80019ba <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb0:	6921      	ldr	r1, [r4, #16]
 8001bb2:	6853      	ldr	r3, [r2, #4]
 8001bb4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001bb8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001bbc:	6053      	str	r3, [r2, #4]
 8001bbe:	e733      	b.n	8001a28 <HAL_RCC_OscConfig+0x74>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bc0:	68e2      	ldr	r2, [r4, #12]
 8001bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc6:	b182      	cbz	r2, 8001bea <HAL_RCC_OscConfig+0x236>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f98a 	bl	8000ee8 <HAL_GetTick>
 8001bd4:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 8001bd6:	f7ff fe51 	bl	800187c <LL_RCC_HSI_IsReady>
 8001bda:	2800      	cmp	r0, #0
 8001bdc:	d1e6      	bne.n	8001bac <HAL_RCC_OscConfig+0x1f8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bde:	f7ff f983 	bl	8000ee8 <HAL_GetTick>
 8001be2:	1b40      	subs	r0, r0, r5
 8001be4:	2802      	cmp	r0, #2
 8001be6:	d9f6      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x222>
 8001be8:	e76a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bf2:	f7ff f979 	bl	8000ee8 <HAL_GetTick>
 8001bf6:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 8001bf8:	f7ff fe40 	bl	800187c <LL_RCC_HSI_IsReady>
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	f43f af13 	beq.w	8001a28 <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c02:	f7ff f971 	bl	8000ee8 <HAL_GetTick>
 8001c06:	1b40      	subs	r0, r0, r5
 8001c08:	2802      	cmp	r0, #2
 8001c0a:	d9f5      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x244>
 8001c0c:	e758      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c0e:	6962      	ldr	r2, [r4, #20]
 8001c10:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001c14:	2a00      	cmp	r2, #0
 8001c16:	d071      	beq.n	8001cfc <HAL_RCC_OscConfig+0x348>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001c18:	06da      	lsls	r2, r3, #27
 8001c1a:	d547      	bpl.n	8001cac <HAL_RCC_OscConfig+0x2f8>
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001c1c:	f7ff fe34 	bl	8001888 <LL_RCC_LSI1_IsReady>
 8001c20:	b358      	cbz	r0, 8001c7a <HAL_RCC_OscConfig+0x2c6>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c22:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001c26:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001c32:	f7ff f959 	bl	8000ee8 <HAL_GetTick>
 8001c36:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001c38:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001c3c:	071b      	lsls	r3, r3, #28
 8001c3e:	d52f      	bpl.n	8001ca0 <HAL_RCC_OscConfig+0x2ec>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001c40:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001c44:	69a2      	ldr	r2, [r4, #24]
 8001c46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c4e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c52:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001c5e:	f7ff f943 	bl	8000ee8 <HAL_GetTick>
 8001c62:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001c64:	f7ff fe10 	bl	8001888 <LL_RCC_LSI1_IsReady>
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	f43f aee2 	beq.w	8001a32 <HAL_RCC_OscConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001c6e:	f7ff f93b 	bl	8000ee8 <HAL_GetTick>
 8001c72:	1b40      	subs	r0, r0, r5
 8001c74:	2802      	cmp	r0, #2
 8001c76:	d9f5      	bls.n	8001c64 <HAL_RCC_OscConfig+0x2b0>
 8001c78:	e722      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c7a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8001c86:	f7ff f92f 	bl	8000ee8 <HAL_GetTick>
 8001c8a:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001c8c:	f7ff fdfc 	bl	8001888 <LL_RCC_LSI1_IsReady>
 8001c90:	2800      	cmp	r0, #0
 8001c92:	d1c6      	bne.n	8001c22 <HAL_RCC_OscConfig+0x26e>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001c94:	f7ff f928 	bl	8000ee8 <HAL_GetTick>
 8001c98:	1b40      	subs	r0, r0, r5
 8001c9a:	2802      	cmp	r0, #2
 8001c9c:	d9f6      	bls.n	8001c8c <HAL_RCC_OscConfig+0x2d8>
 8001c9e:	e70f      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ca0:	f7ff f922 	bl	8000ee8 <HAL_GetTick>
 8001ca4:	1b80      	subs	r0, r0, r6
 8001ca6:	2803      	cmp	r0, #3
 8001ca8:	d9c6      	bls.n	8001c38 <HAL_RCC_OscConfig+0x284>
 8001caa:	e709      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
 8001cac:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f916 	bl	8000ee8 <HAL_GetTick>
 8001cbc:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001cbe:	f7ff fde3 	bl	8001888 <LL_RCC_LSI1_IsReady>
 8001cc2:	b198      	cbz	r0, 8001cec <HAL_RCC_OscConfig+0x338>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001cc8:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001cca:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001cce:	f022 0204 	bic.w	r2, r2, #4
 8001cd2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001cd6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001cda:	071f      	lsls	r7, r3, #28
 8001cdc:	f57f aea9 	bpl.w	8001a32 <HAL_RCC_OscConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ce0:	f7ff f902 	bl	8000ee8 <HAL_GetTick>
 8001ce4:	1b80      	subs	r0, r0, r6
 8001ce6:	2803      	cmp	r0, #3
 8001ce8:	d9f5      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x322>
 8001cea:	e6e9      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001cec:	f7ff f8fc 	bl	8000ee8 <HAL_GetTick>
 8001cf0:	1b80      	subs	r0, r0, r6
 8001cf2:	2802      	cmp	r0, #2
 8001cf4:	d9e3      	bls.n	8001cbe <HAL_RCC_OscConfig+0x30a>
 8001cf6:	e6e3      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
 8001cf8:	20000008 	.word	0x20000008
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001cfc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001d00:	f023 0304 	bic.w	r3, r3, #4
 8001d04:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001d08:	f7ff f8ee 	bl	8000ee8 <HAL_GetTick>
 8001d0c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001d0e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001d12:	0718      	lsls	r0, r3, #28
 8001d14:	d413      	bmi.n	8001d3e <HAL_RCC_OscConfig+0x38a>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001d16:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001d22:	f7ff f8e1 	bl	8000ee8 <HAL_GetTick>
 8001d26:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001d28:	f7ff fdae 	bl	8001888 <LL_RCC_LSI1_IsReady>
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	f43f ae80 	beq.w	8001a32 <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001d32:	f7ff f8d9 	bl	8000ee8 <HAL_GetTick>
 8001d36:	1b40      	subs	r0, r0, r5
 8001d38:	2802      	cmp	r0, #2
 8001d3a:	d9f5      	bls.n	8001d28 <HAL_RCC_OscConfig+0x374>
 8001d3c:	e6c0      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001d3e:	f7ff f8d3 	bl	8000ee8 <HAL_GetTick>
 8001d42:	1b80      	subs	r0, r0, r6
 8001d44:	2803      	cmp	r0, #3
 8001d46:	d9e2      	bls.n	8001d0e <HAL_RCC_OscConfig+0x35a>
 8001d48:	e6ba      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4a:	4d77      	ldr	r5, [pc, #476]	; (8001f28 <HAL_RCC_OscConfig+0x574>)
 8001d4c:	682b      	ldr	r3, [r5, #0]
 8001d4e:	05d9      	lsls	r1, r3, #23
 8001d50:	d51c      	bpl.n	8001d8c <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d52:	68a3      	ldr	r3, [r4, #8]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001d5a:	d125      	bne.n	8001da8 <HAL_RCC_OscConfig+0x3f4>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d5c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001d68:	f7ff f8be 	bl	8000ee8 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d6c:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8001d70:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d72:	f241 3588 	movw	r5, #5000	; 0x1388
 8001d76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d7a:	079b      	lsls	r3, r3, #30
 8001d7c:	f53f ae5d 	bmi.w	8001a3a <HAL_RCC_OscConfig+0x86>
 8001d80:	f7ff f8b2 	bl	8000ee8 <HAL_GetTick>
 8001d84:	1b80      	subs	r0, r0, r6
 8001d86:	42a8      	cmp	r0, r5
 8001d88:	d9f5      	bls.n	8001d76 <HAL_RCC_OscConfig+0x3c2>
 8001d8a:	e699      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
      HAL_PWR_EnableBkUpAccess();
 8001d8c:	f7ff fd60 	bl	8001850 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8001d90:	f7ff f8aa 	bl	8000ee8 <HAL_GetTick>
 8001d94:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d96:	682b      	ldr	r3, [r5, #0]
 8001d98:	05da      	lsls	r2, r3, #23
 8001d9a:	d4da      	bmi.n	8001d52 <HAL_RCC_OscConfig+0x39e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9c:	f7ff f8a4 	bl	8000ee8 <HAL_GetTick>
 8001da0:	1b80      	subs	r0, r0, r6
 8001da2:	2802      	cmp	r0, #2
 8001da4:	d9f7      	bls.n	8001d96 <HAL_RCC_OscConfig+0x3e2>
 8001da6:	e68b      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da8:	2b05      	cmp	r3, #5
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x406>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dac:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8001db8:	e7d0      	b.n	8001d5c <HAL_RCC_OscConfig+0x3a8>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001dba:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dc6:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001dca:	f022 0204 	bic.w	r2, r2, #4
 8001dce:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1c8      	bne.n	8001d68 <HAL_RCC_OscConfig+0x3b4>
      tickstart = HAL_GetTick();
 8001dd6:	f7ff f887 	bl	8000ee8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001dde:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001de0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001de4:	0798      	lsls	r0, r3, #30
 8001de6:	f57f ae28 	bpl.w	8001a3a <HAL_RCC_OscConfig+0x86>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7ff f87d 	bl	8000ee8 <HAL_GetTick>
 8001dee:	1bc0      	subs	r0, r0, r7
 8001df0:	42b0      	cmp	r0, r6
 8001df2:	d9f5      	bls.n	8001de0 <HAL_RCC_OscConfig+0x42c>
 8001df4:	e664      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001df6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001dfa:	f023 0301 	bic.w	r3, r3, #1
 8001dfe:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001e02:	f7ff f871 	bl	8000ee8 <HAL_GetTick>
 8001e06:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001e08:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001e0c:	079b      	lsls	r3, r3, #30
 8001e0e:	d505      	bpl.n	8001e1c <HAL_RCC_OscConfig+0x468>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e10:	f7ff f86a 	bl	8000ee8 <HAL_GetTick>
 8001e14:	1b80      	subs	r0, r0, r6
 8001e16:	2802      	cmp	r0, #2
 8001e18:	d9f6      	bls.n	8001e08 <HAL_RCC_OscConfig+0x454>
 8001e1a:	e651      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e1e:	b908      	cbnz	r0, 8001e24 <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8001e20:	2000      	movs	r0, #0
 8001e22:	e64e      	b.n	8001ac2 <HAL_RCC_OscConfig+0x10e>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e2e:	2a0c      	cmp	r2, #12
 8001e30:	d050      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x520>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e32:	681a      	ldr	r2, [r3, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e34:	2802      	cmp	r0, #2
 8001e36:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	d133      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x4f2>
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f853 	bl	8000ee8 <HAL_GetTick>
 8001e42:	4605      	mov	r5, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8001e44:	f7ff fd47 	bl	80018d6 <LL_RCC_PLL_IsReady>
 8001e48:	bb38      	cbnz	r0, 8001e9a <HAL_RCC_OscConfig+0x4e6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4a:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8001e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e52:	430b      	orrs	r3, r1
 8001e54:	68d0      	ldr	r0, [r2, #12]
 8001e56:	4935      	ldr	r1, [pc, #212]	; (8001f2c <HAL_RCC_OscConfig+0x578>)
 8001e58:	4001      	ands	r1, r0
 8001e5a:	430b      	orrs	r3, r1
 8001e5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001e5e:	430b      	orrs	r3, r1
 8001e60:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001e62:	430b      	orrs	r3, r1
 8001e64:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001e66:	430b      	orrs	r3, r1
 8001e68:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001e6a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e6e:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e70:	6813      	ldr	r3, [r2, #0]
 8001e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e76:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e78:	68d3      	ldr	r3, [r2, #12]
 8001e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8001e80:	f7ff f832 	bl	8000ee8 <HAL_GetTick>
 8001e84:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() == 0U)
 8001e86:	f7ff fd26 	bl	80018d6 <LL_RCC_PLL_IsReady>
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	d1c8      	bne.n	8001e20 <HAL_RCC_OscConfig+0x46c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff f82b 	bl	8000ee8 <HAL_GetTick>
 8001e92:	1b00      	subs	r0, r0, r4
 8001e94:	2802      	cmp	r0, #2
 8001e96:	d9f6      	bls.n	8001e86 <HAL_RCC_OscConfig+0x4d2>
 8001e98:	e612      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9a:	f7ff f825 	bl	8000ee8 <HAL_GetTick>
 8001e9e:	1b40      	subs	r0, r0, r5
 8001ea0:	2802      	cmp	r0, #2
 8001ea2:	d9cf      	bls.n	8001e44 <HAL_RCC_OscConfig+0x490>
 8001ea4:	e60c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	f022 0203 	bic.w	r2, r2, #3
 8001eac:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8001eb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eb8:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8001eba:	f7ff f815 	bl	8000ee8 <HAL_GetTick>
 8001ebe:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8001ec0:	f7ff fd09 	bl	80018d6 <LL_RCC_PLL_IsReady>
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d0ab      	beq.n	8001e20 <HAL_RCC_OscConfig+0x46c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec8:	f7ff f80e 	bl	8000ee8 <HAL_GetTick>
 8001ecc:	1b00      	subs	r0, r0, r4
 8001ece:	2802      	cmp	r0, #2
 8001ed0:	d9f6      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x50c>
 8001ed2:	e5f5      	b.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed4:	2801      	cmp	r0, #1
 8001ed6:	f43f adf4 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x10e>
        uint32_t pllcfgr = RCC->PLLCFGR;
 8001eda:	68d8      	ldr	r0, [r3, #12]
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001edc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ede:	f000 0203 	and.w	r2, r0, #3
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	f47f ad69 	bne.w	80019ba <HAL_RCC_OscConfig+0x6>
 8001ee8:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eea:	f000 0370 	and.w	r3, r0, #112	; 0x70
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	f47f ad63 	bne.w	80019ba <HAL_RCC_OscConfig+0x6>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ef4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ef6:	f3c0 2306 	ubfx	r3, r0, #8, #7
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001efa:	4293      	cmp	r3, r2
 8001efc:	f47f ad5d 	bne.w	80019ba <HAL_RCC_OscConfig+0x6>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f00:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f02:	f400 1378 	and.w	r3, r0, #4063232	; 0x3e0000
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f06:	4293      	cmp	r3, r2
 8001f08:	f47f ad57 	bne.w	80019ba <HAL_RCC_OscConfig+0x6>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f0e:	f000 6360 	and.w	r3, r0, #234881024	; 0xe000000
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f12:	4293      	cmp	r3, r2
 8001f14:	f47f ad51 	bne.w	80019ba <HAL_RCC_OscConfig+0x6>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f18:	6c63      	ldr	r3, [r4, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f1a:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
    return HAL_ERROR;
 8001f1e:	1ac0      	subs	r0, r0, r3
 8001f20:	bf18      	it	ne
 8001f22:	2001      	movne	r0, #1
 8001f24:	e5cd      	b.n	8001ac2 <HAL_RCC_OscConfig+0x10e>
 8001f26:	bf00      	nop
 8001f28:	58000400 	.word	0x58000400
 8001f2c:	11c1808c 	.word	0x11c1808c

08001f30 <HAL_RCC_ClockConfig>:
{
 8001f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f34:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001f36:	4604      	mov	r4, r0
 8001f38:	b910      	cbnz	r0, 8001f40 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f3a:	2001      	movs	r0, #1
}
 8001f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f40:	4e73      	ldr	r6, [pc, #460]	; (8002110 <HAL_RCC_ClockConfig+0x1e0>)
 8001f42:	6833      	ldr	r3, [r6, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	428b      	cmp	r3, r1
 8001f4a:	d316      	bcc.n	8001f7a <HAL_RCC_ClockConfig+0x4a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	079a      	lsls	r2, r3, #30
 8001f50:	d527      	bpl.n	8001fa2 <HAL_RCC_ClockConfig+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001f52:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001f56:	68a2      	ldr	r2, [r4, #8]
 8001f58:	68b3      	ldr	r3, [r6, #8]
 8001f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001f62:	f7fe ffc1 	bl	8000ee8 <HAL_GetTick>
 8001f66:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001f68:	68b3      	ldr	r3, [r6, #8]
 8001f6a:	03db      	lsls	r3, r3, #15
 8001f6c:	d419      	bmi.n	8001fa2 <HAL_RCC_ClockConfig+0x72>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f6e:	f7fe ffbb 	bl	8000ee8 <HAL_GetTick>
 8001f72:	1bc0      	subs	r0, r0, r7
 8001f74:	2802      	cmp	r0, #2
 8001f76:	d9f7      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x38>
 8001f78:	e011      	b.n	8001f9e <HAL_RCC_ClockConfig+0x6e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	6833      	ldr	r3, [r6, #0]
 8001f7c:	f023 0307 	bic.w	r3, r3, #7
 8001f80:	430b      	orrs	r3, r1
 8001f82:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001f84:	f7fe ffb0 	bl	8000ee8 <HAL_GetTick>
 8001f88:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	6833      	ldr	r3, [r6, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	42ab      	cmp	r3, r5
 8001f92:	d0db      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f94:	f7fe ffa8 	bl	8000ee8 <HAL_GetTick>
 8001f98:	1bc0      	subs	r0, r0, r7
 8001f9a:	2802      	cmp	r0, #2
 8001f9c:	d9f5      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x5a>
        return HAL_TIMEOUT;
 8001f9e:	2003      	movs	r0, #3
 8001fa0:	e7cc      	b.n	8001f3c <HAL_RCC_ClockConfig+0xc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	0698      	lsls	r0, r3, #26
 8001fa6:	d516      	bpl.n	8001fd6 <HAL_RCC_ClockConfig+0xa6>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001fa8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001fac:	6962      	ldr	r2, [r4, #20]
 8001fae:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8001fbc:	f7fe ff94 	bl	8000ee8 <HAL_GetTick>
 8001fc0:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001fc2:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001fc6:	0399      	lsls	r1, r3, #14
 8001fc8:	d405      	bmi.n	8001fd6 <HAL_RCC_ClockConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fca:	f7fe ff8d 	bl	8000ee8 <HAL_GetTick>
 8001fce:	1bc0      	subs	r0, r0, r7
 8001fd0:	2802      	cmp	r0, #2
 8001fd2:	d9f6      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x92>
 8001fd4:	e7e3      	b.n	8001f9e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	065a      	lsls	r2, r3, #25
 8001fda:	d517      	bpl.n	800200c <HAL_RCC_ClockConfig+0xdc>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001fdc:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001fe0:	69a2      	ldr	r2, [r4, #24]
 8001fe2:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001fe6:	f023 030f 	bic.w	r3, r3, #15
 8001fea:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8001fee:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8001ff2:	f7fe ff79 	bl	8000ee8 <HAL_GetTick>
 8001ff6:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001ff8:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001ffc:	03db      	lsls	r3, r3, #15
 8001ffe:	d405      	bmi.n	800200c <HAL_RCC_ClockConfig+0xdc>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002000:	f7fe ff72 	bl	8000ee8 <HAL_GetTick>
 8002004:	1bc0      	subs	r0, r0, r7
 8002006:	2802      	cmp	r0, #2
 8002008:	d9f6      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0xc8>
 800200a:	e7c8      	b.n	8001f9e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	075e      	lsls	r6, r3, #29
 8002010:	d513      	bpl.n	800203a <HAL_RCC_ClockConfig+0x10a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002012:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002016:	68e2      	ldr	r2, [r4, #12]
 8002018:	68b3      	ldr	r3, [r6, #8]
 800201a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800201e:	4313      	orrs	r3, r2
 8002020:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002022:	f7fe ff61 	bl	8000ee8 <HAL_GetTick>
 8002026:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002028:	68b3      	ldr	r3, [r6, #8]
 800202a:	0398      	lsls	r0, r3, #14
 800202c:	d405      	bmi.n	800203a <HAL_RCC_ClockConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800202e:	f7fe ff5b 	bl	8000ee8 <HAL_GetTick>
 8002032:	1bc0      	subs	r0, r0, r7
 8002034:	2802      	cmp	r0, #2
 8002036:	d9f7      	bls.n	8002028 <HAL_RCC_ClockConfig+0xf8>
 8002038:	e7b1      	b.n	8001f9e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	0719      	lsls	r1, r3, #28
 800203e:	d514      	bpl.n	800206a <HAL_RCC_ClockConfig+0x13a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002040:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002044:	6922      	ldr	r2, [r4, #16]
 8002046:	68b3      	ldr	r3, [r6, #8]
 8002048:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800204c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002050:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002052:	f7fe ff49 	bl	8000ee8 <HAL_GetTick>
 8002056:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002058:	68b3      	ldr	r3, [r6, #8]
 800205a:	035a      	lsls	r2, r3, #13
 800205c:	d405      	bmi.n	800206a <HAL_RCC_ClockConfig+0x13a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800205e:	f7fe ff43 	bl	8000ee8 <HAL_GetTick>
 8002062:	1bc0      	subs	r0, r0, r7
 8002064:	2802      	cmp	r0, #2
 8002066:	d9f7      	bls.n	8002058 <HAL_RCC_ClockConfig+0x128>
 8002068:	e799      	b.n	8001f9e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	07db      	lsls	r3, r3, #31
 800206e:	d40d      	bmi.n	800208c <HAL_RCC_ClockConfig+0x15c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002070:	4c27      	ldr	r4, [pc, #156]	; (8002110 <HAL_RCC_ClockConfig+0x1e0>)
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	42ab      	cmp	r3, r5
 800207a:	d835      	bhi.n	80020e8 <HAL_RCC_ClockConfig+0x1b8>
  SystemCoreClockUpdate();
 800207c:	f001 fdca 	bl	8003c14 <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 8002080:	f7fe ff38 	bl	8000ef4 <HAL_GetTickPrio>
}
 8002084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8002088:	f7fe bee6 	b.w	8000e58 <HAL_InitTick>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208c:	6863      	ldr	r3, [r4, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d11e      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x1a0>
      if (LL_RCC_HSE_IsReady() == 0U)
 8002092:	f7ff fbed 	bl	8001870 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 8002096:	2800      	cmp	r0, #0
 8002098:	f43f af4f 	beq.w	8001f3a <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800209c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80020a0:	6862      	ldr	r2, [r4, #4]
 80020a2:	68b3      	ldr	r3, [r6, #8]
 80020a4:	f023 0303 	bic.w	r3, r3, #3
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80020ac:	f7fe ff1c 	bl	8000ee8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80020b4:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020b6:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b8:	6862      	ldr	r2, [r4, #4]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020c2:	d0d5      	beq.n	8002070 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7fe ff10 	bl	8000ee8 <HAL_GetTick>
 80020c8:	1bc0      	subs	r0, r0, r7
 80020ca:	4540      	cmp	r0, r8
 80020cc:	d9f3      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x186>
 80020ce:	e766      	b.n	8001f9e <HAL_RCC_ClockConfig+0x6e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d102      	bne.n	80020da <HAL_RCC_ClockConfig+0x1aa>
      if (LL_RCC_PLL_IsReady() == 0U)
 80020d4:	f7ff fbff 	bl	80018d6 <LL_RCC_PLL_IsReady>
 80020d8:	e7dd      	b.n	8002096 <HAL_RCC_ClockConfig+0x166>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020da:	b913      	cbnz	r3, 80020e2 <HAL_RCC_ClockConfig+0x1b2>
      if (LL_RCC_MSI_IsReady() == 0U)
 80020dc:	f7ff fbdb 	bl	8001896 <LL_RCC_MSI_IsReady>
 80020e0:	e7d9      	b.n	8002096 <HAL_RCC_ClockConfig+0x166>
      if (LL_RCC_HSI_IsReady() == 0U)
 80020e2:	f7ff fbcb 	bl	800187c <LL_RCC_HSI_IsReady>
 80020e6:	e7d6      	b.n	8002096 <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	f023 0307 	bic.w	r3, r3, #7
 80020ee:	432b      	orrs	r3, r5
 80020f0:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80020f2:	f7fe fef9 	bl	8000ee8 <HAL_GetTick>
 80020f6:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	42ab      	cmp	r3, r5
 8002100:	d0bc      	beq.n	800207c <HAL_RCC_ClockConfig+0x14c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002102:	f7fe fef1 	bl	8000ee8 <HAL_GetTick>
 8002106:	1b80      	subs	r0, r0, r6
 8002108:	2802      	cmp	r0, #2
 800210a:	d9f5      	bls.n	80020f8 <HAL_RCC_ClockConfig+0x1c8>
 800210c:	e747      	b.n	8001f9e <HAL_RCC_ClockConfig+0x6e>
 800210e:	bf00      	nop
 8002110:	58004000 	.word	0x58004000

08002114 <HAL_RCC_GetSysClockFreq>:
 8002114:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8002118:	b508      	push	{r3, lr}
 800211a:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800211c:	f013 030c 	ands.w	r3, r3, #12
 8002120:	d107      	bne.n	8002132 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002122:	f7ff fbc6 	bl	80018b2 <LL_RCC_MSI_GetRange>
 8002126:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x90>)
 8002128:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800212c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8002130:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002132:	2b04      	cmp	r3, #4
 8002134:	d033      	beq.n	800219e <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002136:	2b08      	cmp	r3, #8
 8002138:	d107      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800213a:	6813      	ldr	r3, [r2, #0]
      sysclockfreq = HSE_VALUE;
 800213c:	481a      	ldr	r0, [pc, #104]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x94>)
 800213e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002142:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002144:	bf08      	it	eq
 8002146:	4618      	moveq	r0, r3
 8002148:	e7f2      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x1c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800214a:	68d3      	ldr	r3, [r2, #12]
 800214c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002150:	2b02      	cmp	r3, #2
 8002152:	d022      	beq.n	800219a <HAL_RCC_GetSysClockFreq+0x86>
 8002154:	2b03      	cmp	r3, #3
 8002156:	d118      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002158:	6813      	ldr	r3, [r2, #0]
          pllinputfreq = HSE_VALUE / 2U;
 800215a:	4813      	ldr	r0, [pc, #76]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x94>)
 800215c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002162:	bf18      	it	ne
 8002164:	4603      	movne	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800216a:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800216c:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800216e:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002170:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002174:	4358      	muls	r0, r3
 8002176:	f3c1 1302 	ubfx	r3, r1, #4, #3
 800217a:	3301      	adds	r3, #1
 800217c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002180:	0f53      	lsrs	r3, r2, #29
 8002182:	3301      	adds	r3, #1
 8002184:	fbb0 f0f3 	udiv	r0, r0, r3
 8002188:	e7d2      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x1c>
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800218a:	f7ff fb92 	bl	80018b2 <LL_RCC_MSI_GetRange>
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x90>)
 8002190:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002194:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002198:	e7e5      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 800219a:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x94>)
 800219c:	e7e3      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 800219e:	4802      	ldr	r0, [pc, #8]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x94>)
 80021a0:	e7c6      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x1c>
 80021a2:	bf00      	nop
 80021a4:	080065f4 	.word	0x080065f4
 80021a8:	00f42400 	.word	0x00f42400
 80021ac:	01e84800 	.word	0x01e84800

080021b0 <HAL_RCC_GetHCLKFreq>:
{
 80021b0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80021b2:	f7ff ffaf 	bl	8002114 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80021b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ba:	4a04      	ldr	r2, [pc, #16]	; (80021cc <HAL_RCC_GetHCLKFreq+0x1c>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80021c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80021c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80021ca:	bd08      	pop	{r3, pc}
 80021cc:	08006594 	.word	0x08006594

080021d0 <HAL_RCC_GetPCLK1Freq>:
{
 80021d0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80021d2:	f7ff ffed 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80021d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	f003 031f 	and.w	r3, r3, #31
}
 80021ea:	40d8      	lsrs	r0, r3
 80021ec:	bd08      	pop	{r3, pc}
 80021ee:	bf00      	nop
 80021f0:	080065d4 	.word	0x080065d4

080021f4 <HAL_RCC_GetPCLK2Freq>:
{
 80021f4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80021f6:	f7ff ffdb 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80021fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fe:	4a05      	ldr	r2, [pc, #20]	; (8002214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	f003 031f 	and.w	r3, r3, #31
}
 800220e:	40d8      	lsrs	r0, r3
 8002210:	bd08      	pop	{r3, pc}
 8002212:	bf00      	nop
 8002214:	080065d4 	.word	0x080065d4

08002218 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8002220:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002224:	4770      	bx	lr

08002226 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800222a:	0902      	lsrs	r2, r0, #4
 800222c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002230:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8002234:	0100      	lsls	r0, r0, #4
 8002236:	ea23 0302 	bic.w	r3, r3, r2
 800223a:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 800223e:	4318      	orrs	r0, r3
 8002240:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
}
 8002244:	4770      	bx	lr

08002246 <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800224a:	6813      	ldr	r3, [r2, #0]
 800224c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002250:	6013      	str	r3, [r2, #0]
}
 8002252:	4770      	bx	lr

08002254 <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002258:	6813      	ldr	r3, [r2, #0]
 800225a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800225e:	6013      	str	r3, [r2, #0]
}
 8002260:	4770      	bx	lr

08002262 <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002266:	6818      	ldr	r0, [r3, #0]
}
 8002268:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 800226c:	4770      	bx	lr

0800226e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800226e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002270:	6805      	ldr	r5, [r0, #0]
 8002272:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 8002276:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002278:	d043      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800227a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800227c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002280:	d015      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002282:	d802      	bhi.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002284:	b1d3      	cbz	r3, 80022bc <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002286:	2501      	movs	r5, #1
 8002288:	e03b      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 800228a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800228e:	d002      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002290:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002294:	d1f7      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002296:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800229a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800229c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80022a0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80022a4:	430b      	orrs	r3, r1
 80022a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80022aa:	2500      	movs	r5, #0
 80022ac:	e029      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80022ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022b2:	68d3      	ldr	r3, [r2, #12]
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	60d3      	str	r3, [r2, #12]
 80022ba:	e7ec      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80022bc:	f7ff ffca 	bl	8002254 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80022c0:	f7fe fe12 	bl	8000ee8 <HAL_GetTick>
 80022c4:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80022c6:	f7ff ffcc 	bl	8002262 <LL_RCC_PLLSAI1_IsReady>
 80022ca:	b9a0      	cbnz	r0, 80022f6 <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80022cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022d0:	6861      	ldr	r1, [r4, #4]
 80022d2:	6913      	ldr	r3, [r2, #16]
 80022d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80022dc:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80022de:	6913      	ldr	r3, [r2, #16]
 80022e0:	68a1      	ldr	r1, [r4, #8]
 80022e2:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 80022e6:	430b      	orrs	r3, r1
 80022e8:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80022ea:	f7ff ffac 	bl	8002246 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ee:	f7fe fdfb 	bl	8000ee8 <HAL_GetTick>
 80022f2:	4605      	mov	r5, r0
 80022f4:	e0cd      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022f6:	f7fe fdf7 	bl	8000ee8 <HAL_GetTick>
 80022fa:	1b40      	subs	r0, r0, r5
 80022fc:	2802      	cmp	r0, #2
 80022fe:	d9e2      	bls.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002300:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	051a      	lsls	r2, r3, #20
 8002306:	d515      	bpl.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002308:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800230c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800230e:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8002312:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8002316:	42bb      	cmp	r3, r7
 8002318:	d00c      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 800231a:	f7ff fa99 	bl	8001850 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800231e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002322:	2f00      	cmp	r7, #0
 8002324:	f040 80c0 	bne.w	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8002328:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800232a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	07df      	lsls	r7, r3, #31
 8002338:	d509      	bpl.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800233a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800233e:	69a0      	ldr	r0, [r4, #24]
 8002340:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002344:	f022 0203 	bic.w	r2, r2, #3
 8002348:	4302      	orrs	r2, r0
 800234a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800234e:	079e      	lsls	r6, r3, #30
 8002350:	d509      	bpl.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002352:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002356:	69e0      	ldr	r0, [r4, #28]
 8002358:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800235c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002360:	4302      	orrs	r2, r0
 8002362:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002366:	06d8      	lsls	r0, r3, #27
 8002368:	d50c      	bpl.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800236a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800236c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002370:	0c31      	lsrs	r1, r6, #16
 8002372:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002376:	0409      	lsls	r1, r1, #16
 8002378:	ea22 0201 	bic.w	r2, r2, r1
 800237c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8002380:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002384:	0699      	lsls	r1, r3, #26
 8002386:	d50c      	bpl.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800238a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800238e:	0c31      	lsrs	r1, r6, #16
 8002390:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002394:	0409      	lsls	r1, r1, #16
 8002396:	ea22 0201 	bic.w	r2, r2, r1
 800239a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800239e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023a2:	075a      	lsls	r2, r3, #29
 80023a4:	d502      	bpl.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023a6:	6a20      	ldr	r0, [r4, #32]
 80023a8:	f7ff ff3d 	bl	8002226 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	071b      	lsls	r3, r3, #28
 80023b0:	d502      	bpl.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80023b4:	f7ff ff37 	bl	8002226 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	05df      	lsls	r7, r3, #23
 80023bc:	d511      	bpl.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80023be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023c8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80023cc:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ce:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80023d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80023d6:	f040 808f 	bne.w	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80023da:	68d3      	ldr	r3, [r2, #12]
 80023dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023e0:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	059e      	lsls	r6, r3, #22
 80023e6:	d51a      	bpl.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80023ea:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80023ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f2:	d003      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80023f4:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 80023f8:	f040 80b6 	bne.w	8002568 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80023fc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8002400:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8002404:	4311      	orrs	r1, r2
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002406:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800240a:	bf08      	it	eq
 800240c:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002410:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 8002414:	bf02      	ittt	eq
 8002416:	68d3      	ldreq	r3, [r2, #12]
 8002418:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 800241c:	60d3      	streq	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	0558      	lsls	r0, r3, #21
 8002422:	d511      	bpl.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002428:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800242a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800242e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002432:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002434:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800243c:	f040 80a2 	bne.w	8002584 <HAL_RCCEx_PeriphCLKConfig+0x316>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002440:	68d3      	ldr	r3, [r2, #12]
 8002442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002446:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002448:	6822      	ldr	r2, [r4, #0]
 800244a:	04d1      	lsls	r1, r2, #19
 800244c:	d509      	bpl.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800244e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002452:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002454:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8002458:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800245c:	4303      	orrs	r3, r0
 800245e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002462:	0493      	lsls	r3, r2, #18
 8002464:	d50d      	bpl.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x214>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800246a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800246c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800246e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002472:	430b      	orrs	r3, r1
 8002474:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002476:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002478:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	430b      	orrs	r3, r1
 8002480:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002482:	4628      	mov	r0, r5
 8002484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002486:	f7fe fd2f 	bl	8000ee8 <HAL_GetTick>
 800248a:	1b40      	subs	r0, r0, r5
 800248c:	2802      	cmp	r0, #2
 800248e:	f63f af37 	bhi.w	8002300 <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002492:	f7ff fee6 	bl	8002262 <LL_RCC_PLLSAI1_IsReady>
 8002496:	2801      	cmp	r0, #1
 8002498:	d1f5      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x218>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800249a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800249e:	6961      	ldr	r1, [r4, #20]
 80024a0:	6913      	ldr	r3, [r2, #16]
 80024a2:	430b      	orrs	r3, r1
 80024a4:	6113      	str	r3, [r2, #16]
 80024a6:	e6f6      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80024a8:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80024ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024b0:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80024b4:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80024b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024bc:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80024c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c6:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 80024c8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80024cc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80024d0:	07db      	lsls	r3, r3, #31
 80024d2:	f57f af2f 	bpl.w	8002334 <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 80024d6:	f7fe fd07 	bl	8000ee8 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f241 3788 	movw	r7, #5000	; 0x1388
          tickstart = HAL_GetTick();
 80024de:	4606      	mov	r6, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 80024e0:	f7ff fe9a 	bl	8002218 <LL_RCC_LSE_IsReady>
 80024e4:	2801      	cmp	r0, #1
 80024e6:	f43f af25 	beq.w	8002334 <HAL_RCCEx_PeriphCLKConfig+0xc6>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7fe fcfd 	bl	8000ee8 <HAL_GetTick>
 80024ee:	1b80      	subs	r0, r0, r6
 80024f0:	42b8      	cmp	r0, r7
 80024f2:	d9f5      	bls.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x272>
              ret = HAL_TIMEOUT;
 80024f4:	2503      	movs	r5, #3
 80024f6:	e71d      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024f8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80024fc:	f47f af71 	bne.w	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x174>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002500:	f7ff fea8 	bl	8002254 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002504:	f7fe fcf0 	bl	8000ee8 <HAL_GetTick>
 8002508:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800250a:	f7ff feaa 	bl	8002262 <LL_RCC_PLLSAI1_IsReady>
 800250e:	b9a0      	cbnz	r0, 800253a <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002514:	6861      	ldr	r1, [r4, #4]
 8002516:	6913      	ldr	r3, [r2, #16]
 8002518:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800251c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002520:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002522:	6913      	ldr	r3, [r2, #16]
 8002524:	68e1      	ldr	r1, [r4, #12]
 8002526:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800252a:	430b      	orrs	r3, r1
 800252c:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800252e:	f7ff fe8a 	bl	8002246 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002532:	f7fe fcd9 	bl	8000ee8 <HAL_GetTick>
 8002536:	4606      	mov	r6, r0
 8002538:	e00b      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800253a:	f7fe fcd5 	bl	8000ee8 <HAL_GetTick>
 800253e:	1b80      	subs	r0, r0, r6
 8002540:	2802      	cmp	r0, #2
 8002542:	d9e2      	bls.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x29c>
              ret = HAL_TIMEOUT;
 8002544:	2503      	movs	r5, #3
 8002546:	e74c      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x174>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002548:	f7fe fcce 	bl	8000ee8 <HAL_GetTick>
 800254c:	1b80      	subs	r0, r0, r6
 800254e:	2802      	cmp	r0, #2
 8002550:	d8f8      	bhi.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002552:	f7ff fe86 	bl	8002262 <LL_RCC_PLLSAI1_IsReady>
 8002556:	2801      	cmp	r0, #1
 8002558:	d1f6      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800255a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800255e:	6961      	ldr	r1, [r4, #20]
 8002560:	6913      	ldr	r3, [r2, #16]
 8002562:	430b      	orrs	r3, r1
 8002564:	6113      	str	r3, [r2, #16]
 8002566:	e73c      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002568:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800256c:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8002570:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002574:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002578:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800257c:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 8002580:	4301      	orrs	r1, r0
 8002582:	e740      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x198>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002584:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8002588:	f47f af5e 	bne.w	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800258c:	f7ff fe62 	bl	8002254 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002590:	f7fe fcaa 	bl	8000ee8 <HAL_GetTick>
 8002594:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002596:	f7ff fe64 	bl	8002262 <LL_RCC_PLLSAI1_IsReady>
 800259a:	b9a0      	cbnz	r0, 80025c6 <HAL_RCCEx_PeriphCLKConfig+0x358>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800259c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a0:	6861      	ldr	r1, [r4, #4]
 80025a2:	6913      	ldr	r3, [r2, #16]
 80025a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025ac:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80025ae:	6913      	ldr	r3, [r2, #16]
 80025b0:	6921      	ldr	r1, [r4, #16]
 80025b2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80025b6:	430b      	orrs	r3, r1
 80025b8:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80025ba:	f7ff fe44 	bl	8002246 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025be:	f7fe fc93 	bl	8000ee8 <HAL_GetTick>
 80025c2:	4606      	mov	r6, r0
 80025c4:	e00b      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x370>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025c6:	f7fe fc8f 	bl	8000ee8 <HAL_GetTick>
 80025ca:	1b80      	subs	r0, r0, r6
 80025cc:	2802      	cmp	r0, #2
 80025ce:	d9e2      	bls.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x328>
              ret = HAL_TIMEOUT;
 80025d0:	2503      	movs	r5, #3
 80025d2:	e739      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1da>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025d4:	f7fe fc88 	bl	8000ee8 <HAL_GetTick>
 80025d8:	1b80      	subs	r0, r0, r6
 80025da:	2802      	cmp	r0, #2
 80025dc:	d8f8      	bhi.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x362>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80025de:	f7ff fe40 	bl	8002262 <LL_RCC_PLLSAI1_IsReady>
 80025e2:	2801      	cmp	r0, #1
 80025e4:	d1f6      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x366>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80025e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ea:	6961      	ldr	r1, [r4, #20]
 80025ec:	6913      	ldr	r3, [r2, #16]
 80025ee:	430b      	orrs	r3, r1
 80025f0:	6113      	str	r3, [r2, #16]
 80025f2:	e729      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1da>

080025f4 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80025f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025f8:	6813      	ldr	r3, [r2, #0]
 80025fa:	f043 0304 	orr.w	r3, r3, #4
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	4770      	bx	lr

08002602 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002602:	6802      	ldr	r2, [r0, #0]
{
 8002604:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002606:	68d3      	ldr	r3, [r2, #12]
 8002608:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800260c:	60d3      	str	r3, [r2, #12]
{
 800260e:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 8002610:	f7fe fc6a 	bl	8000ee8 <HAL_GetTick>
 8002614:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	069b      	lsls	r3, r3, #26
 800261c:	d501      	bpl.n	8002622 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800261e:	2000      	movs	r0, #0
}
 8002620:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002622:	f7fe fc61 	bl	8000ee8 <HAL_GetTick>
 8002626:	1b40      	subs	r0, r0, r5
 8002628:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800262c:	d9f3      	bls.n	8002616 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800262e:	2003      	movs	r0, #3
 8002630:	e7f6      	b.n	8002620 <HAL_RTC_WaitForSynchro+0x1e>

08002632 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002632:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002634:	6803      	ldr	r3, [r0, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	0652      	lsls	r2, r2, #25
{
 800263a:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800263c:	d501      	bpl.n	8002642 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800263e:	2000      	movs	r0, #0
}
 8002640:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002642:	f04f 32ff 	mov.w	r2, #4294967295
 8002646:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002648:	f7fe fc4e 	bl	8000ee8 <HAL_GetTick>
 800264c:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	065b      	lsls	r3, r3, #25
 8002654:	d4f3      	bmi.n	800263e <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002656:	f7fe fc47 	bl	8000ee8 <HAL_GetTick>
 800265a:	1b40      	subs	r0, r0, r5
 800265c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002660:	d9f5      	bls.n	800264e <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002662:	2003      	movs	r0, #3
 8002664:	e7ec      	b.n	8002640 <RTC_EnterInitMode+0xe>

08002666 <HAL_RTC_Init>:
{
 8002666:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002668:	4604      	mov	r4, r0
 800266a:	b1d8      	cbz	r0, 80026a4 <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800266c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002670:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002674:	b91b      	cbnz	r3, 800267e <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8002676:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 800267a:	f001 f9bd 	bl	80039f8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800267e:	2302      	movs	r3, #2
 8002680:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	22ca      	movs	r2, #202	; 0xca
 8002688:	625a      	str	r2, [r3, #36]	; 0x24
 800268a:	2253      	movs	r2, #83	; 0x53
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800268e:	4620      	mov	r0, r4
 8002690:	f7ff ffcf 	bl	8002632 <RTC_EnterInitMode>
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	4605      	mov	r5, r0
 8002698:	b130      	cbz	r0, 80026a8 <HAL_RTC_Init+0x42>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800269a:	22ff      	movs	r2, #255	; 0xff
 800269c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800269e:	2304      	movs	r3, #4
 80026a0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 80026a4:	2501      	movs	r5, #1
 80026a6:	e038      	b.n	800271a <HAL_RTC_Init+0xb4>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80026a8:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80026aa:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80026ac:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80026b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026b4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80026b6:	6862      	ldr	r2, [r4, #4]
 80026b8:	6899      	ldr	r1, [r3, #8]
 80026ba:	4302      	orrs	r2, r0
 80026bc:	69a0      	ldr	r0, [r4, #24]
 80026be:	4302      	orrs	r2, r0
 80026c0:	430a      	orrs	r2, r1
 80026c2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026c4:	68e2      	ldr	r2, [r4, #12]
 80026c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80026cc:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80026ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026d2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026da:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80026dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026de:	f022 0203 	bic.w	r2, r2, #3
 80026e2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80026e4:	69e2      	ldr	r2, [r4, #28]
 80026e6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80026e8:	4302      	orrs	r2, r0
 80026ea:	430a      	orrs	r2, r1
 80026ec:	64da      	str	r2, [r3, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	069b      	lsls	r3, r3, #26
 80026f2:	d40c      	bmi.n	800270e <HAL_RTC_Init+0xa8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff ff84 	bl	8002602 <HAL_RTC_WaitForSynchro>
 80026fa:	b140      	cbz	r0, 800270e <HAL_RTC_Init+0xa8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	22ff      	movs	r2, #255	; 0xff
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002702:	2304      	movs	r3, #4
 8002704:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002708:	f884 5020 	strb.w	r5, [r4, #32]
 800270c:	e7ca      	b.n	80026a4 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	22ff      	movs	r2, #255	; 0xff
 8002712:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002714:	2301      	movs	r3, #1
 8002716:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800271a:	4628      	mov	r0, r5
 800271c:	bd38      	pop	{r3, r4, r5, pc}
	...

08002720 <UART_SetConfig>:

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(LPUART1)
  if (UART_INSTANCE_LOWPOWER(huart))
 8002720:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002722:	69c1      	ldr	r1, [r0, #28]
 8002724:	6882      	ldr	r2, [r0, #8]
{
 8002726:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800272a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800272c:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800272e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002730:	4302      	orrs	r2, r0
 8002732:	6960      	ldr	r0, [r4, #20]
 8002734:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 8002736:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002738:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 800273a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800273c:	48ac      	ldr	r0, [pc, #688]	; (80029f0 <UART_SetConfig+0x2d0>)
 800273e:	4028      	ands	r0, r5
 8002740:	4302      	orrs	r2, r0
 8002742:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	68e0      	ldr	r0, [r4, #12]
 8002748:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800274c:	4302      	orrs	r2, r0
 800274e:	605a      	str	r2, [r3, #4]
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002750:	4aa8      	ldr	r2, [pc, #672]	; (80029f4 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002752:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002754:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002756:	bf1c      	itt	ne
 8002758:	6a22      	ldrne	r2, [r4, #32]
 800275a:	4310      	orrne	r0, r2
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8002762:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002766:	4302      	orrs	r2, r0
 8002768:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800276e:	f022 020f 	bic.w	r2, r2, #15
 8002772:	4302      	orrs	r2, r0
 8002774:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002776:	4aa0      	ldr	r2, [pc, #640]	; (80029f8 <UART_SetConfig+0x2d8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d11a      	bne.n	80027b2 <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800277c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002780:	4a9e      	ldr	r2, [pc, #632]	; (80029fc <UART_SetConfig+0x2dc>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800278a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	f103 33ff 	add.w	r3, r3, #4294967295
 8002794:	f040 8334 	bne.w	8002e00 <UART_SetConfig+0x6e0>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8002798:	2b07      	cmp	r3, #7
 800279a:	f200 832e 	bhi.w	8002dfa <UART_SetConfig+0x6da>
 800279e:	e8df f013 	tbh	[pc, r3, lsl #1]
 80027a2:	022a      	.short	0x022a
 80027a4:	032c0251 	.word	0x032c0251
 80027a8:	032c0298 	.word	0x032c0298
 80027ac:	032c032c 	.word	0x032c032c
 80027b0:	02b1      	.short	0x02b1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027b2:	4a90      	ldr	r2, [pc, #576]	; (80029f4 <UART_SetConfig+0x2d4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	f040 83ef 	bne.w	8002f98 <UART_SetConfig+0x878>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80027ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ca:	f000 80ac 	beq.w	8002926 <UART_SetConfig+0x206>
 80027ce:	d80a      	bhi.n	80027e6 <UART_SetConfig+0xc6>
 80027d0:	b3c3      	cbz	r3, 8002844 <UART_SetConfig+0x124>
        ret = HAL_ERROR;
 80027d2:	2201      	movs	r2, #1
      ret = HAL_ERROR;
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027da:	e9c4 131a 	strd	r1, r3, [r4, #104]	; 0x68
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027de:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;

  return ret;
}
 80027e0:	4610      	mov	r0, r2
 80027e2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ea:	d065      	beq.n	80028b8 <UART_SetConfig+0x198>
 80027ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027f0:	d1ef      	bne.n	80027d2 <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80027f2:	2800      	cmp	r0, #0
 80027f4:	f000 80e7 	beq.w	80029c6 <UART_SetConfig+0x2a6>
 80027f8:	2801      	cmp	r0, #1
 80027fa:	f000 80e8 	beq.w	80029ce <UART_SetConfig+0x2ae>
 80027fe:	2802      	cmp	r0, #2
 8002800:	f000 80e9 	beq.w	80029d6 <UART_SetConfig+0x2b6>
 8002804:	2803      	cmp	r0, #3
 8002806:	f000 80ea 	beq.w	80029de <UART_SetConfig+0x2be>
 800280a:	2804      	cmp	r0, #4
 800280c:	f000 80eb 	beq.w	80029e6 <UART_SetConfig+0x2c6>
 8002810:	2805      	cmp	r0, #5
 8002812:	f000 810b 	beq.w	8002a2c <UART_SetConfig+0x30c>
 8002816:	2806      	cmp	r0, #6
 8002818:	f000 810c 	beq.w	8002a34 <UART_SetConfig+0x314>
 800281c:	2807      	cmp	r0, #7
 800281e:	f000 810d 	beq.w	8002a3c <UART_SetConfig+0x31c>
 8002822:	2808      	cmp	r0, #8
 8002824:	f000 810e 	beq.w	8002a44 <UART_SetConfig+0x324>
 8002828:	2809      	cmp	r0, #9
 800282a:	f000 810f 	beq.w	8002a4c <UART_SetConfig+0x32c>
 800282e:	280a      	cmp	r0, #10
 8002830:	f000 8110 	beq.w	8002a54 <UART_SetConfig+0x334>
 8002834:	280b      	cmp	r0, #11
 8002836:	f04f 0108 	mov.w	r1, #8
 800283a:	bf14      	ite	ne
 800283c:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8002840:	2080      	moveq	r0, #128	; 0x80
 8002842:	e058      	b.n	80028f6 <UART_SetConfig+0x1d6>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002844:	f7ff fcc4 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 8002848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800284a:	b1fb      	cbz	r3, 800288c <UART_SetConfig+0x16c>
 800284c:	2b01      	cmp	r3, #1
 800284e:	d01f      	beq.n	8002890 <UART_SetConfig+0x170>
 8002850:	2b02      	cmp	r3, #2
 8002852:	d01f      	beq.n	8002894 <UART_SetConfig+0x174>
 8002854:	2b03      	cmp	r3, #3
 8002856:	d01f      	beq.n	8002898 <UART_SetConfig+0x178>
 8002858:	2b04      	cmp	r3, #4
 800285a:	d01f      	beq.n	800289c <UART_SetConfig+0x17c>
 800285c:	2b05      	cmp	r3, #5
 800285e:	d01f      	beq.n	80028a0 <UART_SetConfig+0x180>
 8002860:	2b06      	cmp	r3, #6
 8002862:	d01f      	beq.n	80028a4 <UART_SetConfig+0x184>
 8002864:	2b07      	cmp	r3, #7
 8002866:	d01f      	beq.n	80028a8 <UART_SetConfig+0x188>
 8002868:	2b08      	cmp	r3, #8
 800286a:	d01f      	beq.n	80028ac <UART_SetConfig+0x18c>
 800286c:	2b09      	cmp	r3, #9
 800286e:	d01f      	beq.n	80028b0 <UART_SetConfig+0x190>
 8002870:	2b0a      	cmp	r3, #10
 8002872:	d01f      	beq.n	80028b4 <UART_SetConfig+0x194>
 8002874:	2b0b      	cmp	r3, #11
 8002876:	bf14      	ite	ne
 8002878:	2301      	movne	r3, #1
 800287a:	f44f 7380 	moveq.w	r3, #256	; 0x100
  UART_GETCLOCKSOURCE(huart, clocksource);
 800287e:	2100      	movs	r1, #0
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002880:	fbb0 f0f3 	udiv	r0, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8002884:	2800      	cmp	r0, #0
 8002886:	d136      	bne.n	80028f6 <UART_SetConfig+0x1d6>
 8002888:	4602      	mov	r2, r0
 800288a:	e7a3      	b.n	80027d4 <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800288c:	2301      	movs	r3, #1
 800288e:	e7f6      	b.n	800287e <UART_SetConfig+0x15e>
 8002890:	2302      	movs	r3, #2
 8002892:	e7f4      	b.n	800287e <UART_SetConfig+0x15e>
 8002894:	2304      	movs	r3, #4
 8002896:	e7f2      	b.n	800287e <UART_SetConfig+0x15e>
 8002898:	2306      	movs	r3, #6
 800289a:	e7f0      	b.n	800287e <UART_SetConfig+0x15e>
 800289c:	2308      	movs	r3, #8
 800289e:	e7ee      	b.n	800287e <UART_SetConfig+0x15e>
 80028a0:	230a      	movs	r3, #10
 80028a2:	e7ec      	b.n	800287e <UART_SetConfig+0x15e>
 80028a4:	230c      	movs	r3, #12
 80028a6:	e7ea      	b.n	800287e <UART_SetConfig+0x15e>
 80028a8:	2310      	movs	r3, #16
 80028aa:	e7e8      	b.n	800287e <UART_SetConfig+0x15e>
 80028ac:	2320      	movs	r3, #32
 80028ae:	e7e6      	b.n	800287e <UART_SetConfig+0x15e>
 80028b0:	2340      	movs	r3, #64	; 0x40
 80028b2:	e7e4      	b.n	800287e <UART_SetConfig+0x15e>
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	e7e2      	b.n	800287e <UART_SetConfig+0x15e>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d06b      	beq.n	8002994 <UART_SetConfig+0x274>
 80028bc:	2801      	cmp	r0, #1
 80028be:	d06c      	beq.n	800299a <UART_SetConfig+0x27a>
 80028c0:	2802      	cmp	r0, #2
 80028c2:	d06d      	beq.n	80029a0 <UART_SetConfig+0x280>
 80028c4:	2803      	cmp	r0, #3
 80028c6:	f04f 0102 	mov.w	r1, #2
 80028ca:	d06c      	beq.n	80029a6 <UART_SetConfig+0x286>
 80028cc:	2804      	cmp	r0, #4
 80028ce:	d06c      	beq.n	80029aa <UART_SetConfig+0x28a>
 80028d0:	2805      	cmp	r0, #5
 80028d2:	d06c      	beq.n	80029ae <UART_SetConfig+0x28e>
 80028d4:	2806      	cmp	r0, #6
 80028d6:	d06c      	beq.n	80029b2 <UART_SetConfig+0x292>
 80028d8:	2807      	cmp	r0, #7
 80028da:	d06c      	beq.n	80029b6 <UART_SetConfig+0x296>
 80028dc:	2808      	cmp	r0, #8
 80028de:	d06c      	beq.n	80029ba <UART_SetConfig+0x29a>
 80028e0:	2809      	cmp	r0, #9
 80028e2:	d06c      	beq.n	80029be <UART_SetConfig+0x29e>
 80028e4:	280a      	cmp	r0, #10
 80028e6:	d06c      	beq.n	80029c2 <UART_SetConfig+0x2a2>
 80028e8:	4b45      	ldr	r3, [pc, #276]	; (8002a00 <UART_SetConfig+0x2e0>)
 80028ea:	f24f 4224 	movw	r2, #62500	; 0xf424
 80028ee:	280b      	cmp	r0, #11
 80028f0:	bf14      	ite	ne
 80028f2:	4618      	movne	r0, r3
 80028f4:	4610      	moveq	r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028f6:	6862      	ldr	r2, [r4, #4]
 80028f8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80028fc:	4283      	cmp	r3, r0
 80028fe:	f63f af68 	bhi.w	80027d2 <UART_SetConfig+0xb2>
 8002902:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002906:	f63f af64 	bhi.w	80027d2 <UART_SetConfig+0xb2>
        switch (clocksource)
 800290a:	2908      	cmp	r1, #8
 800290c:	f200 8170 	bhi.w	8002bf0 <UART_SetConfig+0x4d0>
 8002910:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002914:	016e00a4 	.word	0x016e00a4
 8002918:	016e00e0 	.word	0x016e00e0
 800291c:	016e011c 	.word	0x016e011c
 8002920:	016e016e 	.word	0x016e016e
 8002924:	0135      	.short	0x0135
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002926:	f7ff fbf5 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 800292a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800292c:	b1e3      	cbz	r3, 8002968 <UART_SetConfig+0x248>
 800292e:	2b01      	cmp	r3, #1
 8002930:	d01c      	beq.n	800296c <UART_SetConfig+0x24c>
 8002932:	2b02      	cmp	r3, #2
 8002934:	d01c      	beq.n	8002970 <UART_SetConfig+0x250>
 8002936:	2b03      	cmp	r3, #3
 8002938:	d01c      	beq.n	8002974 <UART_SetConfig+0x254>
 800293a:	2b04      	cmp	r3, #4
 800293c:	d01c      	beq.n	8002978 <UART_SetConfig+0x258>
 800293e:	2b05      	cmp	r3, #5
 8002940:	d01c      	beq.n	800297c <UART_SetConfig+0x25c>
 8002942:	2b06      	cmp	r3, #6
 8002944:	d01c      	beq.n	8002980 <UART_SetConfig+0x260>
 8002946:	2b07      	cmp	r3, #7
 8002948:	d01c      	beq.n	8002984 <UART_SetConfig+0x264>
 800294a:	2b08      	cmp	r3, #8
 800294c:	d01c      	beq.n	8002988 <UART_SetConfig+0x268>
 800294e:	2b09      	cmp	r3, #9
 8002950:	d01c      	beq.n	800298c <UART_SetConfig+0x26c>
 8002952:	2b0a      	cmp	r3, #10
 8002954:	d01c      	beq.n	8002990 <UART_SetConfig+0x270>
 8002956:	2b0b      	cmp	r3, #11
 8002958:	bf14      	ite	ne
 800295a:	2301      	movne	r3, #1
 800295c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002960:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002964:	2104      	movs	r1, #4
 8002966:	e78d      	b.n	8002884 <UART_SetConfig+0x164>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002968:	2301      	movs	r3, #1
 800296a:	e7f9      	b.n	8002960 <UART_SetConfig+0x240>
 800296c:	2302      	movs	r3, #2
 800296e:	e7f7      	b.n	8002960 <UART_SetConfig+0x240>
 8002970:	2304      	movs	r3, #4
 8002972:	e7f5      	b.n	8002960 <UART_SetConfig+0x240>
 8002974:	2306      	movs	r3, #6
 8002976:	e7f3      	b.n	8002960 <UART_SetConfig+0x240>
 8002978:	2308      	movs	r3, #8
 800297a:	e7f1      	b.n	8002960 <UART_SetConfig+0x240>
 800297c:	230a      	movs	r3, #10
 800297e:	e7ef      	b.n	8002960 <UART_SetConfig+0x240>
 8002980:	230c      	movs	r3, #12
 8002982:	e7ed      	b.n	8002960 <UART_SetConfig+0x240>
 8002984:	2310      	movs	r3, #16
 8002986:	e7eb      	b.n	8002960 <UART_SetConfig+0x240>
 8002988:	2320      	movs	r3, #32
 800298a:	e7e9      	b.n	8002960 <UART_SetConfig+0x240>
 800298c:	2340      	movs	r3, #64	; 0x40
 800298e:	e7e7      	b.n	8002960 <UART_SetConfig+0x240>
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	e7e5      	b.n	8002960 <UART_SetConfig+0x240>
 8002994:	2102      	movs	r1, #2
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002996:	481a      	ldr	r0, [pc, #104]	; (8002a00 <UART_SetConfig+0x2e0>)
 8002998:	e7ad      	b.n	80028f6 <UART_SetConfig+0x1d6>
 800299a:	2102      	movs	r1, #2
 800299c:	4819      	ldr	r0, [pc, #100]	; (8002a04 <UART_SetConfig+0x2e4>)
 800299e:	e7aa      	b.n	80028f6 <UART_SetConfig+0x1d6>
 80029a0:	4601      	mov	r1, r0
 80029a2:	4819      	ldr	r0, [pc, #100]	; (8002a08 <UART_SetConfig+0x2e8>)
 80029a4:	e7a7      	b.n	80028f6 <UART_SetConfig+0x1d6>
 80029a6:	4819      	ldr	r0, [pc, #100]	; (8002a0c <UART_SetConfig+0x2ec>)
 80029a8:	e7a5      	b.n	80028f6 <UART_SetConfig+0x1d6>
 80029aa:	4819      	ldr	r0, [pc, #100]	; (8002a10 <UART_SetConfig+0x2f0>)
 80029ac:	e7a3      	b.n	80028f6 <UART_SetConfig+0x1d6>
 80029ae:	4819      	ldr	r0, [pc, #100]	; (8002a14 <UART_SetConfig+0x2f4>)
 80029b0:	e7a1      	b.n	80028f6 <UART_SetConfig+0x1d6>
 80029b2:	4819      	ldr	r0, [pc, #100]	; (8002a18 <UART_SetConfig+0x2f8>)
 80029b4:	e79f      	b.n	80028f6 <UART_SetConfig+0x1d6>
 80029b6:	4819      	ldr	r0, [pc, #100]	; (8002a1c <UART_SetConfig+0x2fc>)
 80029b8:	e79d      	b.n	80028f6 <UART_SetConfig+0x1d6>
 80029ba:	4819      	ldr	r0, [pc, #100]	; (8002a20 <UART_SetConfig+0x300>)
 80029bc:	e79b      	b.n	80028f6 <UART_SetConfig+0x1d6>
 80029be:	4819      	ldr	r0, [pc, #100]	; (8002a24 <UART_SetConfig+0x304>)
 80029c0:	e799      	b.n	80028f6 <UART_SetConfig+0x1d6>
 80029c2:	4819      	ldr	r0, [pc, #100]	; (8002a28 <UART_SetConfig+0x308>)
 80029c4:	e797      	b.n	80028f6 <UART_SetConfig+0x1d6>
 80029c6:	2108      	movs	r1, #8
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80029c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029cc:	e793      	b.n	80028f6 <UART_SetConfig+0x1d6>
 80029ce:	2108      	movs	r1, #8
 80029d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80029d4:	e78f      	b.n	80028f6 <UART_SetConfig+0x1d6>
 80029d6:	2108      	movs	r1, #8
 80029d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029dc:	e78b      	b.n	80028f6 <UART_SetConfig+0x1d6>
 80029de:	2108      	movs	r1, #8
 80029e0:	f241 5055 	movw	r0, #5461	; 0x1555
 80029e4:	e787      	b.n	80028f6 <UART_SetConfig+0x1d6>
 80029e6:	2108      	movs	r1, #8
 80029e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80029ec:	e783      	b.n	80028f6 <UART_SetConfig+0x1d6>
 80029ee:	bf00      	nop
 80029f0:	cfff69f3 	.word	0xcfff69f3
 80029f4:	40008000 	.word	0x40008000
 80029f8:	40013800 	.word	0x40013800
 80029fc:	080064b0 	.word	0x080064b0
 8002a00:	00f42400 	.word	0x00f42400
 8002a04:	007a1200 	.word	0x007a1200
 8002a08:	003d0900 	.word	0x003d0900
 8002a0c:	0028b0aa 	.word	0x0028b0aa
 8002a10:	001e8480 	.word	0x001e8480
 8002a14:	00186a00 	.word	0x00186a00
 8002a18:	00145855 	.word	0x00145855
 8002a1c:	000f4240 	.word	0x000f4240
 8002a20:	0007a120 	.word	0x0007a120
 8002a24:	0003d090 	.word	0x0003d090
 8002a28:	0001e848 	.word	0x0001e848
 8002a2c:	2108      	movs	r1, #8
 8002a2e:	f640 40cc 	movw	r0, #3276	; 0xccc
 8002a32:	e760      	b.n	80028f6 <UART_SetConfig+0x1d6>
 8002a34:	2108      	movs	r1, #8
 8002a36:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8002a3a:	e75c      	b.n	80028f6 <UART_SetConfig+0x1d6>
 8002a3c:	2108      	movs	r1, #8
 8002a3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002a42:	e758      	b.n	80028f6 <UART_SetConfig+0x1d6>
 8002a44:	4601      	mov	r1, r0
 8002a46:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002a4a:	e754      	b.n	80028f6 <UART_SetConfig+0x1d6>
 8002a4c:	2108      	movs	r1, #8
 8002a4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a52:	e750      	b.n	80028f6 <UART_SetConfig+0x1d6>
 8002a54:	2108      	movs	r1, #8
 8002a56:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a5a:	e74c      	b.n	80028f6 <UART_SetConfig+0x1d6>
            pclk = HAL_RCC_GetPCLK1Freq();
 8002a5c:	f7ff fbb8 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 8089 	beq.w	8002b7a <UART_SetConfig+0x45a>
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d072      	beq.n	8002b52 <UART_SetConfig+0x432>
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d072      	beq.n	8002b56 <UART_SetConfig+0x436>
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d072      	beq.n	8002b5a <UART_SetConfig+0x43a>
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d072      	beq.n	8002b5e <UART_SetConfig+0x43e>
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	d072      	beq.n	8002b62 <UART_SetConfig+0x442>
 8002a7c:	2b06      	cmp	r3, #6
 8002a7e:	d072      	beq.n	8002b66 <UART_SetConfig+0x446>
 8002a80:	2b07      	cmp	r3, #7
 8002a82:	d072      	beq.n	8002b6a <UART_SetConfig+0x44a>
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d072      	beq.n	8002b6e <UART_SetConfig+0x44e>
 8002a88:	2b09      	cmp	r3, #9
 8002a8a:	d072      	beq.n	8002b72 <UART_SetConfig+0x452>
 8002a8c:	2b0a      	cmp	r3, #10
 8002a8e:	d072      	beq.n	8002b76 <UART_SetConfig+0x456>
 8002a90:	2b0b      	cmp	r3, #11
 8002a92:	d172      	bne.n	8002b7a <UART_SetConfig+0x45a>
 8002a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	f7fe f85c 	bl	8000b58 <__aeabi_uldivmod>
 8002aa0:	6865      	ldr	r5, [r4, #4]
 8002aa2:	020f      	lsls	r7, r1, #8
 8002aa4:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8002aa8:	0206      	lsls	r6, r0, #8
 8002aaa:	0868      	lsrs	r0, r5, #1
 8002aac:	eb16 0b00 	adds.w	fp, r6, r0
 8002ab0:	f147 0c00 	adc.w	ip, r7, #0
 8002ab4:	462a      	mov	r2, r5
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	4658      	mov	r0, fp
 8002aba:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002abc:	f7fe f84c 	bl	8000b58 <__aeabi_uldivmod>
            break;
 8002ac0:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ac2:	4ba5      	ldr	r3, [pc, #660]	; (8002d58 <UART_SetConfig+0x638>)
 8002ac4:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002ac8:	4299      	cmp	r1, r3
 8002aca:	f63f ae82 	bhi.w	80027d2 <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	60d8      	str	r0, [r3, #12]
 8002ad2:	e67f      	b.n	80027d4 <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d036      	beq.n	8002b48 <UART_SetConfig+0x428>
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d016      	beq.n	8002b0c <UART_SetConfig+0x3ec>
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d016      	beq.n	8002b10 <UART_SetConfig+0x3f0>
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d016      	beq.n	8002b14 <UART_SetConfig+0x3f4>
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d01e      	beq.n	8002b28 <UART_SetConfig+0x408>
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d01e      	beq.n	8002b2c <UART_SetConfig+0x40c>
 8002aee:	2b06      	cmp	r3, #6
 8002af0:	d01e      	beq.n	8002b30 <UART_SetConfig+0x410>
 8002af2:	2b07      	cmp	r3, #7
 8002af4:	d020      	beq.n	8002b38 <UART_SetConfig+0x418>
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d020      	beq.n	8002b3c <UART_SetConfig+0x41c>
 8002afa:	2b09      	cmp	r3, #9
 8002afc:	d020      	beq.n	8002b40 <UART_SetConfig+0x420>
 8002afe:	2b0a      	cmp	r3, #10
 8002b00:	d020      	beq.n	8002b44 <UART_SetConfig+0x424>
 8002b02:	2b0b      	cmp	r3, #11
 8002b04:	d120      	bne.n	8002b48 <UART_SetConfig+0x428>
 8002b06:	4e95      	ldr	r6, [pc, #596]	; (8002d5c <UART_SetConfig+0x63c>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b08:	2700      	movs	r7, #0
 8002b0a:	e006      	b.n	8002b1a <UART_SetConfig+0x3fa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b0c:	4e94      	ldr	r6, [pc, #592]	; (8002d60 <UART_SetConfig+0x640>)
 8002b0e:	e7fb      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002b10:	4e94      	ldr	r6, [pc, #592]	; (8002d64 <UART_SetConfig+0x644>)
 8002b12:	e7f9      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002b14:	a78c      	add	r7, pc, #560	; (adr r7, 8002d48 <UART_SetConfig+0x628>)
 8002b16:	e9d7 6700 	ldrd	r6, r7, [r7]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b1a:	0855      	lsrs	r5, r2, #1
 8002b1c:	1970      	adds	r0, r6, r5
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	f147 0100 	adc.w	r1, r7, #0
 8002b26:	e7c9      	b.n	8002abc <UART_SetConfig+0x39c>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b28:	4e8f      	ldr	r6, [pc, #572]	; (8002d68 <UART_SetConfig+0x648>)
 8002b2a:	e7ed      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002b2c:	4e8f      	ldr	r6, [pc, #572]	; (8002d6c <UART_SetConfig+0x64c>)
 8002b2e:	e7eb      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002b30:	a787      	add	r7, pc, #540	; (adr r7, 8002d50 <UART_SetConfig+0x630>)
 8002b32:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002b36:	e7f0      	b.n	8002b1a <UART_SetConfig+0x3fa>
 8002b38:	4e8d      	ldr	r6, [pc, #564]	; (8002d70 <UART_SetConfig+0x650>)
 8002b3a:	e7e5      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002b3c:	4e8d      	ldr	r6, [pc, #564]	; (8002d74 <UART_SetConfig+0x654>)
 8002b3e:	e7e3      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002b40:	4e8d      	ldr	r6, [pc, #564]	; (8002d78 <UART_SetConfig+0x658>)
 8002b42:	e7e1      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002b44:	4e8d      	ldr	r6, [pc, #564]	; (8002d7c <UART_SetConfig+0x65c>)
 8002b46:	e7df      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002b48:	4e8d      	ldr	r6, [pc, #564]	; (8002d80 <UART_SetConfig+0x660>)
 8002b4a:	e7dd      	b.n	8002b08 <UART_SetConfig+0x3e8>
            pclk = HAL_RCC_GetSysClockFreq();
 8002b4c:	f7ff fae2 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 8002b50:	e786      	b.n	8002a60 <UART_SetConfig+0x340>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b52:	2202      	movs	r2, #2
 8002b54:	e7a0      	b.n	8002a98 <UART_SetConfig+0x378>
 8002b56:	2204      	movs	r2, #4
 8002b58:	e79e      	b.n	8002a98 <UART_SetConfig+0x378>
 8002b5a:	2206      	movs	r2, #6
 8002b5c:	e79c      	b.n	8002a98 <UART_SetConfig+0x378>
 8002b5e:	2208      	movs	r2, #8
 8002b60:	e79a      	b.n	8002a98 <UART_SetConfig+0x378>
 8002b62:	220a      	movs	r2, #10
 8002b64:	e798      	b.n	8002a98 <UART_SetConfig+0x378>
 8002b66:	220c      	movs	r2, #12
 8002b68:	e796      	b.n	8002a98 <UART_SetConfig+0x378>
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	e794      	b.n	8002a98 <UART_SetConfig+0x378>
 8002b6e:	2220      	movs	r2, #32
 8002b70:	e792      	b.n	8002a98 <UART_SetConfig+0x378>
 8002b72:	2240      	movs	r2, #64	; 0x40
 8002b74:	e790      	b.n	8002a98 <UART_SetConfig+0x378>
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	e78e      	b.n	8002a98 <UART_SetConfig+0x378>
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	e78c      	b.n	8002a98 <UART_SetConfig+0x378>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b80:	b39b      	cbz	r3, 8002bea <UART_SetConfig+0x4ca>
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d016      	beq.n	8002bb4 <UART_SetConfig+0x494>
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d017      	beq.n	8002bba <UART_SetConfig+0x49a>
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d018      	beq.n	8002bc0 <UART_SetConfig+0x4a0>
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d018      	beq.n	8002bc4 <UART_SetConfig+0x4a4>
 8002b92:	2b05      	cmp	r3, #5
 8002b94:	d019      	beq.n	8002bca <UART_SetConfig+0x4aa>
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d019      	beq.n	8002bce <UART_SetConfig+0x4ae>
 8002b9a:	2b07      	cmp	r3, #7
 8002b9c:	d019      	beq.n	8002bd2 <UART_SetConfig+0x4b2>
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d01a      	beq.n	8002bd8 <UART_SetConfig+0x4b8>
 8002ba2:	2b09      	cmp	r3, #9
 8002ba4:	d01b      	beq.n	8002bde <UART_SetConfig+0x4be>
 8002ba6:	2b0a      	cmp	r3, #10
 8002ba8:	d01c      	beq.n	8002be4 <UART_SetConfig+0x4c4>
 8002baa:	2b0b      	cmp	r3, #11
 8002bac:	d11d      	bne.n	8002bea <UART_SetConfig+0x4ca>
 8002bae:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8002bb2:	e7a9      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002bb4:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 8002bb8:	e7a6      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002bba:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8002bbe:	e7a3      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002bc0:	4e70      	ldr	r6, [pc, #448]	; (8002d84 <UART_SetConfig+0x664>)
 8002bc2:	e7a1      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002bc4:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8002bc8:	e79e      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002bca:	4e6f      	ldr	r6, [pc, #444]	; (8002d88 <UART_SetConfig+0x668>)
 8002bcc:	e79c      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002bce:	4e6f      	ldr	r6, [pc, #444]	; (8002d8c <UART_SetConfig+0x66c>)
 8002bd0:	e79a      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002bd2:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8002bd6:	e797      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002bd8:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8002bdc:	e794      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002bde:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8002be2:	e791      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002be4:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8002be8:	e78e      	b.n	8002b08 <UART_SetConfig+0x3e8>
 8002bea:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 8002bee:	e78b      	b.n	8002b08 <UART_SetConfig+0x3e8>
            ret = HAL_ERROR;
 8002bf0:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	e765      	b.n	8002ac2 <UART_SetConfig+0x3a2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bf6:	f7ff fafd 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002bfc:	2900      	cmp	r1, #0
 8002bfe:	d06b      	beq.n	8002cd8 <UART_SetConfig+0x5b8>
 8002c00:	2901      	cmp	r1, #1
 8002c02:	d06b      	beq.n	8002cdc <UART_SetConfig+0x5bc>
 8002c04:	2902      	cmp	r1, #2
 8002c06:	d06b      	beq.n	8002ce0 <UART_SetConfig+0x5c0>
 8002c08:	2903      	cmp	r1, #3
 8002c0a:	d06b      	beq.n	8002ce4 <UART_SetConfig+0x5c4>
 8002c0c:	2904      	cmp	r1, #4
 8002c0e:	d06b      	beq.n	8002ce8 <UART_SetConfig+0x5c8>
 8002c10:	2905      	cmp	r1, #5
 8002c12:	d06b      	beq.n	8002cec <UART_SetConfig+0x5cc>
 8002c14:	2906      	cmp	r1, #6
 8002c16:	d06b      	beq.n	8002cf0 <UART_SetConfig+0x5d0>
 8002c18:	2907      	cmp	r1, #7
 8002c1a:	d06b      	beq.n	8002cf4 <UART_SetConfig+0x5d4>
 8002c1c:	2908      	cmp	r1, #8
 8002c1e:	d06b      	beq.n	8002cf8 <UART_SetConfig+0x5d8>
 8002c20:	2909      	cmp	r1, #9
 8002c22:	d06b      	beq.n	8002cfc <UART_SetConfig+0x5dc>
 8002c24:	290a      	cmp	r1, #10
 8002c26:	d06b      	beq.n	8002d00 <UART_SetConfig+0x5e0>
 8002c28:	290b      	cmp	r1, #11
 8002c2a:	bf14      	ite	ne
 8002c2c:	2201      	movne	r2, #1
 8002c2e:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8002c32:	6861      	ldr	r1, [r4, #4]
 8002c34:	fbb0 f2f2 	udiv	r2, r0, r2
 8002c38:	084b      	lsrs	r3, r1, #1
 8002c3a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c42:	e01f      	b.n	8002c84 <UART_SetConfig+0x564>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c44:	b378      	cbz	r0, 8002ca6 <UART_SetConfig+0x586>
 8002c46:	2801      	cmp	r0, #1
 8002c48:	d02f      	beq.n	8002caa <UART_SetConfig+0x58a>
 8002c4a:	2802      	cmp	r0, #2
 8002c4c:	d02f      	beq.n	8002cae <UART_SetConfig+0x58e>
 8002c4e:	2803      	cmp	r0, #3
 8002c50:	d02f      	beq.n	8002cb2 <UART_SetConfig+0x592>
 8002c52:	2804      	cmp	r0, #4
 8002c54:	d02f      	beq.n	8002cb6 <UART_SetConfig+0x596>
 8002c56:	2805      	cmp	r0, #5
 8002c58:	d02f      	beq.n	8002cba <UART_SetConfig+0x59a>
 8002c5a:	2806      	cmp	r0, #6
 8002c5c:	d02f      	beq.n	8002cbe <UART_SetConfig+0x59e>
 8002c5e:	2807      	cmp	r0, #7
 8002c60:	d02f      	beq.n	8002cc2 <UART_SetConfig+0x5a2>
 8002c62:	2808      	cmp	r0, #8
 8002c64:	d02f      	beq.n	8002cc6 <UART_SetConfig+0x5a6>
 8002c66:	2809      	cmp	r0, #9
 8002c68:	d02f      	beq.n	8002cca <UART_SetConfig+0x5aa>
 8002c6a:	280a      	cmp	r0, #10
 8002c6c:	d02f      	beq.n	8002cce <UART_SetConfig+0x5ae>
 8002c6e:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <UART_SetConfig+0x65c>)
 8002c70:	4a47      	ldr	r2, [pc, #284]	; (8002d90 <UART_SetConfig+0x670>)
 8002c72:	280b      	cmp	r0, #11
 8002c74:	bf14      	ite	ne
 8002c76:	4618      	movne	r0, r3
 8002c78:	4610      	moveq	r0, r2
 8002c7a:	6863      	ldr	r3, [r4, #4]
 8002c7c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002c80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c84:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c86:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c88:	f1a3 0010 	sub.w	r0, r3, #16
 8002c8c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002c90:	4288      	cmp	r0, r1
 8002c92:	f63f ad9e 	bhi.w	80027d2 <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c96:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002c9a:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c9c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	60c3      	str	r3, [r0, #12]
 8002ca4:	e596      	b.n	80027d4 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ca6:	4835      	ldr	r0, [pc, #212]	; (8002d7c <UART_SetConfig+0x65c>)
 8002ca8:	e7e7      	b.n	8002c7a <UART_SetConfig+0x55a>
 8002caa:	482c      	ldr	r0, [pc, #176]	; (8002d5c <UART_SetConfig+0x63c>)
 8002cac:	e7e5      	b.n	8002c7a <UART_SetConfig+0x55a>
 8002cae:	4839      	ldr	r0, [pc, #228]	; (8002d94 <UART_SetConfig+0x674>)
 8002cb0:	e7e3      	b.n	8002c7a <UART_SetConfig+0x55a>
 8002cb2:	4839      	ldr	r0, [pc, #228]	; (8002d98 <UART_SetConfig+0x678>)
 8002cb4:	e7e1      	b.n	8002c7a <UART_SetConfig+0x55a>
 8002cb6:	4839      	ldr	r0, [pc, #228]	; (8002d9c <UART_SetConfig+0x67c>)
 8002cb8:	e7df      	b.n	8002c7a <UART_SetConfig+0x55a>
 8002cba:	4839      	ldr	r0, [pc, #228]	; (8002da0 <UART_SetConfig+0x680>)
 8002cbc:	e7dd      	b.n	8002c7a <UART_SetConfig+0x55a>
 8002cbe:	4839      	ldr	r0, [pc, #228]	; (8002da4 <UART_SetConfig+0x684>)
 8002cc0:	e7db      	b.n	8002c7a <UART_SetConfig+0x55a>
 8002cc2:	4839      	ldr	r0, [pc, #228]	; (8002da8 <UART_SetConfig+0x688>)
 8002cc4:	e7d9      	b.n	8002c7a <UART_SetConfig+0x55a>
 8002cc6:	4839      	ldr	r0, [pc, #228]	; (8002dac <UART_SetConfig+0x68c>)
 8002cc8:	e7d7      	b.n	8002c7a <UART_SetConfig+0x55a>
 8002cca:	4839      	ldr	r0, [pc, #228]	; (8002db0 <UART_SetConfig+0x690>)
 8002ccc:	e7d5      	b.n	8002c7a <UART_SetConfig+0x55a>
 8002cce:	4839      	ldr	r0, [pc, #228]	; (8002db4 <UART_SetConfig+0x694>)
 8002cd0:	e7d3      	b.n	8002c7a <UART_SetConfig+0x55a>
        pclk = HAL_RCC_GetSysClockFreq();
 8002cd2:	f7ff fa1f 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 8002cd6:	e790      	b.n	8002bfa <UART_SetConfig+0x4da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cd8:	2201      	movs	r2, #1
 8002cda:	e7aa      	b.n	8002c32 <UART_SetConfig+0x512>
 8002cdc:	2202      	movs	r2, #2
 8002cde:	e7a8      	b.n	8002c32 <UART_SetConfig+0x512>
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	e7a6      	b.n	8002c32 <UART_SetConfig+0x512>
 8002ce4:	2206      	movs	r2, #6
 8002ce6:	e7a4      	b.n	8002c32 <UART_SetConfig+0x512>
 8002ce8:	2208      	movs	r2, #8
 8002cea:	e7a2      	b.n	8002c32 <UART_SetConfig+0x512>
 8002cec:	220a      	movs	r2, #10
 8002cee:	e7a0      	b.n	8002c32 <UART_SetConfig+0x512>
 8002cf0:	220c      	movs	r2, #12
 8002cf2:	e79e      	b.n	8002c32 <UART_SetConfig+0x512>
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	e79c      	b.n	8002c32 <UART_SetConfig+0x512>
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	e79a      	b.n	8002c32 <UART_SetConfig+0x512>
 8002cfc:	2240      	movs	r2, #64	; 0x40
 8002cfe:	e798      	b.n	8002c32 <UART_SetConfig+0x512>
 8002d00:	2280      	movs	r2, #128	; 0x80
 8002d02:	e796      	b.n	8002c32 <UART_SetConfig+0x512>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d04:	2800      	cmp	r0, #0
 8002d06:	d057      	beq.n	8002db8 <UART_SetConfig+0x698>
 8002d08:	2801      	cmp	r0, #1
 8002d0a:	d058      	beq.n	8002dbe <UART_SetConfig+0x69e>
 8002d0c:	2802      	cmp	r0, #2
 8002d0e:	d059      	beq.n	8002dc4 <UART_SetConfig+0x6a4>
 8002d10:	2803      	cmp	r0, #3
 8002d12:	d05a      	beq.n	8002dca <UART_SetConfig+0x6aa>
 8002d14:	2804      	cmp	r0, #4
 8002d16:	d05b      	beq.n	8002dd0 <UART_SetConfig+0x6b0>
 8002d18:	2805      	cmp	r0, #5
 8002d1a:	d05c      	beq.n	8002dd6 <UART_SetConfig+0x6b6>
 8002d1c:	2806      	cmp	r0, #6
 8002d1e:	d05d      	beq.n	8002ddc <UART_SetConfig+0x6bc>
 8002d20:	2807      	cmp	r0, #7
 8002d22:	d05e      	beq.n	8002de2 <UART_SetConfig+0x6c2>
 8002d24:	2808      	cmp	r0, #8
 8002d26:	d05f      	beq.n	8002de8 <UART_SetConfig+0x6c8>
 8002d28:	2809      	cmp	r0, #9
 8002d2a:	d060      	beq.n	8002dee <UART_SetConfig+0x6ce>
 8002d2c:	280a      	cmp	r0, #10
 8002d2e:	d061      	beq.n	8002df4 <UART_SetConfig+0x6d4>
 8002d30:	280b      	cmp	r0, #11
 8002d32:	bf14      	ite	ne
 8002d34:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8002d38:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002d3c:	6860      	ldr	r0, [r4, #4]
 8002d3e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8002d42:	fbb3 f3f0 	udiv	r3, r3, r0
 8002d46:	e79d      	b.n	8002c84 <UART_SetConfig+0x564>
 8002d48:	28b0aa00 	.word	0x28b0aa00
 8002d4c:	00000000 	.word	0x00000000
 8002d50:	14585500 	.word	0x14585500
 8002d54:	00000000 	.word	0x00000000
 8002d58:	000ffcff 	.word	0x000ffcff
 8002d5c:	00f42400 	.word	0x00f42400
 8002d60:	7a120000 	.word	0x7a120000
 8002d64:	3d090000 	.word	0x3d090000
 8002d68:	1e848000 	.word	0x1e848000
 8002d6c:	186a0000 	.word	0x186a0000
 8002d70:	0f424000 	.word	0x0f424000
 8002d74:	07a12000 	.word	0x07a12000
 8002d78:	03d09000 	.word	0x03d09000
 8002d7c:	01e84800 	.word	0x01e84800
 8002d80:	f4240000 	.word	0xf4240000
 8002d84:	00155500 	.word	0x00155500
 8002d88:	000ccc00 	.word	0x000ccc00
 8002d8c:	000aaa00 	.word	0x000aaa00
 8002d90:	0001e848 	.word	0x0001e848
 8002d94:	007a1200 	.word	0x007a1200
 8002d98:	00516154 	.word	0x00516154
 8002d9c:	003d0900 	.word	0x003d0900
 8002da0:	0030d400 	.word	0x0030d400
 8002da4:	0028b0aa 	.word	0x0028b0aa
 8002da8:	001e8480 	.word	0x001e8480
 8002dac:	000f4240 	.word	0x000f4240
 8002db0:	0007a120 	.word	0x0007a120
 8002db4:	0003d090 	.word	0x0003d090
 8002db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dbc:	e7be      	b.n	8002d3c <UART_SetConfig+0x61c>
 8002dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dc2:	e7bb      	b.n	8002d3c <UART_SetConfig+0x61c>
 8002dc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dc8:	e7b8      	b.n	8002d3c <UART_SetConfig+0x61c>
 8002dca:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8002dce:	e7b5      	b.n	8002d3c <UART_SetConfig+0x61c>
 8002dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dd4:	e7b2      	b.n	8002d3c <UART_SetConfig+0x61c>
 8002dd6:	f641 1398 	movw	r3, #6552	; 0x1998
 8002dda:	e7af      	b.n	8002d3c <UART_SetConfig+0x61c>
 8002ddc:	f241 5354 	movw	r3, #5460	; 0x1554
 8002de0:	e7ac      	b.n	8002d3c <UART_SetConfig+0x61c>
 8002de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de6:	e7a9      	b.n	8002d3c <UART_SetConfig+0x61c>
 8002de8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dec:	e7a6      	b.n	8002d3c <UART_SetConfig+0x61c>
 8002dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df2:	e7a3      	b.n	8002d3c <UART_SetConfig+0x61c>
 8002df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df8:	e7a0      	b.n	8002d3c <UART_SetConfig+0x61c>
        ret = HAL_ERROR;
 8002dfa:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e743      	b.n	8002c88 <UART_SetConfig+0x568>
    switch (clocksource)
 8002e00:	2b07      	cmp	r3, #7
 8002e02:	f200 80cd 	bhi.w	8002fa0 <UART_SetConfig+0x880>
 8002e06:	e8df f003 	tbb	[pc, r3]
 8002e0a:	2a04      	.short	0x2a04
 8002e0c:	cbcb6dcb 	.word	0xcbcb6dcb
 8002e10:	86cb      	.short	0x86cb
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e12:	f7ff f9ef 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d066      	beq.n	8002eea <UART_SetConfig+0x7ca>
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d066      	beq.n	8002eee <UART_SetConfig+0x7ce>
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d066      	beq.n	8002ef2 <UART_SetConfig+0x7d2>
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d066      	beq.n	8002ef6 <UART_SetConfig+0x7d6>
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d066      	beq.n	8002efa <UART_SetConfig+0x7da>
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d066      	beq.n	8002efe <UART_SetConfig+0x7de>
 8002e30:	2b06      	cmp	r3, #6
 8002e32:	d066      	beq.n	8002f02 <UART_SetConfig+0x7e2>
 8002e34:	2b07      	cmp	r3, #7
 8002e36:	d066      	beq.n	8002f06 <UART_SetConfig+0x7e6>
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d066      	beq.n	8002f0a <UART_SetConfig+0x7ea>
 8002e3c:	2b09      	cmp	r3, #9
 8002e3e:	d066      	beq.n	8002f0e <UART_SetConfig+0x7ee>
 8002e40:	2b0a      	cmp	r3, #10
 8002e42:	d066      	beq.n	8002f12 <UART_SetConfig+0x7f2>
 8002e44:	2b0b      	cmp	r3, #11
 8002e46:	bf14      	ite	ne
 8002e48:	2301      	movne	r3, #1
 8002e4a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002e4e:	6862      	ldr	r2, [r4, #4]
 8002e50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e54:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e5c:	e020      	b.n	8002ea0 <UART_SetConfig+0x780>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e5e:	b358      	cbz	r0, 8002eb8 <UART_SetConfig+0x798>
 8002e60:	2801      	cmp	r0, #1
 8002e62:	d02b      	beq.n	8002ebc <UART_SetConfig+0x79c>
 8002e64:	2802      	cmp	r0, #2
 8002e66:	d02b      	beq.n	8002ec0 <UART_SetConfig+0x7a0>
 8002e68:	2803      	cmp	r0, #3
 8002e6a:	d02b      	beq.n	8002ec4 <UART_SetConfig+0x7a4>
 8002e6c:	2804      	cmp	r0, #4
 8002e6e:	d02b      	beq.n	8002ec8 <UART_SetConfig+0x7a8>
 8002e70:	2805      	cmp	r0, #5
 8002e72:	d02b      	beq.n	8002ecc <UART_SetConfig+0x7ac>
 8002e74:	2806      	cmp	r0, #6
 8002e76:	d02b      	beq.n	8002ed0 <UART_SetConfig+0x7b0>
 8002e78:	2807      	cmp	r0, #7
 8002e7a:	d02b      	beq.n	8002ed4 <UART_SetConfig+0x7b4>
 8002e7c:	2808      	cmp	r0, #8
 8002e7e:	d02b      	beq.n	8002ed8 <UART_SetConfig+0x7b8>
 8002e80:	2809      	cmp	r0, #9
 8002e82:	d02b      	beq.n	8002edc <UART_SetConfig+0x7bc>
 8002e84:	280a      	cmp	r0, #10
 8002e86:	d02b      	beq.n	8002ee0 <UART_SetConfig+0x7c0>
 8002e88:	4b47      	ldr	r3, [pc, #284]	; (8002fa8 <UART_SetConfig+0x888>)
 8002e8a:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002e8e:	280b      	cmp	r0, #11
 8002e90:	bf14      	ite	ne
 8002e92:	4618      	movne	r0, r3
 8002e94:	4610      	moveq	r0, r2
 8002e96:	6863      	ldr	r3, [r4, #4]
 8002e98:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002e9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ea2:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ea4:	f1a3 0010 	sub.w	r0, r3, #16
 8002ea8:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002eac:	4288      	cmp	r0, r1
 8002eae:	f63f ac90 	bhi.w	80027d2 <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 8002eb2:	6821      	ldr	r1, [r4, #0]
 8002eb4:	60cb      	str	r3, [r1, #12]
 8002eb6:	e48d      	b.n	80027d4 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002eb8:	483b      	ldr	r0, [pc, #236]	; (8002fa8 <UART_SetConfig+0x888>)
 8002eba:	e7ec      	b.n	8002e96 <UART_SetConfig+0x776>
 8002ebc:	483b      	ldr	r0, [pc, #236]	; (8002fac <UART_SetConfig+0x88c>)
 8002ebe:	e7ea      	b.n	8002e96 <UART_SetConfig+0x776>
 8002ec0:	483b      	ldr	r0, [pc, #236]	; (8002fb0 <UART_SetConfig+0x890>)
 8002ec2:	e7e8      	b.n	8002e96 <UART_SetConfig+0x776>
 8002ec4:	483b      	ldr	r0, [pc, #236]	; (8002fb4 <UART_SetConfig+0x894>)
 8002ec6:	e7e6      	b.n	8002e96 <UART_SetConfig+0x776>
 8002ec8:	483b      	ldr	r0, [pc, #236]	; (8002fb8 <UART_SetConfig+0x898>)
 8002eca:	e7e4      	b.n	8002e96 <UART_SetConfig+0x776>
 8002ecc:	483b      	ldr	r0, [pc, #236]	; (8002fbc <UART_SetConfig+0x89c>)
 8002ece:	e7e2      	b.n	8002e96 <UART_SetConfig+0x776>
 8002ed0:	483b      	ldr	r0, [pc, #236]	; (8002fc0 <UART_SetConfig+0x8a0>)
 8002ed2:	e7e0      	b.n	8002e96 <UART_SetConfig+0x776>
 8002ed4:	483b      	ldr	r0, [pc, #236]	; (8002fc4 <UART_SetConfig+0x8a4>)
 8002ed6:	e7de      	b.n	8002e96 <UART_SetConfig+0x776>
 8002ed8:	483b      	ldr	r0, [pc, #236]	; (8002fc8 <UART_SetConfig+0x8a8>)
 8002eda:	e7dc      	b.n	8002e96 <UART_SetConfig+0x776>
 8002edc:	483b      	ldr	r0, [pc, #236]	; (8002fcc <UART_SetConfig+0x8ac>)
 8002ede:	e7da      	b.n	8002e96 <UART_SetConfig+0x776>
 8002ee0:	483b      	ldr	r0, [pc, #236]	; (8002fd0 <UART_SetConfig+0x8b0>)
 8002ee2:	e7d8      	b.n	8002e96 <UART_SetConfig+0x776>
        pclk = HAL_RCC_GetSysClockFreq();
 8002ee4:	f7ff f916 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 8002ee8:	e795      	b.n	8002e16 <UART_SetConfig+0x6f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002eea:	2301      	movs	r3, #1
 8002eec:	e7af      	b.n	8002e4e <UART_SetConfig+0x72e>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e7ad      	b.n	8002e4e <UART_SetConfig+0x72e>
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	e7ab      	b.n	8002e4e <UART_SetConfig+0x72e>
 8002ef6:	2306      	movs	r3, #6
 8002ef8:	e7a9      	b.n	8002e4e <UART_SetConfig+0x72e>
 8002efa:	2308      	movs	r3, #8
 8002efc:	e7a7      	b.n	8002e4e <UART_SetConfig+0x72e>
 8002efe:	230a      	movs	r3, #10
 8002f00:	e7a5      	b.n	8002e4e <UART_SetConfig+0x72e>
 8002f02:	230c      	movs	r3, #12
 8002f04:	e7a3      	b.n	8002e4e <UART_SetConfig+0x72e>
 8002f06:	2310      	movs	r3, #16
 8002f08:	e7a1      	b.n	8002e4e <UART_SetConfig+0x72e>
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	e79f      	b.n	8002e4e <UART_SetConfig+0x72e>
 8002f0e:	2340      	movs	r3, #64	; 0x40
 8002f10:	e79d      	b.n	8002e4e <UART_SetConfig+0x72e>
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	e79b      	b.n	8002e4e <UART_SetConfig+0x72e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f16:	b1f0      	cbz	r0, 8002f56 <UART_SetConfig+0x836>
 8002f18:	2801      	cmp	r0, #1
 8002f1a:	d01f      	beq.n	8002f5c <UART_SetConfig+0x83c>
 8002f1c:	2802      	cmp	r0, #2
 8002f1e:	d020      	beq.n	8002f62 <UART_SetConfig+0x842>
 8002f20:	2803      	cmp	r0, #3
 8002f22:	d021      	beq.n	8002f68 <UART_SetConfig+0x848>
 8002f24:	2804      	cmp	r0, #4
 8002f26:	d022      	beq.n	8002f6e <UART_SetConfig+0x84e>
 8002f28:	2805      	cmp	r0, #5
 8002f2a:	d023      	beq.n	8002f74 <UART_SetConfig+0x854>
 8002f2c:	2806      	cmp	r0, #6
 8002f2e:	d024      	beq.n	8002f7a <UART_SetConfig+0x85a>
 8002f30:	2807      	cmp	r0, #7
 8002f32:	d025      	beq.n	8002f80 <UART_SetConfig+0x860>
 8002f34:	2808      	cmp	r0, #8
 8002f36:	d026      	beq.n	8002f86 <UART_SetConfig+0x866>
 8002f38:	2809      	cmp	r0, #9
 8002f3a:	d027      	beq.n	8002f8c <UART_SetConfig+0x86c>
 8002f3c:	280a      	cmp	r0, #10
 8002f3e:	d028      	beq.n	8002f92 <UART_SetConfig+0x872>
 8002f40:	280b      	cmp	r0, #11
 8002f42:	bf14      	ite	ne
 8002f44:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8002f48:	2380      	moveq	r3, #128	; 0x80
 8002f4a:	6860      	ldr	r0, [r4, #4]
 8002f4c:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8002f50:	fbb3 f3f0 	udiv	r3, r3, r0
 8002f54:	e7a4      	b.n	8002ea0 <UART_SetConfig+0x780>
 8002f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f5a:	e7f6      	b.n	8002f4a <UART_SetConfig+0x82a>
 8002f5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f60:	e7f3      	b.n	8002f4a <UART_SetConfig+0x82a>
 8002f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f66:	e7f0      	b.n	8002f4a <UART_SetConfig+0x82a>
 8002f68:	f241 5355 	movw	r3, #5461	; 0x1555
 8002f6c:	e7ed      	b.n	8002f4a <UART_SetConfig+0x82a>
 8002f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f72:	e7ea      	b.n	8002f4a <UART_SetConfig+0x82a>
 8002f74:	f640 43cc 	movw	r3, #3276	; 0xccc
 8002f78:	e7e7      	b.n	8002f4a <UART_SetConfig+0x82a>
 8002f7a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8002f7e:	e7e4      	b.n	8002f4a <UART_SetConfig+0x82a>
 8002f80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f84:	e7e1      	b.n	8002f4a <UART_SetConfig+0x82a>
 8002f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f8a:	e7de      	b.n	8002f4a <UART_SetConfig+0x82a>
 8002f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f90:	e7db      	b.n	8002f4a <UART_SetConfig+0x82a>
 8002f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f96:	e7d8      	b.n	8002f4a <UART_SetConfig+0x82a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f98:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002f9c:	f43f af2d 	beq.w	8002dfa <UART_SetConfig+0x6da>
        ret = HAL_ERROR;
 8002fa0:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e77e      	b.n	8002ea4 <UART_SetConfig+0x784>
 8002fa6:	bf00      	nop
 8002fa8:	00f42400 	.word	0x00f42400
 8002fac:	007a1200 	.word	0x007a1200
 8002fb0:	003d0900 	.word	0x003d0900
 8002fb4:	0028b0aa 	.word	0x0028b0aa
 8002fb8:	001e8480 	.word	0x001e8480
 8002fbc:	00186a00 	.word	0x00186a00
 8002fc0:	00145855 	.word	0x00145855
 8002fc4:	000f4240 	.word	0x000f4240
 8002fc8:	0007a120 	.word	0x0007a120
 8002fcc:	0003d090 	.word	0x0003d090
 8002fd0:	0001e848 	.word	0x0001e848

08002fd4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fd4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002fd6:	07da      	lsls	r2, r3, #31
{
 8002fd8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fda:	d506      	bpl.n	8002fea <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fdc:	6801      	ldr	r1, [r0, #0]
 8002fde:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002fe0:	684a      	ldr	r2, [r1, #4]
 8002fe2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002fe6:	4322      	orrs	r2, r4
 8002fe8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fea:	079c      	lsls	r4, r3, #30
 8002fec:	d506      	bpl.n	8002ffc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fee:	6801      	ldr	r1, [r0, #0]
 8002ff0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002ff2:	684a      	ldr	r2, [r1, #4]
 8002ff4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ff8:	4322      	orrs	r2, r4
 8002ffa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ffc:	0759      	lsls	r1, r3, #29
 8002ffe:	d506      	bpl.n	800300e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003000:	6801      	ldr	r1, [r0, #0]
 8003002:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003004:	684a      	ldr	r2, [r1, #4]
 8003006:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800300a:	4322      	orrs	r2, r4
 800300c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800300e:	071a      	lsls	r2, r3, #28
 8003010:	d506      	bpl.n	8003020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003012:	6801      	ldr	r1, [r0, #0]
 8003014:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003016:	684a      	ldr	r2, [r1, #4]
 8003018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800301c:	4322      	orrs	r2, r4
 800301e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003020:	06dc      	lsls	r4, r3, #27
 8003022:	d506      	bpl.n	8003032 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003024:	6801      	ldr	r1, [r0, #0]
 8003026:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003028:	688a      	ldr	r2, [r1, #8]
 800302a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800302e:	4322      	orrs	r2, r4
 8003030:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003032:	0699      	lsls	r1, r3, #26
 8003034:	d506      	bpl.n	8003044 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003036:	6801      	ldr	r1, [r0, #0]
 8003038:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800303a:	688a      	ldr	r2, [r1, #8]
 800303c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003040:	4322      	orrs	r2, r4
 8003042:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003044:	065a      	lsls	r2, r3, #25
 8003046:	d50f      	bpl.n	8003068 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003048:	6801      	ldr	r1, [r0, #0]
 800304a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800304c:	684a      	ldr	r2, [r1, #4]
 800304e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003052:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003054:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003058:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800305a:	d105      	bne.n	8003068 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800305c:	684a      	ldr	r2, [r1, #4]
 800305e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003060:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003064:	4322      	orrs	r2, r4
 8003066:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	d506      	bpl.n	800307a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800306c:	6802      	ldr	r2, [r0, #0]
 800306e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003070:	6853      	ldr	r3, [r2, #4]
 8003072:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003076:	430b      	orrs	r3, r1
 8003078:	6053      	str	r3, [r2, #4]
  }
}
 800307a:	bd10      	pop	{r4, pc}

0800307c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800307c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003080:	9d06      	ldr	r5, [sp, #24]
 8003082:	4604      	mov	r4, r0
 8003084:	460f      	mov	r7, r1
 8003086:	4616      	mov	r6, r2
 8003088:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800308a:	6821      	ldr	r1, [r4, #0]
 800308c:	69ca      	ldr	r2, [r1, #28]
 800308e:	ea37 0302 	bics.w	r3, r7, r2
 8003092:	bf0c      	ite	eq
 8003094:	2201      	moveq	r2, #1
 8003096:	2200      	movne	r2, #0
 8003098:	42b2      	cmp	r2, r6
 800309a:	d001      	beq.n	80030a0 <UART_WaitOnFlagUntilTimeout+0x24>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800309c:	2000      	movs	r0, #0
 800309e:	e01a      	b.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80030a0:	1c68      	adds	r0, r5, #1
 80030a2:	d0f3      	beq.n	800308c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a4:	f7fd ff20 	bl	8000ee8 <HAL_GetTick>
 80030a8:	eba0 0008 	sub.w	r0, r0, r8
 80030ac:	42a8      	cmp	r0, r5
 80030ae:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80030b0:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b2:	d800      	bhi.n	80030b6 <UART_WaitOnFlagUntilTimeout+0x3a>
 80030b4:	b98d      	cbnz	r5, 80030da <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80030b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030ba:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030bc:	6883      	ldr	r3, [r0, #8]
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80030c4:	2320      	movs	r3, #32
 80030c6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80030ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80030ce:	2300      	movs	r3, #0
 80030d0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 80030d4:	2003      	movs	r0, #3
}
 80030d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030da:	075a      	lsls	r2, r3, #29
 80030dc:	d5d5      	bpl.n	800308a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030de:	69c3      	ldr	r3, [r0, #28]
 80030e0:	051b      	lsls	r3, r3, #20
 80030e2:	d5d2      	bpl.n	800308a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030e8:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80030ea:	6803      	ldr	r3, [r0, #0]
 80030ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030f0:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f2:	6883      	ldr	r3, [r0, #8]
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80030fa:	2320      	movs	r3, #32
 80030fc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003100:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003104:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003108:	e7e1      	b.n	80030ce <UART_WaitOnFlagUntilTimeout+0x52>

0800310a <UART_CheckIdleState>:
{
 800310a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800310c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310e:	2600      	movs	r6, #0
 8003110:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8003114:	f7fd fee8 	bl	8000ee8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800311e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003120:	d417      	bmi.n	8003152 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	075b      	lsls	r3, r3, #29
 8003128:	d50a      	bpl.n	8003140 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800312a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	2200      	movs	r2, #0
 8003132:	462b      	mov	r3, r5
 8003134:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003138:	4620      	mov	r0, r4
 800313a:	f7ff ff9f 	bl	800307c <UART_WaitOnFlagUntilTimeout>
 800313e:	b9a0      	cbnz	r0, 800316a <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8003140:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003142:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003144:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8003148:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800314c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8003150:	e00c      	b.n	800316c <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003152:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	4632      	mov	r2, r6
 800315a:	4603      	mov	r3, r0
 800315c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003160:	4620      	mov	r0, r4
 8003162:	f7ff ff8b 	bl	800307c <UART_WaitOnFlagUntilTimeout>
 8003166:	2800      	cmp	r0, #0
 8003168:	d0db      	beq.n	8003122 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800316a:	2003      	movs	r0, #3
}
 800316c:	b002      	add	sp, #8
 800316e:	bd70      	pop	{r4, r5, r6, pc}

08003170 <HAL_UART_Init>:
{
 8003170:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003172:	4604      	mov	r4, r0
 8003174:	b350      	cbz	r0, 80031cc <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003176:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800317a:	b91b      	cbnz	r3, 8003184 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800317c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8003180:	f000 fbec 	bl	800395c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003184:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003186:	2324      	movs	r3, #36	; 0x24
 8003188:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 800318c:	6813      	ldr	r3, [r2, #0]
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003194:	4620      	mov	r0, r4
 8003196:	f7ff fac3 	bl	8002720 <UART_SetConfig>
 800319a:	2801      	cmp	r0, #1
 800319c:	d016      	beq.n	80031cc <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800319e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031a0:	b113      	cbz	r3, 80031a8 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80031a2:	4620      	mov	r0, r4
 80031a4:	f7ff ff16 	bl	8002fd4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031b8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80031c0:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80031c2:	601a      	str	r2, [r3, #0]
}
 80031c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80031c8:	f7ff bf9f 	b.w	800310a <UART_CheckIdleState>
}
 80031cc:	2001      	movs	r0, #1
 80031ce:	bd10      	pop	{r4, pc}

080031d0 <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80031d0:	4a18      	ldr	r2, [pc, #96]	; (8003234 <UARTEx_SetNbDataToProcess+0x64>)
{
 80031d2:	b084      	sub	sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80031d4:	f240 1307 	movw	r3, #263	; 0x107
 80031d8:	e9cd 2300 	strd	r2, r3, [sp]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80031dc:	4b16      	ldr	r3, [pc, #88]	; (8003238 <UARTEx_SetNbDataToProcess+0x68>)
 80031de:	9302      	str	r3, [sp, #8]
 80031e0:	f1a3 2303 	sub.w	r3, r3, #50332416	; 0x3000300
 80031e4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80031e8:	9303      	str	r3, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80031ea:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80031ec:	b923      	cbnz	r3, 80031f8 <UARTEx_SetNbDataToProcess+0x28>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 80031ee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80031f2:	6683      	str	r3, [r0, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80031f4:	b004      	add	sp, #16
 80031f6:	4770      	bx	lr
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80031f8:	6802      	ldr	r2, [r0, #0]
 80031fa:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80031fc:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80031fe:	aa04      	add	r2, sp, #16
 8003200:	eb02 7151 	add.w	r1, r2, r1, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003204:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003208:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800320c:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8003210:	00d2      	lsls	r2, r2, #3
 8003212:	fb92 f2f1 	sdiv	r2, r2, r1
 8003216:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800321a:	aa04      	add	r2, sp, #16
 800321c:	4413      	add	r3, r2
 800321e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003222:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003226:	00d2      	lsls	r2, r2, #3
 8003228:	fb92 f3f3 	sdiv	r3, r2, r3
 800322c:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8003230:	e7e0      	b.n	80031f4 <UARTEx_SetNbDataToProcess+0x24>
 8003232:	bf00      	nop
 8003234:	03010101 	.word	0x03010101
 8003238:	04020408 	.word	0x04020408

0800323c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800323c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003240:	2b01      	cmp	r3, #1
 8003242:	d014      	beq.n	800326e <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003244:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003246:	2324      	movs	r3, #36	; 0x24
 8003248:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800324c:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800324e:	6813      	ldr	r3, [r2, #0]
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003256:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800325a:	2300      	movs	r3, #0
 800325c:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800325e:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003260:	2220      	movs	r2, #32
 8003262:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8003266:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800326a:	4618      	mov	r0, r3
 800326c:	4770      	bx	lr
  __HAL_LOCK(huart);
 800326e:	2002      	movs	r0, #2
}
 8003270:	4770      	bx	lr

08003272 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003272:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003274:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003278:	2b01      	cmp	r3, #1
{
 800327a:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800327c:	d01b      	beq.n	80032b6 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800327e:	2301      	movs	r3, #1
 8003280:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8003284:	2324      	movs	r3, #36	; 0x24
 8003286:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800328a:	6803      	ldr	r3, [r0, #0]
 800328c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	f022 0201 	bic.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800329c:	4311      	orrs	r1, r2
 800329e:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80032a0:	f7ff ff96 	bl	80031d0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032a4:	6803      	ldr	r3, [r0, #0]
 80032a6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80032a8:	2320      	movs	r3, #32
 80032aa:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80032ae:	2000      	movs	r0, #0
 80032b0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80032b4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80032b6:	2002      	movs	r0, #2
 80032b8:	e7fc      	b.n	80032b4 <HAL_UARTEx_SetTxFifoThreshold+0x42>

080032ba <HAL_UARTEx_SetRxFifoThreshold>:
{
 80032ba:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80032bc:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80032c0:	2b01      	cmp	r3, #1
{
 80032c2:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80032c4:	d01b      	beq.n	80032fe <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80032c6:	2301      	movs	r3, #1
 80032c8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80032cc:	2324      	movs	r3, #36	; 0x24
 80032ce:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032d2:	6803      	ldr	r3, [r0, #0]
 80032d4:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 80032e4:	4311      	orrs	r1, r2
 80032e6:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80032e8:	f7ff ff72 	bl	80031d0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032ec:	6803      	ldr	r3, [r0, #0]
 80032ee:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80032f0:	2320      	movs	r3, #32
 80032f2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80032f6:	2000      	movs	r0, #0
 80032f8:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80032fc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80032fe:	2002      	movs	r0, #2
 8003300:	e7fc      	b.n	80032fc <HAL_UARTEx_SetRxFifoThreshold+0x42>

08003302 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003302:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003306:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 800330a:	045b      	lsls	r3, r3, #17
 800330c:	0c5b      	lsrs	r3, r3, #17
 800330e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003312:	2000      	movs	r0, #0
 8003314:	4770      	bx	lr

08003316 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003316:	b084      	sub	sp, #16
 8003318:	b510      	push	{r4, lr}
 800331a:	ac03      	add	r4, sp, #12
 800331c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003320:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8003322:	2301      	movs	r3, #1
 8003324:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8003328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 800332c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8003330:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8003334:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8003338:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800333c:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8003340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003344:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8003348:	b004      	add	sp, #16
 800334a:	4610      	mov	r0, r2
 800334c:	4770      	bx	lr
	...

08003350 <adxlWriteI2C>:
#include "main.h"
#include <stdio.h>


void adxlWriteI2C(uint8_t reg, uint8_t value)
{
 8003350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t data[2];
	data[0] = reg;
	data[1] = value;
	HAL_I2C_Master_Transmit (&hi2c1, ADXL_ADDRESS_I2C, data, 2, 100);
 8003352:	2364      	movs	r3, #100	; 0x64
	data[0] = reg;
 8003354:	f88d 000c 	strb.w	r0, [sp, #12]
	data[1] = value;
 8003358:	f88d 100d 	strb.w	r1, [sp, #13]
	HAL_I2C_Master_Transmit (&hi2c1, ADXL_ADDRESS_I2C, data, 2, 100);
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	aa03      	add	r2, sp, #12
 8003360:	2302      	movs	r3, #2
 8003362:	21a6      	movs	r1, #166	; 0xa6
 8003364:	4802      	ldr	r0, [pc, #8]	; (8003370 <adxlWriteI2C+0x20>)
 8003366:	f7fe f867 	bl	8001438 <HAL_I2C_Master_Transmit>
}
 800336a:	b005      	add	sp, #20
 800336c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003370:	20000210 	.word	0x20000210

08003374 <adxlMultiByteReadI2C>:

void adxlMultiByteReadI2C(uint8_t reg, uint8_t *array)
{
 8003374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read (&hi2c1, ADXL_ADDRESS_I2C, reg, 1, (uint8_t *)array, 6, 100);
 8003376:	2306      	movs	r3, #6
 8003378:	2264      	movs	r2, #100	; 0x64
 800337a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800337e:	9100      	str	r1, [sp, #0]
 8003380:	4602      	mov	r2, r0
 8003382:	2301      	movs	r3, #1
 8003384:	21a6      	movs	r1, #166	; 0xa6
 8003386:	4803      	ldr	r0, [pc, #12]	; (8003394 <adxlMultiByteReadI2C+0x20>)
 8003388:	f7fe f8e8 	bl	800155c <HAL_I2C_Mem_Read>
}
 800338c:	b005      	add	sp, #20
 800338e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003392:	bf00      	nop
 8003394:	20000210 	.word	0x20000210

08003398 <adxlReadRegI2C>:

uint8_t adxlReadRegI2C(uint8_t reg)
{
 8003398:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t value = 0;
 800339a:	aa06      	add	r2, sp, #24
 800339c:	2300      	movs	r3, #0
 800339e:	f802 3d01 	strb.w	r3, [r2, #-1]!
	HAL_I2C_Mem_Read (&hi2c1, ADXL_ADDRESS_I2C, reg, 1, &value, 1, 100);
 80033a2:	2164      	movs	r1, #100	; 0x64
 80033a4:	2301      	movs	r3, #1
 80033a6:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80033aa:	9200      	str	r2, [sp, #0]
 80033ac:	21a6      	movs	r1, #166	; 0xa6
 80033ae:	4602      	mov	r2, r0
 80033b0:	4803      	ldr	r0, [pc, #12]	; (80033c0 <adxlReadRegI2C+0x28>)
 80033b2:	f7fe f8d3 	bl	800155c <HAL_I2C_Mem_Read>
	return value;
}
 80033b6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80033ba:	b007      	add	sp, #28
 80033bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80033c0:	20000210 	.word	0x20000210

080033c4 <adxlInitTestI2C>:

void adxlInitTestI2C(void)
{
 80033c4:	b508      	push	{r3, lr}

	printf("ADXL Configured For Real Time Measurements\n");
 80033c6:	4817      	ldr	r0, [pc, #92]	; (8003424 <adxlInitTestI2C+0x60>)
 80033c8:	f001 f99a 	bl	8004700 <puts>
	adxlWriteI2C(REG_POWER_CTRL, 0x00);  // Put in standby mode for init
 80033cc:	2100      	movs	r1, #0
 80033ce:	202d      	movs	r0, #45	; 0x2d
 80033d0:	f7ff ffbe 	bl	8003350 <adxlWriteI2C>
	adxlWriteI2C(REG_INT_ENABLE, 0x00);
 80033d4:	2100      	movs	r1, #0
 80033d6:	202e      	movs	r0, #46	; 0x2e
 80033d8:	f7ff ffba 	bl	8003350 <adxlWriteI2C>

	uint8_t regValue = 0;
	regValue = adxlReadRegI2C(REG_DEVID); // read the DEVID Register
 80033dc:	2000      	movs	r0, #0
 80033de:	f7ff ffdb 	bl	8003398 <adxlReadRegI2C>
	printf("Device ID:0x%x\n", regValue);
 80033e2:	4601      	mov	r1, r0
 80033e4:	4810      	ldr	r0, [pc, #64]	; (8003428 <adxlInitTestI2C+0x64>)
 80033e6:	f001 f917 	bl	8004618 <iprintf>

	adxlWriteI2C(REG_BW_RATE, BW_800HZ); //set Bandwidth to 800Hz
 80033ea:	210d      	movs	r1, #13
 80033ec:	202c      	movs	r0, #44	; 0x2c
 80033ee:	f7ff ffaf 	bl	8003350 <adxlWriteI2C>
	regValue = adxlReadRegI2C(REG_BW_RATE); // read the BandWidth Register
 80033f2:	202c      	movs	r0, #44	; 0x2c
 80033f4:	f7ff ffd0 	bl	8003398 <adxlReadRegI2C>
	printf("BandWidth Rate:0x%x\n", regValue);
 80033f8:	4601      	mov	r1, r0
 80033fa:	480c      	ldr	r0, [pc, #48]	; (800342c <adxlInitTestI2C+0x68>)
 80033fc:	f001 f90c 	bl	8004618 <iprintf>

	adxlWriteI2C(REG_POWER_CTRL, 0x00);  // reset all bits
 8003400:	2100      	movs	r1, #0
 8003402:	202d      	movs	r0, #45	; 0x2d
 8003404:	f7ff ffa4 	bl	8003350 <adxlWriteI2C>
	adxlWriteI2C(REG_POWER_CTRL, 0x08);  // power_cntl measure and wake up 8hz
 8003408:	2108      	movs	r1, #8
 800340a:	202d      	movs	r0, #45	; 0x2d
 800340c:	f7ff ffa0 	bl	8003350 <adxlWriteI2C>
	regValue = adxlReadRegI2C(REG_POWER_CTRL); // read the Power Control Register
 8003410:	202d      	movs	r0, #45	; 0x2d
 8003412:	f7ff ffc1 	bl	8003398 <adxlReadRegI2C>
	printf("Power Control:0x%x\n", regValue);


}
 8003416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printf("Power Control:0x%x\n", regValue);
 800341a:	4601      	mov	r1, r0
 800341c:	4804      	ldr	r0, [pc, #16]	; (8003430 <adxlInitTestI2C+0x6c>)
 800341e:	f001 b8fb 	b.w	8004618 <iprintf>
 8003422:	bf00      	nop
 8003424:	08006504 	.word	0x08006504
 8003428:	0800652f 	.word	0x0800652f
 800342c:	0800653f 	.word	0x0800653f
 8003430:	08006554 	.word	0x08006554

08003434 <adxlInitInterruptTest>:

void adxlInitInterruptTest(void)
{
 8003434:	b508      	push	{r3, lr}

	uint8_t regValue = 0;
	printf("ADXL Configured For Interrupts\n");
 8003436:	481b      	ldr	r0, [pc, #108]	; (80034a4 <adxlInitInterruptTest+0x70>)
 8003438:	f001 f962 	bl	8004700 <puts>

	adxlWriteI2C(REG_POWER_CTRL, 0x00);  // Put in standby mode for init
 800343c:	2100      	movs	r1, #0
 800343e:	202d      	movs	r0, #45	; 0x2d
 8003440:	f7ff ff86 	bl	8003350 <adxlWriteI2C>

	adxlWriteI2C(REG_BW_RATE, BW_800HZ);
 8003444:	210d      	movs	r1, #13
 8003446:	202c      	movs	r0, #44	; 0x2c
 8003448:	f7ff ff82 	bl	8003350 <adxlWriteI2C>
	regValue = adxlReadRegI2C(REG_BW_RATE);
 800344c:	202c      	movs	r0, #44	; 0x2c
 800344e:	f7ff ffa3 	bl	8003398 <adxlReadRegI2C>
	printf("BandWidth Rate:0x%x\n", regValue);
 8003452:	4601      	mov	r1, r0
 8003454:	4814      	ldr	r0, [pc, #80]	; (80034a8 <adxlInitInterruptTest+0x74>)
 8003456:	f001 f8df 	bl	8004618 <iprintf>

	adxlWriteI2C(REG_INT_ENABLE, 0x00); //Disable Interrupts Before Configuring
 800345a:	2100      	movs	r1, #0
 800345c:	202e      	movs	r0, #46	; 0x2e
 800345e:	f7ff ff77 	bl	8003350 <adxlWriteI2C>
	//adxlWriteI2C(REG_INT_MAP, 0x00); //Trigger Interrupt on INT1 when DATA_READY
	adxlWriteI2C(REG_INT_MAP, 0x10); //Trigger Interrupt on INT2 when DATA_READY
 8003462:	2110      	movs	r1, #16
 8003464:	202f      	movs	r0, #47	; 0x2f
 8003466:	f7ff ff73 	bl	8003350 <adxlWriteI2C>
	adxlWriteI2C(REG_INT_ENABLE, 0x10); //Enable Interrupt when DATA_READY and ACTIVITY occurs
 800346a:	2110      	movs	r1, #16
 800346c:	202e      	movs	r0, #46	; 0x2e
 800346e:	f7ff ff6f 	bl	8003350 <adxlWriteI2C>
	regValue = adxlReadRegI2C(REG_INT_ENABLE);
 8003472:	202e      	movs	r0, #46	; 0x2e
 8003474:	f7ff ff90 	bl	8003398 <adxlReadRegI2C>
	printf("Interrupt Enabled:0x%x\n", regValue);
 8003478:	4601      	mov	r1, r0
 800347a:	480c      	ldr	r0, [pc, #48]	; (80034ac <adxlInitInterruptTest+0x78>)
 800347c:	f001 f8cc 	bl	8004618 <iprintf>

	adxlWriteI2C(REG_THRESH_ACT, THRESHOLD_ACTIVITY); //Set Activity THRESHOLD level for activity
 8003480:	2106      	movs	r1, #6
 8003482:	2024      	movs	r0, #36	; 0x24
 8003484:	f7ff ff64 	bl	8003350 <adxlWriteI2C>
	regValue = adxlReadRegI2C(REG_THRESH_ACT);
 8003488:	2024      	movs	r0, #36	; 0x24
 800348a:	f7ff ff85 	bl	8003398 <adxlReadRegI2C>
	printf("Activity Threshold:0x%x\n", regValue);
 800348e:	4601      	mov	r1, r0
 8003490:	4807      	ldr	r0, [pc, #28]	; (80034b0 <adxlInitInterruptTest+0x7c>)
 8003492:	f001 f8c1 	bl	8004618 <iprintf>
	adxlWriteI2C(REG_POWER_CTRL, 0x08);  // power_cntl measure and wake up 8hz
 8003496:	2108      	movs	r1, #8
 8003498:	202d      	movs	r0, #45	; 0x2d

}
 800349a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	adxlWriteI2C(REG_POWER_CTRL, 0x08);  // power_cntl measure and wake up 8hz
 800349e:	f7ff bf57 	b.w	8003350 <adxlWriteI2C>
 80034a2:	bf00      	nop
 80034a4:	080064b4 	.word	0x080064b4
 80034a8:	0800653f 	.word	0x0800653f
 80034ac:	080064d3 	.word	0x080064d3
 80034b0:	080064eb 	.word	0x080064eb

080034b4 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80034b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80034b8:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 80034ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034bc:	4302      	orrs	r2, r0
 80034be:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80034c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c2:	4018      	ands	r0, r3
 80034c4:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80034c6:	9b01      	ldr	r3, [sp, #4]
}
 80034c8:	b002      	add	sp, #8
 80034ca:	4770      	bx	lr

080034cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	b0ae      	sub	sp, #184	; 0xb8
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034d0:	2230      	movs	r2, #48	; 0x30
 80034d2:	2100      	movs	r1, #0
 80034d4:	a80e      	add	r0, sp, #56	; 0x38
 80034d6:	f000 fc3b 	bl	8003d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034da:	221c      	movs	r2, #28
 80034dc:	2100      	movs	r1, #0
 80034de:	a801      	add	r0, sp, #4
 80034e0:	f000 fc36 	bl	8003d50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034e4:	2100      	movs	r1, #0
 80034e6:	2250      	movs	r2, #80	; 0x50
 80034e8:	a81a      	add	r0, sp, #104	; 0x68
 80034ea:	f000 fc31 	bl	8003d50 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80034ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034f2:	2501      	movs	r5, #1
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034fa:	60da      	str	r2, [r3, #12]
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	f022 0203 	bic.w	r2, r2, #3
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003508:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800350c:	f022 0218 	bic.w	r2, r2, #24
 8003510:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003514:	4a29      	ldr	r2, [pc, #164]	; (80035bc <SystemClock_Config+0xf0>)
 8003516:	6813      	ldr	r3, [r2, #0]
 8003518:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800351c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003524:	950f      	str	r5, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003526:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800352a:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800352c:	222f      	movs	r2, #47	; 0x2f
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800352e:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003534:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800353c:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003540:	2340      	movs	r3, #64	; 0x40
 8003542:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003544:	2360      	movs	r3, #96	; 0x60
 8003546:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003548:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800354a:	2305      	movs	r3, #5
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800354c:	2400      	movs	r4, #0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800354e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003550:	2602      	movs	r6, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003552:	f7fe fa2f 	bl	80019b4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003556:	4629      	mov	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003558:	236f      	movs	r3, #111	; 0x6f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800355a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800355c:	e9cd 3601 	strd	r3, r6, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003560:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003564:	e9cd 4405 	strd	r4, r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003568:	9407      	str	r4, [sp, #28]
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800356a:	f642 1507 	movw	r5, #10503	; 0x2907
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800356e:	f7fe fcdf 	bl	8001f30 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8003572:	2318      	movs	r3, #24
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8003574:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8003578:	e9cd 531a 	strd	r5, r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800357c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003580:	e9cd c31c 	strd	ip, r3, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8003584:	f04f 5e00 	mov.w	lr, #536870912	; 0x20000000
 8003588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800358c:	e9cd e31e 	strd	lr, r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003590:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003594:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003596:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800359a:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800359c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035a0:	932a      	str	r3, [sp, #168]	; 0xa8
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035a2:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80035a4:	2310      	movs	r3, #16
 80035a6:	932d      	str	r3, [sp, #180]	; 0xb4
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80035a8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80035ac:	962c      	str	r6, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035ae:	f7fe fe5e 	bl	800226e <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80035b2:	f7ff f81f 	bl	80025f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80035b6:	b02e      	add	sp, #184	; 0xb8
 80035b8:	bd70      	pop	{r4, r5, r6, pc}
 80035ba:	bf00      	nop
 80035bc:	58000400 	.word	0x58000400

080035c0 <adxlTestMeasure>:

/* USER CODE BEGIN 4 */


void adxlTestMeasure()
{
 80035c0:	b538      	push	{r3, r4, r5, lr}
	adxlMultiByteReadI2C(0x32, measurement);
 80035c2:	4c30      	ldr	r4, [pc, #192]	; (8003684 <adxlTestMeasure+0xc4>)
	x = ((measurement[0])| measurement[1]<<8);
	y = ((measurement[2])| measurement[3]<<8);
	z = ((measurement[4])| measurement[5]<<8);

	xg = x * scaleFactor;
	yg = y * scaleFactor;
 80035c4:	4d30      	ldr	r5, [pc, #192]	; (8003688 <adxlTestMeasure+0xc8>)
	adxlMultiByteReadI2C(0x32, measurement);
 80035c6:	4621      	mov	r1, r4
 80035c8:	2032      	movs	r0, #50	; 0x32
 80035ca:	f7ff fed3 	bl	8003374 <adxlMultiByteReadI2C>
	x = ((measurement[0])| measurement[1]<<8);
 80035ce:	7823      	ldrb	r3, [r4, #0]
 80035d0:	7862      	ldrb	r2, [r4, #1]
	y = ((measurement[2])| measurement[3]<<8);
 80035d2:	482e      	ldr	r0, [pc, #184]	; (800368c <adxlTestMeasure+0xcc>)
	xg = x * scaleFactor;
 80035d4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8003690 <adxlTestMeasure+0xd0>
	x = ((measurement[0])| measurement[1]<<8);
 80035d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80035dc:	4a2d      	ldr	r2, [pc, #180]	; (8003694 <adxlTestMeasure+0xd4>)
 80035de:	b21b      	sxth	r3, r3
 80035e0:	8013      	strh	r3, [r2, #0]
	y = ((measurement[2])| measurement[3]<<8);
 80035e2:	78a3      	ldrb	r3, [r4, #2]
 80035e4:	78e1      	ldrb	r1, [r4, #3]
 80035e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80035ea:	b21b      	sxth	r3, r3
 80035ec:	8003      	strh	r3, [r0, #0]
	z = ((measurement[4])| measurement[5]<<8);
 80035ee:	7923      	ldrb	r3, [r4, #4]
 80035f0:	7961      	ldrb	r1, [r4, #5]
	zg = z * scaleFactor;
 80035f2:	4c29      	ldr	r4, [pc, #164]	; (8003698 <adxlTestMeasure+0xd8>)
	z = ((measurement[4])| measurement[5]<<8);
 80035f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80035f8:	4928      	ldr	r1, [pc, #160]	; (800369c <adxlTestMeasure+0xdc>)
 80035fa:	b21b      	sxth	r3, r3
 80035fc:	800b      	strh	r3, [r1, #0]
	xg = x * scaleFactor;
 80035fe:	8813      	ldrh	r3, [r2, #0]
 8003600:	4a27      	ldr	r2, [pc, #156]	; (80036a0 <adxlTestMeasure+0xe0>)
 8003602:	b21b      	sxth	r3, r3
 8003604:	ee07 3a10 	vmov	s14, r3
 8003608:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800360c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003610:	ed82 7a00 	vstr	s14, [r2]
	yg = y * scaleFactor;
 8003614:	8803      	ldrh	r3, [r0, #0]
 8003616:	b21b      	sxth	r3, r3
 8003618:	ee07 3a10 	vmov	s14, r3
 800361c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003620:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003624:	ed85 7a00 	vstr	s14, [r5]
	zg = z * scaleFactor;
 8003628:	880b      	ldrh	r3, [r1, #0]
 800362a:	b21b      	sxth	r3, r3
 800362c:	ee07 3a90 	vmov	s15, r3
 8003630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003634:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003638:	edc4 7a00 	vstr	s15, [r4]

	printf("X:%f ", xg);
 800363c:	6810      	ldr	r0, [r2, #0]
 800363e:	f7fc ff5b 	bl	80004f8 <__aeabi_f2d>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4817      	ldr	r0, [pc, #92]	; (80036a4 <adxlTestMeasure+0xe4>)
 8003648:	f000 ffe6 	bl	8004618 <iprintf>
	printf("Y:%f ", yg);
 800364c:	6828      	ldr	r0, [r5, #0]
 800364e:	f7fc ff53 	bl	80004f8 <__aeabi_f2d>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4814      	ldr	r0, [pc, #80]	; (80036a8 <adxlTestMeasure+0xe8>)
 8003658:	f000 ffde 	bl	8004618 <iprintf>
	printf("Z:%f\n", zg);
 800365c:	6820      	ldr	r0, [r4, #0]
 800365e:	f7fc ff4b 	bl	80004f8 <__aeabi_f2d>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4811      	ldr	r0, [pc, #68]	; (80036ac <adxlTestMeasure+0xec>)
 8003668:	f000 ffd6 	bl	8004618 <iprintf>

	if(readModeFlag == 1)
 800366c:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <adxlTestMeasure+0xf0>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d105      	bne.n	8003680 <adxlTestMeasure+0xc0>
		HAL_Delay(500);
 8003674:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8003678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_Delay(500);
 800367c:	f7fd bc40 	b.w	8000f00 <HAL_Delay>
}
 8003680:	bd38      	pop	{r3, r4, r5, pc}
 8003682:	bf00      	nop
 8003684:	20000624 	.word	0x20000624
 8003688:	200003a8 	.word	0x200003a8
 800368c:	200003a4 	.word	0x200003a4
 8003690:	3d48b439 	.word	0x3d48b439
 8003694:	2000025c 	.word	0x2000025c
 8003698:	20000260 	.word	0x20000260
 800369c:	200002f2 	.word	0x200002f2
 80036a0:	20000620 	.word	0x20000620
 80036a4:	08006568 	.word	0x08006568
 80036a8:	0800656e 	.word	0x0800656e
 80036ac:	08006574 	.word	0x08006574
 80036b0:	200001fc 	.word	0x200001fc

080036b4 <main>:
{
 80036b4:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
  HAL_Init();
 80036b6:	f7fd fbf5 	bl	8000ea4 <HAL_Init>
  SystemClock_Config();
 80036ba:	f7ff ff07 	bl	80034cc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036be:	2214      	movs	r2, #20
 80036c0:	2100      	movs	r1, #0
 80036c2:	a801      	add	r0, sp, #4
 80036c4:	f000 fb44 	bl	8003d50 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036c8:	2004      	movs	r0, #4
 80036ca:	f7ff fef3 	bl	80034b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ce:	2002      	movs	r0, #2
 80036d0:	f7ff fef0 	bl	80034b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d4:	2001      	movs	r0, #1
 80036d6:	f7ff feed 	bl	80034b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036da:	2008      	movs	r0, #8
 80036dc:	f7ff feea 	bl	80034b4 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80036e0:	2200      	movs	r2, #0
 80036e2:	2123      	movs	r1, #35	; 0x23
 80036e4:	4862      	ldr	r0, [pc, #392]	; (8003870 <main+0x1bc>)
  hlpuart1.Instance = LPUART1;
 80036e6:	4d63      	ldr	r5, [pc, #396]	; (8003874 <main+0x1c0>)
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80036e8:	f7fd fd3a 	bl	8001160 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ec:	2702      	movs	r7, #2
 80036ee:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f6:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036f8:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fe:	e9cd 4403 	strd	r4, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003702:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003704:	f7fd fc7a 	bl	8000ffc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003708:	4b5b      	ldr	r3, [pc, #364]	; (8003878 <main+0x1c4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800370c:	f44f 7280 	mov.w	r2, #256	; 0x100
  HAL_GPIO_Init(EXT_INT_ADXL_GPIO_Port, &GPIO_InitStruct);
 8003710:	a901      	add	r1, sp, #4
 8003712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003716:	e9cd 2301 	strd	r2, r3, [sp, #4]
  HAL_GPIO_Init(EXT_INT_ADXL_GPIO_Port, &GPIO_InitStruct);
 800371a:	f7fd fc6f 	bl	8000ffc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin;
 800371e:	2310      	movs	r3, #16
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003720:	a901      	add	r1, sp, #4
 8003722:	4856      	ldr	r0, [pc, #344]	; (800387c <main+0x1c8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003726:	e9cd 3401 	strd	r3, r4, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800372a:	2601      	movs	r6, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800372c:	f7fd fc66 	bl	8000ffc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003730:	2323      	movs	r3, #35	; 0x23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003732:	a901      	add	r1, sp, #4
 8003734:	484e      	ldr	r0, [pc, #312]	; (8003870 <main+0x1bc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003736:	e9cd 3601 	strd	r3, r6, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373a:	e9cd 4403 	strd	r4, r4, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373e:	f7fd fc5d 	bl	8000ffc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003742:	4b4f      	ldr	r3, [pc, #316]	; (8003880 <main+0x1cc>)
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003744:	484f      	ldr	r0, [pc, #316]	; (8003884 <main+0x1d0>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003746:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003748:	2103      	movs	r1, #3
 800374a:	e9cd 1301 	strd	r1, r3, [sp, #4]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800374e:	a901      	add	r1, sp, #4
 8003750:	f7fd fc54 	bl	8000ffc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003754:	4622      	mov	r2, r4
 8003756:	4621      	mov	r1, r4
 8003758:	2006      	movs	r0, #6
 800375a:	f7fd fbf7 	bl	8000f4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800375e:	2006      	movs	r0, #6
 8003760:	f7fd fc28 	bl	8000fb4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003764:	4622      	mov	r2, r4
 8003766:	4621      	mov	r1, r4
 8003768:	2007      	movs	r0, #7
 800376a:	f7fd fbef 	bl	8000f4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800376e:	2007      	movs	r0, #7
 8003770:	f7fd fc20 	bl	8000fb4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003774:	4622      	mov	r2, r4
 8003776:	4621      	mov	r1, r4
 8003778:	2017      	movs	r0, #23
 800377a:	f7fd fbe7 	bl	8000f4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800377e:	2017      	movs	r0, #23
 8003780:	f7fd fc18 	bl	8000fb4 <HAL_NVIC_EnableIRQ>
  hlpuart1.Init.BaudRate = 9600;
 8003784:	4840      	ldr	r0, [pc, #256]	; (8003888 <main+0x1d4>)
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003786:	612c      	str	r4, [r5, #16]
  hlpuart1.Init.BaudRate = 9600;
 8003788:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800378c:	e9c5 0300 	strd	r0, r3, [r5]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003790:	f04f 080c 	mov.w	r8, #12
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003794:	4628      	mov	r0, r5
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003796:	e9c5 8405 	strd	r8, r4, [r5, #20]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800379a:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800379e:	e9c5 4408 	strd	r4, r4, [r5, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037a2:	62ac      	str	r4, [r5, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80037a4:	666c      	str	r4, [r5, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80037a6:	f7ff fce3 	bl	8003170 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037aa:	4621      	mov	r1, r4
 80037ac:	4628      	mov	r0, r5
 80037ae:	f7ff fd60 	bl	8003272 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037b2:	4621      	mov	r1, r4
 80037b4:	4628      	mov	r0, r5
 80037b6:	f7ff fd80 	bl	80032ba <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80037ba:	4628      	mov	r0, r5
  huart1.Instance = USART1;
 80037bc:	4d33      	ldr	r5, [pc, #204]	; (800388c <main+0x1d8>)
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80037be:	f7ff fd3d 	bl	800323c <HAL_UARTEx_DisableFifoMode>
  huart1.Init.BaudRate = 115200;
 80037c2:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 80038ac <main+0x1f8>
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037c6:	62ac      	str	r4, [r5, #40]	; 0x28
  huart1.Init.BaudRate = 115200;
 80037c8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037cc:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 80037ce:	e9c5 c300 	strd	ip, r3, [r5]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037d2:	e9c5 4804 	strd	r4, r8, [r5, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037d6:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037da:	e9c5 4406 	strd	r4, r4, [r5, #24]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80037de:	e9c5 4408 	strd	r4, r4, [r5, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037e2:	f7ff fcc5 	bl	8003170 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037e6:	4621      	mov	r1, r4
 80037e8:	4628      	mov	r0, r5
 80037ea:	f7ff fd42 	bl	8003272 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037ee:	4621      	mov	r1, r4
 80037f0:	4628      	mov	r0, r5
 80037f2:	f7ff fd62 	bl	80032ba <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80037f6:	4628      	mov	r0, r5
 80037f8:	f7ff fd20 	bl	800323c <HAL_UARTEx_DisableFifoMode>
  hrtc.Instance = RTC;
 80037fc:	4824      	ldr	r0, [pc, #144]	; (8003890 <main+0x1dc>)
 80037fe:	4b25      	ldr	r3, [pc, #148]	; (8003894 <main+0x1e0>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003800:	6104      	str	r4, [r0, #16]
  hrtc.Init.SynchPrediv = 255;
 8003802:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003806:	e9c0 3400 	strd	r3, r4, [r0]
  hrtc.Init.SynchPrediv = 255;
 800380a:	23ff      	movs	r3, #255	; 0xff
 800380c:	e9c0 e302 	strd	lr, r3, [r0, #8]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003810:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003814:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80038b0 <main+0x1fc>
  hi2c1.Instance = I2C1;
 8003818:	4d1f      	ldr	r5, [pc, #124]	; (8003898 <main+0x1e4>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800381a:	f7fe ff24 	bl	8002666 <HAL_RTC_Init>
  hpcd_USB_FS.Instance = USB;
 800381e:	481f      	ldr	r0, [pc, #124]	; (800389c <main+0x1e8>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003820:	2308      	movs	r3, #8
 8003822:	e9c0 8300 	strd	r8, r3, [r0]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003826:	e9c0 7404 	strd	r7, r4, [r0, #16]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800382a:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800382e:	6204      	str	r4, [r0, #32]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003830:	6087      	str	r7, [r0, #8]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003832:	f7fd ff98 	bl	8001766 <HAL_PCD_Init>
  hi2c1.Init.Timing = 0x00707CBB;
 8003836:	4a1a      	ldr	r2, [pc, #104]	; (80038a0 <main+0x1ec>)
 8003838:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <main+0x1f0>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800383a:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800383c:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x00707CBB;
 800383e:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003842:	e9c5 4602 	strd	r4, r6, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8003846:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800384a:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800384e:	f7fd fda1 	bl	8001394 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003852:	4621      	mov	r1, r4
 8003854:	4628      	mov	r0, r5
 8003856:	f7fd ff3b 	bl	80016d0 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800385a:	4621      	mov	r1, r4
 800385c:	4628      	mov	r0, r5
 800385e:	f7fd ff5d 	bl	800171c <HAL_I2CEx_ConfigDigitalFilter>
	  if(readModeFlag == 1)
 8003862:	4c11      	ldr	r4, [pc, #68]	; (80038a8 <main+0x1f4>)
 8003864:	7823      	ldrb	r3, [r4, #0]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d1fc      	bne.n	8003864 <main+0x1b0>
		  adxlTestMeasure();
 800386a:	f7ff fea9 	bl	80035c0 <adxlTestMeasure>
 800386e:	e7f9      	b.n	8003864 <main+0x1b0>
 8003870:	48000400 	.word	0x48000400
 8003874:	20000264 	.word	0x20000264
 8003878:	10110000 	.word	0x10110000
 800387c:	48000800 	.word	0x48000800
 8003880:	10210000 	.word	0x10210000
 8003884:	48000c00 	.word	0x48000c00
 8003888:	40008000 	.word	0x40008000
 800388c:	200002f4 	.word	0x200002f4
 8003890:	20000380 	.word	0x20000380
 8003894:	40002800 	.word	0x40002800
 8003898:	20000210 	.word	0x20000210
 800389c:	200003ac 	.word	0x200003ac
 80038a0:	40005400 	.word	0x40005400
 80038a4:	00707cbb 	.word	0x00707cbb
 80038a8:	200001fc 	.word	0x200001fc
 80038ac:	40013800 	.word	0x40013800
 80038b0:	40006800 	.word	0x40006800

080038b4 <runTestRoutine>:

void runTestRoutine(uint8_t flag)
{

	if (flag == 1)
 80038b4:	2801      	cmp	r0, #1
 80038b6:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <runTestRoutine+0x10>)
	{
		readModeFlag = 1;
	}
	else readModeFlag = 0;
 80038b8:	bf16      	itet	ne
 80038ba:	2200      	movne	r2, #0
		readModeFlag = 1;
 80038bc:	7018      	strbeq	r0, [r3, #0]
	else readModeFlag = 0;
 80038be:	701a      	strbne	r2, [r3, #0]
}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	200001fc 	.word	0x200001fc

080038c8 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 80038c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80038cc:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 80038ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038d0:	4302      	orrs	r2, r0
 80038d2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80038d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d6:	4018      	ands	r0, r3
 80038d8:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80038da:	9b01      	ldr	r3, [sp, #4]
}
 80038dc:	b002      	add	sp, #8
 80038de:	4770      	bx	lr

080038e0 <HAL_MspInit>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80038e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038e4:	b082      	sub	sp, #8
 80038e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038e8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80038ec:	651a      	str	r2, [r3, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80038ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80038f6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038f8:	b002      	add	sp, #8
 80038fa:	4770      	bx	lr

080038fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038fc:	b510      	push	{r4, lr}
 80038fe:	4604      	mov	r4, r0
 8003900:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003902:	2214      	movs	r2, #20
 8003904:	2100      	movs	r1, #0
 8003906:	a801      	add	r0, sp, #4
 8003908:	f000 fa22 	bl	8003d50 <memset>
  if(hi2c->Instance==I2C1)
 800390c:	6822      	ldr	r2, [r4, #0]
 800390e:	4b11      	ldr	r3, [pc, #68]	; (8003954 <HAL_I2C_MspInit+0x58>)
 8003910:	429a      	cmp	r2, r3
 8003912:	d11d      	bne.n	8003950 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003914:	2002      	movs	r0, #2
 8003916:	f7ff ffd7 	bl	80038c8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800391a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800391e:	2312      	movs	r3, #18
 8003920:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003924:	2101      	movs	r1, #1
 8003926:	2300      	movs	r3, #0
 8003928:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800392c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800392e:	eb0d 0103 	add.w	r1, sp, r3
 8003932:	4809      	ldr	r0, [pc, #36]	; (8003958 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003934:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003936:	f7fd fb61 	bl	8000ffc <HAL_GPIO_Init>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800393a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003940:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003944:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800394c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800394e:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003950:	b006      	add	sp, #24
 8003952:	bd10      	pop	{r4, pc}
 8003954:	40005400 	.word	0x40005400
 8003958:	48000400 	.word	0x48000400

0800395c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800395c:	b510      	push	{r4, lr}
 800395e:	4604      	mov	r4, r0
 8003960:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003962:	2214      	movs	r2, #20
 8003964:	2100      	movs	r1, #0
 8003966:	a803      	add	r0, sp, #12
 8003968:	f000 f9f2 	bl	8003d50 <memset>
  if(huart->Instance==LPUART1)
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	4a1e      	ldr	r2, [pc, #120]	; (80039e8 <HAL_UART_MspInit+0x8c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d11c      	bne.n	80039ae <HAL_UART_MspInit+0x52>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003978:	2004      	movs	r0, #4
 800397a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800398a:	9b01      	ldr	r3, [sp, #4]
 800398c:	f7ff ff9c 	bl	80038c8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration    
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003990:	2103      	movs	r1, #3
 8003992:	2302      	movs	r3, #2
 8003994:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399a:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800399e:	4813      	ldr	r0, [pc, #76]	; (80039ec <HAL_UART_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80039a0:	2308      	movs	r3, #8
 80039a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039a4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a6:	f7fd fb29 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80039aa:	b008      	add	sp, #32
 80039ac:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART1)
 80039ae:	4a10      	ldr	r2, [pc, #64]	; (80039f0 <HAL_UART_MspInit+0x94>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d1fa      	bne.n	80039aa <HAL_UART_MspInit+0x4e>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80039b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b8:	2002      	movs	r0, #2
 80039ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039c0:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80039c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c8:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80039ca:	9b02      	ldr	r3, [sp, #8]
 80039cc:	f7ff ff7c 	bl	80038c8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d0:	2302      	movs	r3, #2
 80039d2:	22c0      	movs	r2, #192	; 0xc0
 80039d4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d8:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039da:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039de:	2307      	movs	r3, #7
 80039e0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e2:	a903      	add	r1, sp, #12
 80039e4:	4803      	ldr	r0, [pc, #12]	; (80039f4 <HAL_UART_MspInit+0x98>)
 80039e6:	e7de      	b.n	80039a6 <HAL_UART_MspInit+0x4a>
 80039e8:	40008000 	.word	0x40008000
 80039ec:	48000800 	.word	0x48000800
 80039f0:	40013800 	.word	0x40013800
 80039f4:	48000400 	.word	0x48000400

080039f8 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80039f8:	6802      	ldr	r2, [r0, #0]
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <HAL_RTC_MspInit+0x1c>)
 80039fc:	429a      	cmp	r2, r3
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80039fe:	bf01      	itttt	eq
 8003a00:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
 8003a04:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 8003a08:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8003a0c:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40002800 	.word	0x40002800

08003a18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1e:	2214      	movs	r2, #20
 8003a20:	2100      	movs	r1, #0
 8003a22:	a801      	add	r0, sp, #4
 8003a24:	f000 f994 	bl	8003d50 <memset>
  if(hpcd->Instance==USB)
 8003a28:	6822      	ldr	r2, [r4, #0]
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_PCD_MspInit+0x58>)
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d11c      	bne.n	8003a6a <HAL_PCD_MspInit+0x52>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a30:	2001      	movs	r0, #1
 8003a32:	f7ff ff49 	bl	80038c8 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a42:	e9cd 3303 	strd	r3, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a46:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003a48:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003a4e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a50:	f7fd fad4 	bl	8000ffc <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a5a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003a5e:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a66:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003a68:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003a6a:	b006      	add	sp, #24
 8003a6c:	bd10      	pop	{r4, pc}
 8003a6e:	bf00      	nop
 8003a70:	40006800 	.word	0x40006800

08003a74 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a74:	4770      	bx	lr

08003a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a76:	e7fe      	b.n	8003a76 <HardFault_Handler>

08003a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a78:	e7fe      	b.n	8003a78 <MemManage_Handler>

08003a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a7a:	e7fe      	b.n	8003a7a <BusFault_Handler>

08003a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a7c:	e7fe      	b.n	8003a7c <UsageFault_Handler>

08003a7e <SVC_Handler>:
 8003a7e:	4770      	bx	lr

08003a80 <DebugMon_Handler>:
 8003a80:	4770      	bx	lr

08003a82 <PendSV_Handler>:
 8003a82:	4770      	bx	lr

08003a84 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a84:	f7fd ba24 	b.w	8000ed0 <HAL_IncTick>

08003a88 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003a88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//interrupt handler Code that Initiates for ADXL Real-Time Test Mode
	//Call specific adxl init routine and set flag for main while(1)
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); //turn on Green LED
 8003a8a:	4c0a      	ldr	r4, [pc, #40]	; (8003ab4 <EXTI0_IRQHandler+0x2c>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	4611      	mov	r1, r2
 8003a90:	4620      	mov	r0, r4
 8003a92:	f7fd fb65 	bl	8001160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off Red LED
 8003a96:	2200      	movs	r2, #0
 8003a98:	2102      	movs	r1, #2
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f7fd fb60 	bl	8001160 <HAL_GPIO_WritePin>

	runTestRoutine(1);
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	f7ff ff07 	bl	80038b4 <runTestRoutine>
	adxlInitTestI2C(); //Init routine for Real-Time Test Mode
 8003aa6:	f7ff fc8d 	bl	80033c4 <adxlInitTestI2C>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003aaa:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003ab0:	f7fd bb5c 	b.w	800116c <HAL_GPIO_EXTI_IRQHandler>
 8003ab4:	48000400 	.word	0x48000400

08003ab8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003ab8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off Green LED
 8003aba:	4c0a      	ldr	r4, [pc, #40]	; (8003ae4 <EXTI1_IRQHandler+0x2c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	4620      	mov	r0, r4
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	f7fd fb4d 	bl	8001160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); //turn on Red LED
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	2102      	movs	r1, #2
 8003aca:	4620      	mov	r0, r4
 8003acc:	f7fd fb48 	bl	8001160 <HAL_GPIO_WritePin>

	runTestRoutine(0);
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f7ff feef 	bl	80038b4 <runTestRoutine>
	adxlInitInterruptTest(); //Init routine for Interrupt Test Mode
 8003ad6:	f7ff fcad 	bl	8003434 <adxlInitInterruptTest>

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003ada:	2002      	movs	r0, #2
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003ae0:	f7fd bb44 	b.w	800116c <HAL_GPIO_EXTI_IRQHandler>
 8003ae4:	48000400 	.word	0x48000400

08003ae8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003ae8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	printf("ADXL Interrupt Occured!\n");
 8003aea:	4808      	ldr	r0, [pc, #32]	; (8003b0c <EXTI9_5_IRQHandler+0x24>)
 8003aec:	f000 fe08 	bl	8004700 <puts>
	adxlTestMeasure(); //Clears ADXL Interrupts automatically for Data_Ready;
 8003af0:	f7ff fd66 	bl	80035c0 <adxlTestMeasure>
	volatile uint8_t regValue1;
	regValue1 = adxlReadRegI2C(REG_INT_SOURCE);
 8003af4:	2030      	movs	r0, #48	; 0x30
 8003af6:	f7ff fc4f 	bl	8003398 <adxlReadRegI2C>
 8003afa:	f88d 0007 	strb.w	r0, [sp, #7]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003afe:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b02:	b003      	add	sp, #12
 8003b04:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003b08:	f7fd bb30 	b.w	800116c <HAL_GPIO_EXTI_IRQHandler>
 8003b0c:	0800657a 	.word	0x0800657a

08003b10 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8003b10:	b530      	push	{r4, r5, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b12:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003b14:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	db01      	blt.n	8003b20 <_write+0x10>
	{
	   ITM_SendChar( *ptr++ );
	}

	return len;
}
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	bd30      	pop	{r4, r5, pc}
 8003b20:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 8003b24:	07c5      	lsls	r5, r0, #31
 8003b26:	d507      	bpl.n	8003b38 <_write+0x28>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003b28:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003b2c:	07c0      	lsls	r0, r0, #31
 8003b2e:	d503      	bpl.n	8003b38 <_write+0x28>
	   ITM_SendChar( *ptr++ );
 8003b30:	5cc8      	ldrb	r0, [r1, r3]
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003b32:	6825      	ldr	r5, [r4, #0]
 8003b34:	b115      	cbz	r5, 8003b3c <_write+0x2c>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003b36:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b38:	3301      	adds	r3, #1
 8003b3a:	e7ed      	b.n	8003b18 <_write+0x8>
      __NOP();
 8003b3c:	bf00      	nop
 8003b3e:	e7f8      	b.n	8003b32 <_write+0x22>

08003b40 <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003b40:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <_sbrk+0x14>)
 8003b42:	6819      	ldr	r1, [r3, #0]
{
 8003b44:	4602      	mov	r2, r0
	if (heap_end == 0) {
 8003b46:	b909      	cbnz	r1, 8003b4c <_sbrk+0xc>
		heap_end = & end;
 8003b48:	4903      	ldr	r1, [pc, #12]	; (8003b58 <_sbrk+0x18>)
 8003b4a:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 8003b4c:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 8003b4e:	4402      	add	r2, r0
 8003b50:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 8003b52:	4770      	bx	lr
 8003b54:	20000200 	.word	0x20000200
 8003b58:	20000630 	.word	0x20000630

08003b5c <_close>:

int _close(int32_t file)
{
	errno = ENOSYS;
 8003b5c:	4b02      	ldr	r3, [pc, #8]	; (8003b68 <_close+0xc>)
 8003b5e:	2258      	movs	r2, #88	; 0x58
 8003b60:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003b62:	f04f 30ff 	mov.w	r0, #4294967295
 8003b66:	4770      	bx	lr
 8003b68:	2000062c 	.word	0x2000062c

08003b6c <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
	errno = ENOSYS;
 8003b6c:	4b02      	ldr	r3, [pc, #8]	; (8003b78 <_fstat+0xc>)
 8003b6e:	2258      	movs	r2, #88	; 0x58
 8003b70:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003b72:	f04f 30ff 	mov.w	r0, #4294967295
 8003b76:	4770      	bx	lr
 8003b78:	2000062c 	.word	0x2000062c

08003b7c <_isatty>:

int _isatty(int32_t file)
{
	errno = ENOSYS;
 8003b7c:	4b02      	ldr	r3, [pc, #8]	; (8003b88 <_isatty+0xc>)
 8003b7e:	2258      	movs	r2, #88	; 0x58
 8003b80:	601a      	str	r2, [r3, #0]
	return 0;
}
 8003b82:	2000      	movs	r0, #0
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	2000062c 	.word	0x2000062c

08003b8c <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
	errno = ENOSYS;
 8003b8c:	4b02      	ldr	r3, [pc, #8]	; (8003b98 <_lseek+0xc>)
 8003b8e:	2258      	movs	r2, #88	; 0x58
 8003b90:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003b92:	f04f 30ff 	mov.w	r0, #4294967295
 8003b96:	4770      	bx	lr
 8003b98:	2000062c 	.word	0x2000062c

08003b9c <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
	errno = ENOSYS;
 8003b9c:	4b02      	ldr	r3, [pc, #8]	; (8003ba8 <_read+0xc>)
 8003b9e:	2258      	movs	r2, #88	; 0x58
 8003ba0:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba6:	4770      	bx	lr
 8003ba8:	2000062c 	.word	0x2000062c

08003bac <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003bac:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <SystemInit+0x60>)
 8003bae:	2100      	movs	r1, #0
 8003bb0:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003bb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003bb6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003bc2:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	f042 0201 	orr.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8003bce:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003bd2:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8003bda:	4462      	add	r2, ip
 8003bdc:	4002      	ands	r2, r0
 8003bde:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003be0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003be4:	f022 0205 	bic.w	r2, r2, #5
 8003be8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003bec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003bf0:	f022 0201 	bic.w	r2, r2, #1
 8003bf4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003bf8:	4a05      	ldr	r2, [pc, #20]	; (8003c10 <SystemInit+0x64>)
 8003bfa:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003bfc:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c04:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003c06:	6199      	str	r1, [r3, #24]
}
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	e000ed00 	.word	0xe000ed00
 8003c10:	22041000 	.word	0x22041000

08003c14 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8003c14:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8003c18:	4a21      	ldr	r2, [pc, #132]	; (8003ca0 <SystemCoreClockUpdate+0x8c>)
 8003c1a:	6803      	ldr	r3, [r0, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c1c:	6881      	ldr	r1, [r0, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8003c1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c22:	f001 010c 	and.w	r1, r1, #12
 8003c26:	2908      	cmp	r1, #8
{
 8003c28:	b510      	push	{r4, lr}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8003c2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003c2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ca4 <SystemCoreClockUpdate+0x90>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c30:	d012      	beq.n	8003c58 <SystemCoreClockUpdate+0x44>
 8003c32:	290c      	cmp	r1, #12
 8003c34:	d012      	beq.n	8003c5c <SystemCoreClockUpdate+0x48>
 8003c36:	2904      	cmp	r1, #4
 8003c38:	d130      	bne.n	8003c9c <SystemCoreClockUpdate+0x88>
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8003c3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <SystemCoreClockUpdate+0x94>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 8003c3c:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8003c42:	481a      	ldr	r0, [pc, #104]	; (8003cac <SystemCoreClockUpdate+0x98>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c44:	6899      	ldr	r1, [r3, #8]
  SystemCoreClock = SystemCoreClock / tmp;
 8003c46:	6813      	ldr	r3, [r2, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c48:	f3c1 1103 	ubfx	r1, r1, #4, #4
  SystemCoreClock = SystemCoreClock / tmp;
 8003c4c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8003c50:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c54:	6013      	str	r3, [r2, #0]

}
 8003c56:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 8003c58:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <SystemCoreClockUpdate+0x9c>)
 8003c5a:	e7ef      	b.n	8003c3c <SystemCoreClockUpdate+0x28>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003c5c:	68c1      	ldr	r1, [r0, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003c5e:	68c3      	ldr	r3, [r0, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003c60:	f001 0103 	and.w	r1, r1, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003c64:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8003c68:	2902      	cmp	r1, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003c6a:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8003c6e:	d10e      	bne.n	8003c8e <SystemCoreClockUpdate+0x7a>
        pllvco = (HSI_VALUE / pllm);
 8003c70:	490d      	ldr	r1, [pc, #52]	; (8003ca8 <SystemCoreClockUpdate+0x94>)
        pllvco = (HSE_VALUE / pllm);
 8003c72:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c7a:	68c8      	ldr	r0, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003c7c:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c7e:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003c82:	0f49      	lsrs	r1, r1, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c84:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003c86:	3101      	adds	r1, #1
      SystemCoreClock = pllvco/pllr;
 8003c88:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c8c:	e7d6      	b.n	8003c3c <SystemCoreClockUpdate+0x28>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8003c8e:	2903      	cmp	r1, #3
 8003c90:	d101      	bne.n	8003c96 <SystemCoreClockUpdate+0x82>
        pllvco = (HSE_VALUE / pllm);
 8003c92:	4907      	ldr	r1, [pc, #28]	; (8003cb0 <SystemCoreClockUpdate+0x9c>)
 8003c94:	e7ed      	b.n	8003c72 <SystemCoreClockUpdate+0x5e>
        pllvco = (msirange / pllm);
 8003c96:	fbb4 f3f3 	udiv	r3, r4, r3
 8003c9a:	e7ec      	b.n	8003c76 <SystemCoreClockUpdate+0x62>
      SystemCoreClock = msirange;
 8003c9c:	6014      	str	r4, [r2, #0]
      break;
 8003c9e:	e7ce      	b.n	8003c3e <SystemCoreClockUpdate+0x2a>
 8003ca0:	080065f4 	.word	0x080065f4
 8003ca4:	2000000c 	.word	0x2000000c
 8003ca8:	00f42400 	.word	0x00f42400
 8003cac:	08006594 	.word	0x08006594
 8003cb0:	01e84800 	.word	0x01e84800

08003cb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003cb4:	480d      	ldr	r0, [pc, #52]	; (8003cec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003cb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cb8:	480d      	ldr	r0, [pc, #52]	; (8003cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cba:	490e      	ldr	r1, [pc, #56]	; (8003cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003cbc:	4a0e      	ldr	r2, [pc, #56]	; (8003cf8 <LoopForever+0xe>)
  movs r3, #0
 8003cbe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003cc0:	e002      	b.n	8003cc8 <LoopCopyDataInit>

08003cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cc6:	3304      	adds	r3, #4

08003cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ccc:	d3f9      	bcc.n	8003cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cce:	4a0b      	ldr	r2, [pc, #44]	; (8003cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cd0:	4c0b      	ldr	r4, [pc, #44]	; (8003d00 <LoopForever+0x16>)
  movs r3, #0
 8003cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cd4:	e001      	b.n	8003cda <LoopFillZerobss>

08003cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cd8:	3204      	adds	r2, #4

08003cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cdc:	d3fb      	bcc.n	8003cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003cde:	f7ff ff65 	bl	8003bac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003ce2:	f000 f811 	bl	8003d08 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003ce6:	f7ff fce5 	bl	80036b4 <main>

08003cea <LoopForever>:

LoopForever:
  b LoopForever
 8003cea:	e7fe      	b.n	8003cea <LoopForever>
  ldr   r0, =_estack
 8003cec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003cf0:	20000004 	.word	0x20000004
  ldr r1, =_edata
 8003cf4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003cf8:	08006908 	.word	0x08006908
  ldr r2, =_sbss
 8003cfc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003d00:	20000630 	.word	0x20000630

08003d04 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d04:	e7fe      	b.n	8003d04 <ADC1_IRQHandler>
	...

08003d08 <__libc_init_array>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	4e0d      	ldr	r6, [pc, #52]	; (8003d40 <__libc_init_array+0x38>)
 8003d0c:	4c0d      	ldr	r4, [pc, #52]	; (8003d44 <__libc_init_array+0x3c>)
 8003d0e:	1ba4      	subs	r4, r4, r6
 8003d10:	10a4      	asrs	r4, r4, #2
 8003d12:	2500      	movs	r5, #0
 8003d14:	42a5      	cmp	r5, r4
 8003d16:	d109      	bne.n	8003d2c <__libc_init_array+0x24>
 8003d18:	4e0b      	ldr	r6, [pc, #44]	; (8003d48 <__libc_init_array+0x40>)
 8003d1a:	4c0c      	ldr	r4, [pc, #48]	; (8003d4c <__libc_init_array+0x44>)
 8003d1c:	f002 fbaa 	bl	8006474 <_init>
 8003d20:	1ba4      	subs	r4, r4, r6
 8003d22:	10a4      	asrs	r4, r4, #2
 8003d24:	2500      	movs	r5, #0
 8003d26:	42a5      	cmp	r5, r4
 8003d28:	d105      	bne.n	8003d36 <__libc_init_array+0x2e>
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d30:	4798      	blx	r3
 8003d32:	3501      	adds	r5, #1
 8003d34:	e7ee      	b.n	8003d14 <__libc_init_array+0xc>
 8003d36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d3a:	4798      	blx	r3
 8003d3c:	3501      	adds	r5, #1
 8003d3e:	e7f2      	b.n	8003d26 <__libc_init_array+0x1e>
 8003d40:	08006900 	.word	0x08006900
 8003d44:	08006900 	.word	0x08006900
 8003d48:	08006900 	.word	0x08006900
 8003d4c:	08006904 	.word	0x08006904

08003d50 <memset>:
 8003d50:	4402      	add	r2, r0
 8003d52:	4603      	mov	r3, r0
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d100      	bne.n	8003d5a <memset+0xa>
 8003d58:	4770      	bx	lr
 8003d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d5e:	e7f9      	b.n	8003d54 <memset+0x4>

08003d60 <__cvt>:
 8003d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d64:	ec55 4b10 	vmov	r4, r5, d0
 8003d68:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003d6a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003d6e:	2d00      	cmp	r5, #0
 8003d70:	460e      	mov	r6, r1
 8003d72:	4691      	mov	r9, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	bfb8      	it	lt
 8003d78:	4622      	movlt	r2, r4
 8003d7a:	462b      	mov	r3, r5
 8003d7c:	f027 0720 	bic.w	r7, r7, #32
 8003d80:	bfbb      	ittet	lt
 8003d82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003d86:	461d      	movlt	r5, r3
 8003d88:	2300      	movge	r3, #0
 8003d8a:	232d      	movlt	r3, #45	; 0x2d
 8003d8c:	bfb8      	it	lt
 8003d8e:	4614      	movlt	r4, r2
 8003d90:	2f46      	cmp	r7, #70	; 0x46
 8003d92:	700b      	strb	r3, [r1, #0]
 8003d94:	d004      	beq.n	8003da0 <__cvt+0x40>
 8003d96:	2f45      	cmp	r7, #69	; 0x45
 8003d98:	d100      	bne.n	8003d9c <__cvt+0x3c>
 8003d9a:	3601      	adds	r6, #1
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	e000      	b.n	8003da2 <__cvt+0x42>
 8003da0:	2103      	movs	r1, #3
 8003da2:	ab03      	add	r3, sp, #12
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	ab02      	add	r3, sp, #8
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	4632      	mov	r2, r6
 8003dac:	4653      	mov	r3, sl
 8003dae:	ec45 4b10 	vmov	d0, r4, r5
 8003db2:	f000 fdf9 	bl	80049a8 <_dtoa_r>
 8003db6:	2f47      	cmp	r7, #71	; 0x47
 8003db8:	4680      	mov	r8, r0
 8003dba:	d102      	bne.n	8003dc2 <__cvt+0x62>
 8003dbc:	f019 0f01 	tst.w	r9, #1
 8003dc0:	d026      	beq.n	8003e10 <__cvt+0xb0>
 8003dc2:	2f46      	cmp	r7, #70	; 0x46
 8003dc4:	eb08 0906 	add.w	r9, r8, r6
 8003dc8:	d111      	bne.n	8003dee <__cvt+0x8e>
 8003dca:	f898 3000 	ldrb.w	r3, [r8]
 8003dce:	2b30      	cmp	r3, #48	; 0x30
 8003dd0:	d10a      	bne.n	8003de8 <__cvt+0x88>
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	4629      	mov	r1, r5
 8003dda:	f7fc fe4d 	bl	8000a78 <__aeabi_dcmpeq>
 8003dde:	b918      	cbnz	r0, 8003de8 <__cvt+0x88>
 8003de0:	f1c6 0601 	rsb	r6, r6, #1
 8003de4:	f8ca 6000 	str.w	r6, [sl]
 8003de8:	f8da 3000 	ldr.w	r3, [sl]
 8003dec:	4499      	add	r9, r3
 8003dee:	2200      	movs	r2, #0
 8003df0:	2300      	movs	r3, #0
 8003df2:	4620      	mov	r0, r4
 8003df4:	4629      	mov	r1, r5
 8003df6:	f7fc fe3f 	bl	8000a78 <__aeabi_dcmpeq>
 8003dfa:	b938      	cbnz	r0, 8003e0c <__cvt+0xac>
 8003dfc:	2230      	movs	r2, #48	; 0x30
 8003dfe:	9b03      	ldr	r3, [sp, #12]
 8003e00:	454b      	cmp	r3, r9
 8003e02:	d205      	bcs.n	8003e10 <__cvt+0xb0>
 8003e04:	1c59      	adds	r1, r3, #1
 8003e06:	9103      	str	r1, [sp, #12]
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	e7f8      	b.n	8003dfe <__cvt+0x9e>
 8003e0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e10:	9b03      	ldr	r3, [sp, #12]
 8003e12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e14:	eba3 0308 	sub.w	r3, r3, r8
 8003e18:	4640      	mov	r0, r8
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	b004      	add	sp, #16
 8003e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003e22 <__exponent>:
 8003e22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e24:	2900      	cmp	r1, #0
 8003e26:	4604      	mov	r4, r0
 8003e28:	bfba      	itte	lt
 8003e2a:	4249      	neglt	r1, r1
 8003e2c:	232d      	movlt	r3, #45	; 0x2d
 8003e2e:	232b      	movge	r3, #43	; 0x2b
 8003e30:	2909      	cmp	r1, #9
 8003e32:	f804 2b02 	strb.w	r2, [r4], #2
 8003e36:	7043      	strb	r3, [r0, #1]
 8003e38:	dd20      	ble.n	8003e7c <__exponent+0x5a>
 8003e3a:	f10d 0307 	add.w	r3, sp, #7
 8003e3e:	461f      	mov	r7, r3
 8003e40:	260a      	movs	r6, #10
 8003e42:	fb91 f5f6 	sdiv	r5, r1, r6
 8003e46:	fb06 1115 	mls	r1, r6, r5, r1
 8003e4a:	3130      	adds	r1, #48	; 0x30
 8003e4c:	2d09      	cmp	r5, #9
 8003e4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003e52:	f103 32ff 	add.w	r2, r3, #4294967295
 8003e56:	4629      	mov	r1, r5
 8003e58:	dc09      	bgt.n	8003e6e <__exponent+0x4c>
 8003e5a:	3130      	adds	r1, #48	; 0x30
 8003e5c:	3b02      	subs	r3, #2
 8003e5e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003e62:	42bb      	cmp	r3, r7
 8003e64:	4622      	mov	r2, r4
 8003e66:	d304      	bcc.n	8003e72 <__exponent+0x50>
 8003e68:	1a10      	subs	r0, r2, r0
 8003e6a:	b003      	add	sp, #12
 8003e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e6e:	4613      	mov	r3, r2
 8003e70:	e7e7      	b.n	8003e42 <__exponent+0x20>
 8003e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e76:	f804 2b01 	strb.w	r2, [r4], #1
 8003e7a:	e7f2      	b.n	8003e62 <__exponent+0x40>
 8003e7c:	2330      	movs	r3, #48	; 0x30
 8003e7e:	4419      	add	r1, r3
 8003e80:	7083      	strb	r3, [r0, #2]
 8003e82:	1d02      	adds	r2, r0, #4
 8003e84:	70c1      	strb	r1, [r0, #3]
 8003e86:	e7ef      	b.n	8003e68 <__exponent+0x46>

08003e88 <_printf_float>:
 8003e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8c:	b08d      	sub	sp, #52	; 0x34
 8003e8e:	460c      	mov	r4, r1
 8003e90:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003e94:	4616      	mov	r6, r2
 8003e96:	461f      	mov	r7, r3
 8003e98:	4605      	mov	r5, r0
 8003e9a:	f001 fcb7 	bl	800580c <_localeconv_r>
 8003e9e:	6803      	ldr	r3, [r0, #0]
 8003ea0:	9304      	str	r3, [sp, #16]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc f96c 	bl	8000180 <strlen>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8003eac:	f8d8 3000 	ldr.w	r3, [r8]
 8003eb0:	9005      	str	r0, [sp, #20]
 8003eb2:	3307      	adds	r3, #7
 8003eb4:	f023 0307 	bic.w	r3, r3, #7
 8003eb8:	f103 0208 	add.w	r2, r3, #8
 8003ebc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003ec0:	f8d4 b000 	ldr.w	fp, [r4]
 8003ec4:	f8c8 2000 	str.w	r2, [r8]
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ed0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003ed4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ed8:	9307      	str	r3, [sp, #28]
 8003eda:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ede:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee2:	4ba7      	ldr	r3, [pc, #668]	; (8004180 <_printf_float+0x2f8>)
 8003ee4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ee8:	f7fc fdf8 	bl	8000adc <__aeabi_dcmpun>
 8003eec:	bb70      	cbnz	r0, 8003f4c <_printf_float+0xc4>
 8003eee:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef2:	4ba3      	ldr	r3, [pc, #652]	; (8004180 <_printf_float+0x2f8>)
 8003ef4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ef8:	f7fc fdd2 	bl	8000aa0 <__aeabi_dcmple>
 8003efc:	bb30      	cbnz	r0, 8003f4c <_printf_float+0xc4>
 8003efe:	2200      	movs	r2, #0
 8003f00:	2300      	movs	r3, #0
 8003f02:	4640      	mov	r0, r8
 8003f04:	4649      	mov	r1, r9
 8003f06:	f7fc fdc1 	bl	8000a8c <__aeabi_dcmplt>
 8003f0a:	b110      	cbz	r0, 8003f12 <_printf_float+0x8a>
 8003f0c:	232d      	movs	r3, #45	; 0x2d
 8003f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f12:	4a9c      	ldr	r2, [pc, #624]	; (8004184 <_printf_float+0x2fc>)
 8003f14:	4b9c      	ldr	r3, [pc, #624]	; (8004188 <_printf_float+0x300>)
 8003f16:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003f1a:	bf8c      	ite	hi
 8003f1c:	4690      	movhi	r8, r2
 8003f1e:	4698      	movls	r8, r3
 8003f20:	2303      	movs	r3, #3
 8003f22:	f02b 0204 	bic.w	r2, fp, #4
 8003f26:	6123      	str	r3, [r4, #16]
 8003f28:	6022      	str	r2, [r4, #0]
 8003f2a:	f04f 0900 	mov.w	r9, #0
 8003f2e:	9700      	str	r7, [sp, #0]
 8003f30:	4633      	mov	r3, r6
 8003f32:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f34:	4621      	mov	r1, r4
 8003f36:	4628      	mov	r0, r5
 8003f38:	f000 f9e6 	bl	8004308 <_printf_common>
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	f040 808d 	bne.w	800405c <_printf_float+0x1d4>
 8003f42:	f04f 30ff 	mov.w	r0, #4294967295
 8003f46:	b00d      	add	sp, #52	; 0x34
 8003f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	464b      	mov	r3, r9
 8003f50:	4640      	mov	r0, r8
 8003f52:	4649      	mov	r1, r9
 8003f54:	f7fc fdc2 	bl	8000adc <__aeabi_dcmpun>
 8003f58:	b110      	cbz	r0, 8003f60 <_printf_float+0xd8>
 8003f5a:	4a8c      	ldr	r2, [pc, #560]	; (800418c <_printf_float+0x304>)
 8003f5c:	4b8c      	ldr	r3, [pc, #560]	; (8004190 <_printf_float+0x308>)
 8003f5e:	e7da      	b.n	8003f16 <_printf_float+0x8e>
 8003f60:	6861      	ldr	r1, [r4, #4]
 8003f62:	1c4b      	adds	r3, r1, #1
 8003f64:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003f68:	a80a      	add	r0, sp, #40	; 0x28
 8003f6a:	d13e      	bne.n	8003fea <_printf_float+0x162>
 8003f6c:	2306      	movs	r3, #6
 8003f6e:	6063      	str	r3, [r4, #4]
 8003f70:	2300      	movs	r3, #0
 8003f72:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003f76:	ab09      	add	r3, sp, #36	; 0x24
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	ec49 8b10 	vmov	d0, r8, r9
 8003f7e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003f82:	6022      	str	r2, [r4, #0]
 8003f84:	f8cd a004 	str.w	sl, [sp, #4]
 8003f88:	6861      	ldr	r1, [r4, #4]
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f7ff fee8 	bl	8003d60 <__cvt>
 8003f90:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003f94:	2b47      	cmp	r3, #71	; 0x47
 8003f96:	4680      	mov	r8, r0
 8003f98:	d109      	bne.n	8003fae <_printf_float+0x126>
 8003f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f9c:	1cd8      	adds	r0, r3, #3
 8003f9e:	db02      	blt.n	8003fa6 <_printf_float+0x11e>
 8003fa0:	6862      	ldr	r2, [r4, #4]
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	dd47      	ble.n	8004036 <_printf_float+0x1ae>
 8003fa6:	f1aa 0a02 	sub.w	sl, sl, #2
 8003faa:	fa5f fa8a 	uxtb.w	sl, sl
 8003fae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003fb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fb4:	d824      	bhi.n	8004000 <_printf_float+0x178>
 8003fb6:	3901      	subs	r1, #1
 8003fb8:	4652      	mov	r2, sl
 8003fba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003fbe:	9109      	str	r1, [sp, #36]	; 0x24
 8003fc0:	f7ff ff2f 	bl	8003e22 <__exponent>
 8003fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fc6:	1813      	adds	r3, r2, r0
 8003fc8:	2a01      	cmp	r2, #1
 8003fca:	4681      	mov	r9, r0
 8003fcc:	6123      	str	r3, [r4, #16]
 8003fce:	dc02      	bgt.n	8003fd6 <_printf_float+0x14e>
 8003fd0:	6822      	ldr	r2, [r4, #0]
 8003fd2:	07d1      	lsls	r1, r2, #31
 8003fd4:	d501      	bpl.n	8003fda <_printf_float+0x152>
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	6123      	str	r3, [r4, #16]
 8003fda:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0a5      	beq.n	8003f2e <_printf_float+0xa6>
 8003fe2:	232d      	movs	r3, #45	; 0x2d
 8003fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fe8:	e7a1      	b.n	8003f2e <_printf_float+0xa6>
 8003fea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003fee:	f000 8177 	beq.w	80042e0 <_printf_float+0x458>
 8003ff2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003ff6:	d1bb      	bne.n	8003f70 <_printf_float+0xe8>
 8003ff8:	2900      	cmp	r1, #0
 8003ffa:	d1b9      	bne.n	8003f70 <_printf_float+0xe8>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e7b6      	b.n	8003f6e <_printf_float+0xe6>
 8004000:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004004:	d119      	bne.n	800403a <_printf_float+0x1b2>
 8004006:	2900      	cmp	r1, #0
 8004008:	6863      	ldr	r3, [r4, #4]
 800400a:	dd0c      	ble.n	8004026 <_printf_float+0x19e>
 800400c:	6121      	str	r1, [r4, #16]
 800400e:	b913      	cbnz	r3, 8004016 <_printf_float+0x18e>
 8004010:	6822      	ldr	r2, [r4, #0]
 8004012:	07d2      	lsls	r2, r2, #31
 8004014:	d502      	bpl.n	800401c <_printf_float+0x194>
 8004016:	3301      	adds	r3, #1
 8004018:	440b      	add	r3, r1
 800401a:	6123      	str	r3, [r4, #16]
 800401c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800401e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004020:	f04f 0900 	mov.w	r9, #0
 8004024:	e7d9      	b.n	8003fda <_printf_float+0x152>
 8004026:	b913      	cbnz	r3, 800402e <_printf_float+0x1a6>
 8004028:	6822      	ldr	r2, [r4, #0]
 800402a:	07d0      	lsls	r0, r2, #31
 800402c:	d501      	bpl.n	8004032 <_printf_float+0x1aa>
 800402e:	3302      	adds	r3, #2
 8004030:	e7f3      	b.n	800401a <_printf_float+0x192>
 8004032:	2301      	movs	r3, #1
 8004034:	e7f1      	b.n	800401a <_printf_float+0x192>
 8004036:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800403a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800403e:	4293      	cmp	r3, r2
 8004040:	db05      	blt.n	800404e <_printf_float+0x1c6>
 8004042:	6822      	ldr	r2, [r4, #0]
 8004044:	6123      	str	r3, [r4, #16]
 8004046:	07d1      	lsls	r1, r2, #31
 8004048:	d5e8      	bpl.n	800401c <_printf_float+0x194>
 800404a:	3301      	adds	r3, #1
 800404c:	e7e5      	b.n	800401a <_printf_float+0x192>
 800404e:	2b00      	cmp	r3, #0
 8004050:	bfd4      	ite	le
 8004052:	f1c3 0302 	rsble	r3, r3, #2
 8004056:	2301      	movgt	r3, #1
 8004058:	4413      	add	r3, r2
 800405a:	e7de      	b.n	800401a <_printf_float+0x192>
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	055a      	lsls	r2, r3, #21
 8004060:	d407      	bmi.n	8004072 <_printf_float+0x1ea>
 8004062:	6923      	ldr	r3, [r4, #16]
 8004064:	4642      	mov	r2, r8
 8004066:	4631      	mov	r1, r6
 8004068:	4628      	mov	r0, r5
 800406a:	47b8      	blx	r7
 800406c:	3001      	adds	r0, #1
 800406e:	d12b      	bne.n	80040c8 <_printf_float+0x240>
 8004070:	e767      	b.n	8003f42 <_printf_float+0xba>
 8004072:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004076:	f240 80dc 	bls.w	8004232 <_printf_float+0x3aa>
 800407a:	2200      	movs	r2, #0
 800407c:	2300      	movs	r3, #0
 800407e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004082:	f7fc fcf9 	bl	8000a78 <__aeabi_dcmpeq>
 8004086:	2800      	cmp	r0, #0
 8004088:	d033      	beq.n	80040f2 <_printf_float+0x26a>
 800408a:	2301      	movs	r3, #1
 800408c:	4a41      	ldr	r2, [pc, #260]	; (8004194 <_printf_float+0x30c>)
 800408e:	4631      	mov	r1, r6
 8004090:	4628      	mov	r0, r5
 8004092:	47b8      	blx	r7
 8004094:	3001      	adds	r0, #1
 8004096:	f43f af54 	beq.w	8003f42 <_printf_float+0xba>
 800409a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800409e:	429a      	cmp	r2, r3
 80040a0:	db02      	blt.n	80040a8 <_printf_float+0x220>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	07d8      	lsls	r0, r3, #31
 80040a6:	d50f      	bpl.n	80040c8 <_printf_float+0x240>
 80040a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040ac:	4631      	mov	r1, r6
 80040ae:	4628      	mov	r0, r5
 80040b0:	47b8      	blx	r7
 80040b2:	3001      	adds	r0, #1
 80040b4:	f43f af45 	beq.w	8003f42 <_printf_float+0xba>
 80040b8:	f04f 0800 	mov.w	r8, #0
 80040bc:	f104 091a 	add.w	r9, r4, #26
 80040c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040c2:	3b01      	subs	r3, #1
 80040c4:	4543      	cmp	r3, r8
 80040c6:	dc09      	bgt.n	80040dc <_printf_float+0x254>
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	079b      	lsls	r3, r3, #30
 80040cc:	f100 8103 	bmi.w	80042d6 <_printf_float+0x44e>
 80040d0:	68e0      	ldr	r0, [r4, #12]
 80040d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040d4:	4298      	cmp	r0, r3
 80040d6:	bfb8      	it	lt
 80040d8:	4618      	movlt	r0, r3
 80040da:	e734      	b.n	8003f46 <_printf_float+0xbe>
 80040dc:	2301      	movs	r3, #1
 80040de:	464a      	mov	r2, r9
 80040e0:	4631      	mov	r1, r6
 80040e2:	4628      	mov	r0, r5
 80040e4:	47b8      	blx	r7
 80040e6:	3001      	adds	r0, #1
 80040e8:	f43f af2b 	beq.w	8003f42 <_printf_float+0xba>
 80040ec:	f108 0801 	add.w	r8, r8, #1
 80040f0:	e7e6      	b.n	80040c0 <_printf_float+0x238>
 80040f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	dc2b      	bgt.n	8004150 <_printf_float+0x2c8>
 80040f8:	2301      	movs	r3, #1
 80040fa:	4a26      	ldr	r2, [pc, #152]	; (8004194 <_printf_float+0x30c>)
 80040fc:	4631      	mov	r1, r6
 80040fe:	4628      	mov	r0, r5
 8004100:	47b8      	blx	r7
 8004102:	3001      	adds	r0, #1
 8004104:	f43f af1d 	beq.w	8003f42 <_printf_float+0xba>
 8004108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800410a:	b923      	cbnz	r3, 8004116 <_printf_float+0x28e>
 800410c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800410e:	b913      	cbnz	r3, 8004116 <_printf_float+0x28e>
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	07d9      	lsls	r1, r3, #31
 8004114:	d5d8      	bpl.n	80040c8 <_printf_float+0x240>
 8004116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800411a:	4631      	mov	r1, r6
 800411c:	4628      	mov	r0, r5
 800411e:	47b8      	blx	r7
 8004120:	3001      	adds	r0, #1
 8004122:	f43f af0e 	beq.w	8003f42 <_printf_float+0xba>
 8004126:	f04f 0900 	mov.w	r9, #0
 800412a:	f104 0a1a 	add.w	sl, r4, #26
 800412e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004130:	425b      	negs	r3, r3
 8004132:	454b      	cmp	r3, r9
 8004134:	dc01      	bgt.n	800413a <_printf_float+0x2b2>
 8004136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004138:	e794      	b.n	8004064 <_printf_float+0x1dc>
 800413a:	2301      	movs	r3, #1
 800413c:	4652      	mov	r2, sl
 800413e:	4631      	mov	r1, r6
 8004140:	4628      	mov	r0, r5
 8004142:	47b8      	blx	r7
 8004144:	3001      	adds	r0, #1
 8004146:	f43f aefc 	beq.w	8003f42 <_printf_float+0xba>
 800414a:	f109 0901 	add.w	r9, r9, #1
 800414e:	e7ee      	b.n	800412e <_printf_float+0x2a6>
 8004150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004152:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004154:	429a      	cmp	r2, r3
 8004156:	bfa8      	it	ge
 8004158:	461a      	movge	r2, r3
 800415a:	2a00      	cmp	r2, #0
 800415c:	4691      	mov	r9, r2
 800415e:	dd07      	ble.n	8004170 <_printf_float+0x2e8>
 8004160:	4613      	mov	r3, r2
 8004162:	4631      	mov	r1, r6
 8004164:	4642      	mov	r2, r8
 8004166:	4628      	mov	r0, r5
 8004168:	47b8      	blx	r7
 800416a:	3001      	adds	r0, #1
 800416c:	f43f aee9 	beq.w	8003f42 <_printf_float+0xba>
 8004170:	f104 031a 	add.w	r3, r4, #26
 8004174:	f04f 0b00 	mov.w	fp, #0
 8004178:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800417c:	9306      	str	r3, [sp, #24]
 800417e:	e015      	b.n	80041ac <_printf_float+0x324>
 8004180:	7fefffff 	.word	0x7fefffff
 8004184:	0800663c 	.word	0x0800663c
 8004188:	08006638 	.word	0x08006638
 800418c:	08006644 	.word	0x08006644
 8004190:	08006640 	.word	0x08006640
 8004194:	08006648 	.word	0x08006648
 8004198:	2301      	movs	r3, #1
 800419a:	9a06      	ldr	r2, [sp, #24]
 800419c:	4631      	mov	r1, r6
 800419e:	4628      	mov	r0, r5
 80041a0:	47b8      	blx	r7
 80041a2:	3001      	adds	r0, #1
 80041a4:	f43f aecd 	beq.w	8003f42 <_printf_float+0xba>
 80041a8:	f10b 0b01 	add.w	fp, fp, #1
 80041ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80041b0:	ebaa 0309 	sub.w	r3, sl, r9
 80041b4:	455b      	cmp	r3, fp
 80041b6:	dcef      	bgt.n	8004198 <_printf_float+0x310>
 80041b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041bc:	429a      	cmp	r2, r3
 80041be:	44d0      	add	r8, sl
 80041c0:	db15      	blt.n	80041ee <_printf_float+0x366>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	07da      	lsls	r2, r3, #31
 80041c6:	d412      	bmi.n	80041ee <_printf_float+0x366>
 80041c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041cc:	eba3 020a 	sub.w	r2, r3, sl
 80041d0:	eba3 0a01 	sub.w	sl, r3, r1
 80041d4:	4592      	cmp	sl, r2
 80041d6:	bfa8      	it	ge
 80041d8:	4692      	movge	sl, r2
 80041da:	f1ba 0f00 	cmp.w	sl, #0
 80041de:	dc0e      	bgt.n	80041fe <_printf_float+0x376>
 80041e0:	f04f 0800 	mov.w	r8, #0
 80041e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80041e8:	f104 091a 	add.w	r9, r4, #26
 80041ec:	e019      	b.n	8004222 <_printf_float+0x39a>
 80041ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041f2:	4631      	mov	r1, r6
 80041f4:	4628      	mov	r0, r5
 80041f6:	47b8      	blx	r7
 80041f8:	3001      	adds	r0, #1
 80041fa:	d1e5      	bne.n	80041c8 <_printf_float+0x340>
 80041fc:	e6a1      	b.n	8003f42 <_printf_float+0xba>
 80041fe:	4653      	mov	r3, sl
 8004200:	4642      	mov	r2, r8
 8004202:	4631      	mov	r1, r6
 8004204:	4628      	mov	r0, r5
 8004206:	47b8      	blx	r7
 8004208:	3001      	adds	r0, #1
 800420a:	d1e9      	bne.n	80041e0 <_printf_float+0x358>
 800420c:	e699      	b.n	8003f42 <_printf_float+0xba>
 800420e:	2301      	movs	r3, #1
 8004210:	464a      	mov	r2, r9
 8004212:	4631      	mov	r1, r6
 8004214:	4628      	mov	r0, r5
 8004216:	47b8      	blx	r7
 8004218:	3001      	adds	r0, #1
 800421a:	f43f ae92 	beq.w	8003f42 <_printf_float+0xba>
 800421e:	f108 0801 	add.w	r8, r8, #1
 8004222:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	eba3 030a 	sub.w	r3, r3, sl
 800422c:	4543      	cmp	r3, r8
 800422e:	dcee      	bgt.n	800420e <_printf_float+0x386>
 8004230:	e74a      	b.n	80040c8 <_printf_float+0x240>
 8004232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004234:	2a01      	cmp	r2, #1
 8004236:	dc01      	bgt.n	800423c <_printf_float+0x3b4>
 8004238:	07db      	lsls	r3, r3, #31
 800423a:	d53a      	bpl.n	80042b2 <_printf_float+0x42a>
 800423c:	2301      	movs	r3, #1
 800423e:	4642      	mov	r2, r8
 8004240:	4631      	mov	r1, r6
 8004242:	4628      	mov	r0, r5
 8004244:	47b8      	blx	r7
 8004246:	3001      	adds	r0, #1
 8004248:	f43f ae7b 	beq.w	8003f42 <_printf_float+0xba>
 800424c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004250:	4631      	mov	r1, r6
 8004252:	4628      	mov	r0, r5
 8004254:	47b8      	blx	r7
 8004256:	3001      	adds	r0, #1
 8004258:	f108 0801 	add.w	r8, r8, #1
 800425c:	f43f ae71 	beq.w	8003f42 <_printf_float+0xba>
 8004260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004262:	2200      	movs	r2, #0
 8004264:	f103 3aff 	add.w	sl, r3, #4294967295
 8004268:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800426c:	2300      	movs	r3, #0
 800426e:	f7fc fc03 	bl	8000a78 <__aeabi_dcmpeq>
 8004272:	b9c8      	cbnz	r0, 80042a8 <_printf_float+0x420>
 8004274:	4653      	mov	r3, sl
 8004276:	4642      	mov	r2, r8
 8004278:	4631      	mov	r1, r6
 800427a:	4628      	mov	r0, r5
 800427c:	47b8      	blx	r7
 800427e:	3001      	adds	r0, #1
 8004280:	d10e      	bne.n	80042a0 <_printf_float+0x418>
 8004282:	e65e      	b.n	8003f42 <_printf_float+0xba>
 8004284:	2301      	movs	r3, #1
 8004286:	4652      	mov	r2, sl
 8004288:	4631      	mov	r1, r6
 800428a:	4628      	mov	r0, r5
 800428c:	47b8      	blx	r7
 800428e:	3001      	adds	r0, #1
 8004290:	f43f ae57 	beq.w	8003f42 <_printf_float+0xba>
 8004294:	f108 0801 	add.w	r8, r8, #1
 8004298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800429a:	3b01      	subs	r3, #1
 800429c:	4543      	cmp	r3, r8
 800429e:	dcf1      	bgt.n	8004284 <_printf_float+0x3fc>
 80042a0:	464b      	mov	r3, r9
 80042a2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042a6:	e6de      	b.n	8004066 <_printf_float+0x1de>
 80042a8:	f04f 0800 	mov.w	r8, #0
 80042ac:	f104 0a1a 	add.w	sl, r4, #26
 80042b0:	e7f2      	b.n	8004298 <_printf_float+0x410>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e7df      	b.n	8004276 <_printf_float+0x3ee>
 80042b6:	2301      	movs	r3, #1
 80042b8:	464a      	mov	r2, r9
 80042ba:	4631      	mov	r1, r6
 80042bc:	4628      	mov	r0, r5
 80042be:	47b8      	blx	r7
 80042c0:	3001      	adds	r0, #1
 80042c2:	f43f ae3e 	beq.w	8003f42 <_printf_float+0xba>
 80042c6:	f108 0801 	add.w	r8, r8, #1
 80042ca:	68e3      	ldr	r3, [r4, #12]
 80042cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042ce:	1a9b      	subs	r3, r3, r2
 80042d0:	4543      	cmp	r3, r8
 80042d2:	dcf0      	bgt.n	80042b6 <_printf_float+0x42e>
 80042d4:	e6fc      	b.n	80040d0 <_printf_float+0x248>
 80042d6:	f04f 0800 	mov.w	r8, #0
 80042da:	f104 0919 	add.w	r9, r4, #25
 80042de:	e7f4      	b.n	80042ca <_printf_float+0x442>
 80042e0:	2900      	cmp	r1, #0
 80042e2:	f43f ae8b 	beq.w	8003ffc <_printf_float+0x174>
 80042e6:	2300      	movs	r3, #0
 80042e8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80042ec:	ab09      	add	r3, sp, #36	; 0x24
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	ec49 8b10 	vmov	d0, r8, r9
 80042f4:	6022      	str	r2, [r4, #0]
 80042f6:	f8cd a004 	str.w	sl, [sp, #4]
 80042fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042fe:	4628      	mov	r0, r5
 8004300:	f7ff fd2e 	bl	8003d60 <__cvt>
 8004304:	4680      	mov	r8, r0
 8004306:	e648      	b.n	8003f9a <_printf_float+0x112>

08004308 <_printf_common>:
 8004308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800430c:	4691      	mov	r9, r2
 800430e:	461f      	mov	r7, r3
 8004310:	688a      	ldr	r2, [r1, #8]
 8004312:	690b      	ldr	r3, [r1, #16]
 8004314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004318:	4293      	cmp	r3, r2
 800431a:	bfb8      	it	lt
 800431c:	4613      	movlt	r3, r2
 800431e:	f8c9 3000 	str.w	r3, [r9]
 8004322:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004326:	4606      	mov	r6, r0
 8004328:	460c      	mov	r4, r1
 800432a:	b112      	cbz	r2, 8004332 <_printf_common+0x2a>
 800432c:	3301      	adds	r3, #1
 800432e:	f8c9 3000 	str.w	r3, [r9]
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	0699      	lsls	r1, r3, #26
 8004336:	bf42      	ittt	mi
 8004338:	f8d9 3000 	ldrmi.w	r3, [r9]
 800433c:	3302      	addmi	r3, #2
 800433e:	f8c9 3000 	strmi.w	r3, [r9]
 8004342:	6825      	ldr	r5, [r4, #0]
 8004344:	f015 0506 	ands.w	r5, r5, #6
 8004348:	d107      	bne.n	800435a <_printf_common+0x52>
 800434a:	f104 0a19 	add.w	sl, r4, #25
 800434e:	68e3      	ldr	r3, [r4, #12]
 8004350:	f8d9 2000 	ldr.w	r2, [r9]
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	42ab      	cmp	r3, r5
 8004358:	dc28      	bgt.n	80043ac <_printf_common+0xa4>
 800435a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800435e:	6822      	ldr	r2, [r4, #0]
 8004360:	3300      	adds	r3, #0
 8004362:	bf18      	it	ne
 8004364:	2301      	movne	r3, #1
 8004366:	0692      	lsls	r2, r2, #26
 8004368:	d42d      	bmi.n	80043c6 <_printf_common+0xbe>
 800436a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800436e:	4639      	mov	r1, r7
 8004370:	4630      	mov	r0, r6
 8004372:	47c0      	blx	r8
 8004374:	3001      	adds	r0, #1
 8004376:	d020      	beq.n	80043ba <_printf_common+0xb2>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	68e5      	ldr	r5, [r4, #12]
 800437c:	f8d9 2000 	ldr.w	r2, [r9]
 8004380:	f003 0306 	and.w	r3, r3, #6
 8004384:	2b04      	cmp	r3, #4
 8004386:	bf08      	it	eq
 8004388:	1aad      	subeq	r5, r5, r2
 800438a:	68a3      	ldr	r3, [r4, #8]
 800438c:	6922      	ldr	r2, [r4, #16]
 800438e:	bf0c      	ite	eq
 8004390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004394:	2500      	movne	r5, #0
 8004396:	4293      	cmp	r3, r2
 8004398:	bfc4      	itt	gt
 800439a:	1a9b      	subgt	r3, r3, r2
 800439c:	18ed      	addgt	r5, r5, r3
 800439e:	f04f 0900 	mov.w	r9, #0
 80043a2:	341a      	adds	r4, #26
 80043a4:	454d      	cmp	r5, r9
 80043a6:	d11a      	bne.n	80043de <_printf_common+0xd6>
 80043a8:	2000      	movs	r0, #0
 80043aa:	e008      	b.n	80043be <_printf_common+0xb6>
 80043ac:	2301      	movs	r3, #1
 80043ae:	4652      	mov	r2, sl
 80043b0:	4639      	mov	r1, r7
 80043b2:	4630      	mov	r0, r6
 80043b4:	47c0      	blx	r8
 80043b6:	3001      	adds	r0, #1
 80043b8:	d103      	bne.n	80043c2 <_printf_common+0xba>
 80043ba:	f04f 30ff 	mov.w	r0, #4294967295
 80043be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c2:	3501      	adds	r5, #1
 80043c4:	e7c3      	b.n	800434e <_printf_common+0x46>
 80043c6:	18e1      	adds	r1, r4, r3
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	2030      	movs	r0, #48	; 0x30
 80043cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043d0:	4422      	add	r2, r4
 80043d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043da:	3302      	adds	r3, #2
 80043dc:	e7c5      	b.n	800436a <_printf_common+0x62>
 80043de:	2301      	movs	r3, #1
 80043e0:	4622      	mov	r2, r4
 80043e2:	4639      	mov	r1, r7
 80043e4:	4630      	mov	r0, r6
 80043e6:	47c0      	blx	r8
 80043e8:	3001      	adds	r0, #1
 80043ea:	d0e6      	beq.n	80043ba <_printf_common+0xb2>
 80043ec:	f109 0901 	add.w	r9, r9, #1
 80043f0:	e7d8      	b.n	80043a4 <_printf_common+0x9c>
	...

080043f4 <_printf_i>:
 80043f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80043fc:	460c      	mov	r4, r1
 80043fe:	7e09      	ldrb	r1, [r1, #24]
 8004400:	b085      	sub	sp, #20
 8004402:	296e      	cmp	r1, #110	; 0x6e
 8004404:	4617      	mov	r7, r2
 8004406:	4606      	mov	r6, r0
 8004408:	4698      	mov	r8, r3
 800440a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800440c:	f000 80b3 	beq.w	8004576 <_printf_i+0x182>
 8004410:	d822      	bhi.n	8004458 <_printf_i+0x64>
 8004412:	2963      	cmp	r1, #99	; 0x63
 8004414:	d036      	beq.n	8004484 <_printf_i+0x90>
 8004416:	d80a      	bhi.n	800442e <_printf_i+0x3a>
 8004418:	2900      	cmp	r1, #0
 800441a:	f000 80b9 	beq.w	8004590 <_printf_i+0x19c>
 800441e:	2958      	cmp	r1, #88	; 0x58
 8004420:	f000 8083 	beq.w	800452a <_printf_i+0x136>
 8004424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004428:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800442c:	e032      	b.n	8004494 <_printf_i+0xa0>
 800442e:	2964      	cmp	r1, #100	; 0x64
 8004430:	d001      	beq.n	8004436 <_printf_i+0x42>
 8004432:	2969      	cmp	r1, #105	; 0x69
 8004434:	d1f6      	bne.n	8004424 <_printf_i+0x30>
 8004436:	6820      	ldr	r0, [r4, #0]
 8004438:	6813      	ldr	r3, [r2, #0]
 800443a:	0605      	lsls	r5, r0, #24
 800443c:	f103 0104 	add.w	r1, r3, #4
 8004440:	d52a      	bpl.n	8004498 <_printf_i+0xa4>
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6011      	str	r1, [r2, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	da03      	bge.n	8004452 <_printf_i+0x5e>
 800444a:	222d      	movs	r2, #45	; 0x2d
 800444c:	425b      	negs	r3, r3
 800444e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004452:	486f      	ldr	r0, [pc, #444]	; (8004610 <_printf_i+0x21c>)
 8004454:	220a      	movs	r2, #10
 8004456:	e039      	b.n	80044cc <_printf_i+0xd8>
 8004458:	2973      	cmp	r1, #115	; 0x73
 800445a:	f000 809d 	beq.w	8004598 <_printf_i+0x1a4>
 800445e:	d808      	bhi.n	8004472 <_printf_i+0x7e>
 8004460:	296f      	cmp	r1, #111	; 0x6f
 8004462:	d020      	beq.n	80044a6 <_printf_i+0xb2>
 8004464:	2970      	cmp	r1, #112	; 0x70
 8004466:	d1dd      	bne.n	8004424 <_printf_i+0x30>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	f043 0320 	orr.w	r3, r3, #32
 800446e:	6023      	str	r3, [r4, #0]
 8004470:	e003      	b.n	800447a <_printf_i+0x86>
 8004472:	2975      	cmp	r1, #117	; 0x75
 8004474:	d017      	beq.n	80044a6 <_printf_i+0xb2>
 8004476:	2978      	cmp	r1, #120	; 0x78
 8004478:	d1d4      	bne.n	8004424 <_printf_i+0x30>
 800447a:	2378      	movs	r3, #120	; 0x78
 800447c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004480:	4864      	ldr	r0, [pc, #400]	; (8004614 <_printf_i+0x220>)
 8004482:	e055      	b.n	8004530 <_printf_i+0x13c>
 8004484:	6813      	ldr	r3, [r2, #0]
 8004486:	1d19      	adds	r1, r3, #4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6011      	str	r1, [r2, #0]
 800448c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004494:	2301      	movs	r3, #1
 8004496:	e08c      	b.n	80045b2 <_printf_i+0x1be>
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6011      	str	r1, [r2, #0]
 800449c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044a0:	bf18      	it	ne
 80044a2:	b21b      	sxthne	r3, r3
 80044a4:	e7cf      	b.n	8004446 <_printf_i+0x52>
 80044a6:	6813      	ldr	r3, [r2, #0]
 80044a8:	6825      	ldr	r5, [r4, #0]
 80044aa:	1d18      	adds	r0, r3, #4
 80044ac:	6010      	str	r0, [r2, #0]
 80044ae:	0628      	lsls	r0, r5, #24
 80044b0:	d501      	bpl.n	80044b6 <_printf_i+0xc2>
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	e002      	b.n	80044bc <_printf_i+0xc8>
 80044b6:	0668      	lsls	r0, r5, #25
 80044b8:	d5fb      	bpl.n	80044b2 <_printf_i+0xbe>
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	4854      	ldr	r0, [pc, #336]	; (8004610 <_printf_i+0x21c>)
 80044be:	296f      	cmp	r1, #111	; 0x6f
 80044c0:	bf14      	ite	ne
 80044c2:	220a      	movne	r2, #10
 80044c4:	2208      	moveq	r2, #8
 80044c6:	2100      	movs	r1, #0
 80044c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044cc:	6865      	ldr	r5, [r4, #4]
 80044ce:	60a5      	str	r5, [r4, #8]
 80044d0:	2d00      	cmp	r5, #0
 80044d2:	f2c0 8095 	blt.w	8004600 <_printf_i+0x20c>
 80044d6:	6821      	ldr	r1, [r4, #0]
 80044d8:	f021 0104 	bic.w	r1, r1, #4
 80044dc:	6021      	str	r1, [r4, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d13d      	bne.n	800455e <_printf_i+0x16a>
 80044e2:	2d00      	cmp	r5, #0
 80044e4:	f040 808e 	bne.w	8004604 <_printf_i+0x210>
 80044e8:	4665      	mov	r5, ip
 80044ea:	2a08      	cmp	r2, #8
 80044ec:	d10b      	bne.n	8004506 <_printf_i+0x112>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	07db      	lsls	r3, r3, #31
 80044f2:	d508      	bpl.n	8004506 <_printf_i+0x112>
 80044f4:	6923      	ldr	r3, [r4, #16]
 80044f6:	6862      	ldr	r2, [r4, #4]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	bfde      	ittt	le
 80044fc:	2330      	movle	r3, #48	; 0x30
 80044fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004502:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004506:	ebac 0305 	sub.w	r3, ip, r5
 800450a:	6123      	str	r3, [r4, #16]
 800450c:	f8cd 8000 	str.w	r8, [sp]
 8004510:	463b      	mov	r3, r7
 8004512:	aa03      	add	r2, sp, #12
 8004514:	4621      	mov	r1, r4
 8004516:	4630      	mov	r0, r6
 8004518:	f7ff fef6 	bl	8004308 <_printf_common>
 800451c:	3001      	adds	r0, #1
 800451e:	d14d      	bne.n	80045bc <_printf_i+0x1c8>
 8004520:	f04f 30ff 	mov.w	r0, #4294967295
 8004524:	b005      	add	sp, #20
 8004526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800452a:	4839      	ldr	r0, [pc, #228]	; (8004610 <_printf_i+0x21c>)
 800452c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004530:	6813      	ldr	r3, [r2, #0]
 8004532:	6821      	ldr	r1, [r4, #0]
 8004534:	1d1d      	adds	r5, r3, #4
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6015      	str	r5, [r2, #0]
 800453a:	060a      	lsls	r2, r1, #24
 800453c:	d50b      	bpl.n	8004556 <_printf_i+0x162>
 800453e:	07ca      	lsls	r2, r1, #31
 8004540:	bf44      	itt	mi
 8004542:	f041 0120 	orrmi.w	r1, r1, #32
 8004546:	6021      	strmi	r1, [r4, #0]
 8004548:	b91b      	cbnz	r3, 8004552 <_printf_i+0x15e>
 800454a:	6822      	ldr	r2, [r4, #0]
 800454c:	f022 0220 	bic.w	r2, r2, #32
 8004550:	6022      	str	r2, [r4, #0]
 8004552:	2210      	movs	r2, #16
 8004554:	e7b7      	b.n	80044c6 <_printf_i+0xd2>
 8004556:	064d      	lsls	r5, r1, #25
 8004558:	bf48      	it	mi
 800455a:	b29b      	uxthmi	r3, r3
 800455c:	e7ef      	b.n	800453e <_printf_i+0x14a>
 800455e:	4665      	mov	r5, ip
 8004560:	fbb3 f1f2 	udiv	r1, r3, r2
 8004564:	fb02 3311 	mls	r3, r2, r1, r3
 8004568:	5cc3      	ldrb	r3, [r0, r3]
 800456a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800456e:	460b      	mov	r3, r1
 8004570:	2900      	cmp	r1, #0
 8004572:	d1f5      	bne.n	8004560 <_printf_i+0x16c>
 8004574:	e7b9      	b.n	80044ea <_printf_i+0xf6>
 8004576:	6813      	ldr	r3, [r2, #0]
 8004578:	6825      	ldr	r5, [r4, #0]
 800457a:	6961      	ldr	r1, [r4, #20]
 800457c:	1d18      	adds	r0, r3, #4
 800457e:	6010      	str	r0, [r2, #0]
 8004580:	0628      	lsls	r0, r5, #24
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	d501      	bpl.n	800458a <_printf_i+0x196>
 8004586:	6019      	str	r1, [r3, #0]
 8004588:	e002      	b.n	8004590 <_printf_i+0x19c>
 800458a:	066a      	lsls	r2, r5, #25
 800458c:	d5fb      	bpl.n	8004586 <_printf_i+0x192>
 800458e:	8019      	strh	r1, [r3, #0]
 8004590:	2300      	movs	r3, #0
 8004592:	6123      	str	r3, [r4, #16]
 8004594:	4665      	mov	r5, ip
 8004596:	e7b9      	b.n	800450c <_printf_i+0x118>
 8004598:	6813      	ldr	r3, [r2, #0]
 800459a:	1d19      	adds	r1, r3, #4
 800459c:	6011      	str	r1, [r2, #0]
 800459e:	681d      	ldr	r5, [r3, #0]
 80045a0:	6862      	ldr	r2, [r4, #4]
 80045a2:	2100      	movs	r1, #0
 80045a4:	4628      	mov	r0, r5
 80045a6:	f7fb fdf3 	bl	8000190 <memchr>
 80045aa:	b108      	cbz	r0, 80045b0 <_printf_i+0x1bc>
 80045ac:	1b40      	subs	r0, r0, r5
 80045ae:	6060      	str	r0, [r4, #4]
 80045b0:	6863      	ldr	r3, [r4, #4]
 80045b2:	6123      	str	r3, [r4, #16]
 80045b4:	2300      	movs	r3, #0
 80045b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ba:	e7a7      	b.n	800450c <_printf_i+0x118>
 80045bc:	6923      	ldr	r3, [r4, #16]
 80045be:	462a      	mov	r2, r5
 80045c0:	4639      	mov	r1, r7
 80045c2:	4630      	mov	r0, r6
 80045c4:	47c0      	blx	r8
 80045c6:	3001      	adds	r0, #1
 80045c8:	d0aa      	beq.n	8004520 <_printf_i+0x12c>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	079b      	lsls	r3, r3, #30
 80045ce:	d413      	bmi.n	80045f8 <_printf_i+0x204>
 80045d0:	68e0      	ldr	r0, [r4, #12]
 80045d2:	9b03      	ldr	r3, [sp, #12]
 80045d4:	4298      	cmp	r0, r3
 80045d6:	bfb8      	it	lt
 80045d8:	4618      	movlt	r0, r3
 80045da:	e7a3      	b.n	8004524 <_printf_i+0x130>
 80045dc:	2301      	movs	r3, #1
 80045de:	464a      	mov	r2, r9
 80045e0:	4639      	mov	r1, r7
 80045e2:	4630      	mov	r0, r6
 80045e4:	47c0      	blx	r8
 80045e6:	3001      	adds	r0, #1
 80045e8:	d09a      	beq.n	8004520 <_printf_i+0x12c>
 80045ea:	3501      	adds	r5, #1
 80045ec:	68e3      	ldr	r3, [r4, #12]
 80045ee:	9a03      	ldr	r2, [sp, #12]
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	42ab      	cmp	r3, r5
 80045f4:	dcf2      	bgt.n	80045dc <_printf_i+0x1e8>
 80045f6:	e7eb      	b.n	80045d0 <_printf_i+0x1dc>
 80045f8:	2500      	movs	r5, #0
 80045fa:	f104 0919 	add.w	r9, r4, #25
 80045fe:	e7f5      	b.n	80045ec <_printf_i+0x1f8>
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1ac      	bne.n	800455e <_printf_i+0x16a>
 8004604:	7803      	ldrb	r3, [r0, #0]
 8004606:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800460a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800460e:	e76c      	b.n	80044ea <_printf_i+0xf6>
 8004610:	0800664a 	.word	0x0800664a
 8004614:	0800665b 	.word	0x0800665b

08004618 <iprintf>:
 8004618:	b40f      	push	{r0, r1, r2, r3}
 800461a:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <iprintf+0x2c>)
 800461c:	b513      	push	{r0, r1, r4, lr}
 800461e:	681c      	ldr	r4, [r3, #0]
 8004620:	b124      	cbz	r4, 800462c <iprintf+0x14>
 8004622:	69a3      	ldr	r3, [r4, #24]
 8004624:	b913      	cbnz	r3, 800462c <iprintf+0x14>
 8004626:	4620      	mov	r0, r4
 8004628:	f001 f866 	bl	80056f8 <__sinit>
 800462c:	ab05      	add	r3, sp, #20
 800462e:	9a04      	ldr	r2, [sp, #16]
 8004630:	68a1      	ldr	r1, [r4, #8]
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	4620      	mov	r0, r4
 8004636:	f001 fd29 	bl	800608c <_vfiprintf_r>
 800463a:	b002      	add	sp, #8
 800463c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004640:	b004      	add	sp, #16
 8004642:	4770      	bx	lr
 8004644:	20000010 	.word	0x20000010

08004648 <_puts_r>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	460e      	mov	r6, r1
 800464c:	4605      	mov	r5, r0
 800464e:	b118      	cbz	r0, 8004658 <_puts_r+0x10>
 8004650:	6983      	ldr	r3, [r0, #24]
 8004652:	b90b      	cbnz	r3, 8004658 <_puts_r+0x10>
 8004654:	f001 f850 	bl	80056f8 <__sinit>
 8004658:	69ab      	ldr	r3, [r5, #24]
 800465a:	68ac      	ldr	r4, [r5, #8]
 800465c:	b913      	cbnz	r3, 8004664 <_puts_r+0x1c>
 800465e:	4628      	mov	r0, r5
 8004660:	f001 f84a 	bl	80056f8 <__sinit>
 8004664:	4b23      	ldr	r3, [pc, #140]	; (80046f4 <_puts_r+0xac>)
 8004666:	429c      	cmp	r4, r3
 8004668:	d117      	bne.n	800469a <_puts_r+0x52>
 800466a:	686c      	ldr	r4, [r5, #4]
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	071b      	lsls	r3, r3, #28
 8004670:	d51d      	bpl.n	80046ae <_puts_r+0x66>
 8004672:	6923      	ldr	r3, [r4, #16]
 8004674:	b1db      	cbz	r3, 80046ae <_puts_r+0x66>
 8004676:	3e01      	subs	r6, #1
 8004678:	68a3      	ldr	r3, [r4, #8]
 800467a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800467e:	3b01      	subs	r3, #1
 8004680:	60a3      	str	r3, [r4, #8]
 8004682:	b9e9      	cbnz	r1, 80046c0 <_puts_r+0x78>
 8004684:	2b00      	cmp	r3, #0
 8004686:	da2e      	bge.n	80046e6 <_puts_r+0x9e>
 8004688:	4622      	mov	r2, r4
 800468a:	210a      	movs	r1, #10
 800468c:	4628      	mov	r0, r5
 800468e:	f000 f83f 	bl	8004710 <__swbuf_r>
 8004692:	3001      	adds	r0, #1
 8004694:	d011      	beq.n	80046ba <_puts_r+0x72>
 8004696:	200a      	movs	r0, #10
 8004698:	e011      	b.n	80046be <_puts_r+0x76>
 800469a:	4b17      	ldr	r3, [pc, #92]	; (80046f8 <_puts_r+0xb0>)
 800469c:	429c      	cmp	r4, r3
 800469e:	d101      	bne.n	80046a4 <_puts_r+0x5c>
 80046a0:	68ac      	ldr	r4, [r5, #8]
 80046a2:	e7e3      	b.n	800466c <_puts_r+0x24>
 80046a4:	4b15      	ldr	r3, [pc, #84]	; (80046fc <_puts_r+0xb4>)
 80046a6:	429c      	cmp	r4, r3
 80046a8:	bf08      	it	eq
 80046aa:	68ec      	ldreq	r4, [r5, #12]
 80046ac:	e7de      	b.n	800466c <_puts_r+0x24>
 80046ae:	4621      	mov	r1, r4
 80046b0:	4628      	mov	r0, r5
 80046b2:	f000 f87f 	bl	80047b4 <__swsetup_r>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d0dd      	beq.n	8004676 <_puts_r+0x2e>
 80046ba:	f04f 30ff 	mov.w	r0, #4294967295
 80046be:	bd70      	pop	{r4, r5, r6, pc}
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	da04      	bge.n	80046ce <_puts_r+0x86>
 80046c4:	69a2      	ldr	r2, [r4, #24]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	dc06      	bgt.n	80046d8 <_puts_r+0x90>
 80046ca:	290a      	cmp	r1, #10
 80046cc:	d004      	beq.n	80046d8 <_puts_r+0x90>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	6022      	str	r2, [r4, #0]
 80046d4:	7019      	strb	r1, [r3, #0]
 80046d6:	e7cf      	b.n	8004678 <_puts_r+0x30>
 80046d8:	4622      	mov	r2, r4
 80046da:	4628      	mov	r0, r5
 80046dc:	f000 f818 	bl	8004710 <__swbuf_r>
 80046e0:	3001      	adds	r0, #1
 80046e2:	d1c9      	bne.n	8004678 <_puts_r+0x30>
 80046e4:	e7e9      	b.n	80046ba <_puts_r+0x72>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	200a      	movs	r0, #10
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	6022      	str	r2, [r4, #0]
 80046ee:	7018      	strb	r0, [r3, #0]
 80046f0:	e7e5      	b.n	80046be <_puts_r+0x76>
 80046f2:	bf00      	nop
 80046f4:	0800669c 	.word	0x0800669c
 80046f8:	080066bc 	.word	0x080066bc
 80046fc:	0800667c 	.word	0x0800667c

08004700 <puts>:
 8004700:	4b02      	ldr	r3, [pc, #8]	; (800470c <puts+0xc>)
 8004702:	4601      	mov	r1, r0
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	f7ff bf9f 	b.w	8004648 <_puts_r>
 800470a:	bf00      	nop
 800470c:	20000010 	.word	0x20000010

08004710 <__swbuf_r>:
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	460e      	mov	r6, r1
 8004714:	4614      	mov	r4, r2
 8004716:	4605      	mov	r5, r0
 8004718:	b118      	cbz	r0, 8004722 <__swbuf_r+0x12>
 800471a:	6983      	ldr	r3, [r0, #24]
 800471c:	b90b      	cbnz	r3, 8004722 <__swbuf_r+0x12>
 800471e:	f000 ffeb 	bl	80056f8 <__sinit>
 8004722:	4b21      	ldr	r3, [pc, #132]	; (80047a8 <__swbuf_r+0x98>)
 8004724:	429c      	cmp	r4, r3
 8004726:	d12a      	bne.n	800477e <__swbuf_r+0x6e>
 8004728:	686c      	ldr	r4, [r5, #4]
 800472a:	69a3      	ldr	r3, [r4, #24]
 800472c:	60a3      	str	r3, [r4, #8]
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	071a      	lsls	r2, r3, #28
 8004732:	d52e      	bpl.n	8004792 <__swbuf_r+0x82>
 8004734:	6923      	ldr	r3, [r4, #16]
 8004736:	b363      	cbz	r3, 8004792 <__swbuf_r+0x82>
 8004738:	6923      	ldr	r3, [r4, #16]
 800473a:	6820      	ldr	r0, [r4, #0]
 800473c:	1ac0      	subs	r0, r0, r3
 800473e:	6963      	ldr	r3, [r4, #20]
 8004740:	b2f6      	uxtb	r6, r6
 8004742:	4283      	cmp	r3, r0
 8004744:	4637      	mov	r7, r6
 8004746:	dc04      	bgt.n	8004752 <__swbuf_r+0x42>
 8004748:	4621      	mov	r1, r4
 800474a:	4628      	mov	r0, r5
 800474c:	f000 ff6a 	bl	8005624 <_fflush_r>
 8004750:	bb28      	cbnz	r0, 800479e <__swbuf_r+0x8e>
 8004752:	68a3      	ldr	r3, [r4, #8]
 8004754:	3b01      	subs	r3, #1
 8004756:	60a3      	str	r3, [r4, #8]
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	6022      	str	r2, [r4, #0]
 800475e:	701e      	strb	r6, [r3, #0]
 8004760:	6963      	ldr	r3, [r4, #20]
 8004762:	3001      	adds	r0, #1
 8004764:	4283      	cmp	r3, r0
 8004766:	d004      	beq.n	8004772 <__swbuf_r+0x62>
 8004768:	89a3      	ldrh	r3, [r4, #12]
 800476a:	07db      	lsls	r3, r3, #31
 800476c:	d519      	bpl.n	80047a2 <__swbuf_r+0x92>
 800476e:	2e0a      	cmp	r6, #10
 8004770:	d117      	bne.n	80047a2 <__swbuf_r+0x92>
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f000 ff55 	bl	8005624 <_fflush_r>
 800477a:	b190      	cbz	r0, 80047a2 <__swbuf_r+0x92>
 800477c:	e00f      	b.n	800479e <__swbuf_r+0x8e>
 800477e:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <__swbuf_r+0x9c>)
 8004780:	429c      	cmp	r4, r3
 8004782:	d101      	bne.n	8004788 <__swbuf_r+0x78>
 8004784:	68ac      	ldr	r4, [r5, #8]
 8004786:	e7d0      	b.n	800472a <__swbuf_r+0x1a>
 8004788:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <__swbuf_r+0xa0>)
 800478a:	429c      	cmp	r4, r3
 800478c:	bf08      	it	eq
 800478e:	68ec      	ldreq	r4, [r5, #12]
 8004790:	e7cb      	b.n	800472a <__swbuf_r+0x1a>
 8004792:	4621      	mov	r1, r4
 8004794:	4628      	mov	r0, r5
 8004796:	f000 f80d 	bl	80047b4 <__swsetup_r>
 800479a:	2800      	cmp	r0, #0
 800479c:	d0cc      	beq.n	8004738 <__swbuf_r+0x28>
 800479e:	f04f 37ff 	mov.w	r7, #4294967295
 80047a2:	4638      	mov	r0, r7
 80047a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a6:	bf00      	nop
 80047a8:	0800669c 	.word	0x0800669c
 80047ac:	080066bc 	.word	0x080066bc
 80047b0:	0800667c 	.word	0x0800667c

080047b4 <__swsetup_r>:
 80047b4:	4b32      	ldr	r3, [pc, #200]	; (8004880 <__swsetup_r+0xcc>)
 80047b6:	b570      	push	{r4, r5, r6, lr}
 80047b8:	681d      	ldr	r5, [r3, #0]
 80047ba:	4606      	mov	r6, r0
 80047bc:	460c      	mov	r4, r1
 80047be:	b125      	cbz	r5, 80047ca <__swsetup_r+0x16>
 80047c0:	69ab      	ldr	r3, [r5, #24]
 80047c2:	b913      	cbnz	r3, 80047ca <__swsetup_r+0x16>
 80047c4:	4628      	mov	r0, r5
 80047c6:	f000 ff97 	bl	80056f8 <__sinit>
 80047ca:	4b2e      	ldr	r3, [pc, #184]	; (8004884 <__swsetup_r+0xd0>)
 80047cc:	429c      	cmp	r4, r3
 80047ce:	d10f      	bne.n	80047f0 <__swsetup_r+0x3c>
 80047d0:	686c      	ldr	r4, [r5, #4]
 80047d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	0715      	lsls	r5, r2, #28
 80047da:	d42c      	bmi.n	8004836 <__swsetup_r+0x82>
 80047dc:	06d0      	lsls	r0, r2, #27
 80047de:	d411      	bmi.n	8004804 <__swsetup_r+0x50>
 80047e0:	2209      	movs	r2, #9
 80047e2:	6032      	str	r2, [r6, #0]
 80047e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e8:	81a3      	strh	r3, [r4, #12]
 80047ea:	f04f 30ff 	mov.w	r0, #4294967295
 80047ee:	e03e      	b.n	800486e <__swsetup_r+0xba>
 80047f0:	4b25      	ldr	r3, [pc, #148]	; (8004888 <__swsetup_r+0xd4>)
 80047f2:	429c      	cmp	r4, r3
 80047f4:	d101      	bne.n	80047fa <__swsetup_r+0x46>
 80047f6:	68ac      	ldr	r4, [r5, #8]
 80047f8:	e7eb      	b.n	80047d2 <__swsetup_r+0x1e>
 80047fa:	4b24      	ldr	r3, [pc, #144]	; (800488c <__swsetup_r+0xd8>)
 80047fc:	429c      	cmp	r4, r3
 80047fe:	bf08      	it	eq
 8004800:	68ec      	ldreq	r4, [r5, #12]
 8004802:	e7e6      	b.n	80047d2 <__swsetup_r+0x1e>
 8004804:	0751      	lsls	r1, r2, #29
 8004806:	d512      	bpl.n	800482e <__swsetup_r+0x7a>
 8004808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800480a:	b141      	cbz	r1, 800481e <__swsetup_r+0x6a>
 800480c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004810:	4299      	cmp	r1, r3
 8004812:	d002      	beq.n	800481a <__swsetup_r+0x66>
 8004814:	4630      	mov	r0, r6
 8004816:	f001 fb67 	bl	8005ee8 <_free_r>
 800481a:	2300      	movs	r3, #0
 800481c:	6363      	str	r3, [r4, #52]	; 0x34
 800481e:	89a3      	ldrh	r3, [r4, #12]
 8004820:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004824:	81a3      	strh	r3, [r4, #12]
 8004826:	2300      	movs	r3, #0
 8004828:	6063      	str	r3, [r4, #4]
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	6023      	str	r3, [r4, #0]
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	f043 0308 	orr.w	r3, r3, #8
 8004834:	81a3      	strh	r3, [r4, #12]
 8004836:	6923      	ldr	r3, [r4, #16]
 8004838:	b94b      	cbnz	r3, 800484e <__swsetup_r+0x9a>
 800483a:	89a3      	ldrh	r3, [r4, #12]
 800483c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004844:	d003      	beq.n	800484e <__swsetup_r+0x9a>
 8004846:	4621      	mov	r1, r4
 8004848:	4630      	mov	r0, r6
 800484a:	f001 f811 	bl	8005870 <__smakebuf_r>
 800484e:	89a2      	ldrh	r2, [r4, #12]
 8004850:	f012 0301 	ands.w	r3, r2, #1
 8004854:	d00c      	beq.n	8004870 <__swsetup_r+0xbc>
 8004856:	2300      	movs	r3, #0
 8004858:	60a3      	str	r3, [r4, #8]
 800485a:	6963      	ldr	r3, [r4, #20]
 800485c:	425b      	negs	r3, r3
 800485e:	61a3      	str	r3, [r4, #24]
 8004860:	6923      	ldr	r3, [r4, #16]
 8004862:	b953      	cbnz	r3, 800487a <__swsetup_r+0xc6>
 8004864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004868:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800486c:	d1ba      	bne.n	80047e4 <__swsetup_r+0x30>
 800486e:	bd70      	pop	{r4, r5, r6, pc}
 8004870:	0792      	lsls	r2, r2, #30
 8004872:	bf58      	it	pl
 8004874:	6963      	ldrpl	r3, [r4, #20]
 8004876:	60a3      	str	r3, [r4, #8]
 8004878:	e7f2      	b.n	8004860 <__swsetup_r+0xac>
 800487a:	2000      	movs	r0, #0
 800487c:	e7f7      	b.n	800486e <__swsetup_r+0xba>
 800487e:	bf00      	nop
 8004880:	20000010 	.word	0x20000010
 8004884:	0800669c 	.word	0x0800669c
 8004888:	080066bc 	.word	0x080066bc
 800488c:	0800667c 	.word	0x0800667c

08004890 <quorem>:
 8004890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	6903      	ldr	r3, [r0, #16]
 8004896:	690c      	ldr	r4, [r1, #16]
 8004898:	42a3      	cmp	r3, r4
 800489a:	4680      	mov	r8, r0
 800489c:	f2c0 8082 	blt.w	80049a4 <quorem+0x114>
 80048a0:	3c01      	subs	r4, #1
 80048a2:	f101 0714 	add.w	r7, r1, #20
 80048a6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80048aa:	f100 0614 	add.w	r6, r0, #20
 80048ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80048b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80048b6:	eb06 030c 	add.w	r3, r6, ip
 80048ba:	3501      	adds	r5, #1
 80048bc:	eb07 090c 	add.w	r9, r7, ip
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	fbb0 f5f5 	udiv	r5, r0, r5
 80048c6:	b395      	cbz	r5, 800492e <quorem+0x9e>
 80048c8:	f04f 0a00 	mov.w	sl, #0
 80048cc:	4638      	mov	r0, r7
 80048ce:	46b6      	mov	lr, r6
 80048d0:	46d3      	mov	fp, sl
 80048d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80048d6:	b293      	uxth	r3, r2
 80048d8:	fb05 a303 	mla	r3, r5, r3, sl
 80048dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	ebab 0303 	sub.w	r3, fp, r3
 80048e6:	0c12      	lsrs	r2, r2, #16
 80048e8:	f8de b000 	ldr.w	fp, [lr]
 80048ec:	fb05 a202 	mla	r2, r5, r2, sl
 80048f0:	fa13 f38b 	uxtah	r3, r3, fp
 80048f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80048f8:	fa1f fb82 	uxth.w	fp, r2
 80048fc:	f8de 2000 	ldr.w	r2, [lr]
 8004900:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004904:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004908:	b29b      	uxth	r3, r3
 800490a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800490e:	4581      	cmp	r9, r0
 8004910:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004914:	f84e 3b04 	str.w	r3, [lr], #4
 8004918:	d2db      	bcs.n	80048d2 <quorem+0x42>
 800491a:	f856 300c 	ldr.w	r3, [r6, ip]
 800491e:	b933      	cbnz	r3, 800492e <quorem+0x9e>
 8004920:	9b01      	ldr	r3, [sp, #4]
 8004922:	3b04      	subs	r3, #4
 8004924:	429e      	cmp	r6, r3
 8004926:	461a      	mov	r2, r3
 8004928:	d330      	bcc.n	800498c <quorem+0xfc>
 800492a:	f8c8 4010 	str.w	r4, [r8, #16]
 800492e:	4640      	mov	r0, r8
 8004930:	f001 fa06 	bl	8005d40 <__mcmp>
 8004934:	2800      	cmp	r0, #0
 8004936:	db25      	blt.n	8004984 <quorem+0xf4>
 8004938:	3501      	adds	r5, #1
 800493a:	4630      	mov	r0, r6
 800493c:	f04f 0c00 	mov.w	ip, #0
 8004940:	f857 2b04 	ldr.w	r2, [r7], #4
 8004944:	f8d0 e000 	ldr.w	lr, [r0]
 8004948:	b293      	uxth	r3, r2
 800494a:	ebac 0303 	sub.w	r3, ip, r3
 800494e:	0c12      	lsrs	r2, r2, #16
 8004950:	fa13 f38e 	uxtah	r3, r3, lr
 8004954:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004958:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800495c:	b29b      	uxth	r3, r3
 800495e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004962:	45b9      	cmp	r9, r7
 8004964:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004968:	f840 3b04 	str.w	r3, [r0], #4
 800496c:	d2e8      	bcs.n	8004940 <quorem+0xb0>
 800496e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004972:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004976:	b92a      	cbnz	r2, 8004984 <quorem+0xf4>
 8004978:	3b04      	subs	r3, #4
 800497a:	429e      	cmp	r6, r3
 800497c:	461a      	mov	r2, r3
 800497e:	d30b      	bcc.n	8004998 <quorem+0x108>
 8004980:	f8c8 4010 	str.w	r4, [r8, #16]
 8004984:	4628      	mov	r0, r5
 8004986:	b003      	add	sp, #12
 8004988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	3b04      	subs	r3, #4
 8004990:	2a00      	cmp	r2, #0
 8004992:	d1ca      	bne.n	800492a <quorem+0x9a>
 8004994:	3c01      	subs	r4, #1
 8004996:	e7c5      	b.n	8004924 <quorem+0x94>
 8004998:	6812      	ldr	r2, [r2, #0]
 800499a:	3b04      	subs	r3, #4
 800499c:	2a00      	cmp	r2, #0
 800499e:	d1ef      	bne.n	8004980 <quorem+0xf0>
 80049a0:	3c01      	subs	r4, #1
 80049a2:	e7ea      	b.n	800497a <quorem+0xea>
 80049a4:	2000      	movs	r0, #0
 80049a6:	e7ee      	b.n	8004986 <quorem+0xf6>

080049a8 <_dtoa_r>:
 80049a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ac:	ec57 6b10 	vmov	r6, r7, d0
 80049b0:	b097      	sub	sp, #92	; 0x5c
 80049b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80049b4:	9106      	str	r1, [sp, #24]
 80049b6:	4604      	mov	r4, r0
 80049b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80049ba:	9312      	str	r3, [sp, #72]	; 0x48
 80049bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80049c0:	e9cd 6700 	strd	r6, r7, [sp]
 80049c4:	b93d      	cbnz	r5, 80049d6 <_dtoa_r+0x2e>
 80049c6:	2010      	movs	r0, #16
 80049c8:	f000 ff92 	bl	80058f0 <malloc>
 80049cc:	6260      	str	r0, [r4, #36]	; 0x24
 80049ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80049d2:	6005      	str	r5, [r0, #0]
 80049d4:	60c5      	str	r5, [r0, #12]
 80049d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049d8:	6819      	ldr	r1, [r3, #0]
 80049da:	b151      	cbz	r1, 80049f2 <_dtoa_r+0x4a>
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	604a      	str	r2, [r1, #4]
 80049e0:	2301      	movs	r3, #1
 80049e2:	4093      	lsls	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
 80049e6:	4620      	mov	r0, r4
 80049e8:	f000 ffc9 	bl	800597e <_Bfree>
 80049ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	1e3b      	subs	r3, r7, #0
 80049f4:	bfbb      	ittet	lt
 80049f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80049fa:	9301      	strlt	r3, [sp, #4]
 80049fc:	2300      	movge	r3, #0
 80049fe:	2201      	movlt	r2, #1
 8004a00:	bfac      	ite	ge
 8004a02:	f8c8 3000 	strge.w	r3, [r8]
 8004a06:	f8c8 2000 	strlt.w	r2, [r8]
 8004a0a:	4baf      	ldr	r3, [pc, #700]	; (8004cc8 <_dtoa_r+0x320>)
 8004a0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004a10:	ea33 0308 	bics.w	r3, r3, r8
 8004a14:	d114      	bne.n	8004a40 <_dtoa_r+0x98>
 8004a16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a18:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	9b00      	ldr	r3, [sp, #0]
 8004a20:	b923      	cbnz	r3, 8004a2c <_dtoa_r+0x84>
 8004a22:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004a26:	2800      	cmp	r0, #0
 8004a28:	f000 8542 	beq.w	80054b0 <_dtoa_r+0xb08>
 8004a2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a2e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004cdc <_dtoa_r+0x334>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 8544 	beq.w	80054c0 <_dtoa_r+0xb18>
 8004a38:	f10b 0303 	add.w	r3, fp, #3
 8004a3c:	f000 bd3e 	b.w	80054bc <_dtoa_r+0xb14>
 8004a40:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004a44:	2200      	movs	r2, #0
 8004a46:	2300      	movs	r3, #0
 8004a48:	4630      	mov	r0, r6
 8004a4a:	4639      	mov	r1, r7
 8004a4c:	f7fc f814 	bl	8000a78 <__aeabi_dcmpeq>
 8004a50:	4681      	mov	r9, r0
 8004a52:	b168      	cbz	r0, 8004a70 <_dtoa_r+0xc8>
 8004a54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a56:	2301      	movs	r3, #1
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8524 	beq.w	80054aa <_dtoa_r+0xb02>
 8004a62:	4b9a      	ldr	r3, [pc, #616]	; (8004ccc <_dtoa_r+0x324>)
 8004a64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004a66:	f103 3bff 	add.w	fp, r3, #4294967295
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	f000 bd28 	b.w	80054c0 <_dtoa_r+0xb18>
 8004a70:	aa14      	add	r2, sp, #80	; 0x50
 8004a72:	a915      	add	r1, sp, #84	; 0x54
 8004a74:	ec47 6b10 	vmov	d0, r6, r7
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f001 f9d8 	bl	8005e2e <__d2b>
 8004a7e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004a82:	9004      	str	r0, [sp, #16]
 8004a84:	2d00      	cmp	r5, #0
 8004a86:	d07c      	beq.n	8004b82 <_dtoa_r+0x1da>
 8004a88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004a8c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004a90:	46b2      	mov	sl, r6
 8004a92:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004a96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004a9a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	4b8b      	ldr	r3, [pc, #556]	; (8004cd0 <_dtoa_r+0x328>)
 8004aa2:	4650      	mov	r0, sl
 8004aa4:	4659      	mov	r1, fp
 8004aa6:	f7fb fbc7 	bl	8000238 <__aeabi_dsub>
 8004aaa:	a381      	add	r3, pc, #516	; (adr r3, 8004cb0 <_dtoa_r+0x308>)
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	f7fb fd7a 	bl	80005a8 <__aeabi_dmul>
 8004ab4:	a380      	add	r3, pc, #512	; (adr r3, 8004cb8 <_dtoa_r+0x310>)
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	f7fb fbbf 	bl	800023c <__adddf3>
 8004abe:	4606      	mov	r6, r0
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	460f      	mov	r7, r1
 8004ac4:	f7fb fd06 	bl	80004d4 <__aeabi_i2d>
 8004ac8:	a37d      	add	r3, pc, #500	; (adr r3, 8004cc0 <_dtoa_r+0x318>)
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	f7fb fd6b 	bl	80005a8 <__aeabi_dmul>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	4639      	mov	r1, r7
 8004ada:	f7fb fbaf 	bl	800023c <__adddf3>
 8004ade:	4606      	mov	r6, r0
 8004ae0:	460f      	mov	r7, r1
 8004ae2:	f7fc f811 	bl	8000b08 <__aeabi_d2iz>
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	4682      	mov	sl, r0
 8004aea:	2300      	movs	r3, #0
 8004aec:	4630      	mov	r0, r6
 8004aee:	4639      	mov	r1, r7
 8004af0:	f7fb ffcc 	bl	8000a8c <__aeabi_dcmplt>
 8004af4:	b148      	cbz	r0, 8004b0a <_dtoa_r+0x162>
 8004af6:	4650      	mov	r0, sl
 8004af8:	f7fb fcec 	bl	80004d4 <__aeabi_i2d>
 8004afc:	4632      	mov	r2, r6
 8004afe:	463b      	mov	r3, r7
 8004b00:	f7fb ffba 	bl	8000a78 <__aeabi_dcmpeq>
 8004b04:	b908      	cbnz	r0, 8004b0a <_dtoa_r+0x162>
 8004b06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b0a:	f1ba 0f16 	cmp.w	sl, #22
 8004b0e:	d859      	bhi.n	8004bc4 <_dtoa_r+0x21c>
 8004b10:	4970      	ldr	r1, [pc, #448]	; (8004cd4 <_dtoa_r+0x32c>)
 8004b12:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004b16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b1e:	f7fb ffd3 	bl	8000ac8 <__aeabi_dcmpgt>
 8004b22:	2800      	cmp	r0, #0
 8004b24:	d050      	beq.n	8004bc8 <_dtoa_r+0x220>
 8004b26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b30:	1b5d      	subs	r5, r3, r5
 8004b32:	f1b5 0801 	subs.w	r8, r5, #1
 8004b36:	bf49      	itett	mi
 8004b38:	f1c5 0301 	rsbmi	r3, r5, #1
 8004b3c:	2300      	movpl	r3, #0
 8004b3e:	9305      	strmi	r3, [sp, #20]
 8004b40:	f04f 0800 	movmi.w	r8, #0
 8004b44:	bf58      	it	pl
 8004b46:	9305      	strpl	r3, [sp, #20]
 8004b48:	f1ba 0f00 	cmp.w	sl, #0
 8004b4c:	db3e      	blt.n	8004bcc <_dtoa_r+0x224>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	44d0      	add	r8, sl
 8004b52:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004b56:	9307      	str	r3, [sp, #28]
 8004b58:	9b06      	ldr	r3, [sp, #24]
 8004b5a:	2b09      	cmp	r3, #9
 8004b5c:	f200 8090 	bhi.w	8004c80 <_dtoa_r+0x2d8>
 8004b60:	2b05      	cmp	r3, #5
 8004b62:	bfc4      	itt	gt
 8004b64:	3b04      	subgt	r3, #4
 8004b66:	9306      	strgt	r3, [sp, #24]
 8004b68:	9b06      	ldr	r3, [sp, #24]
 8004b6a:	f1a3 0302 	sub.w	r3, r3, #2
 8004b6e:	bfcc      	ite	gt
 8004b70:	2500      	movgt	r5, #0
 8004b72:	2501      	movle	r5, #1
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	f200 808f 	bhi.w	8004c98 <_dtoa_r+0x2f0>
 8004b7a:	e8df f003 	tbb	[pc, r3]
 8004b7e:	7f7d      	.short	0x7f7d
 8004b80:	7131      	.short	0x7131
 8004b82:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004b86:	441d      	add	r5, r3
 8004b88:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004b8c:	2820      	cmp	r0, #32
 8004b8e:	dd13      	ble.n	8004bb8 <_dtoa_r+0x210>
 8004b90:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004b94:	9b00      	ldr	r3, [sp, #0]
 8004b96:	fa08 f800 	lsl.w	r8, r8, r0
 8004b9a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004b9e:	fa23 f000 	lsr.w	r0, r3, r0
 8004ba2:	ea48 0000 	orr.w	r0, r8, r0
 8004ba6:	f7fb fc85 	bl	80004b4 <__aeabi_ui2d>
 8004baa:	2301      	movs	r3, #1
 8004bac:	4682      	mov	sl, r0
 8004bae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004bb2:	3d01      	subs	r5, #1
 8004bb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8004bb6:	e772      	b.n	8004a9e <_dtoa_r+0xf6>
 8004bb8:	9b00      	ldr	r3, [sp, #0]
 8004bba:	f1c0 0020 	rsb	r0, r0, #32
 8004bbe:	fa03 f000 	lsl.w	r0, r3, r0
 8004bc2:	e7f0      	b.n	8004ba6 <_dtoa_r+0x1fe>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e7b1      	b.n	8004b2c <_dtoa_r+0x184>
 8004bc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8004bca:	e7b0      	b.n	8004b2e <_dtoa_r+0x186>
 8004bcc:	9b05      	ldr	r3, [sp, #20]
 8004bce:	eba3 030a 	sub.w	r3, r3, sl
 8004bd2:	9305      	str	r3, [sp, #20]
 8004bd4:	f1ca 0300 	rsb	r3, sl, #0
 8004bd8:	9307      	str	r3, [sp, #28]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	930e      	str	r3, [sp, #56]	; 0x38
 8004bde:	e7bb      	b.n	8004b58 <_dtoa_r+0x1b0>
 8004be0:	2301      	movs	r3, #1
 8004be2:	930a      	str	r3, [sp, #40]	; 0x28
 8004be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	dd59      	ble.n	8004c9e <_dtoa_r+0x2f6>
 8004bea:	9302      	str	r3, [sp, #8]
 8004bec:	4699      	mov	r9, r3
 8004bee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	6072      	str	r2, [r6, #4]
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	f102 0014 	add.w	r0, r2, #20
 8004bfa:	4298      	cmp	r0, r3
 8004bfc:	6871      	ldr	r1, [r6, #4]
 8004bfe:	d953      	bls.n	8004ca8 <_dtoa_r+0x300>
 8004c00:	4620      	mov	r0, r4
 8004c02:	f000 fe88 	bl	8005916 <_Balloc>
 8004c06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c08:	6030      	str	r0, [r6, #0]
 8004c0a:	f1b9 0f0e 	cmp.w	r9, #14
 8004c0e:	f8d3 b000 	ldr.w	fp, [r3]
 8004c12:	f200 80e6 	bhi.w	8004de2 <_dtoa_r+0x43a>
 8004c16:	2d00      	cmp	r5, #0
 8004c18:	f000 80e3 	beq.w	8004de2 <_dtoa_r+0x43a>
 8004c1c:	ed9d 7b00 	vldr	d7, [sp]
 8004c20:	f1ba 0f00 	cmp.w	sl, #0
 8004c24:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004c28:	dd74      	ble.n	8004d14 <_dtoa_r+0x36c>
 8004c2a:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <_dtoa_r+0x32c>)
 8004c2c:	f00a 030f 	and.w	r3, sl, #15
 8004c30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c34:	ed93 7b00 	vldr	d7, [r3]
 8004c38:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004c3c:	06f0      	lsls	r0, r6, #27
 8004c3e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004c42:	d565      	bpl.n	8004d10 <_dtoa_r+0x368>
 8004c44:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <_dtoa_r+0x330>)
 8004c46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c4e:	f7fb fdd5 	bl	80007fc <__aeabi_ddiv>
 8004c52:	e9cd 0100 	strd	r0, r1, [sp]
 8004c56:	f006 060f 	and.w	r6, r6, #15
 8004c5a:	2503      	movs	r5, #3
 8004c5c:	4f1e      	ldr	r7, [pc, #120]	; (8004cd8 <_dtoa_r+0x330>)
 8004c5e:	e04c      	b.n	8004cfa <_dtoa_r+0x352>
 8004c60:	2301      	movs	r3, #1
 8004c62:	930a      	str	r3, [sp, #40]	; 0x28
 8004c64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c66:	4453      	add	r3, sl
 8004c68:	f103 0901 	add.w	r9, r3, #1
 8004c6c:	9302      	str	r3, [sp, #8]
 8004c6e:	464b      	mov	r3, r9
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	bfb8      	it	lt
 8004c74:	2301      	movlt	r3, #1
 8004c76:	e7ba      	b.n	8004bee <_dtoa_r+0x246>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e7b2      	b.n	8004be2 <_dtoa_r+0x23a>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e7f0      	b.n	8004c62 <_dtoa_r+0x2ba>
 8004c80:	2501      	movs	r5, #1
 8004c82:	2300      	movs	r3, #0
 8004c84:	9306      	str	r3, [sp, #24]
 8004c86:	950a      	str	r5, [sp, #40]	; 0x28
 8004c88:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8c:	9302      	str	r3, [sp, #8]
 8004c8e:	4699      	mov	r9, r3
 8004c90:	2200      	movs	r2, #0
 8004c92:	2312      	movs	r3, #18
 8004c94:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c96:	e7aa      	b.n	8004bee <_dtoa_r+0x246>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8004c9c:	e7f4      	b.n	8004c88 <_dtoa_r+0x2e0>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	9302      	str	r3, [sp, #8]
 8004ca2:	4699      	mov	r9, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	e7f5      	b.n	8004c94 <_dtoa_r+0x2ec>
 8004ca8:	3101      	adds	r1, #1
 8004caa:	6071      	str	r1, [r6, #4]
 8004cac:	0052      	lsls	r2, r2, #1
 8004cae:	e7a2      	b.n	8004bf6 <_dtoa_r+0x24e>
 8004cb0:	636f4361 	.word	0x636f4361
 8004cb4:	3fd287a7 	.word	0x3fd287a7
 8004cb8:	8b60c8b3 	.word	0x8b60c8b3
 8004cbc:	3fc68a28 	.word	0x3fc68a28
 8004cc0:	509f79fb 	.word	0x509f79fb
 8004cc4:	3fd34413 	.word	0x3fd34413
 8004cc8:	7ff00000 	.word	0x7ff00000
 8004ccc:	08006649 	.word	0x08006649
 8004cd0:	3ff80000 	.word	0x3ff80000
 8004cd4:	08006708 	.word	0x08006708
 8004cd8:	080066e0 	.word	0x080066e0
 8004cdc:	08006675 	.word	0x08006675
 8004ce0:	07f1      	lsls	r1, r6, #31
 8004ce2:	d508      	bpl.n	8004cf6 <_dtoa_r+0x34e>
 8004ce4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cec:	f7fb fc5c 	bl	80005a8 <__aeabi_dmul>
 8004cf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004cf4:	3501      	adds	r5, #1
 8004cf6:	1076      	asrs	r6, r6, #1
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	2e00      	cmp	r6, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <_dtoa_r+0x338>
 8004cfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d06:	f7fb fd79 	bl	80007fc <__aeabi_ddiv>
 8004d0a:	e9cd 0100 	strd	r0, r1, [sp]
 8004d0e:	e01a      	b.n	8004d46 <_dtoa_r+0x39e>
 8004d10:	2502      	movs	r5, #2
 8004d12:	e7a3      	b.n	8004c5c <_dtoa_r+0x2b4>
 8004d14:	f000 80a0 	beq.w	8004e58 <_dtoa_r+0x4b0>
 8004d18:	f1ca 0600 	rsb	r6, sl, #0
 8004d1c:	4b9f      	ldr	r3, [pc, #636]	; (8004f9c <_dtoa_r+0x5f4>)
 8004d1e:	4fa0      	ldr	r7, [pc, #640]	; (8004fa0 <_dtoa_r+0x5f8>)
 8004d20:	f006 020f 	and.w	r2, r6, #15
 8004d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d30:	f7fb fc3a 	bl	80005a8 <__aeabi_dmul>
 8004d34:	e9cd 0100 	strd	r0, r1, [sp]
 8004d38:	1136      	asrs	r6, r6, #4
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2502      	movs	r5, #2
 8004d3e:	2e00      	cmp	r6, #0
 8004d40:	d17f      	bne.n	8004e42 <_dtoa_r+0x49a>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1e1      	bne.n	8004d0a <_dtoa_r+0x362>
 8004d46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8087 	beq.w	8004e5c <_dtoa_r+0x4b4>
 8004d4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004d52:	2200      	movs	r2, #0
 8004d54:	4b93      	ldr	r3, [pc, #588]	; (8004fa4 <_dtoa_r+0x5fc>)
 8004d56:	4630      	mov	r0, r6
 8004d58:	4639      	mov	r1, r7
 8004d5a:	f7fb fe97 	bl	8000a8c <__aeabi_dcmplt>
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d07c      	beq.n	8004e5c <_dtoa_r+0x4b4>
 8004d62:	f1b9 0f00 	cmp.w	r9, #0
 8004d66:	d079      	beq.n	8004e5c <_dtoa_r+0x4b4>
 8004d68:	9b02      	ldr	r3, [sp, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	dd35      	ble.n	8004dda <_dtoa_r+0x432>
 8004d6e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004d72:	9308      	str	r3, [sp, #32]
 8004d74:	4639      	mov	r1, r7
 8004d76:	2200      	movs	r2, #0
 8004d78:	4b8b      	ldr	r3, [pc, #556]	; (8004fa8 <_dtoa_r+0x600>)
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f7fb fc14 	bl	80005a8 <__aeabi_dmul>
 8004d80:	e9cd 0100 	strd	r0, r1, [sp]
 8004d84:	9f02      	ldr	r7, [sp, #8]
 8004d86:	3501      	adds	r5, #1
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f7fb fba3 	bl	80004d4 <__aeabi_i2d>
 8004d8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d92:	f7fb fc09 	bl	80005a8 <__aeabi_dmul>
 8004d96:	2200      	movs	r2, #0
 8004d98:	4b84      	ldr	r3, [pc, #528]	; (8004fac <_dtoa_r+0x604>)
 8004d9a:	f7fb fa4f 	bl	800023c <__adddf3>
 8004d9e:	4605      	mov	r5, r0
 8004da0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004da4:	2f00      	cmp	r7, #0
 8004da6:	d15d      	bne.n	8004e64 <_dtoa_r+0x4bc>
 8004da8:	2200      	movs	r2, #0
 8004daa:	4b81      	ldr	r3, [pc, #516]	; (8004fb0 <_dtoa_r+0x608>)
 8004dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004db0:	f7fb fa42 	bl	8000238 <__aeabi_dsub>
 8004db4:	462a      	mov	r2, r5
 8004db6:	4633      	mov	r3, r6
 8004db8:	e9cd 0100 	strd	r0, r1, [sp]
 8004dbc:	f7fb fe84 	bl	8000ac8 <__aeabi_dcmpgt>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	f040 8288 	bne.w	80052d6 <_dtoa_r+0x92e>
 8004dc6:	462a      	mov	r2, r5
 8004dc8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004dcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004dd0:	f7fb fe5c 	bl	8000a8c <__aeabi_dcmplt>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	f040 827c 	bne.w	80052d2 <_dtoa_r+0x92a>
 8004dda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004dde:	e9cd 2300 	strd	r2, r3, [sp]
 8004de2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f2c0 8150 	blt.w	800508a <_dtoa_r+0x6e2>
 8004dea:	f1ba 0f0e 	cmp.w	sl, #14
 8004dee:	f300 814c 	bgt.w	800508a <_dtoa_r+0x6e2>
 8004df2:	4b6a      	ldr	r3, [pc, #424]	; (8004f9c <_dtoa_r+0x5f4>)
 8004df4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004df8:	ed93 7b00 	vldr	d7, [r3]
 8004dfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004e04:	f280 80d8 	bge.w	8004fb8 <_dtoa_r+0x610>
 8004e08:	f1b9 0f00 	cmp.w	r9, #0
 8004e0c:	f300 80d4 	bgt.w	8004fb8 <_dtoa_r+0x610>
 8004e10:	f040 825e 	bne.w	80052d0 <_dtoa_r+0x928>
 8004e14:	2200      	movs	r2, #0
 8004e16:	4b66      	ldr	r3, [pc, #408]	; (8004fb0 <_dtoa_r+0x608>)
 8004e18:	ec51 0b17 	vmov	r0, r1, d7
 8004e1c:	f7fb fbc4 	bl	80005a8 <__aeabi_dmul>
 8004e20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e24:	f7fb fe46 	bl	8000ab4 <__aeabi_dcmpge>
 8004e28:	464f      	mov	r7, r9
 8004e2a:	464e      	mov	r6, r9
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	f040 8234 	bne.w	800529a <_dtoa_r+0x8f2>
 8004e32:	2331      	movs	r3, #49	; 0x31
 8004e34:	f10b 0501 	add.w	r5, fp, #1
 8004e38:	f88b 3000 	strb.w	r3, [fp]
 8004e3c:	f10a 0a01 	add.w	sl, sl, #1
 8004e40:	e22f      	b.n	80052a2 <_dtoa_r+0x8fa>
 8004e42:	07f2      	lsls	r2, r6, #31
 8004e44:	d505      	bpl.n	8004e52 <_dtoa_r+0x4aa>
 8004e46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e4a:	f7fb fbad 	bl	80005a8 <__aeabi_dmul>
 8004e4e:	3501      	adds	r5, #1
 8004e50:	2301      	movs	r3, #1
 8004e52:	1076      	asrs	r6, r6, #1
 8004e54:	3708      	adds	r7, #8
 8004e56:	e772      	b.n	8004d3e <_dtoa_r+0x396>
 8004e58:	2502      	movs	r5, #2
 8004e5a:	e774      	b.n	8004d46 <_dtoa_r+0x39e>
 8004e5c:	f8cd a020 	str.w	sl, [sp, #32]
 8004e60:	464f      	mov	r7, r9
 8004e62:	e791      	b.n	8004d88 <_dtoa_r+0x3e0>
 8004e64:	4b4d      	ldr	r3, [pc, #308]	; (8004f9c <_dtoa_r+0x5f4>)
 8004e66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004e6a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d047      	beq.n	8004f04 <_dtoa_r+0x55c>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	2000      	movs	r0, #0
 8004e7a:	494e      	ldr	r1, [pc, #312]	; (8004fb4 <_dtoa_r+0x60c>)
 8004e7c:	f7fb fcbe 	bl	80007fc <__aeabi_ddiv>
 8004e80:	462a      	mov	r2, r5
 8004e82:	4633      	mov	r3, r6
 8004e84:	f7fb f9d8 	bl	8000238 <__aeabi_dsub>
 8004e88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004e8c:	465d      	mov	r5, fp
 8004e8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e92:	f7fb fe39 	bl	8000b08 <__aeabi_d2iz>
 8004e96:	4606      	mov	r6, r0
 8004e98:	f7fb fb1c 	bl	80004d4 <__aeabi_i2d>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ea4:	f7fb f9c8 	bl	8000238 <__aeabi_dsub>
 8004ea8:	3630      	adds	r6, #48	; 0x30
 8004eaa:	f805 6b01 	strb.w	r6, [r5], #1
 8004eae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004eb2:	e9cd 0100 	strd	r0, r1, [sp]
 8004eb6:	f7fb fde9 	bl	8000a8c <__aeabi_dcmplt>
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	d163      	bne.n	8004f86 <_dtoa_r+0x5de>
 8004ebe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	4937      	ldr	r1, [pc, #220]	; (8004fa4 <_dtoa_r+0x5fc>)
 8004ec6:	f7fb f9b7 	bl	8000238 <__aeabi_dsub>
 8004eca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004ece:	f7fb fddd 	bl	8000a8c <__aeabi_dcmplt>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	f040 80b7 	bne.w	8005046 <_dtoa_r+0x69e>
 8004ed8:	eba5 030b 	sub.w	r3, r5, fp
 8004edc:	429f      	cmp	r7, r3
 8004ede:	f77f af7c 	ble.w	8004dda <_dtoa_r+0x432>
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	4b30      	ldr	r3, [pc, #192]	; (8004fa8 <_dtoa_r+0x600>)
 8004ee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004eea:	f7fb fb5d 	bl	80005a8 <__aeabi_dmul>
 8004eee:	2200      	movs	r2, #0
 8004ef0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004ef4:	4b2c      	ldr	r3, [pc, #176]	; (8004fa8 <_dtoa_r+0x600>)
 8004ef6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004efa:	f7fb fb55 	bl	80005a8 <__aeabi_dmul>
 8004efe:	e9cd 0100 	strd	r0, r1, [sp]
 8004f02:	e7c4      	b.n	8004e8e <_dtoa_r+0x4e6>
 8004f04:	462a      	mov	r2, r5
 8004f06:	4633      	mov	r3, r6
 8004f08:	f7fb fb4e 	bl	80005a8 <__aeabi_dmul>
 8004f0c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004f10:	eb0b 0507 	add.w	r5, fp, r7
 8004f14:	465e      	mov	r6, fp
 8004f16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f1a:	f7fb fdf5 	bl	8000b08 <__aeabi_d2iz>
 8004f1e:	4607      	mov	r7, r0
 8004f20:	f7fb fad8 	bl	80004d4 <__aeabi_i2d>
 8004f24:	3730      	adds	r7, #48	; 0x30
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f2e:	f7fb f983 	bl	8000238 <__aeabi_dsub>
 8004f32:	f806 7b01 	strb.w	r7, [r6], #1
 8004f36:	42ae      	cmp	r6, r5
 8004f38:	e9cd 0100 	strd	r0, r1, [sp]
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	d126      	bne.n	8004f90 <_dtoa_r+0x5e8>
 8004f42:	4b1c      	ldr	r3, [pc, #112]	; (8004fb4 <_dtoa_r+0x60c>)
 8004f44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f48:	f7fb f978 	bl	800023c <__adddf3>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f54:	f7fb fdb8 	bl	8000ac8 <__aeabi_dcmpgt>
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	d174      	bne.n	8005046 <_dtoa_r+0x69e>
 8004f5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f60:	2000      	movs	r0, #0
 8004f62:	4914      	ldr	r1, [pc, #80]	; (8004fb4 <_dtoa_r+0x60c>)
 8004f64:	f7fb f968 	bl	8000238 <__aeabi_dsub>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f70:	f7fb fd8c 	bl	8000a8c <__aeabi_dcmplt>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	f43f af30 	beq.w	8004dda <_dtoa_r+0x432>
 8004f7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f7e:	2b30      	cmp	r3, #48	; 0x30
 8004f80:	f105 32ff 	add.w	r2, r5, #4294967295
 8004f84:	d002      	beq.n	8004f8c <_dtoa_r+0x5e4>
 8004f86:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004f8a:	e04a      	b.n	8005022 <_dtoa_r+0x67a>
 8004f8c:	4615      	mov	r5, r2
 8004f8e:	e7f4      	b.n	8004f7a <_dtoa_r+0x5d2>
 8004f90:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <_dtoa_r+0x600>)
 8004f92:	f7fb fb09 	bl	80005a8 <__aeabi_dmul>
 8004f96:	e9cd 0100 	strd	r0, r1, [sp]
 8004f9a:	e7bc      	b.n	8004f16 <_dtoa_r+0x56e>
 8004f9c:	08006708 	.word	0x08006708
 8004fa0:	080066e0 	.word	0x080066e0
 8004fa4:	3ff00000 	.word	0x3ff00000
 8004fa8:	40240000 	.word	0x40240000
 8004fac:	401c0000 	.word	0x401c0000
 8004fb0:	40140000 	.word	0x40140000
 8004fb4:	3fe00000 	.word	0x3fe00000
 8004fb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004fbc:	465d      	mov	r5, fp
 8004fbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	f7fb fc19 	bl	80007fc <__aeabi_ddiv>
 8004fca:	f7fb fd9d 	bl	8000b08 <__aeabi_d2iz>
 8004fce:	4680      	mov	r8, r0
 8004fd0:	f7fb fa80 	bl	80004d4 <__aeabi_i2d>
 8004fd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fd8:	f7fb fae6 	bl	80005a8 <__aeabi_dmul>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	4639      	mov	r1, r7
 8004fe4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004fe8:	f7fb f926 	bl	8000238 <__aeabi_dsub>
 8004fec:	f805 6b01 	strb.w	r6, [r5], #1
 8004ff0:	eba5 060b 	sub.w	r6, r5, fp
 8004ff4:	45b1      	cmp	r9, r6
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	d139      	bne.n	8005070 <_dtoa_r+0x6c8>
 8004ffc:	f7fb f91e 	bl	800023c <__adddf3>
 8005000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005004:	4606      	mov	r6, r0
 8005006:	460f      	mov	r7, r1
 8005008:	f7fb fd5e 	bl	8000ac8 <__aeabi_dcmpgt>
 800500c:	b9c8      	cbnz	r0, 8005042 <_dtoa_r+0x69a>
 800500e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005012:	4630      	mov	r0, r6
 8005014:	4639      	mov	r1, r7
 8005016:	f7fb fd2f 	bl	8000a78 <__aeabi_dcmpeq>
 800501a:	b110      	cbz	r0, 8005022 <_dtoa_r+0x67a>
 800501c:	f018 0f01 	tst.w	r8, #1
 8005020:	d10f      	bne.n	8005042 <_dtoa_r+0x69a>
 8005022:	9904      	ldr	r1, [sp, #16]
 8005024:	4620      	mov	r0, r4
 8005026:	f000 fcaa 	bl	800597e <_Bfree>
 800502a:	2300      	movs	r3, #0
 800502c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800502e:	702b      	strb	r3, [r5, #0]
 8005030:	f10a 0301 	add.w	r3, sl, #1
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8241 	beq.w	80054c0 <_dtoa_r+0xb18>
 800503e:	601d      	str	r5, [r3, #0]
 8005040:	e23e      	b.n	80054c0 <_dtoa_r+0xb18>
 8005042:	f8cd a020 	str.w	sl, [sp, #32]
 8005046:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800504a:	2a39      	cmp	r2, #57	; 0x39
 800504c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005050:	d108      	bne.n	8005064 <_dtoa_r+0x6bc>
 8005052:	459b      	cmp	fp, r3
 8005054:	d10a      	bne.n	800506c <_dtoa_r+0x6c4>
 8005056:	9b08      	ldr	r3, [sp, #32]
 8005058:	3301      	adds	r3, #1
 800505a:	9308      	str	r3, [sp, #32]
 800505c:	2330      	movs	r3, #48	; 0x30
 800505e:	f88b 3000 	strb.w	r3, [fp]
 8005062:	465b      	mov	r3, fp
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	3201      	adds	r2, #1
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	e78c      	b.n	8004f86 <_dtoa_r+0x5de>
 800506c:	461d      	mov	r5, r3
 800506e:	e7ea      	b.n	8005046 <_dtoa_r+0x69e>
 8005070:	2200      	movs	r2, #0
 8005072:	4b9b      	ldr	r3, [pc, #620]	; (80052e0 <_dtoa_r+0x938>)
 8005074:	f7fb fa98 	bl	80005a8 <__aeabi_dmul>
 8005078:	2200      	movs	r2, #0
 800507a:	2300      	movs	r3, #0
 800507c:	4606      	mov	r6, r0
 800507e:	460f      	mov	r7, r1
 8005080:	f7fb fcfa 	bl	8000a78 <__aeabi_dcmpeq>
 8005084:	2800      	cmp	r0, #0
 8005086:	d09a      	beq.n	8004fbe <_dtoa_r+0x616>
 8005088:	e7cb      	b.n	8005022 <_dtoa_r+0x67a>
 800508a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800508c:	2a00      	cmp	r2, #0
 800508e:	f000 808b 	beq.w	80051a8 <_dtoa_r+0x800>
 8005092:	9a06      	ldr	r2, [sp, #24]
 8005094:	2a01      	cmp	r2, #1
 8005096:	dc6e      	bgt.n	8005176 <_dtoa_r+0x7ce>
 8005098:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800509a:	2a00      	cmp	r2, #0
 800509c:	d067      	beq.n	800516e <_dtoa_r+0x7c6>
 800509e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80050a2:	9f07      	ldr	r7, [sp, #28]
 80050a4:	9d05      	ldr	r5, [sp, #20]
 80050a6:	9a05      	ldr	r2, [sp, #20]
 80050a8:	2101      	movs	r1, #1
 80050aa:	441a      	add	r2, r3
 80050ac:	4620      	mov	r0, r4
 80050ae:	9205      	str	r2, [sp, #20]
 80050b0:	4498      	add	r8, r3
 80050b2:	f000 fd04 	bl	8005abe <__i2b>
 80050b6:	4606      	mov	r6, r0
 80050b8:	2d00      	cmp	r5, #0
 80050ba:	dd0c      	ble.n	80050d6 <_dtoa_r+0x72e>
 80050bc:	f1b8 0f00 	cmp.w	r8, #0
 80050c0:	dd09      	ble.n	80050d6 <_dtoa_r+0x72e>
 80050c2:	4545      	cmp	r5, r8
 80050c4:	9a05      	ldr	r2, [sp, #20]
 80050c6:	462b      	mov	r3, r5
 80050c8:	bfa8      	it	ge
 80050ca:	4643      	movge	r3, r8
 80050cc:	1ad2      	subs	r2, r2, r3
 80050ce:	9205      	str	r2, [sp, #20]
 80050d0:	1aed      	subs	r5, r5, r3
 80050d2:	eba8 0803 	sub.w	r8, r8, r3
 80050d6:	9b07      	ldr	r3, [sp, #28]
 80050d8:	b1eb      	cbz	r3, 8005116 <_dtoa_r+0x76e>
 80050da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d067      	beq.n	80051b0 <_dtoa_r+0x808>
 80050e0:	b18f      	cbz	r7, 8005106 <_dtoa_r+0x75e>
 80050e2:	4631      	mov	r1, r6
 80050e4:	463a      	mov	r2, r7
 80050e6:	4620      	mov	r0, r4
 80050e8:	f000 fd88 	bl	8005bfc <__pow5mult>
 80050ec:	9a04      	ldr	r2, [sp, #16]
 80050ee:	4601      	mov	r1, r0
 80050f0:	4606      	mov	r6, r0
 80050f2:	4620      	mov	r0, r4
 80050f4:	f000 fcec 	bl	8005ad0 <__multiply>
 80050f8:	9904      	ldr	r1, [sp, #16]
 80050fa:	9008      	str	r0, [sp, #32]
 80050fc:	4620      	mov	r0, r4
 80050fe:	f000 fc3e 	bl	800597e <_Bfree>
 8005102:	9b08      	ldr	r3, [sp, #32]
 8005104:	9304      	str	r3, [sp, #16]
 8005106:	9b07      	ldr	r3, [sp, #28]
 8005108:	1bda      	subs	r2, r3, r7
 800510a:	d004      	beq.n	8005116 <_dtoa_r+0x76e>
 800510c:	9904      	ldr	r1, [sp, #16]
 800510e:	4620      	mov	r0, r4
 8005110:	f000 fd74 	bl	8005bfc <__pow5mult>
 8005114:	9004      	str	r0, [sp, #16]
 8005116:	2101      	movs	r1, #1
 8005118:	4620      	mov	r0, r4
 800511a:	f000 fcd0 	bl	8005abe <__i2b>
 800511e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005120:	4607      	mov	r7, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 81d0 	beq.w	80054c8 <_dtoa_r+0xb20>
 8005128:	461a      	mov	r2, r3
 800512a:	4601      	mov	r1, r0
 800512c:	4620      	mov	r0, r4
 800512e:	f000 fd65 	bl	8005bfc <__pow5mult>
 8005132:	9b06      	ldr	r3, [sp, #24]
 8005134:	2b01      	cmp	r3, #1
 8005136:	4607      	mov	r7, r0
 8005138:	dc40      	bgt.n	80051bc <_dtoa_r+0x814>
 800513a:	9b00      	ldr	r3, [sp, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d139      	bne.n	80051b4 <_dtoa_r+0x80c>
 8005140:	9b01      	ldr	r3, [sp, #4]
 8005142:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005146:	2b00      	cmp	r3, #0
 8005148:	d136      	bne.n	80051b8 <_dtoa_r+0x810>
 800514a:	9b01      	ldr	r3, [sp, #4]
 800514c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005150:	0d1b      	lsrs	r3, r3, #20
 8005152:	051b      	lsls	r3, r3, #20
 8005154:	b12b      	cbz	r3, 8005162 <_dtoa_r+0x7ba>
 8005156:	9b05      	ldr	r3, [sp, #20]
 8005158:	3301      	adds	r3, #1
 800515a:	9305      	str	r3, [sp, #20]
 800515c:	f108 0801 	add.w	r8, r8, #1
 8005160:	2301      	movs	r3, #1
 8005162:	9307      	str	r3, [sp, #28]
 8005164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005166:	2b00      	cmp	r3, #0
 8005168:	d12a      	bne.n	80051c0 <_dtoa_r+0x818>
 800516a:	2001      	movs	r0, #1
 800516c:	e030      	b.n	80051d0 <_dtoa_r+0x828>
 800516e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005170:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005174:	e795      	b.n	80050a2 <_dtoa_r+0x6fa>
 8005176:	9b07      	ldr	r3, [sp, #28]
 8005178:	f109 37ff 	add.w	r7, r9, #4294967295
 800517c:	42bb      	cmp	r3, r7
 800517e:	bfbf      	itttt	lt
 8005180:	9b07      	ldrlt	r3, [sp, #28]
 8005182:	9707      	strlt	r7, [sp, #28]
 8005184:	1afa      	sublt	r2, r7, r3
 8005186:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005188:	bfbb      	ittet	lt
 800518a:	189b      	addlt	r3, r3, r2
 800518c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800518e:	1bdf      	subge	r7, r3, r7
 8005190:	2700      	movlt	r7, #0
 8005192:	f1b9 0f00 	cmp.w	r9, #0
 8005196:	bfb5      	itete	lt
 8005198:	9b05      	ldrlt	r3, [sp, #20]
 800519a:	9d05      	ldrge	r5, [sp, #20]
 800519c:	eba3 0509 	sublt.w	r5, r3, r9
 80051a0:	464b      	movge	r3, r9
 80051a2:	bfb8      	it	lt
 80051a4:	2300      	movlt	r3, #0
 80051a6:	e77e      	b.n	80050a6 <_dtoa_r+0x6fe>
 80051a8:	9f07      	ldr	r7, [sp, #28]
 80051aa:	9d05      	ldr	r5, [sp, #20]
 80051ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80051ae:	e783      	b.n	80050b8 <_dtoa_r+0x710>
 80051b0:	9a07      	ldr	r2, [sp, #28]
 80051b2:	e7ab      	b.n	800510c <_dtoa_r+0x764>
 80051b4:	2300      	movs	r3, #0
 80051b6:	e7d4      	b.n	8005162 <_dtoa_r+0x7ba>
 80051b8:	9b00      	ldr	r3, [sp, #0]
 80051ba:	e7d2      	b.n	8005162 <_dtoa_r+0x7ba>
 80051bc:	2300      	movs	r3, #0
 80051be:	9307      	str	r3, [sp, #28]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80051c6:	6918      	ldr	r0, [r3, #16]
 80051c8:	f000 fc2b 	bl	8005a22 <__hi0bits>
 80051cc:	f1c0 0020 	rsb	r0, r0, #32
 80051d0:	4440      	add	r0, r8
 80051d2:	f010 001f 	ands.w	r0, r0, #31
 80051d6:	d047      	beq.n	8005268 <_dtoa_r+0x8c0>
 80051d8:	f1c0 0320 	rsb	r3, r0, #32
 80051dc:	2b04      	cmp	r3, #4
 80051de:	dd3b      	ble.n	8005258 <_dtoa_r+0x8b0>
 80051e0:	9b05      	ldr	r3, [sp, #20]
 80051e2:	f1c0 001c 	rsb	r0, r0, #28
 80051e6:	4403      	add	r3, r0
 80051e8:	9305      	str	r3, [sp, #20]
 80051ea:	4405      	add	r5, r0
 80051ec:	4480      	add	r8, r0
 80051ee:	9b05      	ldr	r3, [sp, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	dd05      	ble.n	8005200 <_dtoa_r+0x858>
 80051f4:	461a      	mov	r2, r3
 80051f6:	9904      	ldr	r1, [sp, #16]
 80051f8:	4620      	mov	r0, r4
 80051fa:	f000 fd4d 	bl	8005c98 <__lshift>
 80051fe:	9004      	str	r0, [sp, #16]
 8005200:	f1b8 0f00 	cmp.w	r8, #0
 8005204:	dd05      	ble.n	8005212 <_dtoa_r+0x86a>
 8005206:	4639      	mov	r1, r7
 8005208:	4642      	mov	r2, r8
 800520a:	4620      	mov	r0, r4
 800520c:	f000 fd44 	bl	8005c98 <__lshift>
 8005210:	4607      	mov	r7, r0
 8005212:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005214:	b353      	cbz	r3, 800526c <_dtoa_r+0x8c4>
 8005216:	4639      	mov	r1, r7
 8005218:	9804      	ldr	r0, [sp, #16]
 800521a:	f000 fd91 	bl	8005d40 <__mcmp>
 800521e:	2800      	cmp	r0, #0
 8005220:	da24      	bge.n	800526c <_dtoa_r+0x8c4>
 8005222:	2300      	movs	r3, #0
 8005224:	220a      	movs	r2, #10
 8005226:	9904      	ldr	r1, [sp, #16]
 8005228:	4620      	mov	r0, r4
 800522a:	f000 fbbf 	bl	80059ac <__multadd>
 800522e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005230:	9004      	str	r0, [sp, #16]
 8005232:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 814d 	beq.w	80054d6 <_dtoa_r+0xb2e>
 800523c:	2300      	movs	r3, #0
 800523e:	4631      	mov	r1, r6
 8005240:	220a      	movs	r2, #10
 8005242:	4620      	mov	r0, r4
 8005244:	f000 fbb2 	bl	80059ac <__multadd>
 8005248:	9b02      	ldr	r3, [sp, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	4606      	mov	r6, r0
 800524e:	dc4f      	bgt.n	80052f0 <_dtoa_r+0x948>
 8005250:	9b06      	ldr	r3, [sp, #24]
 8005252:	2b02      	cmp	r3, #2
 8005254:	dd4c      	ble.n	80052f0 <_dtoa_r+0x948>
 8005256:	e011      	b.n	800527c <_dtoa_r+0x8d4>
 8005258:	d0c9      	beq.n	80051ee <_dtoa_r+0x846>
 800525a:	9a05      	ldr	r2, [sp, #20]
 800525c:	331c      	adds	r3, #28
 800525e:	441a      	add	r2, r3
 8005260:	9205      	str	r2, [sp, #20]
 8005262:	441d      	add	r5, r3
 8005264:	4498      	add	r8, r3
 8005266:	e7c2      	b.n	80051ee <_dtoa_r+0x846>
 8005268:	4603      	mov	r3, r0
 800526a:	e7f6      	b.n	800525a <_dtoa_r+0x8b2>
 800526c:	f1b9 0f00 	cmp.w	r9, #0
 8005270:	dc38      	bgt.n	80052e4 <_dtoa_r+0x93c>
 8005272:	9b06      	ldr	r3, [sp, #24]
 8005274:	2b02      	cmp	r3, #2
 8005276:	dd35      	ble.n	80052e4 <_dtoa_r+0x93c>
 8005278:	f8cd 9008 	str.w	r9, [sp, #8]
 800527c:	9b02      	ldr	r3, [sp, #8]
 800527e:	b963      	cbnz	r3, 800529a <_dtoa_r+0x8f2>
 8005280:	4639      	mov	r1, r7
 8005282:	2205      	movs	r2, #5
 8005284:	4620      	mov	r0, r4
 8005286:	f000 fb91 	bl	80059ac <__multadd>
 800528a:	4601      	mov	r1, r0
 800528c:	4607      	mov	r7, r0
 800528e:	9804      	ldr	r0, [sp, #16]
 8005290:	f000 fd56 	bl	8005d40 <__mcmp>
 8005294:	2800      	cmp	r0, #0
 8005296:	f73f adcc 	bgt.w	8004e32 <_dtoa_r+0x48a>
 800529a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800529c:	465d      	mov	r5, fp
 800529e:	ea6f 0a03 	mvn.w	sl, r3
 80052a2:	f04f 0900 	mov.w	r9, #0
 80052a6:	4639      	mov	r1, r7
 80052a8:	4620      	mov	r0, r4
 80052aa:	f000 fb68 	bl	800597e <_Bfree>
 80052ae:	2e00      	cmp	r6, #0
 80052b0:	f43f aeb7 	beq.w	8005022 <_dtoa_r+0x67a>
 80052b4:	f1b9 0f00 	cmp.w	r9, #0
 80052b8:	d005      	beq.n	80052c6 <_dtoa_r+0x91e>
 80052ba:	45b1      	cmp	r9, r6
 80052bc:	d003      	beq.n	80052c6 <_dtoa_r+0x91e>
 80052be:	4649      	mov	r1, r9
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 fb5c 	bl	800597e <_Bfree>
 80052c6:	4631      	mov	r1, r6
 80052c8:	4620      	mov	r0, r4
 80052ca:	f000 fb58 	bl	800597e <_Bfree>
 80052ce:	e6a8      	b.n	8005022 <_dtoa_r+0x67a>
 80052d0:	2700      	movs	r7, #0
 80052d2:	463e      	mov	r6, r7
 80052d4:	e7e1      	b.n	800529a <_dtoa_r+0x8f2>
 80052d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80052da:	463e      	mov	r6, r7
 80052dc:	e5a9      	b.n	8004e32 <_dtoa_r+0x48a>
 80052de:	bf00      	nop
 80052e0:	40240000 	.word	0x40240000
 80052e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 80fa 	beq.w	80054e4 <_dtoa_r+0xb3c>
 80052f0:	2d00      	cmp	r5, #0
 80052f2:	dd05      	ble.n	8005300 <_dtoa_r+0x958>
 80052f4:	4631      	mov	r1, r6
 80052f6:	462a      	mov	r2, r5
 80052f8:	4620      	mov	r0, r4
 80052fa:	f000 fccd 	bl	8005c98 <__lshift>
 80052fe:	4606      	mov	r6, r0
 8005300:	9b07      	ldr	r3, [sp, #28]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d04c      	beq.n	80053a0 <_dtoa_r+0x9f8>
 8005306:	6871      	ldr	r1, [r6, #4]
 8005308:	4620      	mov	r0, r4
 800530a:	f000 fb04 	bl	8005916 <_Balloc>
 800530e:	6932      	ldr	r2, [r6, #16]
 8005310:	3202      	adds	r2, #2
 8005312:	4605      	mov	r5, r0
 8005314:	0092      	lsls	r2, r2, #2
 8005316:	f106 010c 	add.w	r1, r6, #12
 800531a:	300c      	adds	r0, #12
 800531c:	f000 faf0 	bl	8005900 <memcpy>
 8005320:	2201      	movs	r2, #1
 8005322:	4629      	mov	r1, r5
 8005324:	4620      	mov	r0, r4
 8005326:	f000 fcb7 	bl	8005c98 <__lshift>
 800532a:	9b00      	ldr	r3, [sp, #0]
 800532c:	f8cd b014 	str.w	fp, [sp, #20]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	46b1      	mov	r9, r6
 8005336:	9307      	str	r3, [sp, #28]
 8005338:	4606      	mov	r6, r0
 800533a:	4639      	mov	r1, r7
 800533c:	9804      	ldr	r0, [sp, #16]
 800533e:	f7ff faa7 	bl	8004890 <quorem>
 8005342:	4649      	mov	r1, r9
 8005344:	4605      	mov	r5, r0
 8005346:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800534a:	9804      	ldr	r0, [sp, #16]
 800534c:	f000 fcf8 	bl	8005d40 <__mcmp>
 8005350:	4632      	mov	r2, r6
 8005352:	9000      	str	r0, [sp, #0]
 8005354:	4639      	mov	r1, r7
 8005356:	4620      	mov	r0, r4
 8005358:	f000 fd0c 	bl	8005d74 <__mdiff>
 800535c:	68c3      	ldr	r3, [r0, #12]
 800535e:	4602      	mov	r2, r0
 8005360:	bb03      	cbnz	r3, 80053a4 <_dtoa_r+0x9fc>
 8005362:	4601      	mov	r1, r0
 8005364:	9008      	str	r0, [sp, #32]
 8005366:	9804      	ldr	r0, [sp, #16]
 8005368:	f000 fcea 	bl	8005d40 <__mcmp>
 800536c:	9a08      	ldr	r2, [sp, #32]
 800536e:	4603      	mov	r3, r0
 8005370:	4611      	mov	r1, r2
 8005372:	4620      	mov	r0, r4
 8005374:	9308      	str	r3, [sp, #32]
 8005376:	f000 fb02 	bl	800597e <_Bfree>
 800537a:	9b08      	ldr	r3, [sp, #32]
 800537c:	b9a3      	cbnz	r3, 80053a8 <_dtoa_r+0xa00>
 800537e:	9a06      	ldr	r2, [sp, #24]
 8005380:	b992      	cbnz	r2, 80053a8 <_dtoa_r+0xa00>
 8005382:	9a07      	ldr	r2, [sp, #28]
 8005384:	b982      	cbnz	r2, 80053a8 <_dtoa_r+0xa00>
 8005386:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800538a:	d029      	beq.n	80053e0 <_dtoa_r+0xa38>
 800538c:	9b00      	ldr	r3, [sp, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	dd01      	ble.n	8005396 <_dtoa_r+0x9ee>
 8005392:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005396:	9b05      	ldr	r3, [sp, #20]
 8005398:	1c5d      	adds	r5, r3, #1
 800539a:	f883 8000 	strb.w	r8, [r3]
 800539e:	e782      	b.n	80052a6 <_dtoa_r+0x8fe>
 80053a0:	4630      	mov	r0, r6
 80053a2:	e7c2      	b.n	800532a <_dtoa_r+0x982>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e7e3      	b.n	8005370 <_dtoa_r+0x9c8>
 80053a8:	9a00      	ldr	r2, [sp, #0]
 80053aa:	2a00      	cmp	r2, #0
 80053ac:	db04      	blt.n	80053b8 <_dtoa_r+0xa10>
 80053ae:	d125      	bne.n	80053fc <_dtoa_r+0xa54>
 80053b0:	9a06      	ldr	r2, [sp, #24]
 80053b2:	bb1a      	cbnz	r2, 80053fc <_dtoa_r+0xa54>
 80053b4:	9a07      	ldr	r2, [sp, #28]
 80053b6:	bb0a      	cbnz	r2, 80053fc <_dtoa_r+0xa54>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	ddec      	ble.n	8005396 <_dtoa_r+0x9ee>
 80053bc:	2201      	movs	r2, #1
 80053be:	9904      	ldr	r1, [sp, #16]
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 fc69 	bl	8005c98 <__lshift>
 80053c6:	4639      	mov	r1, r7
 80053c8:	9004      	str	r0, [sp, #16]
 80053ca:	f000 fcb9 	bl	8005d40 <__mcmp>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	dc03      	bgt.n	80053da <_dtoa_r+0xa32>
 80053d2:	d1e0      	bne.n	8005396 <_dtoa_r+0x9ee>
 80053d4:	f018 0f01 	tst.w	r8, #1
 80053d8:	d0dd      	beq.n	8005396 <_dtoa_r+0x9ee>
 80053da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80053de:	d1d8      	bne.n	8005392 <_dtoa_r+0x9ea>
 80053e0:	9b05      	ldr	r3, [sp, #20]
 80053e2:	9a05      	ldr	r2, [sp, #20]
 80053e4:	1c5d      	adds	r5, r3, #1
 80053e6:	2339      	movs	r3, #57	; 0x39
 80053e8:	7013      	strb	r3, [r2, #0]
 80053ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80053ee:	2b39      	cmp	r3, #57	; 0x39
 80053f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80053f4:	d04f      	beq.n	8005496 <_dtoa_r+0xaee>
 80053f6:	3301      	adds	r3, #1
 80053f8:	7013      	strb	r3, [r2, #0]
 80053fa:	e754      	b.n	80052a6 <_dtoa_r+0x8fe>
 80053fc:	9a05      	ldr	r2, [sp, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f102 0501 	add.w	r5, r2, #1
 8005404:	dd06      	ble.n	8005414 <_dtoa_r+0xa6c>
 8005406:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800540a:	d0e9      	beq.n	80053e0 <_dtoa_r+0xa38>
 800540c:	f108 0801 	add.w	r8, r8, #1
 8005410:	9b05      	ldr	r3, [sp, #20]
 8005412:	e7c2      	b.n	800539a <_dtoa_r+0x9f2>
 8005414:	9a02      	ldr	r2, [sp, #8]
 8005416:	f805 8c01 	strb.w	r8, [r5, #-1]
 800541a:	eba5 030b 	sub.w	r3, r5, fp
 800541e:	4293      	cmp	r3, r2
 8005420:	d021      	beq.n	8005466 <_dtoa_r+0xabe>
 8005422:	2300      	movs	r3, #0
 8005424:	220a      	movs	r2, #10
 8005426:	9904      	ldr	r1, [sp, #16]
 8005428:	4620      	mov	r0, r4
 800542a:	f000 fabf 	bl	80059ac <__multadd>
 800542e:	45b1      	cmp	r9, r6
 8005430:	9004      	str	r0, [sp, #16]
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	f04f 020a 	mov.w	r2, #10
 800543a:	4649      	mov	r1, r9
 800543c:	4620      	mov	r0, r4
 800543e:	d105      	bne.n	800544c <_dtoa_r+0xaa4>
 8005440:	f000 fab4 	bl	80059ac <__multadd>
 8005444:	4681      	mov	r9, r0
 8005446:	4606      	mov	r6, r0
 8005448:	9505      	str	r5, [sp, #20]
 800544a:	e776      	b.n	800533a <_dtoa_r+0x992>
 800544c:	f000 faae 	bl	80059ac <__multadd>
 8005450:	4631      	mov	r1, r6
 8005452:	4681      	mov	r9, r0
 8005454:	2300      	movs	r3, #0
 8005456:	220a      	movs	r2, #10
 8005458:	4620      	mov	r0, r4
 800545a:	f000 faa7 	bl	80059ac <__multadd>
 800545e:	4606      	mov	r6, r0
 8005460:	e7f2      	b.n	8005448 <_dtoa_r+0xaa0>
 8005462:	f04f 0900 	mov.w	r9, #0
 8005466:	2201      	movs	r2, #1
 8005468:	9904      	ldr	r1, [sp, #16]
 800546a:	4620      	mov	r0, r4
 800546c:	f000 fc14 	bl	8005c98 <__lshift>
 8005470:	4639      	mov	r1, r7
 8005472:	9004      	str	r0, [sp, #16]
 8005474:	f000 fc64 	bl	8005d40 <__mcmp>
 8005478:	2800      	cmp	r0, #0
 800547a:	dcb6      	bgt.n	80053ea <_dtoa_r+0xa42>
 800547c:	d102      	bne.n	8005484 <_dtoa_r+0xadc>
 800547e:	f018 0f01 	tst.w	r8, #1
 8005482:	d1b2      	bne.n	80053ea <_dtoa_r+0xa42>
 8005484:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005488:	2b30      	cmp	r3, #48	; 0x30
 800548a:	f105 32ff 	add.w	r2, r5, #4294967295
 800548e:	f47f af0a 	bne.w	80052a6 <_dtoa_r+0x8fe>
 8005492:	4615      	mov	r5, r2
 8005494:	e7f6      	b.n	8005484 <_dtoa_r+0xadc>
 8005496:	4593      	cmp	fp, r2
 8005498:	d105      	bne.n	80054a6 <_dtoa_r+0xafe>
 800549a:	2331      	movs	r3, #49	; 0x31
 800549c:	f10a 0a01 	add.w	sl, sl, #1
 80054a0:	f88b 3000 	strb.w	r3, [fp]
 80054a4:	e6ff      	b.n	80052a6 <_dtoa_r+0x8fe>
 80054a6:	4615      	mov	r5, r2
 80054a8:	e79f      	b.n	80053ea <_dtoa_r+0xa42>
 80054aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005510 <_dtoa_r+0xb68>
 80054ae:	e007      	b.n	80054c0 <_dtoa_r+0xb18>
 80054b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005514 <_dtoa_r+0xb6c>
 80054b6:	b11b      	cbz	r3, 80054c0 <_dtoa_r+0xb18>
 80054b8:	f10b 0308 	add.w	r3, fp, #8
 80054bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	4658      	mov	r0, fp
 80054c2:	b017      	add	sp, #92	; 0x5c
 80054c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c8:	9b06      	ldr	r3, [sp, #24]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	f77f ae35 	ble.w	800513a <_dtoa_r+0x792>
 80054d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054d2:	9307      	str	r3, [sp, #28]
 80054d4:	e649      	b.n	800516a <_dtoa_r+0x7c2>
 80054d6:	9b02      	ldr	r3, [sp, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	dc03      	bgt.n	80054e4 <_dtoa_r+0xb3c>
 80054dc:	9b06      	ldr	r3, [sp, #24]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	f73f aecc 	bgt.w	800527c <_dtoa_r+0x8d4>
 80054e4:	465d      	mov	r5, fp
 80054e6:	4639      	mov	r1, r7
 80054e8:	9804      	ldr	r0, [sp, #16]
 80054ea:	f7ff f9d1 	bl	8004890 <quorem>
 80054ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80054f2:	f805 8b01 	strb.w	r8, [r5], #1
 80054f6:	9a02      	ldr	r2, [sp, #8]
 80054f8:	eba5 030b 	sub.w	r3, r5, fp
 80054fc:	429a      	cmp	r2, r3
 80054fe:	ddb0      	ble.n	8005462 <_dtoa_r+0xaba>
 8005500:	2300      	movs	r3, #0
 8005502:	220a      	movs	r2, #10
 8005504:	9904      	ldr	r1, [sp, #16]
 8005506:	4620      	mov	r0, r4
 8005508:	f000 fa50 	bl	80059ac <__multadd>
 800550c:	9004      	str	r0, [sp, #16]
 800550e:	e7ea      	b.n	80054e6 <_dtoa_r+0xb3e>
 8005510:	08006648 	.word	0x08006648
 8005514:	0800666c 	.word	0x0800666c

08005518 <__sflush_r>:
 8005518:	898a      	ldrh	r2, [r1, #12]
 800551a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800551e:	4605      	mov	r5, r0
 8005520:	0710      	lsls	r0, r2, #28
 8005522:	460c      	mov	r4, r1
 8005524:	d458      	bmi.n	80055d8 <__sflush_r+0xc0>
 8005526:	684b      	ldr	r3, [r1, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	dc05      	bgt.n	8005538 <__sflush_r+0x20>
 800552c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	dc02      	bgt.n	8005538 <__sflush_r+0x20>
 8005532:	2000      	movs	r0, #0
 8005534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800553a:	2e00      	cmp	r6, #0
 800553c:	d0f9      	beq.n	8005532 <__sflush_r+0x1a>
 800553e:	2300      	movs	r3, #0
 8005540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005544:	682f      	ldr	r7, [r5, #0]
 8005546:	6a21      	ldr	r1, [r4, #32]
 8005548:	602b      	str	r3, [r5, #0]
 800554a:	d032      	beq.n	80055b2 <__sflush_r+0x9a>
 800554c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800554e:	89a3      	ldrh	r3, [r4, #12]
 8005550:	075a      	lsls	r2, r3, #29
 8005552:	d505      	bpl.n	8005560 <__sflush_r+0x48>
 8005554:	6863      	ldr	r3, [r4, #4]
 8005556:	1ac0      	subs	r0, r0, r3
 8005558:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800555a:	b10b      	cbz	r3, 8005560 <__sflush_r+0x48>
 800555c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800555e:	1ac0      	subs	r0, r0, r3
 8005560:	2300      	movs	r3, #0
 8005562:	4602      	mov	r2, r0
 8005564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005566:	6a21      	ldr	r1, [r4, #32]
 8005568:	4628      	mov	r0, r5
 800556a:	47b0      	blx	r6
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	89a3      	ldrh	r3, [r4, #12]
 8005570:	d106      	bne.n	8005580 <__sflush_r+0x68>
 8005572:	6829      	ldr	r1, [r5, #0]
 8005574:	291d      	cmp	r1, #29
 8005576:	d848      	bhi.n	800560a <__sflush_r+0xf2>
 8005578:	4a29      	ldr	r2, [pc, #164]	; (8005620 <__sflush_r+0x108>)
 800557a:	40ca      	lsrs	r2, r1
 800557c:	07d6      	lsls	r6, r2, #31
 800557e:	d544      	bpl.n	800560a <__sflush_r+0xf2>
 8005580:	2200      	movs	r2, #0
 8005582:	6062      	str	r2, [r4, #4]
 8005584:	04d9      	lsls	r1, r3, #19
 8005586:	6922      	ldr	r2, [r4, #16]
 8005588:	6022      	str	r2, [r4, #0]
 800558a:	d504      	bpl.n	8005596 <__sflush_r+0x7e>
 800558c:	1c42      	adds	r2, r0, #1
 800558e:	d101      	bne.n	8005594 <__sflush_r+0x7c>
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	b903      	cbnz	r3, 8005596 <__sflush_r+0x7e>
 8005594:	6560      	str	r0, [r4, #84]	; 0x54
 8005596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005598:	602f      	str	r7, [r5, #0]
 800559a:	2900      	cmp	r1, #0
 800559c:	d0c9      	beq.n	8005532 <__sflush_r+0x1a>
 800559e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055a2:	4299      	cmp	r1, r3
 80055a4:	d002      	beq.n	80055ac <__sflush_r+0x94>
 80055a6:	4628      	mov	r0, r5
 80055a8:	f000 fc9e 	bl	8005ee8 <_free_r>
 80055ac:	2000      	movs	r0, #0
 80055ae:	6360      	str	r0, [r4, #52]	; 0x34
 80055b0:	e7c0      	b.n	8005534 <__sflush_r+0x1c>
 80055b2:	2301      	movs	r3, #1
 80055b4:	4628      	mov	r0, r5
 80055b6:	47b0      	blx	r6
 80055b8:	1c41      	adds	r1, r0, #1
 80055ba:	d1c8      	bne.n	800554e <__sflush_r+0x36>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0c5      	beq.n	800554e <__sflush_r+0x36>
 80055c2:	2b1d      	cmp	r3, #29
 80055c4:	d001      	beq.n	80055ca <__sflush_r+0xb2>
 80055c6:	2b16      	cmp	r3, #22
 80055c8:	d101      	bne.n	80055ce <__sflush_r+0xb6>
 80055ca:	602f      	str	r7, [r5, #0]
 80055cc:	e7b1      	b.n	8005532 <__sflush_r+0x1a>
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	e7ad      	b.n	8005534 <__sflush_r+0x1c>
 80055d8:	690f      	ldr	r7, [r1, #16]
 80055da:	2f00      	cmp	r7, #0
 80055dc:	d0a9      	beq.n	8005532 <__sflush_r+0x1a>
 80055de:	0793      	lsls	r3, r2, #30
 80055e0:	680e      	ldr	r6, [r1, #0]
 80055e2:	bf08      	it	eq
 80055e4:	694b      	ldreq	r3, [r1, #20]
 80055e6:	600f      	str	r7, [r1, #0]
 80055e8:	bf18      	it	ne
 80055ea:	2300      	movne	r3, #0
 80055ec:	eba6 0807 	sub.w	r8, r6, r7
 80055f0:	608b      	str	r3, [r1, #8]
 80055f2:	f1b8 0f00 	cmp.w	r8, #0
 80055f6:	dd9c      	ble.n	8005532 <__sflush_r+0x1a>
 80055f8:	4643      	mov	r3, r8
 80055fa:	463a      	mov	r2, r7
 80055fc:	6a21      	ldr	r1, [r4, #32]
 80055fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005600:	4628      	mov	r0, r5
 8005602:	47b0      	blx	r6
 8005604:	2800      	cmp	r0, #0
 8005606:	dc06      	bgt.n	8005616 <__sflush_r+0xfe>
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800560e:	81a3      	strh	r3, [r4, #12]
 8005610:	f04f 30ff 	mov.w	r0, #4294967295
 8005614:	e78e      	b.n	8005534 <__sflush_r+0x1c>
 8005616:	4407      	add	r7, r0
 8005618:	eba8 0800 	sub.w	r8, r8, r0
 800561c:	e7e9      	b.n	80055f2 <__sflush_r+0xda>
 800561e:	bf00      	nop
 8005620:	20400001 	.word	0x20400001

08005624 <_fflush_r>:
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	690b      	ldr	r3, [r1, #16]
 8005628:	4605      	mov	r5, r0
 800562a:	460c      	mov	r4, r1
 800562c:	b1db      	cbz	r3, 8005666 <_fflush_r+0x42>
 800562e:	b118      	cbz	r0, 8005638 <_fflush_r+0x14>
 8005630:	6983      	ldr	r3, [r0, #24]
 8005632:	b90b      	cbnz	r3, 8005638 <_fflush_r+0x14>
 8005634:	f000 f860 	bl	80056f8 <__sinit>
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <_fflush_r+0x48>)
 800563a:	429c      	cmp	r4, r3
 800563c:	d109      	bne.n	8005652 <_fflush_r+0x2e>
 800563e:	686c      	ldr	r4, [r5, #4]
 8005640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005644:	b17b      	cbz	r3, 8005666 <_fflush_r+0x42>
 8005646:	4621      	mov	r1, r4
 8005648:	4628      	mov	r0, r5
 800564a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800564e:	f7ff bf63 	b.w	8005518 <__sflush_r>
 8005652:	4b07      	ldr	r3, [pc, #28]	; (8005670 <_fflush_r+0x4c>)
 8005654:	429c      	cmp	r4, r3
 8005656:	d101      	bne.n	800565c <_fflush_r+0x38>
 8005658:	68ac      	ldr	r4, [r5, #8]
 800565a:	e7f1      	b.n	8005640 <_fflush_r+0x1c>
 800565c:	4b05      	ldr	r3, [pc, #20]	; (8005674 <_fflush_r+0x50>)
 800565e:	429c      	cmp	r4, r3
 8005660:	bf08      	it	eq
 8005662:	68ec      	ldreq	r4, [r5, #12]
 8005664:	e7ec      	b.n	8005640 <_fflush_r+0x1c>
 8005666:	2000      	movs	r0, #0
 8005668:	bd38      	pop	{r3, r4, r5, pc}
 800566a:	bf00      	nop
 800566c:	0800669c 	.word	0x0800669c
 8005670:	080066bc 	.word	0x080066bc
 8005674:	0800667c 	.word	0x0800667c

08005678 <std>:
 8005678:	2300      	movs	r3, #0
 800567a:	b510      	push	{r4, lr}
 800567c:	4604      	mov	r4, r0
 800567e:	e9c0 3300 	strd	r3, r3, [r0]
 8005682:	6083      	str	r3, [r0, #8]
 8005684:	8181      	strh	r1, [r0, #12]
 8005686:	6643      	str	r3, [r0, #100]	; 0x64
 8005688:	81c2      	strh	r2, [r0, #14]
 800568a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800568e:	6183      	str	r3, [r0, #24]
 8005690:	4619      	mov	r1, r3
 8005692:	2208      	movs	r2, #8
 8005694:	305c      	adds	r0, #92	; 0x5c
 8005696:	f7fe fb5b 	bl	8003d50 <memset>
 800569a:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <std+0x38>)
 800569c:	6263      	str	r3, [r4, #36]	; 0x24
 800569e:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <std+0x3c>)
 80056a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <std+0x40>)
 80056a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056a6:	4b05      	ldr	r3, [pc, #20]	; (80056bc <std+0x44>)
 80056a8:	6224      	str	r4, [r4, #32]
 80056aa:	6323      	str	r3, [r4, #48]	; 0x30
 80056ac:	bd10      	pop	{r4, pc}
 80056ae:	bf00      	nop
 80056b0:	080062d9 	.word	0x080062d9
 80056b4:	080062fb 	.word	0x080062fb
 80056b8:	08006333 	.word	0x08006333
 80056bc:	08006357 	.word	0x08006357

080056c0 <_cleanup_r>:
 80056c0:	4901      	ldr	r1, [pc, #4]	; (80056c8 <_cleanup_r+0x8>)
 80056c2:	f000 b885 	b.w	80057d0 <_fwalk_reent>
 80056c6:	bf00      	nop
 80056c8:	08005625 	.word	0x08005625

080056cc <__sfmoreglue>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	1e4a      	subs	r2, r1, #1
 80056d0:	2568      	movs	r5, #104	; 0x68
 80056d2:	4355      	muls	r5, r2
 80056d4:	460e      	mov	r6, r1
 80056d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056da:	f000 fc53 	bl	8005f84 <_malloc_r>
 80056de:	4604      	mov	r4, r0
 80056e0:	b140      	cbz	r0, 80056f4 <__sfmoreglue+0x28>
 80056e2:	2100      	movs	r1, #0
 80056e4:	e9c0 1600 	strd	r1, r6, [r0]
 80056e8:	300c      	adds	r0, #12
 80056ea:	60a0      	str	r0, [r4, #8]
 80056ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056f0:	f7fe fb2e 	bl	8003d50 <memset>
 80056f4:	4620      	mov	r0, r4
 80056f6:	bd70      	pop	{r4, r5, r6, pc}

080056f8 <__sinit>:
 80056f8:	6983      	ldr	r3, [r0, #24]
 80056fa:	b510      	push	{r4, lr}
 80056fc:	4604      	mov	r4, r0
 80056fe:	bb33      	cbnz	r3, 800574e <__sinit+0x56>
 8005700:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005704:	6503      	str	r3, [r0, #80]	; 0x50
 8005706:	4b12      	ldr	r3, [pc, #72]	; (8005750 <__sinit+0x58>)
 8005708:	4a12      	ldr	r2, [pc, #72]	; (8005754 <__sinit+0x5c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6282      	str	r2, [r0, #40]	; 0x28
 800570e:	4298      	cmp	r0, r3
 8005710:	bf04      	itt	eq
 8005712:	2301      	moveq	r3, #1
 8005714:	6183      	streq	r3, [r0, #24]
 8005716:	f000 f81f 	bl	8005758 <__sfp>
 800571a:	6060      	str	r0, [r4, #4]
 800571c:	4620      	mov	r0, r4
 800571e:	f000 f81b 	bl	8005758 <__sfp>
 8005722:	60a0      	str	r0, [r4, #8]
 8005724:	4620      	mov	r0, r4
 8005726:	f000 f817 	bl	8005758 <__sfp>
 800572a:	2200      	movs	r2, #0
 800572c:	60e0      	str	r0, [r4, #12]
 800572e:	2104      	movs	r1, #4
 8005730:	6860      	ldr	r0, [r4, #4]
 8005732:	f7ff ffa1 	bl	8005678 <std>
 8005736:	2201      	movs	r2, #1
 8005738:	2109      	movs	r1, #9
 800573a:	68a0      	ldr	r0, [r4, #8]
 800573c:	f7ff ff9c 	bl	8005678 <std>
 8005740:	2202      	movs	r2, #2
 8005742:	2112      	movs	r1, #18
 8005744:	68e0      	ldr	r0, [r4, #12]
 8005746:	f7ff ff97 	bl	8005678 <std>
 800574a:	2301      	movs	r3, #1
 800574c:	61a3      	str	r3, [r4, #24]
 800574e:	bd10      	pop	{r4, pc}
 8005750:	08006634 	.word	0x08006634
 8005754:	080056c1 	.word	0x080056c1

08005758 <__sfp>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	4b1b      	ldr	r3, [pc, #108]	; (80057c8 <__sfp+0x70>)
 800575c:	681e      	ldr	r6, [r3, #0]
 800575e:	69b3      	ldr	r3, [r6, #24]
 8005760:	4607      	mov	r7, r0
 8005762:	b913      	cbnz	r3, 800576a <__sfp+0x12>
 8005764:	4630      	mov	r0, r6
 8005766:	f7ff ffc7 	bl	80056f8 <__sinit>
 800576a:	3648      	adds	r6, #72	; 0x48
 800576c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005770:	3b01      	subs	r3, #1
 8005772:	d503      	bpl.n	800577c <__sfp+0x24>
 8005774:	6833      	ldr	r3, [r6, #0]
 8005776:	b133      	cbz	r3, 8005786 <__sfp+0x2e>
 8005778:	6836      	ldr	r6, [r6, #0]
 800577a:	e7f7      	b.n	800576c <__sfp+0x14>
 800577c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005780:	b16d      	cbz	r5, 800579e <__sfp+0x46>
 8005782:	3468      	adds	r4, #104	; 0x68
 8005784:	e7f4      	b.n	8005770 <__sfp+0x18>
 8005786:	2104      	movs	r1, #4
 8005788:	4638      	mov	r0, r7
 800578a:	f7ff ff9f 	bl	80056cc <__sfmoreglue>
 800578e:	6030      	str	r0, [r6, #0]
 8005790:	2800      	cmp	r0, #0
 8005792:	d1f1      	bne.n	8005778 <__sfp+0x20>
 8005794:	230c      	movs	r3, #12
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	4604      	mov	r4, r0
 800579a:	4620      	mov	r0, r4
 800579c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800579e:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <__sfp+0x74>)
 80057a0:	6665      	str	r5, [r4, #100]	; 0x64
 80057a2:	e9c4 5500 	strd	r5, r5, [r4]
 80057a6:	60a5      	str	r5, [r4, #8]
 80057a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80057ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80057b0:	2208      	movs	r2, #8
 80057b2:	4629      	mov	r1, r5
 80057b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057b8:	f7fe faca 	bl	8003d50 <memset>
 80057bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057c4:	e7e9      	b.n	800579a <__sfp+0x42>
 80057c6:	bf00      	nop
 80057c8:	08006634 	.word	0x08006634
 80057cc:	ffff0001 	.word	0xffff0001

080057d0 <_fwalk_reent>:
 80057d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057d4:	4680      	mov	r8, r0
 80057d6:	4689      	mov	r9, r1
 80057d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057dc:	2600      	movs	r6, #0
 80057de:	b914      	cbnz	r4, 80057e6 <_fwalk_reent+0x16>
 80057e0:	4630      	mov	r0, r6
 80057e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80057ea:	3f01      	subs	r7, #1
 80057ec:	d501      	bpl.n	80057f2 <_fwalk_reent+0x22>
 80057ee:	6824      	ldr	r4, [r4, #0]
 80057f0:	e7f5      	b.n	80057de <_fwalk_reent+0xe>
 80057f2:	89ab      	ldrh	r3, [r5, #12]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d907      	bls.n	8005808 <_fwalk_reent+0x38>
 80057f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057fc:	3301      	adds	r3, #1
 80057fe:	d003      	beq.n	8005808 <_fwalk_reent+0x38>
 8005800:	4629      	mov	r1, r5
 8005802:	4640      	mov	r0, r8
 8005804:	47c8      	blx	r9
 8005806:	4306      	orrs	r6, r0
 8005808:	3568      	adds	r5, #104	; 0x68
 800580a:	e7ee      	b.n	80057ea <_fwalk_reent+0x1a>

0800580c <_localeconv_r>:
 800580c:	4b04      	ldr	r3, [pc, #16]	; (8005820 <_localeconv_r+0x14>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6a18      	ldr	r0, [r3, #32]
 8005812:	4b04      	ldr	r3, [pc, #16]	; (8005824 <_localeconv_r+0x18>)
 8005814:	2800      	cmp	r0, #0
 8005816:	bf08      	it	eq
 8005818:	4618      	moveq	r0, r3
 800581a:	30f0      	adds	r0, #240	; 0xf0
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	20000010 	.word	0x20000010
 8005824:	20000074 	.word	0x20000074

08005828 <__swhatbuf_r>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	460e      	mov	r6, r1
 800582c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005830:	2900      	cmp	r1, #0
 8005832:	b096      	sub	sp, #88	; 0x58
 8005834:	4614      	mov	r4, r2
 8005836:	461d      	mov	r5, r3
 8005838:	da07      	bge.n	800584a <__swhatbuf_r+0x22>
 800583a:	2300      	movs	r3, #0
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	89b3      	ldrh	r3, [r6, #12]
 8005840:	061a      	lsls	r2, r3, #24
 8005842:	d410      	bmi.n	8005866 <__swhatbuf_r+0x3e>
 8005844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005848:	e00e      	b.n	8005868 <__swhatbuf_r+0x40>
 800584a:	466a      	mov	r2, sp
 800584c:	f000 fdaa 	bl	80063a4 <_fstat_r>
 8005850:	2800      	cmp	r0, #0
 8005852:	dbf2      	blt.n	800583a <__swhatbuf_r+0x12>
 8005854:	9a01      	ldr	r2, [sp, #4]
 8005856:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800585a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800585e:	425a      	negs	r2, r3
 8005860:	415a      	adcs	r2, r3
 8005862:	602a      	str	r2, [r5, #0]
 8005864:	e7ee      	b.n	8005844 <__swhatbuf_r+0x1c>
 8005866:	2340      	movs	r3, #64	; 0x40
 8005868:	2000      	movs	r0, #0
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	b016      	add	sp, #88	; 0x58
 800586e:	bd70      	pop	{r4, r5, r6, pc}

08005870 <__smakebuf_r>:
 8005870:	898b      	ldrh	r3, [r1, #12]
 8005872:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005874:	079d      	lsls	r5, r3, #30
 8005876:	4606      	mov	r6, r0
 8005878:	460c      	mov	r4, r1
 800587a:	d507      	bpl.n	800588c <__smakebuf_r+0x1c>
 800587c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	6123      	str	r3, [r4, #16]
 8005884:	2301      	movs	r3, #1
 8005886:	6163      	str	r3, [r4, #20]
 8005888:	b002      	add	sp, #8
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	ab01      	add	r3, sp, #4
 800588e:	466a      	mov	r2, sp
 8005890:	f7ff ffca 	bl	8005828 <__swhatbuf_r>
 8005894:	9900      	ldr	r1, [sp, #0]
 8005896:	4605      	mov	r5, r0
 8005898:	4630      	mov	r0, r6
 800589a:	f000 fb73 	bl	8005f84 <_malloc_r>
 800589e:	b948      	cbnz	r0, 80058b4 <__smakebuf_r+0x44>
 80058a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058a4:	059a      	lsls	r2, r3, #22
 80058a6:	d4ef      	bmi.n	8005888 <__smakebuf_r+0x18>
 80058a8:	f023 0303 	bic.w	r3, r3, #3
 80058ac:	f043 0302 	orr.w	r3, r3, #2
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	e7e3      	b.n	800587c <__smakebuf_r+0xc>
 80058b4:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <__smakebuf_r+0x7c>)
 80058b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	6020      	str	r0, [r4, #0]
 80058bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c0:	81a3      	strh	r3, [r4, #12]
 80058c2:	9b00      	ldr	r3, [sp, #0]
 80058c4:	6163      	str	r3, [r4, #20]
 80058c6:	9b01      	ldr	r3, [sp, #4]
 80058c8:	6120      	str	r0, [r4, #16]
 80058ca:	b15b      	cbz	r3, 80058e4 <__smakebuf_r+0x74>
 80058cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058d0:	4630      	mov	r0, r6
 80058d2:	f000 fd79 	bl	80063c8 <_isatty_r>
 80058d6:	b128      	cbz	r0, 80058e4 <__smakebuf_r+0x74>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	f023 0303 	bic.w	r3, r3, #3
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	431d      	orrs	r5, r3
 80058e8:	81a5      	strh	r5, [r4, #12]
 80058ea:	e7cd      	b.n	8005888 <__smakebuf_r+0x18>
 80058ec:	080056c1 	.word	0x080056c1

080058f0 <malloc>:
 80058f0:	4b02      	ldr	r3, [pc, #8]	; (80058fc <malloc+0xc>)
 80058f2:	4601      	mov	r1, r0
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	f000 bb45 	b.w	8005f84 <_malloc_r>
 80058fa:	bf00      	nop
 80058fc:	20000010 	.word	0x20000010

08005900 <memcpy>:
 8005900:	b510      	push	{r4, lr}
 8005902:	1e43      	subs	r3, r0, #1
 8005904:	440a      	add	r2, r1
 8005906:	4291      	cmp	r1, r2
 8005908:	d100      	bne.n	800590c <memcpy+0xc>
 800590a:	bd10      	pop	{r4, pc}
 800590c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005910:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005914:	e7f7      	b.n	8005906 <memcpy+0x6>

08005916 <_Balloc>:
 8005916:	b570      	push	{r4, r5, r6, lr}
 8005918:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800591a:	4604      	mov	r4, r0
 800591c:	460e      	mov	r6, r1
 800591e:	b93d      	cbnz	r5, 8005930 <_Balloc+0x1a>
 8005920:	2010      	movs	r0, #16
 8005922:	f7ff ffe5 	bl	80058f0 <malloc>
 8005926:	6260      	str	r0, [r4, #36]	; 0x24
 8005928:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800592c:	6005      	str	r5, [r0, #0]
 800592e:	60c5      	str	r5, [r0, #12]
 8005930:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005932:	68eb      	ldr	r3, [r5, #12]
 8005934:	b183      	cbz	r3, 8005958 <_Balloc+0x42>
 8005936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800593e:	b9b8      	cbnz	r0, 8005970 <_Balloc+0x5a>
 8005940:	2101      	movs	r1, #1
 8005942:	fa01 f506 	lsl.w	r5, r1, r6
 8005946:	1d6a      	adds	r2, r5, #5
 8005948:	0092      	lsls	r2, r2, #2
 800594a:	4620      	mov	r0, r4
 800594c:	f000 fabe 	bl	8005ecc <_calloc_r>
 8005950:	b160      	cbz	r0, 800596c <_Balloc+0x56>
 8005952:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005956:	e00e      	b.n	8005976 <_Balloc+0x60>
 8005958:	2221      	movs	r2, #33	; 0x21
 800595a:	2104      	movs	r1, #4
 800595c:	4620      	mov	r0, r4
 800595e:	f000 fab5 	bl	8005ecc <_calloc_r>
 8005962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005964:	60e8      	str	r0, [r5, #12]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e4      	bne.n	8005936 <_Balloc+0x20>
 800596c:	2000      	movs	r0, #0
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	6802      	ldr	r2, [r0, #0]
 8005972:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005976:	2300      	movs	r3, #0
 8005978:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800597c:	e7f7      	b.n	800596e <_Balloc+0x58>

0800597e <_Bfree>:
 800597e:	b570      	push	{r4, r5, r6, lr}
 8005980:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005982:	4606      	mov	r6, r0
 8005984:	460d      	mov	r5, r1
 8005986:	b93c      	cbnz	r4, 8005998 <_Bfree+0x1a>
 8005988:	2010      	movs	r0, #16
 800598a:	f7ff ffb1 	bl	80058f0 <malloc>
 800598e:	6270      	str	r0, [r6, #36]	; 0x24
 8005990:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005994:	6004      	str	r4, [r0, #0]
 8005996:	60c4      	str	r4, [r0, #12]
 8005998:	b13d      	cbz	r5, 80059aa <_Bfree+0x2c>
 800599a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800599c:	686a      	ldr	r2, [r5, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059a4:	6029      	str	r1, [r5, #0]
 80059a6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80059aa:	bd70      	pop	{r4, r5, r6, pc}

080059ac <__multadd>:
 80059ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b0:	690d      	ldr	r5, [r1, #16]
 80059b2:	461f      	mov	r7, r3
 80059b4:	4606      	mov	r6, r0
 80059b6:	460c      	mov	r4, r1
 80059b8:	f101 0c14 	add.w	ip, r1, #20
 80059bc:	2300      	movs	r3, #0
 80059be:	f8dc 0000 	ldr.w	r0, [ip]
 80059c2:	b281      	uxth	r1, r0
 80059c4:	fb02 7101 	mla	r1, r2, r1, r7
 80059c8:	0c0f      	lsrs	r7, r1, #16
 80059ca:	0c00      	lsrs	r0, r0, #16
 80059cc:	fb02 7000 	mla	r0, r2, r0, r7
 80059d0:	b289      	uxth	r1, r1
 80059d2:	3301      	adds	r3, #1
 80059d4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80059d8:	429d      	cmp	r5, r3
 80059da:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80059de:	f84c 1b04 	str.w	r1, [ip], #4
 80059e2:	dcec      	bgt.n	80059be <__multadd+0x12>
 80059e4:	b1d7      	cbz	r7, 8005a1c <__multadd+0x70>
 80059e6:	68a3      	ldr	r3, [r4, #8]
 80059e8:	42ab      	cmp	r3, r5
 80059ea:	dc12      	bgt.n	8005a12 <__multadd+0x66>
 80059ec:	6861      	ldr	r1, [r4, #4]
 80059ee:	4630      	mov	r0, r6
 80059f0:	3101      	adds	r1, #1
 80059f2:	f7ff ff90 	bl	8005916 <_Balloc>
 80059f6:	6922      	ldr	r2, [r4, #16]
 80059f8:	3202      	adds	r2, #2
 80059fa:	f104 010c 	add.w	r1, r4, #12
 80059fe:	4680      	mov	r8, r0
 8005a00:	0092      	lsls	r2, r2, #2
 8005a02:	300c      	adds	r0, #12
 8005a04:	f7ff ff7c 	bl	8005900 <memcpy>
 8005a08:	4621      	mov	r1, r4
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	f7ff ffb7 	bl	800597e <_Bfree>
 8005a10:	4644      	mov	r4, r8
 8005a12:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a16:	3501      	adds	r5, #1
 8005a18:	615f      	str	r7, [r3, #20]
 8005a1a:	6125      	str	r5, [r4, #16]
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a22 <__hi0bits>:
 8005a22:	0c02      	lsrs	r2, r0, #16
 8005a24:	0412      	lsls	r2, r2, #16
 8005a26:	4603      	mov	r3, r0
 8005a28:	b9b2      	cbnz	r2, 8005a58 <__hi0bits+0x36>
 8005a2a:	0403      	lsls	r3, r0, #16
 8005a2c:	2010      	movs	r0, #16
 8005a2e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005a32:	bf04      	itt	eq
 8005a34:	021b      	lsleq	r3, r3, #8
 8005a36:	3008      	addeq	r0, #8
 8005a38:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005a3c:	bf04      	itt	eq
 8005a3e:	011b      	lsleq	r3, r3, #4
 8005a40:	3004      	addeq	r0, #4
 8005a42:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a46:	bf04      	itt	eq
 8005a48:	009b      	lsleq	r3, r3, #2
 8005a4a:	3002      	addeq	r0, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	db06      	blt.n	8005a5e <__hi0bits+0x3c>
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	d503      	bpl.n	8005a5c <__hi0bits+0x3a>
 8005a54:	3001      	adds	r0, #1
 8005a56:	4770      	bx	lr
 8005a58:	2000      	movs	r0, #0
 8005a5a:	e7e8      	b.n	8005a2e <__hi0bits+0xc>
 8005a5c:	2020      	movs	r0, #32
 8005a5e:	4770      	bx	lr

08005a60 <__lo0bits>:
 8005a60:	6803      	ldr	r3, [r0, #0]
 8005a62:	f013 0207 	ands.w	r2, r3, #7
 8005a66:	4601      	mov	r1, r0
 8005a68:	d00b      	beq.n	8005a82 <__lo0bits+0x22>
 8005a6a:	07da      	lsls	r2, r3, #31
 8005a6c:	d423      	bmi.n	8005ab6 <__lo0bits+0x56>
 8005a6e:	0798      	lsls	r0, r3, #30
 8005a70:	bf49      	itett	mi
 8005a72:	085b      	lsrmi	r3, r3, #1
 8005a74:	089b      	lsrpl	r3, r3, #2
 8005a76:	2001      	movmi	r0, #1
 8005a78:	600b      	strmi	r3, [r1, #0]
 8005a7a:	bf5c      	itt	pl
 8005a7c:	600b      	strpl	r3, [r1, #0]
 8005a7e:	2002      	movpl	r0, #2
 8005a80:	4770      	bx	lr
 8005a82:	b298      	uxth	r0, r3
 8005a84:	b9a8      	cbnz	r0, 8005ab2 <__lo0bits+0x52>
 8005a86:	0c1b      	lsrs	r3, r3, #16
 8005a88:	2010      	movs	r0, #16
 8005a8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a8e:	bf04      	itt	eq
 8005a90:	0a1b      	lsreq	r3, r3, #8
 8005a92:	3008      	addeq	r0, #8
 8005a94:	071a      	lsls	r2, r3, #28
 8005a96:	bf04      	itt	eq
 8005a98:	091b      	lsreq	r3, r3, #4
 8005a9a:	3004      	addeq	r0, #4
 8005a9c:	079a      	lsls	r2, r3, #30
 8005a9e:	bf04      	itt	eq
 8005aa0:	089b      	lsreq	r3, r3, #2
 8005aa2:	3002      	addeq	r0, #2
 8005aa4:	07da      	lsls	r2, r3, #31
 8005aa6:	d402      	bmi.n	8005aae <__lo0bits+0x4e>
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	d006      	beq.n	8005aba <__lo0bits+0x5a>
 8005aac:	3001      	adds	r0, #1
 8005aae:	600b      	str	r3, [r1, #0]
 8005ab0:	4770      	bx	lr
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	e7e9      	b.n	8005a8a <__lo0bits+0x2a>
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	4770      	bx	lr
 8005aba:	2020      	movs	r0, #32
 8005abc:	4770      	bx	lr

08005abe <__i2b>:
 8005abe:	b510      	push	{r4, lr}
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	f7ff ff27 	bl	8005916 <_Balloc>
 8005ac8:	2201      	movs	r2, #1
 8005aca:	6144      	str	r4, [r0, #20]
 8005acc:	6102      	str	r2, [r0, #16]
 8005ace:	bd10      	pop	{r4, pc}

08005ad0 <__multiply>:
 8005ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	690a      	ldr	r2, [r1, #16]
 8005ad8:	6923      	ldr	r3, [r4, #16]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	bfb8      	it	lt
 8005ade:	460b      	movlt	r3, r1
 8005ae0:	4688      	mov	r8, r1
 8005ae2:	bfbc      	itt	lt
 8005ae4:	46a0      	movlt	r8, r4
 8005ae6:	461c      	movlt	r4, r3
 8005ae8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005aec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005af0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005af4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005af8:	eb07 0609 	add.w	r6, r7, r9
 8005afc:	42b3      	cmp	r3, r6
 8005afe:	bfb8      	it	lt
 8005b00:	3101      	addlt	r1, #1
 8005b02:	f7ff ff08 	bl	8005916 <_Balloc>
 8005b06:	f100 0514 	add.w	r5, r0, #20
 8005b0a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005b0e:	462b      	mov	r3, r5
 8005b10:	2200      	movs	r2, #0
 8005b12:	4573      	cmp	r3, lr
 8005b14:	d316      	bcc.n	8005b44 <__multiply+0x74>
 8005b16:	f104 0214 	add.w	r2, r4, #20
 8005b1a:	f108 0114 	add.w	r1, r8, #20
 8005b1e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005b22:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	9b00      	ldr	r3, [sp, #0]
 8005b2a:	9201      	str	r2, [sp, #4]
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d80c      	bhi.n	8005b4a <__multiply+0x7a>
 8005b30:	2e00      	cmp	r6, #0
 8005b32:	dd03      	ble.n	8005b3c <__multiply+0x6c>
 8005b34:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d05d      	beq.n	8005bf8 <__multiply+0x128>
 8005b3c:	6106      	str	r6, [r0, #16]
 8005b3e:	b003      	add	sp, #12
 8005b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b44:	f843 2b04 	str.w	r2, [r3], #4
 8005b48:	e7e3      	b.n	8005b12 <__multiply+0x42>
 8005b4a:	f8b2 b000 	ldrh.w	fp, [r2]
 8005b4e:	f1bb 0f00 	cmp.w	fp, #0
 8005b52:	d023      	beq.n	8005b9c <__multiply+0xcc>
 8005b54:	4689      	mov	r9, r1
 8005b56:	46ac      	mov	ip, r5
 8005b58:	f04f 0800 	mov.w	r8, #0
 8005b5c:	f859 4b04 	ldr.w	r4, [r9], #4
 8005b60:	f8dc a000 	ldr.w	sl, [ip]
 8005b64:	b2a3      	uxth	r3, r4
 8005b66:	fa1f fa8a 	uxth.w	sl, sl
 8005b6a:	fb0b a303 	mla	r3, fp, r3, sl
 8005b6e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005b72:	f8dc 4000 	ldr.w	r4, [ip]
 8005b76:	4443      	add	r3, r8
 8005b78:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b7c:	fb0b 840a 	mla	r4, fp, sl, r8
 8005b80:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005b84:	46e2      	mov	sl, ip
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b8c:	454f      	cmp	r7, r9
 8005b8e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b92:	f84a 3b04 	str.w	r3, [sl], #4
 8005b96:	d82b      	bhi.n	8005bf0 <__multiply+0x120>
 8005b98:	f8cc 8004 	str.w	r8, [ip, #4]
 8005b9c:	9b01      	ldr	r3, [sp, #4]
 8005b9e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005ba2:	3204      	adds	r2, #4
 8005ba4:	f1ba 0f00 	cmp.w	sl, #0
 8005ba8:	d020      	beq.n	8005bec <__multiply+0x11c>
 8005baa:	682b      	ldr	r3, [r5, #0]
 8005bac:	4689      	mov	r9, r1
 8005bae:	46a8      	mov	r8, r5
 8005bb0:	f04f 0b00 	mov.w	fp, #0
 8005bb4:	f8b9 c000 	ldrh.w	ip, [r9]
 8005bb8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005bbc:	fb0a 440c 	mla	r4, sl, ip, r4
 8005bc0:	445c      	add	r4, fp
 8005bc2:	46c4      	mov	ip, r8
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005bca:	f84c 3b04 	str.w	r3, [ip], #4
 8005bce:	f859 3b04 	ldr.w	r3, [r9], #4
 8005bd2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005bd6:	0c1b      	lsrs	r3, r3, #16
 8005bd8:	fb0a b303 	mla	r3, sl, r3, fp
 8005bdc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005be0:	454f      	cmp	r7, r9
 8005be2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005be6:	d805      	bhi.n	8005bf4 <__multiply+0x124>
 8005be8:	f8c8 3004 	str.w	r3, [r8, #4]
 8005bec:	3504      	adds	r5, #4
 8005bee:	e79b      	b.n	8005b28 <__multiply+0x58>
 8005bf0:	46d4      	mov	ip, sl
 8005bf2:	e7b3      	b.n	8005b5c <__multiply+0x8c>
 8005bf4:	46e0      	mov	r8, ip
 8005bf6:	e7dd      	b.n	8005bb4 <__multiply+0xe4>
 8005bf8:	3e01      	subs	r6, #1
 8005bfa:	e799      	b.n	8005b30 <__multiply+0x60>

08005bfc <__pow5mult>:
 8005bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c00:	4615      	mov	r5, r2
 8005c02:	f012 0203 	ands.w	r2, r2, #3
 8005c06:	4606      	mov	r6, r0
 8005c08:	460f      	mov	r7, r1
 8005c0a:	d007      	beq.n	8005c1c <__pow5mult+0x20>
 8005c0c:	3a01      	subs	r2, #1
 8005c0e:	4c21      	ldr	r4, [pc, #132]	; (8005c94 <__pow5mult+0x98>)
 8005c10:	2300      	movs	r3, #0
 8005c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c16:	f7ff fec9 	bl	80059ac <__multadd>
 8005c1a:	4607      	mov	r7, r0
 8005c1c:	10ad      	asrs	r5, r5, #2
 8005c1e:	d035      	beq.n	8005c8c <__pow5mult+0x90>
 8005c20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c22:	b93c      	cbnz	r4, 8005c34 <__pow5mult+0x38>
 8005c24:	2010      	movs	r0, #16
 8005c26:	f7ff fe63 	bl	80058f0 <malloc>
 8005c2a:	6270      	str	r0, [r6, #36]	; 0x24
 8005c2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c30:	6004      	str	r4, [r0, #0]
 8005c32:	60c4      	str	r4, [r0, #12]
 8005c34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c3c:	b94c      	cbnz	r4, 8005c52 <__pow5mult+0x56>
 8005c3e:	f240 2171 	movw	r1, #625	; 0x271
 8005c42:	4630      	mov	r0, r6
 8005c44:	f7ff ff3b 	bl	8005abe <__i2b>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c4e:	4604      	mov	r4, r0
 8005c50:	6003      	str	r3, [r0, #0]
 8005c52:	f04f 0800 	mov.w	r8, #0
 8005c56:	07eb      	lsls	r3, r5, #31
 8005c58:	d50a      	bpl.n	8005c70 <__pow5mult+0x74>
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	4622      	mov	r2, r4
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f7ff ff36 	bl	8005ad0 <__multiply>
 8005c64:	4639      	mov	r1, r7
 8005c66:	4681      	mov	r9, r0
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f7ff fe88 	bl	800597e <_Bfree>
 8005c6e:	464f      	mov	r7, r9
 8005c70:	106d      	asrs	r5, r5, #1
 8005c72:	d00b      	beq.n	8005c8c <__pow5mult+0x90>
 8005c74:	6820      	ldr	r0, [r4, #0]
 8005c76:	b938      	cbnz	r0, 8005c88 <__pow5mult+0x8c>
 8005c78:	4622      	mov	r2, r4
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f7ff ff27 	bl	8005ad0 <__multiply>
 8005c82:	6020      	str	r0, [r4, #0]
 8005c84:	f8c0 8000 	str.w	r8, [r0]
 8005c88:	4604      	mov	r4, r0
 8005c8a:	e7e4      	b.n	8005c56 <__pow5mult+0x5a>
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c92:	bf00      	nop
 8005c94:	080067d0 	.word	0x080067d0

08005c98 <__lshift>:
 8005c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ca2:	6923      	ldr	r3, [r4, #16]
 8005ca4:	6849      	ldr	r1, [r1, #4]
 8005ca6:	eb0a 0903 	add.w	r9, sl, r3
 8005caa:	68a3      	ldr	r3, [r4, #8]
 8005cac:	4607      	mov	r7, r0
 8005cae:	4616      	mov	r6, r2
 8005cb0:	f109 0501 	add.w	r5, r9, #1
 8005cb4:	42ab      	cmp	r3, r5
 8005cb6:	db32      	blt.n	8005d1e <__lshift+0x86>
 8005cb8:	4638      	mov	r0, r7
 8005cba:	f7ff fe2c 	bl	8005916 <_Balloc>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	4680      	mov	r8, r0
 8005cc2:	f100 0114 	add.w	r1, r0, #20
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	4553      	cmp	r3, sl
 8005cca:	db2b      	blt.n	8005d24 <__lshift+0x8c>
 8005ccc:	6920      	ldr	r0, [r4, #16]
 8005cce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cd2:	f104 0314 	add.w	r3, r4, #20
 8005cd6:	f016 021f 	ands.w	r2, r6, #31
 8005cda:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cde:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ce2:	d025      	beq.n	8005d30 <__lshift+0x98>
 8005ce4:	f1c2 0e20 	rsb	lr, r2, #32
 8005ce8:	2000      	movs	r0, #0
 8005cea:	681e      	ldr	r6, [r3, #0]
 8005cec:	468a      	mov	sl, r1
 8005cee:	4096      	lsls	r6, r2
 8005cf0:	4330      	orrs	r0, r6
 8005cf2:	f84a 0b04 	str.w	r0, [sl], #4
 8005cf6:	f853 0b04 	ldr.w	r0, [r3], #4
 8005cfa:	459c      	cmp	ip, r3
 8005cfc:	fa20 f00e 	lsr.w	r0, r0, lr
 8005d00:	d814      	bhi.n	8005d2c <__lshift+0x94>
 8005d02:	6048      	str	r0, [r1, #4]
 8005d04:	b108      	cbz	r0, 8005d0a <__lshift+0x72>
 8005d06:	f109 0502 	add.w	r5, r9, #2
 8005d0a:	3d01      	subs	r5, #1
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f8c8 5010 	str.w	r5, [r8, #16]
 8005d12:	4621      	mov	r1, r4
 8005d14:	f7ff fe33 	bl	800597e <_Bfree>
 8005d18:	4640      	mov	r0, r8
 8005d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1e:	3101      	adds	r1, #1
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	e7c7      	b.n	8005cb4 <__lshift+0x1c>
 8005d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	e7cd      	b.n	8005cc8 <__lshift+0x30>
 8005d2c:	4651      	mov	r1, sl
 8005d2e:	e7dc      	b.n	8005cea <__lshift+0x52>
 8005d30:	3904      	subs	r1, #4
 8005d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d36:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d3a:	459c      	cmp	ip, r3
 8005d3c:	d8f9      	bhi.n	8005d32 <__lshift+0x9a>
 8005d3e:	e7e4      	b.n	8005d0a <__lshift+0x72>

08005d40 <__mcmp>:
 8005d40:	6903      	ldr	r3, [r0, #16]
 8005d42:	690a      	ldr	r2, [r1, #16]
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	b530      	push	{r4, r5, lr}
 8005d48:	d10c      	bne.n	8005d64 <__mcmp+0x24>
 8005d4a:	0092      	lsls	r2, r2, #2
 8005d4c:	3014      	adds	r0, #20
 8005d4e:	3114      	adds	r1, #20
 8005d50:	1884      	adds	r4, r0, r2
 8005d52:	4411      	add	r1, r2
 8005d54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d5c:	4295      	cmp	r5, r2
 8005d5e:	d003      	beq.n	8005d68 <__mcmp+0x28>
 8005d60:	d305      	bcc.n	8005d6e <__mcmp+0x2e>
 8005d62:	2301      	movs	r3, #1
 8005d64:	4618      	mov	r0, r3
 8005d66:	bd30      	pop	{r4, r5, pc}
 8005d68:	42a0      	cmp	r0, r4
 8005d6a:	d3f3      	bcc.n	8005d54 <__mcmp+0x14>
 8005d6c:	e7fa      	b.n	8005d64 <__mcmp+0x24>
 8005d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d72:	e7f7      	b.n	8005d64 <__mcmp+0x24>

08005d74 <__mdiff>:
 8005d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d78:	460d      	mov	r5, r1
 8005d7a:	4607      	mov	r7, r0
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	4628      	mov	r0, r5
 8005d80:	4614      	mov	r4, r2
 8005d82:	f7ff ffdd 	bl	8005d40 <__mcmp>
 8005d86:	1e06      	subs	r6, r0, #0
 8005d88:	d108      	bne.n	8005d9c <__mdiff+0x28>
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4638      	mov	r0, r7
 8005d8e:	f7ff fdc2 	bl	8005916 <_Balloc>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d9c:	bfa4      	itt	ge
 8005d9e:	4623      	movge	r3, r4
 8005da0:	462c      	movge	r4, r5
 8005da2:	4638      	mov	r0, r7
 8005da4:	6861      	ldr	r1, [r4, #4]
 8005da6:	bfa6      	itte	ge
 8005da8:	461d      	movge	r5, r3
 8005daa:	2600      	movge	r6, #0
 8005dac:	2601      	movlt	r6, #1
 8005dae:	f7ff fdb2 	bl	8005916 <_Balloc>
 8005db2:	692b      	ldr	r3, [r5, #16]
 8005db4:	60c6      	str	r6, [r0, #12]
 8005db6:	6926      	ldr	r6, [r4, #16]
 8005db8:	f105 0914 	add.w	r9, r5, #20
 8005dbc:	f104 0214 	add.w	r2, r4, #20
 8005dc0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005dc4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005dc8:	f100 0514 	add.w	r5, r0, #20
 8005dcc:	f04f 0e00 	mov.w	lr, #0
 8005dd0:	f852 ab04 	ldr.w	sl, [r2], #4
 8005dd4:	f859 4b04 	ldr.w	r4, [r9], #4
 8005dd8:	fa1e f18a 	uxtah	r1, lr, sl
 8005ddc:	b2a3      	uxth	r3, r4
 8005dde:	1ac9      	subs	r1, r1, r3
 8005de0:	0c23      	lsrs	r3, r4, #16
 8005de2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005de6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005dea:	b289      	uxth	r1, r1
 8005dec:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005df0:	45c8      	cmp	r8, r9
 8005df2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005df6:	4694      	mov	ip, r2
 8005df8:	f845 3b04 	str.w	r3, [r5], #4
 8005dfc:	d8e8      	bhi.n	8005dd0 <__mdiff+0x5c>
 8005dfe:	45bc      	cmp	ip, r7
 8005e00:	d304      	bcc.n	8005e0c <__mdiff+0x98>
 8005e02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005e06:	b183      	cbz	r3, 8005e2a <__mdiff+0xb6>
 8005e08:	6106      	str	r6, [r0, #16]
 8005e0a:	e7c5      	b.n	8005d98 <__mdiff+0x24>
 8005e0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005e10:	fa1e f381 	uxtah	r3, lr, r1
 8005e14:	141a      	asrs	r2, r3, #16
 8005e16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e20:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005e24:	f845 3b04 	str.w	r3, [r5], #4
 8005e28:	e7e9      	b.n	8005dfe <__mdiff+0x8a>
 8005e2a:	3e01      	subs	r6, #1
 8005e2c:	e7e9      	b.n	8005e02 <__mdiff+0x8e>

08005e2e <__d2b>:
 8005e2e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e32:	460e      	mov	r6, r1
 8005e34:	2101      	movs	r1, #1
 8005e36:	ec59 8b10 	vmov	r8, r9, d0
 8005e3a:	4615      	mov	r5, r2
 8005e3c:	f7ff fd6b 	bl	8005916 <_Balloc>
 8005e40:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005e44:	4607      	mov	r7, r0
 8005e46:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e4a:	bb34      	cbnz	r4, 8005e9a <__d2b+0x6c>
 8005e4c:	9301      	str	r3, [sp, #4]
 8005e4e:	f1b8 0300 	subs.w	r3, r8, #0
 8005e52:	d027      	beq.n	8005ea4 <__d2b+0x76>
 8005e54:	a802      	add	r0, sp, #8
 8005e56:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005e5a:	f7ff fe01 	bl	8005a60 <__lo0bits>
 8005e5e:	9900      	ldr	r1, [sp, #0]
 8005e60:	b1f0      	cbz	r0, 8005ea0 <__d2b+0x72>
 8005e62:	9a01      	ldr	r2, [sp, #4]
 8005e64:	f1c0 0320 	rsb	r3, r0, #32
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	40c2      	lsrs	r2, r0
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	9201      	str	r2, [sp, #4]
 8005e74:	9b01      	ldr	r3, [sp, #4]
 8005e76:	61bb      	str	r3, [r7, #24]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bf14      	ite	ne
 8005e7c:	2102      	movne	r1, #2
 8005e7e:	2101      	moveq	r1, #1
 8005e80:	6139      	str	r1, [r7, #16]
 8005e82:	b1c4      	cbz	r4, 8005eb6 <__d2b+0x88>
 8005e84:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005e88:	4404      	add	r4, r0
 8005e8a:	6034      	str	r4, [r6, #0]
 8005e8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e90:	6028      	str	r0, [r5, #0]
 8005e92:	4638      	mov	r0, r7
 8005e94:	b003      	add	sp, #12
 8005e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e9e:	e7d5      	b.n	8005e4c <__d2b+0x1e>
 8005ea0:	6179      	str	r1, [r7, #20]
 8005ea2:	e7e7      	b.n	8005e74 <__d2b+0x46>
 8005ea4:	a801      	add	r0, sp, #4
 8005ea6:	f7ff fddb 	bl	8005a60 <__lo0bits>
 8005eaa:	9b01      	ldr	r3, [sp, #4]
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	2101      	movs	r1, #1
 8005eb0:	6139      	str	r1, [r7, #16]
 8005eb2:	3020      	adds	r0, #32
 8005eb4:	e7e5      	b.n	8005e82 <__d2b+0x54>
 8005eb6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005eba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ebe:	6030      	str	r0, [r6, #0]
 8005ec0:	6918      	ldr	r0, [r3, #16]
 8005ec2:	f7ff fdae 	bl	8005a22 <__hi0bits>
 8005ec6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005eca:	e7e1      	b.n	8005e90 <__d2b+0x62>

08005ecc <_calloc_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	fb02 f401 	mul.w	r4, r2, r1
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	f000 f856 	bl	8005f84 <_malloc_r>
 8005ed8:	4605      	mov	r5, r0
 8005eda:	b118      	cbz	r0, 8005ee4 <_calloc_r+0x18>
 8005edc:	4622      	mov	r2, r4
 8005ede:	2100      	movs	r1, #0
 8005ee0:	f7fd ff36 	bl	8003d50 <memset>
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}

08005ee8 <_free_r>:
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	4605      	mov	r5, r0
 8005eec:	2900      	cmp	r1, #0
 8005eee:	d045      	beq.n	8005f7c <_free_r+0x94>
 8005ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ef4:	1f0c      	subs	r4, r1, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bfb8      	it	lt
 8005efa:	18e4      	addlt	r4, r4, r3
 8005efc:	f000 fa98 	bl	8006430 <__malloc_lock>
 8005f00:	4a1f      	ldr	r2, [pc, #124]	; (8005f80 <_free_r+0x98>)
 8005f02:	6813      	ldr	r3, [r2, #0]
 8005f04:	4610      	mov	r0, r2
 8005f06:	b933      	cbnz	r3, 8005f16 <_free_r+0x2e>
 8005f08:	6063      	str	r3, [r4, #4]
 8005f0a:	6014      	str	r4, [r2, #0]
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f12:	f000 ba8e 	b.w	8006432 <__malloc_unlock>
 8005f16:	42a3      	cmp	r3, r4
 8005f18:	d90c      	bls.n	8005f34 <_free_r+0x4c>
 8005f1a:	6821      	ldr	r1, [r4, #0]
 8005f1c:	1862      	adds	r2, r4, r1
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	bf04      	itt	eq
 8005f22:	681a      	ldreq	r2, [r3, #0]
 8005f24:	685b      	ldreq	r3, [r3, #4]
 8005f26:	6063      	str	r3, [r4, #4]
 8005f28:	bf04      	itt	eq
 8005f2a:	1852      	addeq	r2, r2, r1
 8005f2c:	6022      	streq	r2, [r4, #0]
 8005f2e:	6004      	str	r4, [r0, #0]
 8005f30:	e7ec      	b.n	8005f0c <_free_r+0x24>
 8005f32:	4613      	mov	r3, r2
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	b10a      	cbz	r2, 8005f3c <_free_r+0x54>
 8005f38:	42a2      	cmp	r2, r4
 8005f3a:	d9fa      	bls.n	8005f32 <_free_r+0x4a>
 8005f3c:	6819      	ldr	r1, [r3, #0]
 8005f3e:	1858      	adds	r0, r3, r1
 8005f40:	42a0      	cmp	r0, r4
 8005f42:	d10b      	bne.n	8005f5c <_free_r+0x74>
 8005f44:	6820      	ldr	r0, [r4, #0]
 8005f46:	4401      	add	r1, r0
 8005f48:	1858      	adds	r0, r3, r1
 8005f4a:	4282      	cmp	r2, r0
 8005f4c:	6019      	str	r1, [r3, #0]
 8005f4e:	d1dd      	bne.n	8005f0c <_free_r+0x24>
 8005f50:	6810      	ldr	r0, [r2, #0]
 8005f52:	6852      	ldr	r2, [r2, #4]
 8005f54:	605a      	str	r2, [r3, #4]
 8005f56:	4401      	add	r1, r0
 8005f58:	6019      	str	r1, [r3, #0]
 8005f5a:	e7d7      	b.n	8005f0c <_free_r+0x24>
 8005f5c:	d902      	bls.n	8005f64 <_free_r+0x7c>
 8005f5e:	230c      	movs	r3, #12
 8005f60:	602b      	str	r3, [r5, #0]
 8005f62:	e7d3      	b.n	8005f0c <_free_r+0x24>
 8005f64:	6820      	ldr	r0, [r4, #0]
 8005f66:	1821      	adds	r1, r4, r0
 8005f68:	428a      	cmp	r2, r1
 8005f6a:	bf04      	itt	eq
 8005f6c:	6811      	ldreq	r1, [r2, #0]
 8005f6e:	6852      	ldreq	r2, [r2, #4]
 8005f70:	6062      	str	r2, [r4, #4]
 8005f72:	bf04      	itt	eq
 8005f74:	1809      	addeq	r1, r1, r0
 8005f76:	6021      	streq	r1, [r4, #0]
 8005f78:	605c      	str	r4, [r3, #4]
 8005f7a:	e7c7      	b.n	8005f0c <_free_r+0x24>
 8005f7c:	bd38      	pop	{r3, r4, r5, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000204 	.word	0x20000204

08005f84 <_malloc_r>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	1ccd      	adds	r5, r1, #3
 8005f88:	f025 0503 	bic.w	r5, r5, #3
 8005f8c:	3508      	adds	r5, #8
 8005f8e:	2d0c      	cmp	r5, #12
 8005f90:	bf38      	it	cc
 8005f92:	250c      	movcc	r5, #12
 8005f94:	2d00      	cmp	r5, #0
 8005f96:	4606      	mov	r6, r0
 8005f98:	db01      	blt.n	8005f9e <_malloc_r+0x1a>
 8005f9a:	42a9      	cmp	r1, r5
 8005f9c:	d903      	bls.n	8005fa6 <_malloc_r+0x22>
 8005f9e:	230c      	movs	r3, #12
 8005fa0:	6033      	str	r3, [r6, #0]
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	bd70      	pop	{r4, r5, r6, pc}
 8005fa6:	f000 fa43 	bl	8006430 <__malloc_lock>
 8005faa:	4a21      	ldr	r2, [pc, #132]	; (8006030 <_malloc_r+0xac>)
 8005fac:	6814      	ldr	r4, [r2, #0]
 8005fae:	4621      	mov	r1, r4
 8005fb0:	b991      	cbnz	r1, 8005fd8 <_malloc_r+0x54>
 8005fb2:	4c20      	ldr	r4, [pc, #128]	; (8006034 <_malloc_r+0xb0>)
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	b91b      	cbnz	r3, 8005fc0 <_malloc_r+0x3c>
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f000 f97d 	bl	80062b8 <_sbrk_r>
 8005fbe:	6020      	str	r0, [r4, #0]
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	f000 f978 	bl	80062b8 <_sbrk_r>
 8005fc8:	1c43      	adds	r3, r0, #1
 8005fca:	d124      	bne.n	8006016 <_malloc_r+0x92>
 8005fcc:	230c      	movs	r3, #12
 8005fce:	6033      	str	r3, [r6, #0]
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f000 fa2e 	bl	8006432 <__malloc_unlock>
 8005fd6:	e7e4      	b.n	8005fa2 <_malloc_r+0x1e>
 8005fd8:	680b      	ldr	r3, [r1, #0]
 8005fda:	1b5b      	subs	r3, r3, r5
 8005fdc:	d418      	bmi.n	8006010 <_malloc_r+0x8c>
 8005fde:	2b0b      	cmp	r3, #11
 8005fe0:	d90f      	bls.n	8006002 <_malloc_r+0x7e>
 8005fe2:	600b      	str	r3, [r1, #0]
 8005fe4:	50cd      	str	r5, [r1, r3]
 8005fe6:	18cc      	adds	r4, r1, r3
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f000 fa22 	bl	8006432 <__malloc_unlock>
 8005fee:	f104 000b 	add.w	r0, r4, #11
 8005ff2:	1d23      	adds	r3, r4, #4
 8005ff4:	f020 0007 	bic.w	r0, r0, #7
 8005ff8:	1ac3      	subs	r3, r0, r3
 8005ffa:	d0d3      	beq.n	8005fa4 <_malloc_r+0x20>
 8005ffc:	425a      	negs	r2, r3
 8005ffe:	50e2      	str	r2, [r4, r3]
 8006000:	e7d0      	b.n	8005fa4 <_malloc_r+0x20>
 8006002:	428c      	cmp	r4, r1
 8006004:	684b      	ldr	r3, [r1, #4]
 8006006:	bf16      	itet	ne
 8006008:	6063      	strne	r3, [r4, #4]
 800600a:	6013      	streq	r3, [r2, #0]
 800600c:	460c      	movne	r4, r1
 800600e:	e7eb      	b.n	8005fe8 <_malloc_r+0x64>
 8006010:	460c      	mov	r4, r1
 8006012:	6849      	ldr	r1, [r1, #4]
 8006014:	e7cc      	b.n	8005fb0 <_malloc_r+0x2c>
 8006016:	1cc4      	adds	r4, r0, #3
 8006018:	f024 0403 	bic.w	r4, r4, #3
 800601c:	42a0      	cmp	r0, r4
 800601e:	d005      	beq.n	800602c <_malloc_r+0xa8>
 8006020:	1a21      	subs	r1, r4, r0
 8006022:	4630      	mov	r0, r6
 8006024:	f000 f948 	bl	80062b8 <_sbrk_r>
 8006028:	3001      	adds	r0, #1
 800602a:	d0cf      	beq.n	8005fcc <_malloc_r+0x48>
 800602c:	6025      	str	r5, [r4, #0]
 800602e:	e7db      	b.n	8005fe8 <_malloc_r+0x64>
 8006030:	20000204 	.word	0x20000204
 8006034:	20000208 	.word	0x20000208

08006038 <__sfputc_r>:
 8006038:	6893      	ldr	r3, [r2, #8]
 800603a:	3b01      	subs	r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	b410      	push	{r4}
 8006040:	6093      	str	r3, [r2, #8]
 8006042:	da08      	bge.n	8006056 <__sfputc_r+0x1e>
 8006044:	6994      	ldr	r4, [r2, #24]
 8006046:	42a3      	cmp	r3, r4
 8006048:	db01      	blt.n	800604e <__sfputc_r+0x16>
 800604a:	290a      	cmp	r1, #10
 800604c:	d103      	bne.n	8006056 <__sfputc_r+0x1e>
 800604e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006052:	f7fe bb5d 	b.w	8004710 <__swbuf_r>
 8006056:	6813      	ldr	r3, [r2, #0]
 8006058:	1c58      	adds	r0, r3, #1
 800605a:	6010      	str	r0, [r2, #0]
 800605c:	7019      	strb	r1, [r3, #0]
 800605e:	4608      	mov	r0, r1
 8006060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006064:	4770      	bx	lr

08006066 <__sfputs_r>:
 8006066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006068:	4606      	mov	r6, r0
 800606a:	460f      	mov	r7, r1
 800606c:	4614      	mov	r4, r2
 800606e:	18d5      	adds	r5, r2, r3
 8006070:	42ac      	cmp	r4, r5
 8006072:	d101      	bne.n	8006078 <__sfputs_r+0x12>
 8006074:	2000      	movs	r0, #0
 8006076:	e007      	b.n	8006088 <__sfputs_r+0x22>
 8006078:	463a      	mov	r2, r7
 800607a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800607e:	4630      	mov	r0, r6
 8006080:	f7ff ffda 	bl	8006038 <__sfputc_r>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d1f3      	bne.n	8006070 <__sfputs_r+0xa>
 8006088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800608c <_vfiprintf_r>:
 800608c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006090:	460c      	mov	r4, r1
 8006092:	b09d      	sub	sp, #116	; 0x74
 8006094:	4617      	mov	r7, r2
 8006096:	461d      	mov	r5, r3
 8006098:	4606      	mov	r6, r0
 800609a:	b118      	cbz	r0, 80060a4 <_vfiprintf_r+0x18>
 800609c:	6983      	ldr	r3, [r0, #24]
 800609e:	b90b      	cbnz	r3, 80060a4 <_vfiprintf_r+0x18>
 80060a0:	f7ff fb2a 	bl	80056f8 <__sinit>
 80060a4:	4b7c      	ldr	r3, [pc, #496]	; (8006298 <_vfiprintf_r+0x20c>)
 80060a6:	429c      	cmp	r4, r3
 80060a8:	d158      	bne.n	800615c <_vfiprintf_r+0xd0>
 80060aa:	6874      	ldr	r4, [r6, #4]
 80060ac:	89a3      	ldrh	r3, [r4, #12]
 80060ae:	0718      	lsls	r0, r3, #28
 80060b0:	d55e      	bpl.n	8006170 <_vfiprintf_r+0xe4>
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d05b      	beq.n	8006170 <_vfiprintf_r+0xe4>
 80060b8:	2300      	movs	r3, #0
 80060ba:	9309      	str	r3, [sp, #36]	; 0x24
 80060bc:	2320      	movs	r3, #32
 80060be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060c2:	2330      	movs	r3, #48	; 0x30
 80060c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060c8:	9503      	str	r5, [sp, #12]
 80060ca:	f04f 0b01 	mov.w	fp, #1
 80060ce:	46b8      	mov	r8, r7
 80060d0:	4645      	mov	r5, r8
 80060d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060d6:	b10b      	cbz	r3, 80060dc <_vfiprintf_r+0x50>
 80060d8:	2b25      	cmp	r3, #37	; 0x25
 80060da:	d154      	bne.n	8006186 <_vfiprintf_r+0xfa>
 80060dc:	ebb8 0a07 	subs.w	sl, r8, r7
 80060e0:	d00b      	beq.n	80060fa <_vfiprintf_r+0x6e>
 80060e2:	4653      	mov	r3, sl
 80060e4:	463a      	mov	r2, r7
 80060e6:	4621      	mov	r1, r4
 80060e8:	4630      	mov	r0, r6
 80060ea:	f7ff ffbc 	bl	8006066 <__sfputs_r>
 80060ee:	3001      	adds	r0, #1
 80060f0:	f000 80c2 	beq.w	8006278 <_vfiprintf_r+0x1ec>
 80060f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f6:	4453      	add	r3, sl
 80060f8:	9309      	str	r3, [sp, #36]	; 0x24
 80060fa:	f898 3000 	ldrb.w	r3, [r8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 80ba 	beq.w	8006278 <_vfiprintf_r+0x1ec>
 8006104:	2300      	movs	r3, #0
 8006106:	f04f 32ff 	mov.w	r2, #4294967295
 800610a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800610e:	9304      	str	r3, [sp, #16]
 8006110:	9307      	str	r3, [sp, #28]
 8006112:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006116:	931a      	str	r3, [sp, #104]	; 0x68
 8006118:	46a8      	mov	r8, r5
 800611a:	2205      	movs	r2, #5
 800611c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006120:	485e      	ldr	r0, [pc, #376]	; (800629c <_vfiprintf_r+0x210>)
 8006122:	f7fa f835 	bl	8000190 <memchr>
 8006126:	9b04      	ldr	r3, [sp, #16]
 8006128:	bb78      	cbnz	r0, 800618a <_vfiprintf_r+0xfe>
 800612a:	06d9      	lsls	r1, r3, #27
 800612c:	bf44      	itt	mi
 800612e:	2220      	movmi	r2, #32
 8006130:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006134:	071a      	lsls	r2, r3, #28
 8006136:	bf44      	itt	mi
 8006138:	222b      	movmi	r2, #43	; 0x2b
 800613a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800613e:	782a      	ldrb	r2, [r5, #0]
 8006140:	2a2a      	cmp	r2, #42	; 0x2a
 8006142:	d02a      	beq.n	800619a <_vfiprintf_r+0x10e>
 8006144:	9a07      	ldr	r2, [sp, #28]
 8006146:	46a8      	mov	r8, r5
 8006148:	2000      	movs	r0, #0
 800614a:	250a      	movs	r5, #10
 800614c:	4641      	mov	r1, r8
 800614e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006152:	3b30      	subs	r3, #48	; 0x30
 8006154:	2b09      	cmp	r3, #9
 8006156:	d969      	bls.n	800622c <_vfiprintf_r+0x1a0>
 8006158:	b360      	cbz	r0, 80061b4 <_vfiprintf_r+0x128>
 800615a:	e024      	b.n	80061a6 <_vfiprintf_r+0x11a>
 800615c:	4b50      	ldr	r3, [pc, #320]	; (80062a0 <_vfiprintf_r+0x214>)
 800615e:	429c      	cmp	r4, r3
 8006160:	d101      	bne.n	8006166 <_vfiprintf_r+0xda>
 8006162:	68b4      	ldr	r4, [r6, #8]
 8006164:	e7a2      	b.n	80060ac <_vfiprintf_r+0x20>
 8006166:	4b4f      	ldr	r3, [pc, #316]	; (80062a4 <_vfiprintf_r+0x218>)
 8006168:	429c      	cmp	r4, r3
 800616a:	bf08      	it	eq
 800616c:	68f4      	ldreq	r4, [r6, #12]
 800616e:	e79d      	b.n	80060ac <_vfiprintf_r+0x20>
 8006170:	4621      	mov	r1, r4
 8006172:	4630      	mov	r0, r6
 8006174:	f7fe fb1e 	bl	80047b4 <__swsetup_r>
 8006178:	2800      	cmp	r0, #0
 800617a:	d09d      	beq.n	80060b8 <_vfiprintf_r+0x2c>
 800617c:	f04f 30ff 	mov.w	r0, #4294967295
 8006180:	b01d      	add	sp, #116	; 0x74
 8006182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006186:	46a8      	mov	r8, r5
 8006188:	e7a2      	b.n	80060d0 <_vfiprintf_r+0x44>
 800618a:	4a44      	ldr	r2, [pc, #272]	; (800629c <_vfiprintf_r+0x210>)
 800618c:	1a80      	subs	r0, r0, r2
 800618e:	fa0b f000 	lsl.w	r0, fp, r0
 8006192:	4318      	orrs	r0, r3
 8006194:	9004      	str	r0, [sp, #16]
 8006196:	4645      	mov	r5, r8
 8006198:	e7be      	b.n	8006118 <_vfiprintf_r+0x8c>
 800619a:	9a03      	ldr	r2, [sp, #12]
 800619c:	1d11      	adds	r1, r2, #4
 800619e:	6812      	ldr	r2, [r2, #0]
 80061a0:	9103      	str	r1, [sp, #12]
 80061a2:	2a00      	cmp	r2, #0
 80061a4:	db01      	blt.n	80061aa <_vfiprintf_r+0x11e>
 80061a6:	9207      	str	r2, [sp, #28]
 80061a8:	e004      	b.n	80061b4 <_vfiprintf_r+0x128>
 80061aa:	4252      	negs	r2, r2
 80061ac:	f043 0302 	orr.w	r3, r3, #2
 80061b0:	9207      	str	r2, [sp, #28]
 80061b2:	9304      	str	r3, [sp, #16]
 80061b4:	f898 3000 	ldrb.w	r3, [r8]
 80061b8:	2b2e      	cmp	r3, #46	; 0x2e
 80061ba:	d10e      	bne.n	80061da <_vfiprintf_r+0x14e>
 80061bc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80061c0:	2b2a      	cmp	r3, #42	; 0x2a
 80061c2:	d138      	bne.n	8006236 <_vfiprintf_r+0x1aa>
 80061c4:	9b03      	ldr	r3, [sp, #12]
 80061c6:	1d1a      	adds	r2, r3, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	9203      	str	r2, [sp, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bfb8      	it	lt
 80061d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80061d4:	f108 0802 	add.w	r8, r8, #2
 80061d8:	9305      	str	r3, [sp, #20]
 80061da:	4d33      	ldr	r5, [pc, #204]	; (80062a8 <_vfiprintf_r+0x21c>)
 80061dc:	f898 1000 	ldrb.w	r1, [r8]
 80061e0:	2203      	movs	r2, #3
 80061e2:	4628      	mov	r0, r5
 80061e4:	f7f9 ffd4 	bl	8000190 <memchr>
 80061e8:	b140      	cbz	r0, 80061fc <_vfiprintf_r+0x170>
 80061ea:	2340      	movs	r3, #64	; 0x40
 80061ec:	1b40      	subs	r0, r0, r5
 80061ee:	fa03 f000 	lsl.w	r0, r3, r0
 80061f2:	9b04      	ldr	r3, [sp, #16]
 80061f4:	4303      	orrs	r3, r0
 80061f6:	f108 0801 	add.w	r8, r8, #1
 80061fa:	9304      	str	r3, [sp, #16]
 80061fc:	f898 1000 	ldrb.w	r1, [r8]
 8006200:	482a      	ldr	r0, [pc, #168]	; (80062ac <_vfiprintf_r+0x220>)
 8006202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006206:	2206      	movs	r2, #6
 8006208:	f108 0701 	add.w	r7, r8, #1
 800620c:	f7f9 ffc0 	bl	8000190 <memchr>
 8006210:	2800      	cmp	r0, #0
 8006212:	d037      	beq.n	8006284 <_vfiprintf_r+0x1f8>
 8006214:	4b26      	ldr	r3, [pc, #152]	; (80062b0 <_vfiprintf_r+0x224>)
 8006216:	bb1b      	cbnz	r3, 8006260 <_vfiprintf_r+0x1d4>
 8006218:	9b03      	ldr	r3, [sp, #12]
 800621a:	3307      	adds	r3, #7
 800621c:	f023 0307 	bic.w	r3, r3, #7
 8006220:	3308      	adds	r3, #8
 8006222:	9303      	str	r3, [sp, #12]
 8006224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006226:	444b      	add	r3, r9
 8006228:	9309      	str	r3, [sp, #36]	; 0x24
 800622a:	e750      	b.n	80060ce <_vfiprintf_r+0x42>
 800622c:	fb05 3202 	mla	r2, r5, r2, r3
 8006230:	2001      	movs	r0, #1
 8006232:	4688      	mov	r8, r1
 8006234:	e78a      	b.n	800614c <_vfiprintf_r+0xc0>
 8006236:	2300      	movs	r3, #0
 8006238:	f108 0801 	add.w	r8, r8, #1
 800623c:	9305      	str	r3, [sp, #20]
 800623e:	4619      	mov	r1, r3
 8006240:	250a      	movs	r5, #10
 8006242:	4640      	mov	r0, r8
 8006244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006248:	3a30      	subs	r2, #48	; 0x30
 800624a:	2a09      	cmp	r2, #9
 800624c:	d903      	bls.n	8006256 <_vfiprintf_r+0x1ca>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0c3      	beq.n	80061da <_vfiprintf_r+0x14e>
 8006252:	9105      	str	r1, [sp, #20]
 8006254:	e7c1      	b.n	80061da <_vfiprintf_r+0x14e>
 8006256:	fb05 2101 	mla	r1, r5, r1, r2
 800625a:	2301      	movs	r3, #1
 800625c:	4680      	mov	r8, r0
 800625e:	e7f0      	b.n	8006242 <_vfiprintf_r+0x1b6>
 8006260:	ab03      	add	r3, sp, #12
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	4622      	mov	r2, r4
 8006266:	4b13      	ldr	r3, [pc, #76]	; (80062b4 <_vfiprintf_r+0x228>)
 8006268:	a904      	add	r1, sp, #16
 800626a:	4630      	mov	r0, r6
 800626c:	f7fd fe0c 	bl	8003e88 <_printf_float>
 8006270:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006274:	4681      	mov	r9, r0
 8006276:	d1d5      	bne.n	8006224 <_vfiprintf_r+0x198>
 8006278:	89a3      	ldrh	r3, [r4, #12]
 800627a:	065b      	lsls	r3, r3, #25
 800627c:	f53f af7e 	bmi.w	800617c <_vfiprintf_r+0xf0>
 8006280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006282:	e77d      	b.n	8006180 <_vfiprintf_r+0xf4>
 8006284:	ab03      	add	r3, sp, #12
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	4622      	mov	r2, r4
 800628a:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <_vfiprintf_r+0x228>)
 800628c:	a904      	add	r1, sp, #16
 800628e:	4630      	mov	r0, r6
 8006290:	f7fe f8b0 	bl	80043f4 <_printf_i>
 8006294:	e7ec      	b.n	8006270 <_vfiprintf_r+0x1e4>
 8006296:	bf00      	nop
 8006298:	0800669c 	.word	0x0800669c
 800629c:	080067dc 	.word	0x080067dc
 80062a0:	080066bc 	.word	0x080066bc
 80062a4:	0800667c 	.word	0x0800667c
 80062a8:	080067e2 	.word	0x080067e2
 80062ac:	080067e6 	.word	0x080067e6
 80062b0:	08003e89 	.word	0x08003e89
 80062b4:	08006067 	.word	0x08006067

080062b8 <_sbrk_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4c06      	ldr	r4, [pc, #24]	; (80062d4 <_sbrk_r+0x1c>)
 80062bc:	2300      	movs	r3, #0
 80062be:	4605      	mov	r5, r0
 80062c0:	4608      	mov	r0, r1
 80062c2:	6023      	str	r3, [r4, #0]
 80062c4:	f7fd fc3c 	bl	8003b40 <_sbrk>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d102      	bne.n	80062d2 <_sbrk_r+0x1a>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	b103      	cbz	r3, 80062d2 <_sbrk_r+0x1a>
 80062d0:	602b      	str	r3, [r5, #0]
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	2000062c 	.word	0x2000062c

080062d8 <__sread>:
 80062d8:	b510      	push	{r4, lr}
 80062da:	460c      	mov	r4, r1
 80062dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e0:	f000 f8a8 	bl	8006434 <_read_r>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	bfab      	itete	ge
 80062e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062ea:	89a3      	ldrhlt	r3, [r4, #12]
 80062ec:	181b      	addge	r3, r3, r0
 80062ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062f2:	bfac      	ite	ge
 80062f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80062f6:	81a3      	strhlt	r3, [r4, #12]
 80062f8:	bd10      	pop	{r4, pc}

080062fa <__swrite>:
 80062fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fe:	461f      	mov	r7, r3
 8006300:	898b      	ldrh	r3, [r1, #12]
 8006302:	05db      	lsls	r3, r3, #23
 8006304:	4605      	mov	r5, r0
 8006306:	460c      	mov	r4, r1
 8006308:	4616      	mov	r6, r2
 800630a:	d505      	bpl.n	8006318 <__swrite+0x1e>
 800630c:	2302      	movs	r3, #2
 800630e:	2200      	movs	r2, #0
 8006310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006314:	f000 f868 	bl	80063e8 <_lseek_r>
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800631e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006322:	81a3      	strh	r3, [r4, #12]
 8006324:	4632      	mov	r2, r6
 8006326:	463b      	mov	r3, r7
 8006328:	4628      	mov	r0, r5
 800632a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800632e:	f000 b817 	b.w	8006360 <_write_r>

08006332 <__sseek>:
 8006332:	b510      	push	{r4, lr}
 8006334:	460c      	mov	r4, r1
 8006336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800633a:	f000 f855 	bl	80063e8 <_lseek_r>
 800633e:	1c43      	adds	r3, r0, #1
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	bf15      	itete	ne
 8006344:	6560      	strne	r0, [r4, #84]	; 0x54
 8006346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800634a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800634e:	81a3      	strheq	r3, [r4, #12]
 8006350:	bf18      	it	ne
 8006352:	81a3      	strhne	r3, [r4, #12]
 8006354:	bd10      	pop	{r4, pc}

08006356 <__sclose>:
 8006356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800635a:	f000 b813 	b.w	8006384 <_close_r>
	...

08006360 <_write_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4c07      	ldr	r4, [pc, #28]	; (8006380 <_write_r+0x20>)
 8006364:	4605      	mov	r5, r0
 8006366:	4608      	mov	r0, r1
 8006368:	4611      	mov	r1, r2
 800636a:	2200      	movs	r2, #0
 800636c:	6022      	str	r2, [r4, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	f7fd fbce 	bl	8003b10 <_write>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	d102      	bne.n	800637e <_write_r+0x1e>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	b103      	cbz	r3, 800637e <_write_r+0x1e>
 800637c:	602b      	str	r3, [r5, #0]
 800637e:	bd38      	pop	{r3, r4, r5, pc}
 8006380:	2000062c 	.word	0x2000062c

08006384 <_close_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	4c06      	ldr	r4, [pc, #24]	; (80063a0 <_close_r+0x1c>)
 8006388:	2300      	movs	r3, #0
 800638a:	4605      	mov	r5, r0
 800638c:	4608      	mov	r0, r1
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	f7fd fbe4 	bl	8003b5c <_close>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d102      	bne.n	800639e <_close_r+0x1a>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	b103      	cbz	r3, 800639e <_close_r+0x1a>
 800639c:	602b      	str	r3, [r5, #0]
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	2000062c 	.word	0x2000062c

080063a4 <_fstat_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4c07      	ldr	r4, [pc, #28]	; (80063c4 <_fstat_r+0x20>)
 80063a8:	2300      	movs	r3, #0
 80063aa:	4605      	mov	r5, r0
 80063ac:	4608      	mov	r0, r1
 80063ae:	4611      	mov	r1, r2
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	f7fd fbdb 	bl	8003b6c <_fstat>
 80063b6:	1c43      	adds	r3, r0, #1
 80063b8:	d102      	bne.n	80063c0 <_fstat_r+0x1c>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	b103      	cbz	r3, 80063c0 <_fstat_r+0x1c>
 80063be:	602b      	str	r3, [r5, #0]
 80063c0:	bd38      	pop	{r3, r4, r5, pc}
 80063c2:	bf00      	nop
 80063c4:	2000062c 	.word	0x2000062c

080063c8 <_isatty_r>:
 80063c8:	b538      	push	{r3, r4, r5, lr}
 80063ca:	4c06      	ldr	r4, [pc, #24]	; (80063e4 <_isatty_r+0x1c>)
 80063cc:	2300      	movs	r3, #0
 80063ce:	4605      	mov	r5, r0
 80063d0:	4608      	mov	r0, r1
 80063d2:	6023      	str	r3, [r4, #0]
 80063d4:	f7fd fbd2 	bl	8003b7c <_isatty>
 80063d8:	1c43      	adds	r3, r0, #1
 80063da:	d102      	bne.n	80063e2 <_isatty_r+0x1a>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	b103      	cbz	r3, 80063e2 <_isatty_r+0x1a>
 80063e0:	602b      	str	r3, [r5, #0]
 80063e2:	bd38      	pop	{r3, r4, r5, pc}
 80063e4:	2000062c 	.word	0x2000062c

080063e8 <_lseek_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4c07      	ldr	r4, [pc, #28]	; (8006408 <_lseek_r+0x20>)
 80063ec:	4605      	mov	r5, r0
 80063ee:	4608      	mov	r0, r1
 80063f0:	4611      	mov	r1, r2
 80063f2:	2200      	movs	r2, #0
 80063f4:	6022      	str	r2, [r4, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f7fd fbc8 	bl	8003b8c <_lseek>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_lseek_r+0x1e>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	b103      	cbz	r3, 8006406 <_lseek_r+0x1e>
 8006404:	602b      	str	r3, [r5, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	2000062c 	.word	0x2000062c

0800640c <__ascii_mbtowc>:
 800640c:	b082      	sub	sp, #8
 800640e:	b901      	cbnz	r1, 8006412 <__ascii_mbtowc+0x6>
 8006410:	a901      	add	r1, sp, #4
 8006412:	b142      	cbz	r2, 8006426 <__ascii_mbtowc+0x1a>
 8006414:	b14b      	cbz	r3, 800642a <__ascii_mbtowc+0x1e>
 8006416:	7813      	ldrb	r3, [r2, #0]
 8006418:	600b      	str	r3, [r1, #0]
 800641a:	7812      	ldrb	r2, [r2, #0]
 800641c:	1c10      	adds	r0, r2, #0
 800641e:	bf18      	it	ne
 8006420:	2001      	movne	r0, #1
 8006422:	b002      	add	sp, #8
 8006424:	4770      	bx	lr
 8006426:	4610      	mov	r0, r2
 8006428:	e7fb      	b.n	8006422 <__ascii_mbtowc+0x16>
 800642a:	f06f 0001 	mvn.w	r0, #1
 800642e:	e7f8      	b.n	8006422 <__ascii_mbtowc+0x16>

08006430 <__malloc_lock>:
 8006430:	4770      	bx	lr

08006432 <__malloc_unlock>:
 8006432:	4770      	bx	lr

08006434 <_read_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4c07      	ldr	r4, [pc, #28]	; (8006454 <_read_r+0x20>)
 8006438:	4605      	mov	r5, r0
 800643a:	4608      	mov	r0, r1
 800643c:	4611      	mov	r1, r2
 800643e:	2200      	movs	r2, #0
 8006440:	6022      	str	r2, [r4, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	f7fd fbaa 	bl	8003b9c <_read>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d102      	bne.n	8006452 <_read_r+0x1e>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	b103      	cbz	r3, 8006452 <_read_r+0x1e>
 8006450:	602b      	str	r3, [r5, #0]
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	2000062c 	.word	0x2000062c

08006458 <__ascii_wctomb>:
 8006458:	b149      	cbz	r1, 800646e <__ascii_wctomb+0x16>
 800645a:	2aff      	cmp	r2, #255	; 0xff
 800645c:	bf85      	ittet	hi
 800645e:	238a      	movhi	r3, #138	; 0x8a
 8006460:	6003      	strhi	r3, [r0, #0]
 8006462:	700a      	strbls	r2, [r1, #0]
 8006464:	f04f 30ff 	movhi.w	r0, #4294967295
 8006468:	bf98      	it	ls
 800646a:	2001      	movls	r0, #1
 800646c:	4770      	bx	lr
 800646e:	4608      	mov	r0, r1
 8006470:	4770      	bx	lr
	...

08006474 <_init>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	bf00      	nop
 8006478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647a:	bc08      	pop	{r3}
 800647c:	469e      	mov	lr, r3
 800647e:	4770      	bx	lr

08006480 <_fini>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	bf00      	nop
 8006484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006486:	bc08      	pop	{r3}
 8006488:	469e      	mov	lr, r3
 800648a:	4770      	bx	lr
