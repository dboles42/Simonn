
Simon-Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000004  0800467c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a0  20000074  080046ec  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000414  080046ec  00020414  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b8f1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003856  00000000  00000000  0003b995  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b00b  00000000  00000000  0003f1eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000fa8  00000000  00000000  0004a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000018d0  00000000  00000000  0004b1a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008c32  00000000  00000000  0004ca70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006864  00000000  00000000  000556a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005bf06  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003280  00000000  00000000  0005bf84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	0800440c 	.word	0x0800440c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	0800440c 	.word	0x0800440c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	bf14      	ite	ne
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e720      	b.n	8000364 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aedc 	beq.w	8000312 <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6c1      	b.n	8000312 <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_uldivmod>:
 8000590:	b953      	cbnz	r3, 80005a8 <__aeabi_uldivmod+0x18>
 8000592:	b94a      	cbnz	r2, 80005a8 <__aeabi_uldivmod+0x18>
 8000594:	2900      	cmp	r1, #0
 8000596:	bf08      	it	eq
 8000598:	2800      	cmpeq	r0, #0
 800059a:	bf1c      	itt	ne
 800059c:	f04f 31ff 	movne.w	r1, #4294967295
 80005a0:	f04f 30ff 	movne.w	r0, #4294967295
 80005a4:	f000 b97a 	b.w	800089c <__aeabi_idiv0>
 80005a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005b0:	f000 f806 	bl	80005c0 <__udivmoddi4>
 80005b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005bc:	b004      	add	sp, #16
 80005be:	4770      	bx	lr

080005c0 <__udivmoddi4>:
 80005c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005c4:	468c      	mov	ip, r1
 80005c6:	460d      	mov	r5, r1
 80005c8:	4604      	mov	r4, r0
 80005ca:	9e08      	ldr	r6, [sp, #32]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d151      	bne.n	8000674 <__udivmoddi4+0xb4>
 80005d0:	428a      	cmp	r2, r1
 80005d2:	4617      	mov	r7, r2
 80005d4:	d96d      	bls.n	80006b2 <__udivmoddi4+0xf2>
 80005d6:	fab2 fe82 	clz	lr, r2
 80005da:	f1be 0f00 	cmp.w	lr, #0
 80005de:	d00b      	beq.n	80005f8 <__udivmoddi4+0x38>
 80005e0:	f1ce 0c20 	rsb	ip, lr, #32
 80005e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80005e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80005f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80005f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80005f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80005fc:	0c25      	lsrs	r5, r4, #16
 80005fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000602:	fa1f f987 	uxth.w	r9, r7
 8000606:	fb0a cc18 	mls	ip, sl, r8, ip
 800060a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800060e:	fb08 f309 	mul.w	r3, r8, r9
 8000612:	42ab      	cmp	r3, r5
 8000614:	d90a      	bls.n	800062c <__udivmoddi4+0x6c>
 8000616:	19ed      	adds	r5, r5, r7
 8000618:	f108 32ff 	add.w	r2, r8, #4294967295
 800061c:	f080 8123 	bcs.w	8000866 <__udivmoddi4+0x2a6>
 8000620:	42ab      	cmp	r3, r5
 8000622:	f240 8120 	bls.w	8000866 <__udivmoddi4+0x2a6>
 8000626:	f1a8 0802 	sub.w	r8, r8, #2
 800062a:	443d      	add	r5, r7
 800062c:	1aed      	subs	r5, r5, r3
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb5 f0fa 	udiv	r0, r5, sl
 8000634:	fb0a 5510 	mls	r5, sl, r0, r5
 8000638:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800063c:	fb00 f909 	mul.w	r9, r0, r9
 8000640:	45a1      	cmp	r9, r4
 8000642:	d909      	bls.n	8000658 <__udivmoddi4+0x98>
 8000644:	19e4      	adds	r4, r4, r7
 8000646:	f100 33ff 	add.w	r3, r0, #4294967295
 800064a:	f080 810a 	bcs.w	8000862 <__udivmoddi4+0x2a2>
 800064e:	45a1      	cmp	r9, r4
 8000650:	f240 8107 	bls.w	8000862 <__udivmoddi4+0x2a2>
 8000654:	3802      	subs	r0, #2
 8000656:	443c      	add	r4, r7
 8000658:	eba4 0409 	sub.w	r4, r4, r9
 800065c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000660:	2100      	movs	r1, #0
 8000662:	2e00      	cmp	r6, #0
 8000664:	d061      	beq.n	800072a <__udivmoddi4+0x16a>
 8000666:	fa24 f40e 	lsr.w	r4, r4, lr
 800066a:	2300      	movs	r3, #0
 800066c:	6034      	str	r4, [r6, #0]
 800066e:	6073      	str	r3, [r6, #4]
 8000670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000674:	428b      	cmp	r3, r1
 8000676:	d907      	bls.n	8000688 <__udivmoddi4+0xc8>
 8000678:	2e00      	cmp	r6, #0
 800067a:	d054      	beq.n	8000726 <__udivmoddi4+0x166>
 800067c:	2100      	movs	r1, #0
 800067e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000682:	4608      	mov	r0, r1
 8000684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000688:	fab3 f183 	clz	r1, r3
 800068c:	2900      	cmp	r1, #0
 800068e:	f040 808e 	bne.w	80007ae <__udivmoddi4+0x1ee>
 8000692:	42ab      	cmp	r3, r5
 8000694:	d302      	bcc.n	800069c <__udivmoddi4+0xdc>
 8000696:	4282      	cmp	r2, r0
 8000698:	f200 80fa 	bhi.w	8000890 <__udivmoddi4+0x2d0>
 800069c:	1a84      	subs	r4, r0, r2
 800069e:	eb65 0503 	sbc.w	r5, r5, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	46ac      	mov	ip, r5
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	d03f      	beq.n	800072a <__udivmoddi4+0x16a>
 80006aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80006ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b2:	b912      	cbnz	r2, 80006ba <__udivmoddi4+0xfa>
 80006b4:	2701      	movs	r7, #1
 80006b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80006ba:	fab7 fe87 	clz	lr, r7
 80006be:	f1be 0f00 	cmp.w	lr, #0
 80006c2:	d134      	bne.n	800072e <__udivmoddi4+0x16e>
 80006c4:	1beb      	subs	r3, r5, r7
 80006c6:	0c3a      	lsrs	r2, r7, #16
 80006c8:	fa1f fc87 	uxth.w	ip, r7
 80006cc:	2101      	movs	r1, #1
 80006ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80006d2:	0c25      	lsrs	r5, r4, #16
 80006d4:	fb02 3318 	mls	r3, r2, r8, r3
 80006d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80006dc:	fb0c f308 	mul.w	r3, ip, r8
 80006e0:	42ab      	cmp	r3, r5
 80006e2:	d907      	bls.n	80006f4 <__udivmoddi4+0x134>
 80006e4:	19ed      	adds	r5, r5, r7
 80006e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80006ea:	d202      	bcs.n	80006f2 <__udivmoddi4+0x132>
 80006ec:	42ab      	cmp	r3, r5
 80006ee:	f200 80d1 	bhi.w	8000894 <__udivmoddi4+0x2d4>
 80006f2:	4680      	mov	r8, r0
 80006f4:	1aed      	subs	r5, r5, r3
 80006f6:	b2a3      	uxth	r3, r4
 80006f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80006fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000700:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000704:	fb0c fc00 	mul.w	ip, ip, r0
 8000708:	45a4      	cmp	ip, r4
 800070a:	d907      	bls.n	800071c <__udivmoddi4+0x15c>
 800070c:	19e4      	adds	r4, r4, r7
 800070e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000712:	d202      	bcs.n	800071a <__udivmoddi4+0x15a>
 8000714:	45a4      	cmp	ip, r4
 8000716:	f200 80b8 	bhi.w	800088a <__udivmoddi4+0x2ca>
 800071a:	4618      	mov	r0, r3
 800071c:	eba4 040c 	sub.w	r4, r4, ip
 8000720:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000724:	e79d      	b.n	8000662 <__udivmoddi4+0xa2>
 8000726:	4631      	mov	r1, r6
 8000728:	4630      	mov	r0, r6
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	f1ce 0420 	rsb	r4, lr, #32
 8000732:	fa05 f30e 	lsl.w	r3, r5, lr
 8000736:	fa07 f70e 	lsl.w	r7, r7, lr
 800073a:	fa20 f804 	lsr.w	r8, r0, r4
 800073e:	0c3a      	lsrs	r2, r7, #16
 8000740:	fa25 f404 	lsr.w	r4, r5, r4
 8000744:	ea48 0803 	orr.w	r8, r8, r3
 8000748:	fbb4 f1f2 	udiv	r1, r4, r2
 800074c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000750:	fb02 4411 	mls	r4, r2, r1, r4
 8000754:	fa1f fc87 	uxth.w	ip, r7
 8000758:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800075c:	fb01 f30c 	mul.w	r3, r1, ip
 8000760:	42ab      	cmp	r3, r5
 8000762:	fa00 f40e 	lsl.w	r4, r0, lr
 8000766:	d909      	bls.n	800077c <__udivmoddi4+0x1bc>
 8000768:	19ed      	adds	r5, r5, r7
 800076a:	f101 30ff 	add.w	r0, r1, #4294967295
 800076e:	f080 808a 	bcs.w	8000886 <__udivmoddi4+0x2c6>
 8000772:	42ab      	cmp	r3, r5
 8000774:	f240 8087 	bls.w	8000886 <__udivmoddi4+0x2c6>
 8000778:	3902      	subs	r1, #2
 800077a:	443d      	add	r5, r7
 800077c:	1aeb      	subs	r3, r5, r3
 800077e:	fa1f f588 	uxth.w	r5, r8
 8000782:	fbb3 f0f2 	udiv	r0, r3, r2
 8000786:	fb02 3310 	mls	r3, r2, r0, r3
 800078a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800078e:	fb00 f30c 	mul.w	r3, r0, ip
 8000792:	42ab      	cmp	r3, r5
 8000794:	d907      	bls.n	80007a6 <__udivmoddi4+0x1e6>
 8000796:	19ed      	adds	r5, r5, r7
 8000798:	f100 38ff 	add.w	r8, r0, #4294967295
 800079c:	d26f      	bcs.n	800087e <__udivmoddi4+0x2be>
 800079e:	42ab      	cmp	r3, r5
 80007a0:	d96d      	bls.n	800087e <__udivmoddi4+0x2be>
 80007a2:	3802      	subs	r0, #2
 80007a4:	443d      	add	r5, r7
 80007a6:	1aeb      	subs	r3, r5, r3
 80007a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007ac:	e78f      	b.n	80006ce <__udivmoddi4+0x10e>
 80007ae:	f1c1 0720 	rsb	r7, r1, #32
 80007b2:	fa22 f807 	lsr.w	r8, r2, r7
 80007b6:	408b      	lsls	r3, r1
 80007b8:	fa05 f401 	lsl.w	r4, r5, r1
 80007bc:	ea48 0303 	orr.w	r3, r8, r3
 80007c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80007c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80007c8:	40fd      	lsrs	r5, r7
 80007ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80007ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80007d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80007d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80007da:	fa1f f883 	uxth.w	r8, r3
 80007de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80007e2:	fb09 f408 	mul.w	r4, r9, r8
 80007e6:	42ac      	cmp	r4, r5
 80007e8:	fa02 f201 	lsl.w	r2, r2, r1
 80007ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80007f0:	d908      	bls.n	8000804 <__udivmoddi4+0x244>
 80007f2:	18ed      	adds	r5, r5, r3
 80007f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80007f8:	d243      	bcs.n	8000882 <__udivmoddi4+0x2c2>
 80007fa:	42ac      	cmp	r4, r5
 80007fc:	d941      	bls.n	8000882 <__udivmoddi4+0x2c2>
 80007fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000802:	441d      	add	r5, r3
 8000804:	1b2d      	subs	r5, r5, r4
 8000806:	fa1f fe8e 	uxth.w	lr, lr
 800080a:	fbb5 f0fc 	udiv	r0, r5, ip
 800080e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000812:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000816:	fb00 f808 	mul.w	r8, r0, r8
 800081a:	45a0      	cmp	r8, r4
 800081c:	d907      	bls.n	800082e <__udivmoddi4+0x26e>
 800081e:	18e4      	adds	r4, r4, r3
 8000820:	f100 35ff 	add.w	r5, r0, #4294967295
 8000824:	d229      	bcs.n	800087a <__udivmoddi4+0x2ba>
 8000826:	45a0      	cmp	r8, r4
 8000828:	d927      	bls.n	800087a <__udivmoddi4+0x2ba>
 800082a:	3802      	subs	r0, #2
 800082c:	441c      	add	r4, r3
 800082e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000832:	eba4 0408 	sub.w	r4, r4, r8
 8000836:	fba0 8902 	umull	r8, r9, r0, r2
 800083a:	454c      	cmp	r4, r9
 800083c:	46c6      	mov	lr, r8
 800083e:	464d      	mov	r5, r9
 8000840:	d315      	bcc.n	800086e <__udivmoddi4+0x2ae>
 8000842:	d012      	beq.n	800086a <__udivmoddi4+0x2aa>
 8000844:	b156      	cbz	r6, 800085c <__udivmoddi4+0x29c>
 8000846:	ebba 030e 	subs.w	r3, sl, lr
 800084a:	eb64 0405 	sbc.w	r4, r4, r5
 800084e:	fa04 f707 	lsl.w	r7, r4, r7
 8000852:	40cb      	lsrs	r3, r1
 8000854:	431f      	orrs	r7, r3
 8000856:	40cc      	lsrs	r4, r1
 8000858:	6037      	str	r7, [r6, #0]
 800085a:	6074      	str	r4, [r6, #4]
 800085c:	2100      	movs	r1, #0
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	4618      	mov	r0, r3
 8000864:	e6f8      	b.n	8000658 <__udivmoddi4+0x98>
 8000866:	4690      	mov	r8, r2
 8000868:	e6e0      	b.n	800062c <__udivmoddi4+0x6c>
 800086a:	45c2      	cmp	sl, r8
 800086c:	d2ea      	bcs.n	8000844 <__udivmoddi4+0x284>
 800086e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000872:	eb69 0503 	sbc.w	r5, r9, r3
 8000876:	3801      	subs	r0, #1
 8000878:	e7e4      	b.n	8000844 <__udivmoddi4+0x284>
 800087a:	4628      	mov	r0, r5
 800087c:	e7d7      	b.n	800082e <__udivmoddi4+0x26e>
 800087e:	4640      	mov	r0, r8
 8000880:	e791      	b.n	80007a6 <__udivmoddi4+0x1e6>
 8000882:	4681      	mov	r9, r0
 8000884:	e7be      	b.n	8000804 <__udivmoddi4+0x244>
 8000886:	4601      	mov	r1, r0
 8000888:	e778      	b.n	800077c <__udivmoddi4+0x1bc>
 800088a:	3802      	subs	r0, #2
 800088c:	443c      	add	r4, r7
 800088e:	e745      	b.n	800071c <__udivmoddi4+0x15c>
 8000890:	4608      	mov	r0, r1
 8000892:	e708      	b.n	80006a6 <__udivmoddi4+0xe6>
 8000894:	f1a8 0802 	sub.w	r8, r8, #2
 8000898:	443d      	add	r5, r7
 800089a:	e72b      	b.n	80006f4 <__udivmoddi4+0x134>

0800089c <__aeabi_idiv0>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80008a2:	4c10      	ldr	r4, [pc, #64]	; (80008e4 <HAL_InitTick+0x44>)
 80008a4:	6823      	ldr	r3, [r4, #0]
{
 80008a6:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 80008a8:	b90b      	cbnz	r3, 80008ae <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80008aa:	2001      	movs	r0, #1
 80008ac:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 80008ae:	f001 f9c3 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 80008b2:	6822      	ldr	r2, [r4, #0]
 80008b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80008bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80008c0:	f000 f8a8 	bl	8000a14 <HAL_SYSTICK_Config>
 80008c4:	4604      	mov	r4, r0
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d1ef      	bne.n	80008aa <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ca:	2d0f      	cmp	r5, #15
 80008cc:	d8ed      	bhi.n	80008aa <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ce:	4602      	mov	r2, r0
 80008d0:	4629      	mov	r1, r5
 80008d2:	f04f 30ff 	mov.w	r0, #4294967295
 80008d6:	f000 f85d 	bl	8000994 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008da:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <HAL_InitTick+0x48>)
 80008dc:	4620      	mov	r0, r4
 80008de:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 80008e0:	bd38      	pop	{r3, r4, r5, pc}
 80008e2:	bf00      	nop
 80008e4:	20000004 	.word	0x20000004
 80008e8:	20000008 	.word	0x20000008

080008ec <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4a09      	ldr	r2, [pc, #36]	; (8000914 <HAL_Init+0x28>)
 80008ee:	6813      	ldr	r3, [r2, #0]
 80008f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80008f4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fa:	f000 f839 	bl	8000970 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff ffce 	bl	80008a0 <HAL_InitTick>
 8000904:	4604      	mov	r4, r0
 8000906:	b918      	cbnz	r0, 8000910 <HAL_Init+0x24>
    HAL_MspInit();
 8000908:	f002 fc20 	bl	800314c <HAL_MspInit>
}
 800090c:	4620      	mov	r0, r4
 800090e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000910:	2401      	movs	r4, #1
 8000912:	e7fb      	b.n	800090c <HAL_Init+0x20>
 8000914:	58004000 	.word	0x58004000

08000918 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000918:	4a03      	ldr	r2, [pc, #12]	; (8000928 <HAL_IncTick+0x10>)
 800091a:	4904      	ldr	r1, [pc, #16]	; (800092c <HAL_IncTick+0x14>)
 800091c:	6813      	ldr	r3, [r2, #0]
 800091e:	6809      	ldr	r1, [r1, #0]
 8000920:	440b      	add	r3, r1
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	200000a0 	.word	0x200000a0
 800092c:	20000004 	.word	0x20000004

08000930 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000930:	4b01      	ldr	r3, [pc, #4]	; (8000938 <HAL_GetTick+0x8>)
 8000932:	6818      	ldr	r0, [r3, #0]
}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	200000a0 	.word	0x200000a0

0800093c <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 800093c:	4b01      	ldr	r3, [pc, #4]	; (8000944 <HAL_GetTickPrio+0x8>)
 800093e:	6818      	ldr	r0, [r3, #0]
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000008 	.word	0x20000008

08000948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000948:	b538      	push	{r3, r4, r5, lr}
 800094a:	4604      	mov	r4, r0
    uint32_t tickstart = HAL_GetTick();
 800094c:	f7ff fff0 	bl	8000930 <HAL_GetTick>
    uint32_t wait = Delay;
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000950:	1c63      	adds	r3, r4, #1
    {
      wait += (uint32_t)(uwTickFreq);
 8000952:	bf1c      	itt	ne
 8000954:	4b05      	ldrne	r3, [pc, #20]	; (800096c <HAL_Delay+0x24>)
 8000956:	681b      	ldrne	r3, [r3, #0]
    uint32_t tickstart = HAL_GetTick();
 8000958:	4605      	mov	r5, r0
      wait += (uint32_t)(uwTickFreq);
 800095a:	bf18      	it	ne
 800095c:	18e4      	addne	r4, r4, r3
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800095e:	f7ff ffe7 	bl	8000930 <HAL_GetTick>
 8000962:	1b40      	subs	r0, r0, r5
 8000964:	4284      	cmp	r4, r0
 8000966:	d8fa      	bhi.n	800095e <HAL_Delay+0x16>
    {
    }
  }
 8000968:	bd38      	pop	{r3, r4, r5, pc}
 800096a:	bf00      	nop
 800096c:	20000004 	.word	0x20000004

08000970 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000972:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000974:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000978:	041b      	lsls	r3, r3, #16
 800097a:	0c1b      	lsrs	r3, r3, #16
 800097c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000980:	0200      	lsls	r0, r0, #8
 8000982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000986:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800098a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800098c:	60d3      	str	r3, [r2, #12]
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000996:	b530      	push	{r4, r5, lr}
 8000998:	68dc      	ldr	r4, [r3, #12]
 800099a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a4:	2b04      	cmp	r3, #4
 80009a6:	bf28      	it	cs
 80009a8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009aa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 0501 	mov.w	r5, #1
 80009b0:	fa05 f303 	lsl.w	r3, r5, r3
 80009b4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b8:	bf8c      	ite	hi
 80009ba:	3c03      	subhi	r4, #3
 80009bc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009be:	4019      	ands	r1, r3
 80009c0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c2:	fa05 f404 	lsl.w	r4, r5, r4
 80009c6:	3c01      	subs	r4, #1
 80009c8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80009ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	ea42 0201 	orr.w	r2, r2, r1
 80009d0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d4:	bfaf      	iteee	ge
 80009d6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009da:	f000 000f 	andlt.w	r0, r0, #15
 80009de:	4b06      	ldrlt	r3, [pc, #24]	; (80009f8 <HAL_NVIC_SetPriority+0x64>)
 80009e0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e2:	bfa5      	ittet	ge
 80009e4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80009e8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ea:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80009f0:	bd30      	pop	{r4, r5, pc}
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00
 80009f8:	e000ed14 	.word	0xe000ed14

080009fc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009fc:	0942      	lsrs	r2, r0, #5
 80009fe:	2301      	movs	r3, #1
 8000a00:	f000 001f 	and.w	r0, r0, #31
 8000a04:	fa03 f000 	lsl.w	r0, r3, r0
 8000a08:	4b01      	ldr	r3, [pc, #4]	; (8000a10 <HAL_NVIC_EnableIRQ+0x14>)
 8000a0a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	3801      	subs	r0, #1
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d20a      	bcs.n	8000a32 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a20:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	21f0      	movs	r1, #240	; 0xf0
 8000a24:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a28:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a32:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e010 	.word	0xe000e010
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a44:	4a55      	ldr	r2, [pc, #340]	; (8000b9c <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a46:	f8d1 8000 	ldr.w	r8, [r1]
  uint32_t position = 0x00u;
 8000a4a:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a4c:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a50:	fa38 f403 	lsrs.w	r4, r8, r3
 8000a54:	d101      	bne.n	8000a5a <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 8000a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a5a:	2401      	movs	r4, #1
 8000a5c:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8000a60:	ea18 050a 	ands.w	r5, r8, sl
 8000a64:	f000 808f 	beq.w	8000b86 <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a68:	684c      	ldr	r4, [r1, #4]
 8000a6a:	f024 0b10 	bic.w	fp, r4, #16
 8000a6e:	f1bb 0f02 	cmp.w	fp, #2
 8000a72:	d111      	bne.n	8000a98 <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3u];
 8000a74:	08df      	lsrs	r7, r3, #3
 8000a76:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a7a:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000a7e:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a80:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000a84:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000a88:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a8c:	690e      	ldr	r6, [r1, #16]
 8000a8e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a92:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000a96:	623e      	str	r6, [r7, #32]
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a9c:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000a9e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000aa0:	fa07 f70c 	lsl.w	r7, r7, ip
 8000aa4:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aa6:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000aaa:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aac:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ab0:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ab4:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ab8:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000abc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000abe:	d811      	bhi.n	8000ae4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8000ac0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ac2:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ac6:	68ce      	ldr	r6, [r1, #12]
 8000ac8:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000acc:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000ad0:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ad2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ad4:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ad8:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000adc:	409e      	lsls	r6, r3
 8000ade:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000ae2:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ae4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ae6:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ae8:	688e      	ldr	r6, [r1, #8]
 8000aea:	fa06 f60c 	lsl.w	r6, r6, ip
 8000aee:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000af0:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000af2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000af4:	d547      	bpl.n	8000b86 <HAL_GPIO_Init+0x146>
 8000af6:	f023 0703 	bic.w	r7, r3, #3
 8000afa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000afe:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b02:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b06:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b08:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000b0c:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b10:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b14:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b18:	d037      	beq.n	8000b8a <HAL_GPIO_Init+0x14a>
 8000b1a:	4e21      	ldr	r6, [pc, #132]	; (8000ba0 <HAL_GPIO_Init+0x160>)
 8000b1c:	42b0      	cmp	r0, r6
 8000b1e:	d036      	beq.n	8000b8e <HAL_GPIO_Init+0x14e>
 8000b20:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b24:	42b0      	cmp	r0, r6
 8000b26:	d034      	beq.n	8000b92 <HAL_GPIO_Init+0x152>
 8000b28:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b2c:	42b0      	cmp	r0, r6
 8000b2e:	d032      	beq.n	8000b96 <HAL_GPIO_Init+0x156>
 8000b30:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b34:	42b0      	cmp	r0, r6
 8000b36:	bf14      	ite	ne
 8000b38:	2607      	movne	r6, #7
 8000b3a:	2604      	moveq	r6, #4
 8000b3c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b40:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b44:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000b46:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8000b4a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b4c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000b50:	bf0c      	ite	eq
 8000b52:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000b54:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000b56:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 8000b5a:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b5e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000b62:	bf0c      	ite	eq
 8000b64:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000b66:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000b68:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 8000b6c:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b6e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000b72:	bf0c      	ite	eq
 8000b74:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000b76:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000b78:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 8000b7a:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b7c:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000b7e:	bf54      	ite	pl
 8000b80:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000b82:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000b84:	6056      	str	r6, [r2, #4]
    position++;
 8000b86:	3301      	adds	r3, #1
 8000b88:	e762      	b.n	8000a50 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b8a:	2600      	movs	r6, #0
 8000b8c:	e7d6      	b.n	8000b3c <HAL_GPIO_Init+0xfc>
 8000b8e:	2601      	movs	r6, #1
 8000b90:	e7d4      	b.n	8000b3c <HAL_GPIO_Init+0xfc>
 8000b92:	2602      	movs	r6, #2
 8000b94:	e7d2      	b.n	8000b3c <HAL_GPIO_Init+0xfc>
 8000b96:	2603      	movs	r6, #3
 8000b98:	e7d0      	b.n	8000b3c <HAL_GPIO_Init+0xfc>
 8000b9a:	bf00      	nop
 8000b9c:	58000800 	.word	0x58000800
 8000ba0:	48000400 	.word	0x48000400

08000ba4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ba4:	b10a      	cbz	r2, 8000baa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ba6:	6181      	str	r1, [r0, #24]
 8000ba8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000baa:	6281      	str	r1, [r0, #40]	; 0x28
 8000bac:	4770      	bx	lr

08000bae <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bae:	4770      	bx	lr

08000bb0 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000bb0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000bb4:	68d9      	ldr	r1, [r3, #12]
 8000bb6:	4201      	tst	r1, r0
 8000bb8:	d002      	beq.n	8000bc0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bba:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bbc:	f7ff fff7 	bl	8000bae <HAL_GPIO_EXTI_Callback>
 8000bc0:	bd08      	pop	{r3, pc}
 8000bc2:	bf00      	nop
 8000bc4:	58000800 	.word	0x58000800

08000bc8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000bc8:	6803      	ldr	r3, [r0, #0]
 8000bca:	699a      	ldr	r2, [r3, #24]
 8000bcc:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000bce:	bf44      	itt	mi
 8000bd0:	2200      	movmi	r2, #0
 8000bd2:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000bd4:	699a      	ldr	r2, [r3, #24]
 8000bd6:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000bd8:	bf5e      	ittt	pl
 8000bda:	699a      	ldrpl	r2, [r3, #24]
 8000bdc:	f042 0201 	orrpl.w	r2, r2, #1
 8000be0:	619a      	strpl	r2, [r3, #24]
 8000be2:	4770      	bx	lr

08000be4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000be4:	b530      	push	{r4, r5, lr}
 8000be6:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000be8:	6805      	ldr	r5, [r0, #0]
 8000bea:	4323      	orrs	r3, r4
 8000bec:	0d64      	lsrs	r4, r4, #21
 8000bee:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000bf2:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000bf6:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000bfa:	6868      	ldr	r0, [r5, #4]
 8000bfc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000c00:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000c04:	4319      	orrs	r1, r3
 8000c06:	f044 0403 	orr.w	r4, r4, #3
 8000c0a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000c0e:	ea20 0404 	bic.w	r4, r0, r4
 8000c12:	4321      	orrs	r1, r4
 8000c14:	6069      	str	r1, [r5, #4]
 8000c16:	bd30      	pop	{r4, r5, pc}

08000c18 <I2C_WaitOnFlagUntilTimeout>:
{
 8000c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c1c:	9f06      	ldr	r7, [sp, #24]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	4616      	mov	r6, r2
 8000c24:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000c26:	6822      	ldr	r2, [r4, #0]
 8000c28:	6993      	ldr	r3, [r2, #24]
 8000c2a:	ea38 0303 	bics.w	r3, r8, r3
 8000c2e:	bf0c      	ite	eq
 8000c30:	2301      	moveq	r3, #1
 8000c32:	2300      	movne	r3, #0
 8000c34:	42b3      	cmp	r3, r6
 8000c36:	d002      	beq.n	8000c3e <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000c38:	2000      	movs	r0, #0
}
 8000c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000c3e:	1c6b      	adds	r3, r5, #1
 8000c40:	d0f2      	beq.n	8000c28 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c42:	f7ff fe75 	bl	8000930 <HAL_GetTick>
 8000c46:	1bc0      	subs	r0, r0, r7
 8000c48:	4285      	cmp	r5, r0
 8000c4a:	d301      	bcc.n	8000c50 <I2C_WaitOnFlagUntilTimeout+0x38>
 8000c4c:	2d00      	cmp	r5, #0
 8000c4e:	d1ea      	bne.n	8000c26 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c52:	f043 0320 	orr.w	r3, r3, #32
 8000c56:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000c58:	2320      	movs	r3, #32
 8000c5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000c64:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000c68:	2001      	movs	r0, #1
 8000c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000c6e <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000c6e:	6803      	ldr	r3, [r0, #0]
{
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000c74:	6998      	ldr	r0, [r3, #24]
 8000c76:	f010 0010 	ands.w	r0, r0, #16
{
 8000c7a:	460d      	mov	r5, r1
 8000c7c:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000c7e:	d116      	bne.n	8000cae <I2C_IsAcknowledgeFailed+0x40>
 8000c80:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000c82:	1c69      	adds	r1, r5, #1
 8000c84:	d014      	beq.n	8000cb0 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c86:	f7ff fe53 	bl	8000930 <HAL_GetTick>
 8000c8a:	1b80      	subs	r0, r0, r6
 8000c8c:	4285      	cmp	r5, r0
 8000c8e:	d300      	bcc.n	8000c92 <I2C_IsAcknowledgeFailed+0x24>
 8000c90:	b96d      	cbnz	r5, 8000cae <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c94:	f043 0320 	orr.w	r3, r3, #32
 8000c98:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000ca6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000caa:	2001      	movs	r0, #1
}
 8000cac:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000cae:	6823      	ldr	r3, [r4, #0]
 8000cb0:	6999      	ldr	r1, [r3, #24]
 8000cb2:	068a      	lsls	r2, r1, #26
 8000cb4:	d5e5      	bpl.n	8000c82 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cb6:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cb8:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cba:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000cbc:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cbe:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000cc0:	f7ff ff82 	bl	8000bc8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000cc4:	6822      	ldr	r2, [r4, #0]
 8000cc6:	6853      	ldr	r3, [r2, #4]
 8000cc8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000ccc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000cd0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000cd4:	f023 0301 	bic.w	r3, r3, #1
 8000cd8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000cda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000ce2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8000ce6:	e7db      	b.n	8000ca0 <I2C_IsAcknowledgeFailed+0x32>

08000ce8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000ce8:	b570      	push	{r4, r5, r6, lr}
 8000cea:	4604      	mov	r4, r0
 8000cec:	460d      	mov	r5, r1
 8000cee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	079b      	lsls	r3, r3, #30
 8000cf6:	d501      	bpl.n	8000cfc <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000cfc:	4632      	mov	r2, r6
 8000cfe:	4629      	mov	r1, r5
 8000d00:	4620      	mov	r0, r4
 8000d02:	f7ff ffb4 	bl	8000c6e <I2C_IsAcknowledgeFailed>
 8000d06:	b9a0      	cbnz	r0, 8000d32 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000d08:	1c6a      	adds	r2, r5, #1
 8000d0a:	d0f1      	beq.n	8000cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d0c:	f7ff fe10 	bl	8000930 <HAL_GetTick>
 8000d10:	1b80      	subs	r0, r0, r6
 8000d12:	4285      	cmp	r5, r0
 8000d14:	d301      	bcc.n	8000d1a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d1ea      	bne.n	8000cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d1c:	f043 0320 	orr.w	r3, r3, #32
 8000d20:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000d22:	2320      	movs	r3, #32
 8000d24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000d2e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000d32:	2001      	movs	r0, #1
}
 8000d34:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d38 <I2C_RequestMemoryRead>:
{
 8000d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d3a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000d3c:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <I2C_RequestMemoryRead+0x60>)
 8000d40:	9300      	str	r3, [sp, #0]
{
 8000d42:	4605      	mov	r5, r0
 8000d44:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000d46:	2300      	movs	r3, #0
 8000d48:	b2fa      	uxtb	r2, r7
 8000d4a:	f7ff ff4b 	bl	8000be4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d4e:	4632      	mov	r2, r6
 8000d50:	9908      	ldr	r1, [sp, #32]
 8000d52:	4628      	mov	r0, r5
 8000d54:	f7ff ffc8 	bl	8000ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8000d58:	b110      	cbz	r0, 8000d60 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8000d5a:	2001      	movs	r0, #1
}
 8000d5c:	b003      	add	sp, #12
 8000d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000d60:	2f01      	cmp	r7, #1
 8000d62:	682b      	ldr	r3, [r5, #0]
 8000d64:	d10c      	bne.n	8000d80 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000d66:	b2e4      	uxtb	r4, r4
 8000d68:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000d6a:	9b08      	ldr	r3, [sp, #32]
 8000d6c:	9600      	str	r6, [sp, #0]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2140      	movs	r1, #64	; 0x40
 8000d72:	4628      	mov	r0, r5
 8000d74:	f7ff ff50 	bl	8000c18 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8000d78:	3000      	adds	r0, #0
 8000d7a:	bf18      	it	ne
 8000d7c:	2001      	movne	r0, #1
 8000d7e:	e7ed      	b.n	8000d5c <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000d80:	0a22      	lsrs	r2, r4, #8
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d84:	9908      	ldr	r1, [sp, #32]
 8000d86:	4632      	mov	r2, r6
 8000d88:	4628      	mov	r0, r5
 8000d8a:	f7ff ffad 	bl	8000ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d1e3      	bne.n	8000d5a <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000d92:	682b      	ldr	r3, [r5, #0]
 8000d94:	e7e7      	b.n	8000d66 <I2C_RequestMemoryRead+0x2e>
 8000d96:	bf00      	nop
 8000d98:	80002000 	.word	0x80002000

08000d9c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000d9c:	b570      	push	{r4, r5, r6, lr}
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	069b      	lsls	r3, r3, #26
 8000daa:	d501      	bpl.n	8000db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000dac:	2000      	movs	r0, #0
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000db0:	4632      	mov	r2, r6
 8000db2:	4629      	mov	r1, r5
 8000db4:	4620      	mov	r0, r4
 8000db6:	f7ff ff5a 	bl	8000c6e <I2C_IsAcknowledgeFailed>
 8000dba:	b990      	cbnz	r0, 8000de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dbc:	f7ff fdb8 	bl	8000930 <HAL_GetTick>
 8000dc0:	1b80      	subs	r0, r0, r6
 8000dc2:	4285      	cmp	r5, r0
 8000dc4:	d301      	bcc.n	8000dca <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d1ec      	bne.n	8000da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000dca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dcc:	f043 0320 	orr.w	r3, r3, #32
 8000dd0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000dde:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000de2:	2001      	movs	r0, #1
}
 8000de4:	bd70      	pop	{r4, r5, r6, pc}

08000de6 <HAL_I2C_Init>:
{
 8000de6:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000de8:	4604      	mov	r4, r0
 8000dea:	2800      	cmp	r0, #0
 8000dec:	d04a      	beq.n	8000e84 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000df2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000df6:	b91b      	cbnz	r3, 8000e00 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000df8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000dfc:	f002 f9a8 	bl	8003150 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e00:	2324      	movs	r3, #36	; 0x24
 8000e02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000e06:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e08:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	f022 0201 	bic.w	r2, r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e12:	6862      	ldr	r2, [r4, #4]
 8000e14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e18:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e1a:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e1c:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e26:	d124      	bne.n	8000e72 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e2c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e2e:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e30:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e32:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e3a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e42:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e44:	6922      	ldr	r2, [r4, #16]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	69a1      	ldr	r1, [r4, #24]
 8000e4a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e4e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e50:	6a21      	ldr	r1, [r4, #32]
 8000e52:	69e2      	ldr	r2, [r4, #28]
 8000e54:	430a      	orrs	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	f042 0201 	orr.w	r2, r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e60:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000e62:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e64:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e6a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e6c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000e70:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e76:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e78:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e7a:	bf04      	itt	eq
 8000e7c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000e80:	605a      	streq	r2, [r3, #4]
 8000e82:	e7d4      	b.n	8000e2e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000e84:	2001      	movs	r0, #1
}
 8000e86:	bd10      	pop	{r4, pc}

08000e88 <HAL_I2C_Master_Transmit>:
{
 8000e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000e8c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e8e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000e92:	2b20      	cmp	r3, #32
{
 8000e94:	4604      	mov	r4, r0
 8000e96:	460e      	mov	r6, r1
 8000e98:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e9a:	f040 8084 	bne.w	8000fa6 <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8000e9e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d07f      	beq.n	8000fa6 <HAL_I2C_Master_Transmit+0x11e>
 8000ea6:	2701      	movs	r7, #1
 8000ea8:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000eac:	f7ff fd40 	bl	8000930 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000eb0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000eb2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000eb4:	9000      	str	r0, [sp, #0]
 8000eb6:	463a      	mov	r2, r7
 8000eb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f7ff feab 	bl	8000c18 <I2C_WaitOnFlagUntilTimeout>
 8000ec2:	b118      	cbz	r0, 8000ecc <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8000ec4:	2001      	movs	r0, #1
}
 8000ec6:	b003      	add	sp, #12
 8000ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ecc:	2321      	movs	r3, #33	; 0x21
 8000ece:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ed2:	2310      	movs	r3, #16
 8000ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ed8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000eda:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ede:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000ee0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8000eea:	4b30      	ldr	r3, [pc, #192]	; (8000fac <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000eec:	d926      	bls.n	8000f3c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000eee:	22ff      	movs	r2, #255	; 0xff
 8000ef0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000ef2:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ef4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ef8:	4631      	mov	r1, r6
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff fe72 	bl	8000be4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000f00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f02:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8000f04:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f06:	462a      	mov	r2, r5
 8000f08:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000f0a:	b9fb      	cbnz	r3, 8000f4c <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f0c:	f7ff ff46 	bl	8000d9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f10:	2800      	cmp	r0, #0
 8000f12:	d1d7      	bne.n	8000ec4 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	2120      	movs	r1, #32
 8000f18:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000f20:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000f24:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000f28:	f022 0201 	bic.w	r2, r2, #1
 8000f2c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000f2e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000f32:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000f36:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000f3a:	e7c4      	b.n	8000ec6 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8000f3c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000f3e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000f40:	b292      	uxth	r2, r2
 8000f42:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	e7d5      	b.n	8000ef8 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f4c:	f7ff fecc 	bl	8000ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f50:	2800      	cmp	r0, #0
 8000f52:	d1b7      	bne.n	8000ec4 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f56:	6822      	ldr	r2, [r4, #0]
 8000f58:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000f5c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000f5e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000f60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000f62:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000f64:	3b01      	subs	r3, #1
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000f6c:	3a01      	subs	r2, #1
 8000f6e:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f70:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000f72:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0c3      	beq.n	8000f00 <HAL_I2C_Master_Transmit+0x78>
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	d1c1      	bne.n	8000f00 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f7c:	9500      	str	r5, [sp, #0]
 8000f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	4620      	mov	r0, r4
 8000f84:	f7ff fe48 	bl	8000c18 <I2C_WaitOnFlagUntilTimeout>
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	d19b      	bne.n	8000ec4 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	2bff      	cmp	r3, #255	; 0xff
 8000f92:	d903      	bls.n	8000f9c <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f94:	22ff      	movs	r2, #255	; 0xff
 8000f96:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f98:	9000      	str	r0, [sp, #0]
 8000f9a:	e7ab      	b.n	8000ef4 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8000f9c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f9e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000fa0:	b292      	uxth	r2, r2
 8000fa2:	8522      	strh	r2, [r4, #40]	; 0x28
 8000fa4:	e7ce      	b.n	8000f44 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	e78d      	b.n	8000ec6 <HAL_I2C_Master_Transmit+0x3e>
 8000faa:	bf00      	nop
 8000fac:	80002000 	.word	0x80002000

08000fb0 <HAL_I2C_Mem_Read>:
{
 8000fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fb4:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fb6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000fba:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fbc:	2b20      	cmp	r3, #32
{
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	460f      	mov	r7, r1
 8000fc2:	9203      	str	r2, [sp, #12]
 8000fc4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8000fc8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fcc:	f040 80a9 	bne.w	8001122 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8000fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000fd2:	b113      	cbz	r3, 8000fda <HAL_I2C_Mem_Read+0x2a>
 8000fd4:	f1ba 0f00 	cmp.w	sl, #0
 8000fd8:	d106      	bne.n	8000fe8 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fde:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000fe0:	2001      	movs	r0, #1
}
 8000fe2:	b005      	add	sp, #20
 8000fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8000fe8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	f000 8098 	beq.w	8001122 <HAL_I2C_Mem_Read+0x172>
 8000ff2:	2501      	movs	r5, #1
 8000ff4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000ff8:	f7ff fc9a 	bl	8000930 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ffc:	2319      	movs	r3, #25
 8000ffe:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001000:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001002:	462a      	mov	r2, r5
 8001004:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001008:	4620      	mov	r0, r4
 800100a:	f7ff fe05 	bl	8000c18 <I2C_WaitOnFlagUntilTimeout>
 800100e:	4681      	mov	r9, r0
 8001010:	2800      	cmp	r0, #0
 8001012:	d1e5      	bne.n	8000fe0 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001014:	2322      	movs	r3, #34	; 0x22
 8001016:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800101a:	2340      	movs	r3, #64	; 0x40
 800101c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001022:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001024:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001026:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001028:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800102c:	9601      	str	r6, [sp, #4]
 800102e:	f8cd 8000 	str.w	r8, [sp]
 8001032:	465b      	mov	r3, fp
 8001034:	9a03      	ldr	r2, [sp, #12]
 8001036:	4639      	mov	r1, r7
 8001038:	4620      	mov	r0, r4
 800103a:	f7ff fe7d 	bl	8000d38 <I2C_RequestMemoryRead>
 800103e:	b110      	cbz	r0, 8001046 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8001040:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8001044:	e7cc      	b.n	8000fe0 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001046:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001048:	b29b      	uxth	r3, r3
 800104a:	2bff      	cmp	r3, #255	; 0xff
 800104c:	4b36      	ldr	r3, [pc, #216]	; (8001128 <HAL_I2C_Mem_Read+0x178>)
 800104e:	d958      	bls.n	8001102 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001050:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001052:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001054:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800105a:	4639      	mov	r1, r7
 800105c:	4620      	mov	r0, r4
 800105e:	f7ff fdc1 	bl	8000be4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001062:	9600      	str	r6, [sp, #0]
 8001064:	4643      	mov	r3, r8
 8001066:	2200      	movs	r2, #0
 8001068:	2104      	movs	r1, #4
 800106a:	4620      	mov	r0, r4
 800106c:	f7ff fdd4 	bl	8000c18 <I2C_WaitOnFlagUntilTimeout>
 8001070:	2800      	cmp	r0, #0
 8001072:	d1b5      	bne.n	8000fe0 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001074:	6822      	ldr	r2, [r4, #0]
 8001076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001078:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800107a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800107c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800107e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001080:	3301      	adds	r3, #1
 8001082:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001084:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001086:	3b01      	subs	r3, #1
 8001088:	b29b      	uxth	r3, r3
 800108a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800108c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800108e:	3a01      	subs	r2, #1
 8001090:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001092:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001094:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001096:	b1ab      	cbz	r3, 80010c4 <HAL_I2C_Mem_Read+0x114>
 8001098:	b9a2      	cbnz	r2, 80010c4 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800109a:	9600      	str	r6, [sp, #0]
 800109c:	4643      	mov	r3, r8
 800109e:	2180      	movs	r1, #128	; 0x80
 80010a0:	4620      	mov	r0, r4
 80010a2:	f7ff fdb9 	bl	8000c18 <I2C_WaitOnFlagUntilTimeout>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	d19a      	bne.n	8000fe0 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	2bff      	cmp	r3, #255	; 0xff
 80010b0:	d92f      	bls.n	8001112 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010b2:	22ff      	movs	r2, #255	; 0xff
 80010b4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80010b6:	9000      	str	r0, [sp, #0]
 80010b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010bc:	4639      	mov	r1, r7
 80010be:	4620      	mov	r0, r4
 80010c0:	f7ff fd90 	bl	8000be4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80010c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1ca      	bne.n	8001062 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010cc:	4632      	mov	r2, r6
 80010ce:	4641      	mov	r1, r8
 80010d0:	4620      	mov	r0, r4
 80010d2:	f7ff fe63 	bl	8000d9c <I2C_WaitOnSTOPFlagUntilTimeout>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d182      	bne.n	8000fe0 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	2120      	movs	r1, #32
 80010de:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80010e6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80010ea:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80010ee:	f022 0201 	bic.w	r2, r2, #1
 80010f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80010f4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80010f8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80010fc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001100:	e76f      	b.n	8000fe2 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001102:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001104:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001106:	b292      	uxth	r2, r2
 8001108:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800110a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	e7a3      	b.n	800105a <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8001112:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001114:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001116:	b292      	uxth	r2, r2
 8001118:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800111a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	e7cc      	b.n	80010bc <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8001122:	2002      	movs	r0, #2
 8001124:	e75d      	b.n	8000fe2 <HAL_I2C_Mem_Read+0x32>
 8001126:	bf00      	nop
 8001128:	80002400 	.word	0x80002400

0800112c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800112c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	2a20      	cmp	r2, #32
{
 8001134:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001136:	d11d      	bne.n	8001174 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001138:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800113c:	2b01      	cmp	r3, #1
 800113e:	d019      	beq.n	8001174 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001140:	2324      	movs	r3, #36	; 0x24
 8001142:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001146:	6803      	ldr	r3, [r0, #0]
 8001148:	681c      	ldr	r4, [r3, #0]
 800114a:	f024 0401 	bic.w	r4, r4, #1
 800114e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001150:	681c      	ldr	r4, [r3, #0]
 8001152:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001156:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001158:	681c      	ldr	r4, [r3, #0]
 800115a:	4321      	orrs	r1, r4
 800115c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800115e:	6819      	ldr	r1, [r3, #0]
 8001160:	f041 0101 	orr.w	r1, r1, #1
 8001164:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001166:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001168:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800116c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001170:	4618      	mov	r0, r3
 8001172:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001174:	2002      	movs	r0, #2
  }
}
 8001176:	bd10      	pop	{r4, pc}

08001178 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001178:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800117a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800117e:	b2e4      	uxtb	r4, r4
 8001180:	2c20      	cmp	r4, #32
 8001182:	d11c      	bne.n	80011be <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001184:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001188:	2b01      	cmp	r3, #1
 800118a:	d018      	beq.n	80011be <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800118c:	2324      	movs	r3, #36	; 0x24
 800118e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001192:	6803      	ldr	r3, [r0, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	f022 0201 	bic.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800119c:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800119e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80011a2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80011a6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	f042 0201 	orr.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011b0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80011b2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80011b6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80011be:	2002      	movs	r0, #2
  }
}
 80011c0:	bd10      	pop	{r4, pc}

080011c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011c2:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011c4:	4604      	mov	r4, r0
{
 80011c6:	b086      	sub	sp, #24
  if (hpcd == NULL)
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d057      	beq.n	800127c <HAL_PCD_Init+0xba>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011cc:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 80011d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011d4:	b91b      	cbnz	r3, 80011de <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011d6:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011da:	f002 f817 	bl	800320c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011de:	2303      	movs	r3, #3
 80011e0:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011e4:	6820      	ldr	r0, [r4, #0]
 80011e6:	f001 fd05 	bl	8002bf4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ea:	2200      	movs	r2, #0
 80011ec:	6860      	ldr	r0, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011ee:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011f0:	4615      	mov	r5, r2
 80011f2:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f4:	4298      	cmp	r0, r3
 80011f6:	f102 0201 	add.w	r2, r2, #1
 80011fa:	d820      	bhi.n	800123e <HAL_PCD_Init+0x7c>
 80011fc:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011fe:	4611      	mov	r1, r2
 8001200:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001202:	4298      	cmp	r0, r3
 8001204:	f102 0201 	add.w	r2, r2, #1
 8001208:	d828      	bhi.n	800125c <HAL_PCD_Init+0x9a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800120a:	f104 0610 	add.w	r6, r4, #16
 800120e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001210:	466d      	mov	r5, sp
 8001212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001214:	6833      	ldr	r3, [r6, #0]
 8001216:	602b      	str	r3, [r5, #0]
 8001218:	1d23      	adds	r3, r4, #4
 800121a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800121c:	6820      	ldr	r0, [r4, #0]
 800121e:	f001 fcf3 	bl	8002c08 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001222:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8001224:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001226:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800122a:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800122e:	69e3      	ldr	r3, [r4, #28]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d102      	bne.n	800123a <HAL_PCD_Init+0x78>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001234:	4620      	mov	r0, r4
 8001236:	f000 f824 	bl	8001282 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800123a:	4628      	mov	r0, r5
 800123c:	e01f      	b.n	800127e <HAL_PCD_Init+0xbc>
    hpcd->IN_ep[i].is_in = 1U;
 800123e:	eb04 1143 	add.w	r1, r4, r3, lsl #5
    hpcd->IN_ep[i].num = i;
 8001242:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001246:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].xfer_len = 0U;
 8001248:	3302      	adds	r3, #2
 800124a:	015b      	lsls	r3, r3, #5
    hpcd->IN_ep[i].is_in = 1U;
 800124c:	f881 6029 	strb.w	r6, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001250:	f881 502b 	strb.w	r5, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8001254:	638d      	str	r5, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001256:	63cd      	str	r5, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001258:	50e5      	str	r5, [r4, r3]
 800125a:	e7ca      	b.n	80011f2 <HAL_PCD_Init+0x30>
    hpcd->OUT_ep[i].is_in = 0U;
 800125c:	eb04 1543 	add.w	r5, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8001260:	f885 3128 	strb.w	r3, [r5, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001264:	330a      	adds	r3, #10
 8001266:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8001268:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800126c:	f885 112b 	strb.w	r1, [r5, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001270:	f8c5 1138 	str.w	r1, [r5, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001274:	f8c5 113c 	str.w	r1, [r5, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001278:	50e1      	str	r1, [r4, r3]
 800127a:	e7c1      	b.n	8001200 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 800127c:	2001      	movs	r0, #1
}
 800127e:	b006      	add	sp, #24
 8001280:	bd70      	pop	{r4, r5, r6, pc}

08001282 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8001282:	6802      	ldr	r2, [r0, #0]
{
 8001284:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8001286:	2101      	movs	r1, #1
 8001288:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800128c:	2000      	movs	r0, #0
 800128e:	f883 0260 	strb.w	r0, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001292:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001296:	b29b      	uxth	r3, r3
 8001298:	430b      	orrs	r3, r1
 800129a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800129e:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012b0:	4a02      	ldr	r2, [pc, #8]	; (80012bc <HAL_PWR_EnableBkUpAccess+0xc>)
 80012b2:	6813      	ldr	r3, [r2, #0]
 80012b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4770      	bx	lr
 80012bc:	58000400 	.word	0x58000400

080012c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012c0:	4b02      	ldr	r3, [pc, #8]	; (80012cc <HAL_PWREx_GetVoltageRange+0xc>)
 80012c2:	6818      	ldr	r0, [r3, #0]
}
 80012c4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	58000400 	.word	0x58000400

080012d0 <LL_RCC_HSE_IsReady>:
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80012d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d4:	6818      	ldr	r0, [r3, #0]
}
 80012d6:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80012da:	4770      	bx	lr

080012dc <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80012dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e0:	6818      	ldr	r0, [r3, #0]
}
 80012e2:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80012e6:	4770      	bx	lr

080012e8 <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80012e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ec:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 80012f0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80012f4:	4770      	bx	lr

080012f6 <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80012f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fa:	6818      	ldr	r0, [r3, #0]
}
 80012fc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001300:	4770      	bx	lr

08001302 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001306:	6813      	ldr	r3, [r2, #0]
 8001308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800130c:	4318      	orrs	r0, r3
 800130e:	6010      	str	r0, [r2, #0]
 8001310:	4770      	bx	lr

08001312 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  if(msiRange > LL_RCC_MSIRANGE_11)
  {
    msiRange = LL_RCC_MSIRANGE_11;
  }
  return msiRange;
}
 800131c:	28b0      	cmp	r0, #176	; 0xb0
 800131e:	bf28      	it	cs
 8001320:	20b0      	movcs	r0, #176	; 0xb0
 8001322:	4770      	bx	lr

08001324 <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001328:	6853      	ldr	r3, [r2, #4]
 800132a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800132e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001332:	6050      	str	r0, [r2, #4]
 8001334:	4770      	bx	lr

08001336 <LL_RCC_PLL_IsReady>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800133a:	6818      	ldr	r0, [r3, #0]
}
 800133c:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8001340:	4770      	bx	lr
	...

08001344 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
  
  /* MSI frequency range in Hz */
  if(MSI_Range > RCC_MSIRANGE_11)
 8001344:	28b0      	cmp	r0, #176	; 0xb0
 8001346:	4b32      	ldr	r3, [pc, #200]	; (8001410 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }
  
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001348:	4a32      	ldr	r2, [pc, #200]	; (8001414 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800134a:	bf98      	it	ls
 800134c:	0900      	lsrls	r0, r0, #4
{
 800134e:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001350:	bf8c      	ite	hi
 8001352:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001354:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001358:	4c2f      	ldr	r4, [pc, #188]	; (8001418 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800135a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800135e:	b08d      	sub	sp, #52	; 0x34
 8001360:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001364:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001368:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800136a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136e:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8001374:	fbb5 f5f3 	udiv	r5, r5, r3
 8001378:	f7ff ffa2 	bl	80012c0 <HAL_PWREx_GetVoltageRange>
 800137c:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800137e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001382:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001386:	f104 0210 	add.w	r2, r4, #16
 800138a:	ca07      	ldmia	r2, {r0, r1, r2}
 800138c:	ab01      	add	r3, sp, #4
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800138e:	341c      	adds	r4, #28
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001390:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001394:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001398:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800139c:	ac0c      	add	r4, sp, #48	; 0x30
 800139e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013a2:	d11f      	bne.n	80013e4 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 80013a4:	2300      	movs	r3, #0
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80013a6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80013aa:	4295      	cmp	r5, r2
 80013ac:	d815      	bhi.n	80013da <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
      {
        latency = FLASH_LATENCY_RANGE[index];
 80013ae:	aa0c      	add	r2, sp, #48	; 0x30
 80013b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80013b4:	f853 4c10 	ldr.w	r4, [r3, #-16]
        break;
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80013b8:	4d19      	ldr	r5, [pc, #100]	; (8001420 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 80013ba:	682b      	ldr	r3, [r5, #0]
 80013bc:	f023 0307 	bic.w	r3, r3, #7
 80013c0:	4323      	orrs	r3, r4
 80013c2:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80013c4:	f7ff fab4 	bl	8000930 <HAL_GetTick>
 80013c8:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80013ca:	682b      	ldr	r3, [r5, #0]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	429c      	cmp	r4, r3
 80013d2:	d116      	bne.n	8001402 <RCC_SetFlashLatencyFromMSIRange+0xbe>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80013d4:	2000      	movs	r0, #0
}
 80013d6:	b00d      	add	sp, #52	; 0x34
 80013d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80013da:	3301      	adds	r3, #1
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d1e2      	bne.n	80013a6 <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80013e0:	2400      	movs	r4, #0
 80013e2:	e7e9      	b.n	80013b8 <RCC_SetFlashLatencyFromMSIRange+0x74>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80013e4:	9b01      	ldr	r3, [sp, #4]
 80013e6:	429d      	cmp	r5, r3
 80013e8:	d907      	bls.n	80013fa <RCC_SetFlashLatencyFromMSIRange+0xb6>
 80013ea:	9b02      	ldr	r3, [sp, #8]
 80013ec:	429d      	cmp	r5, r3
 80013ee:	d906      	bls.n	80013fe <RCC_SetFlashLatencyFromMSIRange+0xba>
 80013f0:	9b03      	ldr	r3, [sp, #12]
 80013f2:	429d      	cmp	r5, r3
 80013f4:	d8f4      	bhi.n	80013e0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80013f6:	2302      	movs	r3, #2
 80013f8:	e7d9      	b.n	80013ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80013fa:	2300      	movs	r3, #0
 80013fc:	e7d7      	b.n	80013ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80013fe:	2301      	movs	r3, #1
 8001400:	e7d5      	b.n	80013ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001402:	f7ff fa95 	bl	8000930 <HAL_GetTick>
 8001406:	1b80      	subs	r0, r0, r6
 8001408:	2802      	cmp	r0, #2
 800140a:	d9de      	bls.n	80013ca <RCC_SetFlashLatencyFromMSIRange+0x86>
      return HAL_TIMEOUT;
 800140c:	2003      	movs	r0, #3
 800140e:	e7e2      	b.n	80013d6 <RCC_SetFlashLatencyFromMSIRange+0x92>
 8001410:	08004594 	.word	0x08004594
 8001414:	08004534 	.word	0x08004534
 8001418:	08004424 	.word	0x08004424
 800141c:	000f4240 	.word	0x000f4240
 8001420:	58004000 	.word	0x58004000

08001424 <HAL_RCC_OscConfig>:
{
 8001424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(RCC_OscInitStruct == NULL)
 8001426:	4604      	mov	r4, r0
 8001428:	b908      	cbnz	r0, 800142e <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 800142a:	2001      	movs	r0, #1
 800142c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800142e:	6803      	ldr	r3, [r0, #0]
 8001430:	069d      	lsls	r5, r3, #26
 8001432:	d529      	bpl.n	8001488 <HAL_RCC_OscConfig+0x64>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001438:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800143a:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800143c:	f013 030c 	ands.w	r3, r3, #12
 8001440:	d005      	beq.n	800144e <HAL_RCC_OscConfig+0x2a>
 8001442:	2b0c      	cmp	r3, #12
 8001444:	d145      	bne.n	80014d2 <HAL_RCC_OscConfig+0xae>
 8001446:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800144a:	2b01      	cmp	r3, #1
 800144c:	d141      	bne.n	80014d2 <HAL_RCC_OscConfig+0xae>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800144e:	f7ff ff52 	bl	80012f6 <LL_RCC_MSI_IsReady>
 8001452:	b110      	cbz	r0, 800145a <HAL_RCC_OscConfig+0x36>
 8001454:	69e3      	ldr	r3, [r4, #28]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0e7      	beq.n	800142a <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800145a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800145c:	f7ff ff59 	bl	8001312 <LL_RCC_MSI_GetRange>
 8001460:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001462:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001464:	d92a      	bls.n	80014bc <HAL_RCC_OscConfig+0x98>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001466:	f7ff ff6d 	bl	8001344 <RCC_SetFlashLatencyFromMSIRange>
 800146a:	2800      	cmp	r0, #0
 800146c:	d1dd      	bne.n	800142a <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800146e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001470:	f7ff ff47 	bl	8001302 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001474:	6a20      	ldr	r0, [r4, #32]
 8001476:	f7ff ff55 	bl	8001324 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();  
 800147a:	f001 ffb9 	bl	80033f0 <SystemCoreClockUpdate>
        if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff fa0e 	bl	80008a0 <HAL_InitTick>
 8001484:	2800      	cmp	r0, #0
 8001486:	d1d0      	bne.n	800142a <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	07d8      	lsls	r0, r3, #31
 800148c:	d44e      	bmi.n	800152c <HAL_RCC_OscConfig+0x108>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	0799      	lsls	r1, r3, #30
 8001492:	f100 8098 	bmi.w	80015c6 <HAL_RCC_OscConfig+0x1a2>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001496:	6823      	ldr	r3, [r4, #0]
 8001498:	f013 0f18 	tst.w	r3, #24
 800149c:	f040 80d9 	bne.w	8001652 <HAL_RCC_OscConfig+0x22e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	075a      	lsls	r2, r3, #29
 80014a4:	f100 8165 	bmi.w	8001772 <HAL_RCC_OscConfig+0x34e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	065a      	lsls	r2, r3, #25
 80014ac:	f100 81b7 	bmi.w	800181e <HAL_RCC_OscConfig+0x3fa>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80014b2:	2900      	cmp	r1, #0
 80014b4:	f040 81df 	bne.w	8001876 <HAL_RCC_OscConfig+0x452>
  return HAL_OK;
 80014b8:	2000      	movs	r0, #0
 80014ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014bc:	f7ff ff21 	bl	8001302 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c0:	6a20      	ldr	r0, [r4, #32]
 80014c2:	f7ff ff2f 	bl	8001324 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80014c8:	f7ff ff3c 	bl	8001344 <RCC_SetFlashLatencyFromMSIRange>
 80014cc:	2800      	cmp	r0, #0
 80014ce:	d0d4      	beq.n	800147a <HAL_RCC_OscConfig+0x56>
 80014d0:	e7ab      	b.n	800142a <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014d2:	69e2      	ldr	r2, [r4, #28]
 80014d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d8:	b1ba      	cbz	r2, 800150a <HAL_RCC_OscConfig+0xe6>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	f042 0201 	orr.w	r2, r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014e2:	f7ff fa25 	bl	8000930 <HAL_GetTick>
 80014e6:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 80014e8:	f7ff ff05 	bl	80012f6 <LL_RCC_MSI_IsReady>
 80014ec:	b130      	cbz	r0, 80014fc <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80014f0:	f7ff ff07 	bl	8001302 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f4:	6a20      	ldr	r0, [r4, #32]
 80014f6:	f7ff ff15 	bl	8001324 <LL_RCC_MSI_SetCalibTrimming>
 80014fa:	e7c5      	b.n	8001488 <HAL_RCC_OscConfig+0x64>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014fc:	f7ff fa18 	bl	8000930 <HAL_GetTick>
 8001500:	1b40      	subs	r0, r0, r5
 8001502:	2802      	cmp	r0, #2
 8001504:	d9f0      	bls.n	80014e8 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 8001506:	2003      	movs	r0, #3
 8001508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001512:	f7ff fa0d 	bl	8000930 <HAL_GetTick>
 8001516:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 8001518:	f7ff feed 	bl	80012f6 <LL_RCC_MSI_IsReady>
 800151c:	2800      	cmp	r0, #0
 800151e:	d0b3      	beq.n	8001488 <HAL_RCC_OscConfig+0x64>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001520:	f7ff fa06 	bl	8000930 <HAL_GetTick>
 8001524:	1b40      	subs	r0, r0, r5
 8001526:	2802      	cmp	r0, #2
 8001528:	d9f6      	bls.n	8001518 <HAL_RCC_OscConfig+0xf4>
 800152a:	e7ec      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800152c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001530:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001532:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001534:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001538:	2b08      	cmp	r3, #8
 800153a:	d005      	beq.n	8001548 <HAL_RCC_OscConfig+0x124>
 800153c:	2b0c      	cmp	r3, #12
 800153e:	d10b      	bne.n	8001558 <HAL_RCC_OscConfig+0x134>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001540:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001544:	2b03      	cmp	r3, #3
 8001546:	d107      	bne.n	8001558 <HAL_RCC_OscConfig+0x134>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	f7ff fec2 	bl	80012d0 <LL_RCC_HSE_IsReady>
 800154c:	2800      	cmp	r0, #0
 800154e:	d09e      	beq.n	800148e <HAL_RCC_OscConfig+0x6a>
 8001550:	6863      	ldr	r3, [r4, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d19b      	bne.n	800148e <HAL_RCC_OscConfig+0x6a>
 8001556:	e768      	b.n	800142a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001558:	6862      	ldr	r2, [r4, #4]
 800155a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001562:	d110      	bne.n	8001586 <HAL_RCC_OscConfig+0x162>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800156a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800156c:	f7ff f9e0 	bl	8000930 <HAL_GetTick>
 8001570:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 8001572:	f7ff fead 	bl	80012d0 <LL_RCC_HSE_IsReady>
 8001576:	2800      	cmp	r0, #0
 8001578:	d189      	bne.n	800148e <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800157a:	f7ff f9d9 	bl	8000930 <HAL_GetTick>
 800157e:	1b40      	subs	r0, r0, r5
 8001580:	2864      	cmp	r0, #100	; 0x64
 8001582:	d9f6      	bls.n	8001572 <HAL_RCC_OscConfig+0x14e>
 8001584:	e7bf      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001586:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800158a:	d104      	bne.n	8001596 <HAL_RCC_OscConfig+0x172>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	e7e6      	b.n	8001564 <HAL_RCC_OscConfig+0x140>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001596:	6819      	ldr	r1, [r3, #0]
 8001598:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800159c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800159e:	6819      	ldr	r1, [r3, #0]
 80015a0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80015a4:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a6:	2a00      	cmp	r2, #0
 80015a8:	d1e0      	bne.n	800156c <HAL_RCC_OscConfig+0x148>
        tickstart = HAL_GetTick();
 80015aa:	f7ff f9c1 	bl	8000930 <HAL_GetTick>
 80015ae:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 80015b0:	f7ff fe8e 	bl	80012d0 <LL_RCC_HSE_IsReady>
 80015b4:	2800      	cmp	r0, #0
 80015b6:	f43f af6a 	beq.w	800148e <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ba:	f7ff f9b9 	bl	8000930 <HAL_GetTick>
 80015be:	1b40      	subs	r0, r0, r5
 80015c0:	2864      	cmp	r0, #100	; 0x64
 80015c2:	d9f5      	bls.n	80015b0 <HAL_RCC_OscConfig+0x18c>
 80015c4:	e79f      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ca:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80015cc:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015ce:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d005      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1be>
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	d114      	bne.n	8001604 <HAL_RCC_OscConfig+0x1e0>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80015da:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d110      	bne.n	8001604 <HAL_RCC_OscConfig+0x1e0>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e2:	f7ff fe7b 	bl	80012dc <LL_RCC_HSI_IsReady>
 80015e6:	b118      	cbz	r0, 80015f0 <HAL_RCC_OscConfig+0x1cc>
 80015e8:	68e3      	ldr	r3, [r4, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f43f af1d 	beq.w	800142a <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80015f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015f4:	6921      	ldr	r1, [r4, #16]
 80015f6:	6853      	ldr	r3, [r2, #4]
 80015f8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80015fc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001600:	6053      	str	r3, [r2, #4]
 8001602:	e748      	b.n	8001496 <HAL_RCC_OscConfig+0x72>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001604:	68e2      	ldr	r2, [r4, #12]
 8001606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160a:	b182      	cbz	r2, 800162e <HAL_RCC_OscConfig+0x20a>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001612:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001614:	f7ff f98c 	bl	8000930 <HAL_GetTick>
 8001618:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 800161a:	f7ff fe5f 	bl	80012dc <LL_RCC_HSI_IsReady>
 800161e:	2800      	cmp	r0, #0
 8001620:	d1e6      	bne.n	80015f0 <HAL_RCC_OscConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff f985 	bl	8000930 <HAL_GetTick>
 8001626:	1b40      	subs	r0, r0, r5
 8001628:	2802      	cmp	r0, #2
 800162a:	d9f6      	bls.n	800161a <HAL_RCC_OscConfig+0x1f6>
 800162c:	e76b      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001634:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001636:	f7ff f97b 	bl	8000930 <HAL_GetTick>
 800163a:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 800163c:	f7ff fe4e 	bl	80012dc <LL_RCC_HSI_IsReady>
 8001640:	2800      	cmp	r0, #0
 8001642:	f43f af28 	beq.w	8001496 <HAL_RCC_OscConfig+0x72>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff f973 	bl	8000930 <HAL_GetTick>
 800164a:	1b40      	subs	r0, r0, r5
 800164c:	2802      	cmp	r0, #2
 800164e:	d9f5      	bls.n	800163c <HAL_RCC_OscConfig+0x218>
 8001650:	e759      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001652:	6962      	ldr	r2, [r4, #20]
 8001654:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001658:	2a00      	cmp	r2, #0
 800165a:	d06b      	beq.n	8001734 <HAL_RCC_OscConfig+0x310>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800165c:	06db      	lsls	r3, r3, #27
 800165e:	d543      	bpl.n	80016e8 <HAL_RCC_OscConfig+0x2c4>
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001660:	f7ff fe42 	bl	80012e8 <LL_RCC_LSI1_IsReady>
 8001664:	b310      	cbz	r0, 80016ac <HAL_RCC_OscConfig+0x288>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001666:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800166a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001676:	f7ff f95b 	bl	8000930 <HAL_GetTick>
 800167a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800167c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001680:	071f      	lsls	r7, r3, #28
 8001682:	f140 8178 	bpl.w	8001976 <HAL_RCC_OscConfig+0x552>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001686:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800168a:	69a2      	ldr	r2, [r4, #24]
 800168c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001690:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001694:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001698:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 80016a4:	f7ff f944 	bl	8000930 <HAL_GetTick>
 80016a8:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 80016aa:	e018      	b.n	80016de <HAL_RCC_OscConfig+0x2ba>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80016ac:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 80016b8:	f7ff f93a 	bl	8000930 <HAL_GetTick>
 80016bc:	4605      	mov	r5, r0
          while(LL_RCC_LSI1_IsReady() == 0U)
 80016be:	f7ff fe13 	bl	80012e8 <LL_RCC_LSI1_IsReady>
 80016c2:	2800      	cmp	r0, #0
 80016c4:	d1cf      	bne.n	8001666 <HAL_RCC_OscConfig+0x242>
            if((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80016c6:	f7ff f933 	bl	8000930 <HAL_GetTick>
 80016ca:	1b40      	subs	r0, r0, r5
 80016cc:	2802      	cmp	r0, #2
 80016ce:	d9f6      	bls.n	80016be <HAL_RCC_OscConfig+0x29a>
 80016d0:	e719      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80016d2:	f7ff f92d 	bl	8000930 <HAL_GetTick>
 80016d6:	1b40      	subs	r0, r0, r5
 80016d8:	2802      	cmp	r0, #2
 80016da:	f63f af14 	bhi.w	8001506 <HAL_RCC_OscConfig+0xe2>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80016de:	f7ff fe03 	bl	80012e8 <LL_RCC_LSI1_IsReady>
 80016e2:	2800      	cmp	r0, #0
 80016e4:	d1f5      	bne.n	80016d2 <HAL_RCC_OscConfig+0x2ae>
 80016e6:	e6db      	b.n	80014a0 <HAL_RCC_OscConfig+0x7c>
 80016e8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 80016f4:	f7ff f91c 	bl	8000930 <HAL_GetTick>
 80016f8:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 80016fa:	f7ff fdf5 	bl	80012e8 <LL_RCC_LSI1_IsReady>
 80016fe:	b198      	cbz	r0, 8001728 <HAL_RCC_OscConfig+0x304>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001704:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001706:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800170a:	f022 0204 	bic.w	r2, r2, #4
 800170e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001712:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001716:	0718      	lsls	r0, r3, #28
 8001718:	f57f aec2 	bpl.w	80014a0 <HAL_RCC_OscConfig+0x7c>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800171c:	f7ff f908 	bl	8000930 <HAL_GetTick>
 8001720:	1b80      	subs	r0, r0, r6
 8001722:	2803      	cmp	r0, #3
 8001724:	d9f5      	bls.n	8001712 <HAL_RCC_OscConfig+0x2ee>
 8001726:	e6ee      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001728:	f7ff f902 	bl	8000930 <HAL_GetTick>
 800172c:	1b80      	subs	r0, r0, r6
 800172e:	2802      	cmp	r0, #2
 8001730:	d9e3      	bls.n	80016fa <HAL_RCC_OscConfig+0x2d6>
 8001732:	e6e8      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001734:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001738:	f023 0304 	bic.w	r3, r3, #4
 800173c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001740:	f7ff f8f6 	bl	8000930 <HAL_GetTick>
 8001744:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001746:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800174a:	0719      	lsls	r1, r3, #28
 800174c:	f140 811a 	bpl.w	8001984 <HAL_RCC_OscConfig+0x560>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001750:	f7ff f8ee 	bl	8000930 <HAL_GetTick>
 8001754:	1b80      	subs	r0, r0, r6
 8001756:	2803      	cmp	r0, #3
 8001758:	d9f5      	bls.n	8001746 <HAL_RCC_OscConfig+0x322>
 800175a:	e6d4      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800175c:	f7ff f8e8 	bl	8000930 <HAL_GetTick>
 8001760:	1b40      	subs	r0, r0, r5
 8001762:	2802      	cmp	r0, #2
 8001764:	f63f aecf 	bhi.w	8001506 <HAL_RCC_OscConfig+0xe2>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001768:	f7ff fdbe 	bl	80012e8 <LL_RCC_LSI1_IsReady>
 800176c:	2800      	cmp	r0, #0
 800176e:	d1f5      	bne.n	800175c <HAL_RCC_OscConfig+0x338>
 8001770:	e696      	b.n	80014a0 <HAL_RCC_OscConfig+0x7c>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001772:	4d89      	ldr	r5, [pc, #548]	; (8001998 <HAL_RCC_OscConfig+0x574>)
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	05db      	lsls	r3, r3, #23
 8001778:	d51c      	bpl.n	80017b4 <HAL_RCC_OscConfig+0x390>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177a:	68a3      	ldr	r3, [r4, #8]
 800177c:	2b01      	cmp	r3, #1
 800177e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001782:	d125      	bne.n	80017d0 <HAL_RCC_OscConfig+0x3ac>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001784:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001790:	f7ff f8ce 	bl	8000930 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001794:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8001798:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179a:	f241 3588 	movw	r5, #5000	; 0x1388
 800179e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017a2:	0798      	lsls	r0, r3, #30
 80017a4:	f53f ae80 	bmi.w	80014a8 <HAL_RCC_OscConfig+0x84>
 80017a8:	f7ff f8c2 	bl	8000930 <HAL_GetTick>
 80017ac:	1b80      	subs	r0, r0, r6
 80017ae:	42a8      	cmp	r0, r5
 80017b0:	d9f5      	bls.n	800179e <HAL_RCC_OscConfig+0x37a>
 80017b2:	e6a8      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
      HAL_PWR_EnableBkUpAccess();
 80017b4:	f7ff fd7c 	bl	80012b0 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80017b8:	f7ff f8ba 	bl	8000930 <HAL_GetTick>
 80017bc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017be:	682b      	ldr	r3, [r5, #0]
 80017c0:	05df      	lsls	r7, r3, #23
 80017c2:	d4da      	bmi.n	800177a <HAL_RCC_OscConfig+0x356>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c4:	f7ff f8b4 	bl	8000930 <HAL_GetTick>
 80017c8:	1b80      	subs	r0, r0, r6
 80017ca:	2802      	cmp	r0, #2
 80017cc:	d9f7      	bls.n	80017be <HAL_RCC_OscConfig+0x39a>
 80017ce:	e69a      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x3be>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017d4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 80017e0:	e7d0      	b.n	8001784 <HAL_RCC_OscConfig+0x360>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017e2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017ee:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80017f2:	f022 0204 	bic.w	r2, r2, #4
 80017f6:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1c8      	bne.n	8001790 <HAL_RCC_OscConfig+0x36c>
      tickstart = HAL_GetTick();
 80017fe:	f7ff f897 	bl	8000930 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001806:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001808:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800180c:	0799      	lsls	r1, r3, #30
 800180e:	f57f ae4b 	bpl.w	80014a8 <HAL_RCC_OscConfig+0x84>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff f88d 	bl	8000930 <HAL_GetTick>
 8001816:	1bc0      	subs	r0, r0, r7
 8001818:	42b0      	cmp	r0, r6
 800181a:	d9f5      	bls.n	8001808 <HAL_RCC_OscConfig+0x3e4>
 800181c:	e673      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800181e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001820:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001824:	b19b      	cbz	r3, 800184e <HAL_RCC_OscConfig+0x42a>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001826:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001832:	f7ff f87d 	bl	8000930 <HAL_GetTick>
 8001836:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001838:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800183c:	079a      	lsls	r2, r3, #30
 800183e:	f53f ae37 	bmi.w	80014b0 <HAL_RCC_OscConfig+0x8c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001842:	f7ff f875 	bl	8000930 <HAL_GetTick>
 8001846:	1b80      	subs	r0, r0, r6
 8001848:	2802      	cmp	r0, #2
 800184a:	d9f5      	bls.n	8001838 <HAL_RCC_OscConfig+0x414>
 800184c:	e65b      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800184e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 800185a:	f7ff f869 	bl	8000930 <HAL_GetTick>
 800185e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001860:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001864:	079b      	lsls	r3, r3, #30
 8001866:	f57f ae23 	bpl.w	80014b0 <HAL_RCC_OscConfig+0x8c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800186a:	f7ff f861 	bl	8000930 <HAL_GetTick>
 800186e:	1b80      	subs	r0, r0, r6
 8001870:	2802      	cmp	r0, #2
 8001872:	d9f5      	bls.n	8001860 <HAL_RCC_OscConfig+0x43c>
 8001874:	e647      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001880:	2a0c      	cmp	r2, #12
 8001882:	d052      	beq.n	800192a <HAL_RCC_OscConfig+0x506>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001884:	681a      	ldr	r2, [r3, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001886:	2902      	cmp	r1, #2
 8001888:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	d134      	bne.n	80018fa <HAL_RCC_OscConfig+0x4d6>
        tickstart = HAL_GetTick();
 8001890:	f7ff f84e 	bl	8000930 <HAL_GetTick>
 8001894:	4605      	mov	r5, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8001896:	f7ff fd4e 	bl	8001336 <LL_RCC_PLL_IsReady>
 800189a:	bb40      	cbnz	r0, 80018ee <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800189c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018a4:	68d0      	ldr	r0, [r2, #12]
 80018a6:	430b      	orrs	r3, r1
 80018a8:	493c      	ldr	r1, [pc, #240]	; (800199c <HAL_RCC_OscConfig+0x578>)
 80018aa:	4001      	ands	r1, r0
 80018ac:	430b      	orrs	r3, r1
 80018ae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80018b0:	430b      	orrs	r3, r1
 80018b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80018b4:	430b      	orrs	r3, r1
 80018b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80018b8:	430b      	orrs	r3, r1
 80018ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80018bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80018c0:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80018c2:	6813      	ldr	r3, [r2, #0]
 80018c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018c8:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018ca:	68d3      	ldr	r3, [r2, #12]
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d0:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80018d2:	f7ff f82d 	bl	8000930 <HAL_GetTick>
 80018d6:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() == 0U)
 80018d8:	f7ff fd2d 	bl	8001336 <LL_RCC_PLL_IsReady>
 80018dc:	2800      	cmp	r0, #0
 80018de:	f47f adeb 	bne.w	80014b8 <HAL_RCC_OscConfig+0x94>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e2:	f7ff f825 	bl	8000930 <HAL_GetTick>
 80018e6:	1b00      	subs	r0, r0, r4
 80018e8:	2802      	cmp	r0, #2
 80018ea:	d9f5      	bls.n	80018d8 <HAL_RCC_OscConfig+0x4b4>
 80018ec:	e60b      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ee:	f7ff f81f 	bl	8000930 <HAL_GetTick>
 80018f2:	1b40      	subs	r0, r0, r5
 80018f4:	2802      	cmp	r0, #2
 80018f6:	d9ce      	bls.n	8001896 <HAL_RCC_OscConfig+0x472>
 80018f8:	e605      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	f022 0203 	bic.w	r2, r2, #3
 8001900:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8001908:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800190c:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 800190e:	f7ff f80f 	bl	8000930 <HAL_GetTick>
 8001912:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8001914:	f7ff fd0f 	bl	8001336 <LL_RCC_PLL_IsReady>
 8001918:	2800      	cmp	r0, #0
 800191a:	f43f adcd 	beq.w	80014b8 <HAL_RCC_OscConfig+0x94>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff f807 	bl	8000930 <HAL_GetTick>
 8001922:	1b00      	subs	r0, r0, r4
 8001924:	2802      	cmp	r0, #2
 8001926:	d9f5      	bls.n	8001914 <HAL_RCC_OscConfig+0x4f0>
 8001928:	e5ed      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
      uint32_t pllcfgr = RCC->PLLCFGR;
 800192a:	68d8      	ldr	r0, [r3, #12]
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800192e:	f000 0203 	and.w	r2, r0, #3
 8001932:	429a      	cmp	r2, r3
 8001934:	f47f ad79 	bne.w	800142a <HAL_RCC_OscConfig+0x6>
 8001938:	6b62      	ldr	r2, [r4, #52]	; 0x34
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800193a:	f000 0370 	and.w	r3, r0, #112	; 0x70
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	4293      	cmp	r3, r2
 8001940:	f47f ad73 	bne.w	800142a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001944:	6ba2      	ldr	r2, [r4, #56]	; 0x38
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001946:	f3c0 2306 	ubfx	r3, r0, #8, #7
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800194a:	4293      	cmp	r3, r2
 800194c:	f47f ad6d 	bne.w	800142a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001950:	6be2      	ldr	r2, [r4, #60]	; 0x3c
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001952:	f400 1378 	and.w	r3, r0, #4063232	; 0x3e0000
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001956:	4293      	cmp	r3, r2
 8001958:	f47f ad67 	bne.w	800142a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800195c:	6c22      	ldr	r2, [r4, #64]	; 0x40
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800195e:	f000 6360 	and.w	r3, r0, #234881024	; 0xe000000
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001962:	4293      	cmp	r3, r2
 8001964:	f47f ad61 	bne.w	800142a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001968:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800196a:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
    return HAL_ERROR;
 800196e:	1ac0      	subs	r0, r0, r3
 8001970:	bf18      	it	ne
 8001972:	2001      	movne	r0, #1
 8001974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001976:	f7fe ffdb 	bl	8000930 <HAL_GetTick>
 800197a:	1b80      	subs	r0, r0, r6
 800197c:	2803      	cmp	r0, #3
 800197e:	f67f ae7d 	bls.w	800167c <HAL_RCC_OscConfig+0x258>
 8001982:	e5c0      	b.n	8001506 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001984:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001990:	f7fe ffce 	bl	8000930 <HAL_GetTick>
 8001994:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001996:	e6e7      	b.n	8001768 <HAL_RCC_OscConfig+0x344>
 8001998:	58000400 	.word	0x58000400
 800199c:	11c1808c 	.word	0x11c1808c

080019a0 <HAL_RCC_ClockConfig>:
{
 80019a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019a4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80019a6:	4604      	mov	r4, r0
 80019a8:	b910      	cbnz	r0, 80019b0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019aa:	2001      	movs	r0, #1
 80019ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	4e79      	ldr	r6, [pc, #484]	; (8001b98 <HAL_RCC_ClockConfig+0x1f8>)
 80019b2:	6833      	ldr	r3, [r6, #0]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	428b      	cmp	r3, r1
 80019ba:	d372      	bcc.n	8001aa2 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	0799      	lsls	r1, r3, #30
 80019c0:	d50e      	bpl.n	80019e0 <HAL_RCC_ClockConfig+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80019c2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80019c6:	68a2      	ldr	r2, [r4, #8]
 80019c8:	68b3      	ldr	r3, [r6, #8]
 80019ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80019d2:	f7fe ffad 	bl	8000930 <HAL_GetTick>
 80019d6:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80019d8:	68b3      	ldr	r3, [r6, #8]
 80019da:	03db      	lsls	r3, r3, #15
 80019dc:	f140 80b8 	bpl.w	8001b50 <HAL_RCC_ClockConfig+0x1b0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	069a      	lsls	r2, r3, #26
 80019e4:	d511      	bpl.n	8001a0a <HAL_RCC_ClockConfig+0x6a>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80019e6:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80019ea:	6962      	ldr	r2, [r4, #20]
 80019ec:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80019f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019f4:	4313      	orrs	r3, r2
 80019f6:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 80019fa:	f7fe ff99 	bl	8000930 <HAL_GetTick>
 80019fe:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001a00:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001a04:	0399      	lsls	r1, r3, #14
 8001a06:	f140 80aa 	bpl.w	8001b5e <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	0658      	lsls	r0, r3, #25
 8001a0e:	d512      	bpl.n	8001a36 <HAL_RCC_ClockConfig+0x96>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001a10:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001a14:	69a2      	ldr	r2, [r4, #24]
 8001a16:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001a1a:	f023 030f 	bic.w	r3, r3, #15
 8001a1e:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8001a22:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8001a26:	f7fe ff83 	bl	8000930 <HAL_GetTick>
 8001a2a:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001a2c:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001a30:	03db      	lsls	r3, r3, #15
 8001a32:	f140 809b 	bpl.w	8001b6c <HAL_RCC_ClockConfig+0x1cc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	075a      	lsls	r2, r3, #29
 8001a3a:	d50e      	bpl.n	8001a5a <HAL_RCC_ClockConfig+0xba>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a3c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001a40:	68e2      	ldr	r2, [r4, #12]
 8001a42:	68b3      	ldr	r3, [r6, #8]
 8001a44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001a4c:	f7fe ff70 	bl	8000930 <HAL_GetTick>
 8001a50:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001a52:	68b3      	ldr	r3, [r6, #8]
 8001a54:	0399      	lsls	r1, r3, #14
 8001a56:	f140 8090 	bpl.w	8001b7a <HAL_RCC_ClockConfig+0x1da>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	0718      	lsls	r0, r3, #28
 8001a5e:	d50f      	bpl.n	8001a80 <HAL_RCC_ClockConfig+0xe0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a60:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001a64:	6922      	ldr	r2, [r4, #16]
 8001a66:	68b3      	ldr	r3, [r6, #8]
 8001a68:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a6c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a70:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001a72:	f7fe ff5d 	bl	8000930 <HAL_GetTick>
 8001a76:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001a78:	68b3      	ldr	r3, [r6, #8]
 8001a7a:	035b      	lsls	r3, r3, #13
 8001a7c:	f140 8084 	bpl.w	8001b88 <HAL_RCC_ClockConfig+0x1e8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	07da      	lsls	r2, r3, #31
 8001a84:	d423      	bmi.n	8001ace <HAL_RCC_ClockConfig+0x12e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a86:	4c44      	ldr	r4, [pc, #272]	; (8001b98 <HAL_RCC_ClockConfig+0x1f8>)
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	429d      	cmp	r5, r3
 8001a90:	d34b      	bcc.n	8001b2a <HAL_RCC_ClockConfig+0x18a>
  SystemCoreClockUpdate();
 8001a92:	f001 fcad 	bl	80033f0 <SystemCoreClockUpdate>
  return HAL_InitTick (HAL_GetTickPrio());
 8001a96:	f7fe ff51 	bl	800093c <HAL_GetTickPrio>
}
 8001a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick (HAL_GetTickPrio());
 8001a9e:	f7fe beff 	b.w	80008a0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	6833      	ldr	r3, [r6, #0]
 8001aa4:	f023 0307 	bic.w	r3, r3, #7
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001aac:	f7fe ff40 	bl	8000930 <HAL_GetTick>
 8001ab0:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	6833      	ldr	r3, [r6, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	429d      	cmp	r5, r3
 8001aba:	f43f af7f 	beq.w	80019bc <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001abe:	f7fe ff37 	bl	8000930 <HAL_GetTick>
 8001ac2:	1bc0      	subs	r0, r0, r7
 8001ac4:	2802      	cmp	r0, #2
 8001ac6:	d9f4      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 8001ac8:	2003      	movs	r0, #3
 8001aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ace:	6863      	ldr	r3, [r4, #4]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d11e      	bne.n	8001b12 <HAL_RCC_ClockConfig+0x172>
      if (LL_RCC_HSE_IsReady() == 0U)
 8001ad4:	f7ff fbfc 	bl	80012d0 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	f43f af66 	beq.w	80019aa <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ade:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001ae2:	6862      	ldr	r2, [r4, #4]
 8001ae4:	68b3      	ldr	r3, [r6, #8]
 8001ae6:	f023 0303 	bic.w	r3, r3, #3
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001aee:	f7fe ff1f 	bl	8000930 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001af6:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001af8:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	6862      	ldr	r2, [r4, #4]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b04:	d0bf      	beq.n	8001a86 <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b06:	f7fe ff13 	bl	8000930 <HAL_GetTick>
 8001b0a:	1bc0      	subs	r0, r0, r7
 8001b0c:	4540      	cmp	r0, r8
 8001b0e:	d9f3      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x158>
 8001b10:	e7da      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x128>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d102      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x17c>
      if (LL_RCC_PLL_IsReady() == 0U)
 8001b16:	f7ff fc0e 	bl	8001336 <LL_RCC_PLL_IsReady>
 8001b1a:	e7dd      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x138>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b1c:	b913      	cbnz	r3, 8001b24 <HAL_RCC_ClockConfig+0x184>
      if (LL_RCC_MSI_IsReady() == 0U)
 8001b1e:	f7ff fbea 	bl	80012f6 <LL_RCC_MSI_IsReady>
 8001b22:	e7d9      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x138>
      if (LL_RCC_HSI_IsReady() == 0U)
 8001b24:	f7ff fbda 	bl	80012dc <LL_RCC_HSI_IsReady>
 8001b28:	e7d6      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	f023 0307 	bic.w	r3, r3, #7
 8001b30:	432b      	orrs	r3, r5
 8001b32:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001b34:	f7fe fefc 	bl	8000930 <HAL_GetTick>
 8001b38:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	429d      	cmp	r5, r3
 8001b42:	d0a6      	beq.n	8001a92 <HAL_RCC_ClockConfig+0xf2>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b44:	f7fe fef4 	bl	8000930 <HAL_GetTick>
 8001b48:	1b80      	subs	r0, r0, r6
 8001b4a:	2802      	cmp	r0, #2
 8001b4c:	d9f5      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x19a>
 8001b4e:	e7bb      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b50:	f7fe feee 	bl	8000930 <HAL_GetTick>
 8001b54:	1bc0      	subs	r0, r0, r7
 8001b56:	2802      	cmp	r0, #2
 8001b58:	f67f af3e 	bls.w	80019d8 <HAL_RCC_ClockConfig+0x38>
 8001b5c:	e7b4      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b5e:	f7fe fee7 	bl	8000930 <HAL_GetTick>
 8001b62:	1bc0      	subs	r0, r0, r7
 8001b64:	2802      	cmp	r0, #2
 8001b66:	f67f af4b 	bls.w	8001a00 <HAL_RCC_ClockConfig+0x60>
 8001b6a:	e7ad      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b6c:	f7fe fee0 	bl	8000930 <HAL_GetTick>
 8001b70:	1bc0      	subs	r0, r0, r7
 8001b72:	2802      	cmp	r0, #2
 8001b74:	f67f af5a 	bls.w	8001a2c <HAL_RCC_ClockConfig+0x8c>
 8001b78:	e7a6      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b7a:	f7fe fed9 	bl	8000930 <HAL_GetTick>
 8001b7e:	1bc0      	subs	r0, r0, r7
 8001b80:	2802      	cmp	r0, #2
 8001b82:	f67f af66 	bls.w	8001a52 <HAL_RCC_ClockConfig+0xb2>
 8001b86:	e79f      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b88:	f7fe fed2 	bl	8000930 <HAL_GetTick>
 8001b8c:	1bc0      	subs	r0, r0, r7
 8001b8e:	2802      	cmp	r0, #2
 8001b90:	f67f af72 	bls.w	8001a78 <HAL_RCC_ClockConfig+0xd8>
 8001b94:	e798      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x128>
 8001b96:	bf00      	nop
 8001b98:	58004000 	.word	0x58004000

08001b9c <HAL_RCC_GetSysClockFreq>:
 8001b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8001ba0:	b508      	push	{r3, lr}
 8001ba2:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ba4:	f013 030c 	ands.w	r3, r3, #12
 8001ba8:	d107      	bne.n	8001bba <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001baa:	f7ff fbb2 	bl	8001312 <LL_RCC_MSI_GetRange>
 8001bae:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x90>)
 8001bb0:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001bb4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001bb8:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d033      	beq.n	8001c26 <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001bc2:	6813      	ldr	r3, [r2, #0]
       sysclockfreq = HSE_VALUE;
 8001bc4:	481a      	ldr	r0, [pc, #104]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bc6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bcc:	bf08      	it	eq
 8001bce:	4618      	moveq	r0, r3
 8001bd0:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001bd2:	68d3      	ldr	r3, [r2, #12]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d022      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x86>
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d118      	bne.n	8001c12 <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001be0:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = HSE_VALUE;
 8001be2:	4814      	ldr	r0, [pc, #80]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001be4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bea:	bf08      	it	eq
 8001bec:	4603      	moveq	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf2:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001bf4:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001bf6:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001bf8:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8001bfc:	4358      	muls	r0, r3
 8001bfe:	f3c1 1302 	ubfx	r3, r1, #4, #3
 8001c02:	3301      	adds	r3, #1
 8001c04:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c08:	0f53      	lsrs	r3, r2, #29
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c10:	bd08      	pop	{r3, pc}
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001c12:	f7ff fb7e 	bl	8001312 <LL_RCC_MSI_GetRange>
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x90>)
 8001c18:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001c1c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001c20:	e7e5      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 8001c22:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c24:	e7e3      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 8001c26:	4802      	ldr	r0, [pc, #8]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x94>)
}
 8001c28:	bd08      	pop	{r3, pc}
 8001c2a:	bf00      	nop
 8001c2c:	08004594 	.word	0x08004594
 8001c30:	00f42400 	.word	0x00f42400
 8001c34:	01e84800 	.word	0x01e84800

08001c38 <HAL_RCC_GetHCLKFreq>:
{
 8001c38:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001c3a:	f7ff ffaf 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c42:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_RCC_GetHCLKFreq+0x1c>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001c4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c52:	bd08      	pop	{r3, pc}
 8001c54:	08004534 	.word	0x08004534

08001c58 <HAL_RCC_GetPCLK1Freq>:
{
 8001c58:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c5a:	f7ff ffed 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6e:	f003 031f 	and.w	r3, r3, #31
}
 8001c72:	40d8      	lsrs	r0, r3
 8001c74:	bd08      	pop	{r3, pc}
 8001c76:	bf00      	nop
 8001c78:	08004574 	.word	0x08004574

08001c7c <HAL_RCC_GetPCLK2Freq>:
{
 8001c7c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001c7e:	f7ff ffdb 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	f003 031f 	and.w	r3, r3, #31
}
 8001c96:	40d8      	lsrs	r0, r3
 8001c98:	bd08      	pop	{r3, pc}
 8001c9a:	bf00      	nop
 8001c9c:	08004574 	.word	0x08004574

08001ca0 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8001ca8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001cac:	4770      	bx	lr

08001cae <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cb2:	0902      	lsrs	r2, r0, #4
 8001cb4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001cb8:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8001cbc:	0100      	lsls	r0, r0, #4
 8001cbe:	ea23 0302 	bic.w	r3, r3, r2
 8001cc2:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 8001cc6:	4318      	orrs	r0, r3
 8001cc8:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
 8001ccc:	4770      	bx	lr

08001cce <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd2:	6813      	ldr	r3, [r2, #0]
 8001cd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4770      	bx	lr

08001cdc <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce0:	6813      	ldr	r3, [r2, #0]
 8001ce2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4770      	bx	lr

08001cea <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cee:	6818      	ldr	r0, [r3, #0]
}
 8001cf0:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001cf8:	6805      	ldr	r5, [r0, #0]
 8001cfa:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 8001cfe:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d00:	d043      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8001d02:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d08:	d015      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001d0a:	d802      	bhi.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001d0c:	b1d3      	cbz	r3, 8001d44 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8001d0e:	2501      	movs	r5, #1
 8001d10:	e03b      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8001d12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d16:	d002      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001d18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d1c:	d1f7      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8001d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001d24:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d28:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d32:	2500      	movs	r5, #0
 8001d34:	e029      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8001d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d3a:	68d3      	ldr	r3, [r2, #12]
 8001d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d40:	60d3      	str	r3, [r2, #12]
        break;
 8001d42:	e7ec      	b.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8001d44:	f7ff ffca 	bl	8001cdc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001d48:	f7fe fdf2 	bl	8000930 <HAL_GetTick>
 8001d4c:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001d4e:	f7ff ffcc 	bl	8001cea <LL_RCC_PLLSAI1_IsReady>
 8001d52:	b9a0      	cbnz	r0, 8001d7e <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8001d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d58:	6861      	ldr	r1, [r4, #4]
 8001d5a:	6913      	ldr	r3, [r2, #16]
 8001d5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001d60:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d64:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8001d66:	6913      	ldr	r3, [r2, #16]
 8001d68:	68a1      	ldr	r1, [r4, #8]
 8001d6a:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8001d72:	f7ff ffac 	bl	8001cce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d76:	f7fe fddb 	bl	8000930 <HAL_GetTick>
 8001d7a:	4605      	mov	r5, r0
 8001d7c:	e0ba      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d7e:	f7fe fdd7 	bl	8000930 <HAL_GetTick>
 8001d82:	1b40      	subs	r0, r0, r5
 8001d84:	2802      	cmp	r0, #2
 8001d86:	d9e2      	bls.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x58>
      status = HAL_TIMEOUT;
 8001d88:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	051a      	lsls	r2, r3, #20
 8001d8e:	d515      	bpl.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001d90:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if(rtcclocksource != PeriphClkInit->RTCClockSelection)
 8001d94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d96:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8001d9a:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8001d9e:	42bb      	cmp	r3, r7
 8001da0:	d00c      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 8001da2:	f7ff fa85 	bl	80012b0 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001da6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if(rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8001daa:	2f00      	cmp	r7, #0
 8001dac:	f040 80ad 	bne.w	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x214>
 8001db0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db6:	4313      	orrs	r3, r2
 8001db8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	07df      	lsls	r7, r3, #31
 8001dc0:	d509      	bpl.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dc6:	69a0      	ldr	r0, [r4, #24]
 8001dc8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001dcc:	f022 0203 	bic.w	r2, r2, #3
 8001dd0:	4302      	orrs	r2, r0
 8001dd2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dd6:	079e      	lsls	r6, r3, #30
 8001dd8:	d509      	bpl.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dde:	69e0      	ldr	r0, [r4, #28]
 8001de0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001de4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001de8:	4302      	orrs	r2, r0
 8001dea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001dee:	06d8      	lsls	r0, r3, #27
 8001df0:	d50c      	bpl.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001df2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001df4:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001df8:	0c31      	lsrs	r1, r6, #16
 8001dfa:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	ea22 0201 	bic.w	r2, r2, r1
 8001e04:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8001e08:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e0c:	0699      	lsls	r1, r3, #26
 8001e0e:	d50c      	bpl.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e12:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001e16:	0c31      	lsrs	r1, r6, #16
 8001e18:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001e1c:	0409      	lsls	r1, r1, #16
 8001e1e:	ea22 0201 	bic.w	r2, r2, r1
 8001e22:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8001e26:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e2a:	075a      	lsls	r2, r3, #29
 8001e2c:	d502      	bpl.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e2e:	6a20      	ldr	r0, [r4, #32]
 8001e30:	f7ff ff3d 	bl	8001cae <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	071b      	lsls	r3, r3, #28
 8001e38:	d502      	bpl.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e3c:	f7ff ff37 	bl	8001cae <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	05df      	lsls	r7, r3, #23
 8001e44:	d510      	bpl.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x172>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e4c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e50:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001e54:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e56:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001e5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e5e:	d17d      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8001e60:	68d3      	ldr	r3, [r2, #12]
 8001e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e66:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e68:	6822      	ldr	r2, [r4, #0]
 8001e6a:	0596      	lsls	r6, r2, #22
 8001e6c:	d509      	bpl.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e72:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001e74:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e78:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001e7c:	4303      	orrs	r3, r0
 8001e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e82:	0550      	lsls	r0, r2, #21
 8001e84:	d511      	bpl.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8001e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e8a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001e8c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e90:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001e94:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8001e96:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001e9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e9e:	f040 8094 	bne.w	8001fca <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001ea2:	68d3      	ldr	r3, [r2, #12]
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea8:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8001eaa:	6822      	ldr	r2, [r4, #0]
 8001eac:	04d1      	lsls	r1, r2, #19
 8001eae:	d509      	bpl.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001eb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eb4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001eb6:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8001eba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ebe:	4303      	orrs	r3, r0
 8001ec0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8001ec4:	0493      	lsls	r3, r2, #18
 8001ec6:	d50d      	bpl.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001ec8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ecc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001ece:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001ed0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001ed8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001eda:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001edc:	f023 0303 	bic.w	r3, r3, #3
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ee8:	f7fe fd22 	bl	8000930 <HAL_GetTick>
 8001eec:	1b40      	subs	r0, r0, r5
 8001eee:	2802      	cmp	r0, #2
 8001ef0:	f63f af4a 	bhi.w	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8001ef4:	f7ff fef9 	bl	8001cea <LL_RCC_PLLSAI1_IsReady>
 8001ef8:	2801      	cmp	r0, #1
 8001efa:	d1f5      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001efc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f00:	6961      	ldr	r1, [r4, #20]
 8001f02:	6913      	ldr	r3, [r2, #16]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	6113      	str	r3, [r2, #16]
 8001f08:	e709      	b.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001f0a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001f0e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f12:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001f16:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001f1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f1e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8001f22:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f28:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 8001f2a:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8001f2e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001f32:	07db      	lsls	r3, r3, #31
 8001f34:	f57f af42 	bpl.w	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 8001f38:	f7fe fcfa 	bl	8000930 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f241 3688 	movw	r6, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8001f40:	4607      	mov	r7, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 8001f42:	e004      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x258>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f44:	f7fe fcf4 	bl	8000930 <HAL_GetTick>
 8001f48:	1bc0      	subs	r0, r0, r7
 8001f4a:	42b0      	cmp	r0, r6
 8001f4c:	d804      	bhi.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x262>
          while (LL_RCC_LSE_IsReady() != 1U)
 8001f4e:	f7ff fea7 	bl	8001ca0 <LL_RCC_LSE_IsReady>
 8001f52:	2801      	cmp	r0, #1
 8001f54:	d1f6      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8001f56:	e731      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xc6>
              ret = HAL_TIMEOUT;
 8001f58:	2503      	movs	r5, #3
 8001f5a:	e72f      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001f5c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001f60:	d182      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x172>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8001f62:	f7ff febb 	bl	8001cdc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001f66:	f7fe fce3 	bl	8000930 <HAL_GetTick>
 8001f6a:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001f6c:	f7ff febd 	bl	8001cea <LL_RCC_PLLSAI1_IsReady>
 8001f70:	b9a0      	cbnz	r0, 8001f9c <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8001f72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f76:	6861      	ldr	r1, [r4, #4]
 8001f78:	6913      	ldr	r3, [r2, #16]
 8001f7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f7e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f82:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8001f84:	6913      	ldr	r3, [r2, #16]
 8001f86:	68e1      	ldr	r1, [r4, #12]
 8001f88:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8001f90:	f7ff fe9d 	bl	8001cce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f94:	f7fe fccc 	bl	8000930 <HAL_GetTick>
 8001f98:	4606      	mov	r6, r0
 8001f9a:	e00b      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f9c:	f7fe fcc8 	bl	8000930 <HAL_GetTick>
 8001fa0:	1b80      	subs	r0, r0, r6
 8001fa2:	2802      	cmp	r0, #2
 8001fa4:	d9e2      	bls.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x276>
              ret = HAL_TIMEOUT;
 8001fa6:	2503      	movs	r5, #3
 8001fa8:	e75e      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x172>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001faa:	f7fe fcc1 	bl	8000930 <HAL_GetTick>
 8001fae:	1b80      	subs	r0, r0, r6
 8001fb0:	2802      	cmp	r0, #2
 8001fb2:	d8f8      	bhi.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8001fb4:	f7ff fe99 	bl	8001cea <LL_RCC_PLLSAI1_IsReady>
 8001fb8:	2801      	cmp	r0, #1
 8001fba:	d1f6      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc0:	6961      	ldr	r1, [r4, #20]
 8001fc2:	6913      	ldr	r3, [r2, #16]
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	6113      	str	r3, [r2, #16]
 8001fc8:	e74e      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x172>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001fca:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8001fce:	f47f af6c 	bne.w	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8001fd2:	f7ff fe83 	bl	8001cdc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001fd6:	f7fe fcab 	bl	8000930 <HAL_GetTick>
 8001fda:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001fdc:	f7ff fe85 	bl	8001cea <LL_RCC_PLLSAI1_IsReady>
 8001fe0:	b9a0      	cbnz	r0, 800200c <HAL_RCCEx_PeriphCLKConfig+0x316>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8001fe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fe6:	6861      	ldr	r1, [r4, #4]
 8001fe8:	6913      	ldr	r3, [r2, #16]
 8001fea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001fee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ff2:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8001ff4:	6913      	ldr	r3, [r2, #16]
 8001ff6:	6921      	ldr	r1, [r4, #16]
 8001ff8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002000:	f7ff fe65 	bl	8001cce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002004:	f7fe fc94 	bl	8000930 <HAL_GetTick>
 8002008:	4606      	mov	r6, r0
 800200a:	e00b      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800200c:	f7fe fc90 	bl	8000930 <HAL_GetTick>
 8002010:	1b80      	subs	r0, r0, r6
 8002012:	2802      	cmp	r0, #2
 8002014:	d9e2      	bls.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2e6>
              ret = HAL_TIMEOUT;
 8002016:	2503      	movs	r5, #3
 8002018:	e747      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800201a:	f7fe fc89 	bl	8000930 <HAL_GetTick>
 800201e:	1b80      	subs	r0, r0, r6
 8002020:	2802      	cmp	r0, #2
 8002022:	d8f8      	bhi.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x320>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002024:	f7ff fe61 	bl	8001cea <LL_RCC_PLLSAI1_IsReady>
 8002028:	2801      	cmp	r0, #1
 800202a:	d1f6      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x324>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800202c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002030:	6961      	ldr	r1, [r4, #20]
 8002032:	6913      	ldr	r3, [r2, #16]
 8002034:	430b      	orrs	r3, r1
 8002036:	6113      	str	r3, [r2, #16]
 8002038:	e737      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x1b4>

0800203a <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800203a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800203e:	6813      	ldr	r3, [r2, #0]
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4770      	bx	lr

08002048 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002048:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800204a:	69c1      	ldr	r1, [r0, #28]
 800204c:	6883      	ldr	r3, [r0, #8]
{
 800204e:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8002052:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002054:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002056:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002058:	4303      	orrs	r3, r0
 800205a:	6960      	ldr	r0, [r4, #20]
 800205c:	4303      	orrs	r3, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 800205e:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002060:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 8002062:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002064:	48ac      	ldr	r0, [pc, #688]	; (8002318 <UART_SetConfig+0x2d0>)
 8002066:	4028      	ands	r0, r5
 8002068:	4303      	orrs	r3, r0
 800206a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800206c:	6853      	ldr	r3, [r2, #4]
 800206e:	68e0      	ldr	r0, [r4, #12]
 8002070:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002074:	4303      	orrs	r3, r0
 8002076:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002078:	4ba8      	ldr	r3, [pc, #672]	; (800231c <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800207a:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800207c:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 800207e:	bf1c      	itt	ne
 8002080:	6a23      	ldrne	r3, [r4, #32]
 8002082:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002084:	6893      	ldr	r3, [r2, #8]
 8002086:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800208a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800208e:	4303      	orrs	r3, r0
 8002090:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002092:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8002094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002096:	f020 000f 	bic.w	r0, r0, #15
 800209a:	4318      	orrs	r0, r3
 800209c:	62d0      	str	r0, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800209e:	48a0      	ldr	r0, [pc, #640]	; (8002320 <UART_SetConfig+0x2d8>)
 80020a0:	4282      	cmp	r2, r0
 80020a2:	d11a      	bne.n	80020da <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80020a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020a8:	489e      	ldr	r0, [pc, #632]	; (8002324 <UART_SetConfig+0x2dc>)
 80020aa:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80020ae:	f002 0203 	and.w	r2, r2, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020b2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80020b6:	5c82      	ldrb	r2, [r0, r2]
 80020b8:	f102 32ff 	add.w	r2, r2, #4294967295
 80020bc:	f000 8220 	beq.w	8002500 <UART_SetConfig+0x4b8>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80020c0:	2a07      	cmp	r2, #7
 80020c2:	f200 83e7 	bhi.w	8002894 <UART_SetConfig+0x84c>
 80020c6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80020ca:	0327      	.short	0x0327
 80020cc:	03e50349 	.word	0x03e50349
 80020d0:	03e5038c 	.word	0x03e5038c
 80020d4:	03e503e5 	.word	0x03e503e5
 80020d8:	03a5      	.short	0x03a5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020da:	4890      	ldr	r0, [pc, #576]	; (800231c <UART_SetConfig+0x2d4>)
 80020dc:	4282      	cmp	r2, r0
 80020de:	f040 83d5 	bne.w	800288c <UART_SetConfig+0x844>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80020e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80020ea:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80020ee:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80020f2:	f000 8094 	beq.w	800221e <UART_SetConfig+0x1d6>
 80020f6:	d80c      	bhi.n	8002112 <UART_SetConfig+0xca>
 80020f8:	b3ca      	cbz	r2, 800216e <UART_SetConfig+0x126>
        ret = HAL_ERROR;
 80020fa:	2201      	movs	r2, #1
      ret = HAL_ERROR;
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80020fc:	2301      	movs	r3, #1
 80020fe:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002102:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002106:	2300      	movs	r3, #0
 8002108:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 800210a:	6723      	str	r3, [r4, #112]	; 0x70

  return ret;
}
 800210c:	4610      	mov	r0, r2
 800210e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002112:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002116:	d064      	beq.n	80021e2 <UART_SetConfig+0x19a>
 8002118:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800211c:	d1ed      	bne.n	80020fa <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80e1 	beq.w	80022e6 <UART_SetConfig+0x29e>
 8002124:	2b01      	cmp	r3, #1
 8002126:	f000 80e1 	beq.w	80022ec <UART_SetConfig+0x2a4>
 800212a:	2b02      	cmp	r3, #2
 800212c:	f000 80e1 	beq.w	80022f2 <UART_SetConfig+0x2aa>
 8002130:	2b03      	cmp	r3, #3
 8002132:	f000 80e1 	beq.w	80022f8 <UART_SetConfig+0x2b0>
 8002136:	2b04      	cmp	r3, #4
 8002138:	f000 80e1 	beq.w	80022fe <UART_SetConfig+0x2b6>
 800213c:	2b05      	cmp	r3, #5
 800213e:	f000 80e1 	beq.w	8002304 <UART_SetConfig+0x2bc>
 8002142:	2b06      	cmp	r3, #6
 8002144:	f000 80e1 	beq.w	800230a <UART_SetConfig+0x2c2>
 8002148:	2b07      	cmp	r3, #7
 800214a:	f000 80e1 	beq.w	8002310 <UART_SetConfig+0x2c8>
 800214e:	2b08      	cmp	r3, #8
 8002150:	f000 8100 	beq.w	8002354 <UART_SetConfig+0x30c>
 8002154:	2b09      	cmp	r3, #9
 8002156:	f000 8100 	beq.w	800235a <UART_SetConfig+0x312>
 800215a:	2b0a      	cmp	r3, #10
 800215c:	f000 8100 	beq.w	8002360 <UART_SetConfig+0x318>
 8002160:	2b0b      	cmp	r3, #11
 8002162:	bf14      	ite	ne
 8002164:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8002168:	2080      	moveq	r0, #128	; 0x80
 800216a:	2308      	movs	r3, #8
 800216c:	e093      	b.n	8002296 <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800216e:	f7ff fd73 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 8002172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002174:	b1fb      	cbz	r3, 80021b6 <UART_SetConfig+0x16e>
 8002176:	2b01      	cmp	r3, #1
 8002178:	d01f      	beq.n	80021ba <UART_SetConfig+0x172>
 800217a:	2b02      	cmp	r3, #2
 800217c:	d01f      	beq.n	80021be <UART_SetConfig+0x176>
 800217e:	2b03      	cmp	r3, #3
 8002180:	d01f      	beq.n	80021c2 <UART_SetConfig+0x17a>
 8002182:	2b04      	cmp	r3, #4
 8002184:	d01f      	beq.n	80021c6 <UART_SetConfig+0x17e>
 8002186:	2b05      	cmp	r3, #5
 8002188:	d01f      	beq.n	80021ca <UART_SetConfig+0x182>
 800218a:	2b06      	cmp	r3, #6
 800218c:	d01f      	beq.n	80021ce <UART_SetConfig+0x186>
 800218e:	2b07      	cmp	r3, #7
 8002190:	d01f      	beq.n	80021d2 <UART_SetConfig+0x18a>
 8002192:	2b08      	cmp	r3, #8
 8002194:	d01f      	beq.n	80021d6 <UART_SetConfig+0x18e>
 8002196:	2b09      	cmp	r3, #9
 8002198:	d01f      	beq.n	80021da <UART_SetConfig+0x192>
 800219a:	2b0a      	cmp	r3, #10
 800219c:	d01f      	beq.n	80021de <UART_SetConfig+0x196>
 800219e:	2b0b      	cmp	r3, #11
 80021a0:	bf14      	ite	ne
 80021a2:	2301      	movne	r3, #1
 80021a4:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80021a8:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80021ac:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d171      	bne.n	8002296 <UART_SetConfig+0x24e>
 80021b2:	4602      	mov	r2, r0
 80021b4:	e7a2      	b.n	80020fc <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80021b6:	2301      	movs	r3, #1
 80021b8:	e7f6      	b.n	80021a8 <UART_SetConfig+0x160>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e7f4      	b.n	80021a8 <UART_SetConfig+0x160>
 80021be:	2304      	movs	r3, #4
 80021c0:	e7f2      	b.n	80021a8 <UART_SetConfig+0x160>
 80021c2:	2306      	movs	r3, #6
 80021c4:	e7f0      	b.n	80021a8 <UART_SetConfig+0x160>
 80021c6:	2308      	movs	r3, #8
 80021c8:	e7ee      	b.n	80021a8 <UART_SetConfig+0x160>
 80021ca:	230a      	movs	r3, #10
 80021cc:	e7ec      	b.n	80021a8 <UART_SetConfig+0x160>
 80021ce:	230c      	movs	r3, #12
 80021d0:	e7ea      	b.n	80021a8 <UART_SetConfig+0x160>
 80021d2:	2310      	movs	r3, #16
 80021d4:	e7e8      	b.n	80021a8 <UART_SetConfig+0x160>
 80021d6:	2320      	movs	r3, #32
 80021d8:	e7e6      	b.n	80021a8 <UART_SetConfig+0x160>
 80021da:	2340      	movs	r3, #64	; 0x40
 80021dc:	e7e4      	b.n	80021a8 <UART_SetConfig+0x160>
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	e7e2      	b.n	80021a8 <UART_SetConfig+0x160>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d052      	beq.n	800228c <UART_SetConfig+0x244>
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d052      	beq.n	8002290 <UART_SetConfig+0x248>
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d052      	beq.n	8002294 <UART_SetConfig+0x24c>
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d069      	beq.n	80022c6 <UART_SetConfig+0x27e>
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d069      	beq.n	80022ca <UART_SetConfig+0x282>
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d069      	beq.n	80022ce <UART_SetConfig+0x286>
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d069      	beq.n	80022d2 <UART_SetConfig+0x28a>
 80021fe:	2b07      	cmp	r3, #7
 8002200:	d069      	beq.n	80022d6 <UART_SetConfig+0x28e>
 8002202:	2b08      	cmp	r3, #8
 8002204:	d069      	beq.n	80022da <UART_SetConfig+0x292>
 8002206:	2b09      	cmp	r3, #9
 8002208:	d069      	beq.n	80022de <UART_SetConfig+0x296>
 800220a:	2b0a      	cmp	r3, #10
 800220c:	d069      	beq.n	80022e2 <UART_SetConfig+0x29a>
 800220e:	4846      	ldr	r0, [pc, #280]	; (8002328 <UART_SetConfig+0x2e0>)
 8002210:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002214:	2b0b      	cmp	r3, #11
 8002216:	bf08      	it	eq
 8002218:	4610      	moveq	r0, r2
 800221a:	2302      	movs	r3, #2
 800221c:	e03b      	b.n	8002296 <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800221e:	f7ff fcbd 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8002222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002224:	b1e3      	cbz	r3, 8002260 <UART_SetConfig+0x218>
 8002226:	2b01      	cmp	r3, #1
 8002228:	d01c      	beq.n	8002264 <UART_SetConfig+0x21c>
 800222a:	2b02      	cmp	r3, #2
 800222c:	d01c      	beq.n	8002268 <UART_SetConfig+0x220>
 800222e:	2b03      	cmp	r3, #3
 8002230:	d01c      	beq.n	800226c <UART_SetConfig+0x224>
 8002232:	2b04      	cmp	r3, #4
 8002234:	d01c      	beq.n	8002270 <UART_SetConfig+0x228>
 8002236:	2b05      	cmp	r3, #5
 8002238:	d01c      	beq.n	8002274 <UART_SetConfig+0x22c>
 800223a:	2b06      	cmp	r3, #6
 800223c:	d01c      	beq.n	8002278 <UART_SetConfig+0x230>
 800223e:	2b07      	cmp	r3, #7
 8002240:	d01c      	beq.n	800227c <UART_SetConfig+0x234>
 8002242:	2b08      	cmp	r3, #8
 8002244:	d01c      	beq.n	8002280 <UART_SetConfig+0x238>
 8002246:	2b09      	cmp	r3, #9
 8002248:	d01c      	beq.n	8002284 <UART_SetConfig+0x23c>
 800224a:	2b0a      	cmp	r3, #10
 800224c:	d01c      	beq.n	8002288 <UART_SetConfig+0x240>
 800224e:	2b0b      	cmp	r3, #11
 8002250:	bf14      	ite	ne
 8002252:	2301      	movne	r3, #1
 8002254:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002258:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800225c:	2304      	movs	r3, #4
 800225e:	e7a6      	b.n	80021ae <UART_SetConfig+0x166>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002260:	2301      	movs	r3, #1
 8002262:	e7f9      	b.n	8002258 <UART_SetConfig+0x210>
 8002264:	2302      	movs	r3, #2
 8002266:	e7f7      	b.n	8002258 <UART_SetConfig+0x210>
 8002268:	2304      	movs	r3, #4
 800226a:	e7f5      	b.n	8002258 <UART_SetConfig+0x210>
 800226c:	2306      	movs	r3, #6
 800226e:	e7f3      	b.n	8002258 <UART_SetConfig+0x210>
 8002270:	2308      	movs	r3, #8
 8002272:	e7f1      	b.n	8002258 <UART_SetConfig+0x210>
 8002274:	230a      	movs	r3, #10
 8002276:	e7ef      	b.n	8002258 <UART_SetConfig+0x210>
 8002278:	230c      	movs	r3, #12
 800227a:	e7ed      	b.n	8002258 <UART_SetConfig+0x210>
 800227c:	2310      	movs	r3, #16
 800227e:	e7eb      	b.n	8002258 <UART_SetConfig+0x210>
 8002280:	2320      	movs	r3, #32
 8002282:	e7e9      	b.n	8002258 <UART_SetConfig+0x210>
 8002284:	2340      	movs	r3, #64	; 0x40
 8002286:	e7e7      	b.n	8002258 <UART_SetConfig+0x210>
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	e7e5      	b.n	8002258 <UART_SetConfig+0x210>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800228c:	4826      	ldr	r0, [pc, #152]	; (8002328 <UART_SetConfig+0x2e0>)
 800228e:	e7c4      	b.n	800221a <UART_SetConfig+0x1d2>
 8002290:	4826      	ldr	r0, [pc, #152]	; (800232c <UART_SetConfig+0x2e4>)
 8002292:	e7c2      	b.n	800221a <UART_SetConfig+0x1d2>
 8002294:	4826      	ldr	r0, [pc, #152]	; (8002330 <UART_SetConfig+0x2e8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002296:	6862      	ldr	r2, [r4, #4]
 8002298:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800229c:	4281      	cmp	r1, r0
 800229e:	f63f af2c 	bhi.w	80020fa <UART_SetConfig+0xb2>
 80022a2:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80022a6:	f63f af28 	bhi.w	80020fa <UART_SetConfig+0xb2>
        switch (clocksource)
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	f200 8125 	bhi.w	80024fa <UART_SetConfig+0x4b2>
 80022b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80022b4:	01230059 	.word	0x01230059
 80022b8:	01230095 	.word	0x01230095
 80022bc:	012300d1 	.word	0x012300d1
 80022c0:	01230123 	.word	0x01230123
 80022c4:	00ea      	.short	0x00ea
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80022c6:	481b      	ldr	r0, [pc, #108]	; (8002334 <UART_SetConfig+0x2ec>)
 80022c8:	e7a7      	b.n	800221a <UART_SetConfig+0x1d2>
 80022ca:	481b      	ldr	r0, [pc, #108]	; (8002338 <UART_SetConfig+0x2f0>)
 80022cc:	e7a5      	b.n	800221a <UART_SetConfig+0x1d2>
 80022ce:	481b      	ldr	r0, [pc, #108]	; (800233c <UART_SetConfig+0x2f4>)
 80022d0:	e7a3      	b.n	800221a <UART_SetConfig+0x1d2>
 80022d2:	481b      	ldr	r0, [pc, #108]	; (8002340 <UART_SetConfig+0x2f8>)
 80022d4:	e7a1      	b.n	800221a <UART_SetConfig+0x1d2>
 80022d6:	481b      	ldr	r0, [pc, #108]	; (8002344 <UART_SetConfig+0x2fc>)
 80022d8:	e79f      	b.n	800221a <UART_SetConfig+0x1d2>
 80022da:	481b      	ldr	r0, [pc, #108]	; (8002348 <UART_SetConfig+0x300>)
 80022dc:	e79d      	b.n	800221a <UART_SetConfig+0x1d2>
 80022de:	481b      	ldr	r0, [pc, #108]	; (800234c <UART_SetConfig+0x304>)
 80022e0:	e79b      	b.n	800221a <UART_SetConfig+0x1d2>
 80022e2:	481b      	ldr	r0, [pc, #108]	; (8002350 <UART_SetConfig+0x308>)
 80022e4:	e799      	b.n	800221a <UART_SetConfig+0x1d2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80022e6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80022ea:	e73e      	b.n	800216a <UART_SetConfig+0x122>
 80022ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022f0:	e73b      	b.n	800216a <UART_SetConfig+0x122>
 80022f2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022f6:	e738      	b.n	800216a <UART_SetConfig+0x122>
 80022f8:	f241 5055 	movw	r0, #5461	; 0x1555
 80022fc:	e735      	b.n	800216a <UART_SetConfig+0x122>
 80022fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002302:	e732      	b.n	800216a <UART_SetConfig+0x122>
 8002304:	f640 40cc 	movw	r0, #3276	; 0xccc
 8002308:	e72f      	b.n	800216a <UART_SetConfig+0x122>
 800230a:	f640 20aa 	movw	r0, #2730	; 0xaaa
 800230e:	e72c      	b.n	800216a <UART_SetConfig+0x122>
 8002310:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002314:	e729      	b.n	800216a <UART_SetConfig+0x122>
 8002316:	bf00      	nop
 8002318:	cfff69f3 	.word	0xcfff69f3
 800231c:	40008000 	.word	0x40008000
 8002320:	40013800 	.word	0x40013800
 8002324:	08004450 	.word	0x08004450
 8002328:	00f42400 	.word	0x00f42400
 800232c:	007a1200 	.word	0x007a1200
 8002330:	003d0900 	.word	0x003d0900
 8002334:	0028b0aa 	.word	0x0028b0aa
 8002338:	001e8480 	.word	0x001e8480
 800233c:	00186a00 	.word	0x00186a00
 8002340:	00145855 	.word	0x00145855
 8002344:	000f4240 	.word	0x000f4240
 8002348:	0007a120 	.word	0x0007a120
 800234c:	0003d090 	.word	0x0003d090
 8002350:	0001e848 	.word	0x0001e848
 8002354:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002358:	e79d      	b.n	8002296 <UART_SetConfig+0x24e>
 800235a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800235e:	e704      	b.n	800216a <UART_SetConfig+0x122>
 8002360:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002364:	e701      	b.n	800216a <UART_SetConfig+0x122>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002366:	f7ff fc77 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800236a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 8089 	beq.w	8002484 <UART_SetConfig+0x43c>
 8002372:	2b01      	cmp	r3, #1
 8002374:	d072      	beq.n	800245c <UART_SetConfig+0x414>
 8002376:	2b02      	cmp	r3, #2
 8002378:	d072      	beq.n	8002460 <UART_SetConfig+0x418>
 800237a:	2b03      	cmp	r3, #3
 800237c:	d072      	beq.n	8002464 <UART_SetConfig+0x41c>
 800237e:	2b04      	cmp	r3, #4
 8002380:	d072      	beq.n	8002468 <UART_SetConfig+0x420>
 8002382:	2b05      	cmp	r3, #5
 8002384:	d072      	beq.n	800246c <UART_SetConfig+0x424>
 8002386:	2b06      	cmp	r3, #6
 8002388:	d072      	beq.n	8002470 <UART_SetConfig+0x428>
 800238a:	2b07      	cmp	r3, #7
 800238c:	d072      	beq.n	8002474 <UART_SetConfig+0x42c>
 800238e:	2b08      	cmp	r3, #8
 8002390:	d072      	beq.n	8002478 <UART_SetConfig+0x430>
 8002392:	2b09      	cmp	r3, #9
 8002394:	d072      	beq.n	800247c <UART_SetConfig+0x434>
 8002396:	2b0a      	cmp	r3, #10
 8002398:	d072      	beq.n	8002480 <UART_SetConfig+0x438>
 800239a:	2b0b      	cmp	r3, #11
 800239c:	d172      	bne.n	8002484 <UART_SetConfig+0x43c>
 800239e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a2:	2300      	movs	r3, #0
 80023a4:	2100      	movs	r1, #0
 80023a6:	f7fe f8f3 	bl	8000590 <__aeabi_uldivmod>
 80023aa:	6865      	ldr	r5, [r4, #4]
 80023ac:	020f      	lsls	r7, r1, #8
 80023ae:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80023b2:	0206      	lsls	r6, r0, #8
 80023b4:	0868      	lsrs	r0, r5, #1
 80023b6:	eb16 0b00 	adds.w	fp, r6, r0
 80023ba:	f147 0c00 	adc.w	ip, r7, #0
 80023be:	462a      	mov	r2, r5
 80023c0:	2300      	movs	r3, #0
 80023c2:	4658      	mov	r0, fp
 80023c4:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023c6:	f7fe f8e3 	bl	8000590 <__aeabi_uldivmod>
            break;
 80023ca:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80023cc:	4b9a      	ldr	r3, [pc, #616]	; (8002638 <UART_SetConfig+0x5f0>)
 80023ce:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80023d2:	4299      	cmp	r1, r3
 80023d4:	f63f ae91 	bhi.w	80020fa <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	60d8      	str	r0, [r3, #12]
 80023dc:	e68e      	b.n	80020fc <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d036      	beq.n	8002452 <UART_SetConfig+0x40a>
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d016      	beq.n	8002416 <UART_SetConfig+0x3ce>
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d016      	beq.n	800241a <UART_SetConfig+0x3d2>
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d016      	beq.n	800241e <UART_SetConfig+0x3d6>
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d01e      	beq.n	8002432 <UART_SetConfig+0x3ea>
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	d01e      	beq.n	8002436 <UART_SetConfig+0x3ee>
 80023f8:	2b06      	cmp	r3, #6
 80023fa:	d01e      	beq.n	800243a <UART_SetConfig+0x3f2>
 80023fc:	2b07      	cmp	r3, #7
 80023fe:	d020      	beq.n	8002442 <UART_SetConfig+0x3fa>
 8002400:	2b08      	cmp	r3, #8
 8002402:	d020      	beq.n	8002446 <UART_SetConfig+0x3fe>
 8002404:	2b09      	cmp	r3, #9
 8002406:	d020      	beq.n	800244a <UART_SetConfig+0x402>
 8002408:	2b0a      	cmp	r3, #10
 800240a:	d020      	beq.n	800244e <UART_SetConfig+0x406>
 800240c:	2b0b      	cmp	r3, #11
 800240e:	d120      	bne.n	8002452 <UART_SetConfig+0x40a>
 8002410:	488a      	ldr	r0, [pc, #552]	; (800263c <UART_SetConfig+0x5f4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002412:	2100      	movs	r1, #0
 8002414:	e006      	b.n	8002424 <UART_SetConfig+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002416:	488a      	ldr	r0, [pc, #552]	; (8002640 <UART_SetConfig+0x5f8>)
 8002418:	e7fb      	b.n	8002412 <UART_SetConfig+0x3ca>
 800241a:	488a      	ldr	r0, [pc, #552]	; (8002644 <UART_SetConfig+0x5fc>)
 800241c:	e7f9      	b.n	8002412 <UART_SetConfig+0x3ca>
 800241e:	a182      	add	r1, pc, #520	; (adr r1, 8002628 <UART_SetConfig+0x5e0>)
 8002420:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002424:	0855      	lsrs	r5, r2, #1
 8002426:	1940      	adds	r0, r0, r5
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	f141 0100 	adc.w	r1, r1, #0
 8002430:	e7c9      	b.n	80023c6 <UART_SetConfig+0x37e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002432:	4885      	ldr	r0, [pc, #532]	; (8002648 <UART_SetConfig+0x600>)
 8002434:	e7ed      	b.n	8002412 <UART_SetConfig+0x3ca>
 8002436:	4885      	ldr	r0, [pc, #532]	; (800264c <UART_SetConfig+0x604>)
 8002438:	e7eb      	b.n	8002412 <UART_SetConfig+0x3ca>
 800243a:	a17d      	add	r1, pc, #500	; (adr r1, 8002630 <UART_SetConfig+0x5e8>)
 800243c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002440:	e7f0      	b.n	8002424 <UART_SetConfig+0x3dc>
 8002442:	4883      	ldr	r0, [pc, #524]	; (8002650 <UART_SetConfig+0x608>)
 8002444:	e7e5      	b.n	8002412 <UART_SetConfig+0x3ca>
 8002446:	4883      	ldr	r0, [pc, #524]	; (8002654 <UART_SetConfig+0x60c>)
 8002448:	e7e3      	b.n	8002412 <UART_SetConfig+0x3ca>
 800244a:	4883      	ldr	r0, [pc, #524]	; (8002658 <UART_SetConfig+0x610>)
 800244c:	e7e1      	b.n	8002412 <UART_SetConfig+0x3ca>
 800244e:	4883      	ldr	r0, [pc, #524]	; (800265c <UART_SetConfig+0x614>)
 8002450:	e7df      	b.n	8002412 <UART_SetConfig+0x3ca>
 8002452:	4883      	ldr	r0, [pc, #524]	; (8002660 <UART_SetConfig+0x618>)
 8002454:	e7dd      	b.n	8002412 <UART_SetConfig+0x3ca>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002456:	f7ff fba1 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 800245a:	e786      	b.n	800236a <UART_SetConfig+0x322>
 800245c:	2202      	movs	r2, #2
 800245e:	e7a0      	b.n	80023a2 <UART_SetConfig+0x35a>
 8002460:	2204      	movs	r2, #4
 8002462:	e79e      	b.n	80023a2 <UART_SetConfig+0x35a>
 8002464:	2206      	movs	r2, #6
 8002466:	e79c      	b.n	80023a2 <UART_SetConfig+0x35a>
 8002468:	2208      	movs	r2, #8
 800246a:	e79a      	b.n	80023a2 <UART_SetConfig+0x35a>
 800246c:	220a      	movs	r2, #10
 800246e:	e798      	b.n	80023a2 <UART_SetConfig+0x35a>
 8002470:	220c      	movs	r2, #12
 8002472:	e796      	b.n	80023a2 <UART_SetConfig+0x35a>
 8002474:	2210      	movs	r2, #16
 8002476:	e794      	b.n	80023a2 <UART_SetConfig+0x35a>
 8002478:	2220      	movs	r2, #32
 800247a:	e792      	b.n	80023a2 <UART_SetConfig+0x35a>
 800247c:	2240      	movs	r2, #64	; 0x40
 800247e:	e790      	b.n	80023a2 <UART_SetConfig+0x35a>
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	e78e      	b.n	80023a2 <UART_SetConfig+0x35a>
 8002484:	2201      	movs	r2, #1
 8002486:	e78c      	b.n	80023a2 <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800248a:	b39b      	cbz	r3, 80024f4 <UART_SetConfig+0x4ac>
 800248c:	2b01      	cmp	r3, #1
 800248e:	d016      	beq.n	80024be <UART_SetConfig+0x476>
 8002490:	2b02      	cmp	r3, #2
 8002492:	d017      	beq.n	80024c4 <UART_SetConfig+0x47c>
 8002494:	2b03      	cmp	r3, #3
 8002496:	d018      	beq.n	80024ca <UART_SetConfig+0x482>
 8002498:	2b04      	cmp	r3, #4
 800249a:	d018      	beq.n	80024ce <UART_SetConfig+0x486>
 800249c:	2b05      	cmp	r3, #5
 800249e:	d019      	beq.n	80024d4 <UART_SetConfig+0x48c>
 80024a0:	2b06      	cmp	r3, #6
 80024a2:	d019      	beq.n	80024d8 <UART_SetConfig+0x490>
 80024a4:	2b07      	cmp	r3, #7
 80024a6:	d019      	beq.n	80024dc <UART_SetConfig+0x494>
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d01a      	beq.n	80024e2 <UART_SetConfig+0x49a>
 80024ac:	2b09      	cmp	r3, #9
 80024ae:	d01b      	beq.n	80024e8 <UART_SetConfig+0x4a0>
 80024b0:	2b0a      	cmp	r3, #10
 80024b2:	d01c      	beq.n	80024ee <UART_SetConfig+0x4a6>
 80024b4:	2b0b      	cmp	r3, #11
 80024b6:	d11d      	bne.n	80024f4 <UART_SetConfig+0x4ac>
 80024b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024bc:	e7a9      	b.n	8002412 <UART_SetConfig+0x3ca>
 80024be:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80024c2:	e7a6      	b.n	8002412 <UART_SetConfig+0x3ca>
 80024c4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80024c8:	e7a3      	b.n	8002412 <UART_SetConfig+0x3ca>
 80024ca:	4866      	ldr	r0, [pc, #408]	; (8002664 <UART_SetConfig+0x61c>)
 80024cc:	e7a1      	b.n	8002412 <UART_SetConfig+0x3ca>
 80024ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80024d2:	e79e      	b.n	8002412 <UART_SetConfig+0x3ca>
 80024d4:	4864      	ldr	r0, [pc, #400]	; (8002668 <UART_SetConfig+0x620>)
 80024d6:	e79c      	b.n	8002412 <UART_SetConfig+0x3ca>
 80024d8:	4864      	ldr	r0, [pc, #400]	; (800266c <UART_SetConfig+0x624>)
 80024da:	e79a      	b.n	8002412 <UART_SetConfig+0x3ca>
 80024dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80024e0:	e797      	b.n	8002412 <UART_SetConfig+0x3ca>
 80024e2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80024e6:	e794      	b.n	8002412 <UART_SetConfig+0x3ca>
 80024e8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80024ec:	e791      	b.n	8002412 <UART_SetConfig+0x3ca>
 80024ee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80024f2:	e78e      	b.n	8002412 <UART_SetConfig+0x3ca>
 80024f4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80024f8:	e78b      	b.n	8002412 <UART_SetConfig+0x3ca>
            ret = HAL_ERROR;
 80024fa:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80024fc:	2000      	movs	r0, #0
 80024fe:	e765      	b.n	80023cc <UART_SetConfig+0x384>
    switch (clocksource)
 8002500:	2a07      	cmp	r2, #7
 8002502:	f200 8106 	bhi.w	8002712 <UART_SetConfig+0x6ca>
 8002506:	e8df f012 	tbh	[pc, r2, lsl #1]
 800250a:	0008      	.short	0x0008
 800250c:	0104003f 	.word	0x0104003f
 8002510:	01040076 	.word	0x01040076
 8002514:	01040104 	.word	0x01040104
 8002518:	00c7      	.short	0x00c7
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800251a:	f7ff fbaf 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800251e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002520:	2900      	cmp	r1, #0
 8002522:	d06b      	beq.n	80025fc <UART_SetConfig+0x5b4>
 8002524:	2901      	cmp	r1, #1
 8002526:	d06b      	beq.n	8002600 <UART_SetConfig+0x5b8>
 8002528:	2902      	cmp	r1, #2
 800252a:	d06b      	beq.n	8002604 <UART_SetConfig+0x5bc>
 800252c:	2903      	cmp	r1, #3
 800252e:	d06b      	beq.n	8002608 <UART_SetConfig+0x5c0>
 8002530:	2904      	cmp	r1, #4
 8002532:	d06b      	beq.n	800260c <UART_SetConfig+0x5c4>
 8002534:	2905      	cmp	r1, #5
 8002536:	d06b      	beq.n	8002610 <UART_SetConfig+0x5c8>
 8002538:	2906      	cmp	r1, #6
 800253a:	d06b      	beq.n	8002614 <UART_SetConfig+0x5cc>
 800253c:	2907      	cmp	r1, #7
 800253e:	d06b      	beq.n	8002618 <UART_SetConfig+0x5d0>
 8002540:	2908      	cmp	r1, #8
 8002542:	d06b      	beq.n	800261c <UART_SetConfig+0x5d4>
 8002544:	2909      	cmp	r1, #9
 8002546:	d06b      	beq.n	8002620 <UART_SetConfig+0x5d8>
 8002548:	290a      	cmp	r1, #10
 800254a:	d06b      	beq.n	8002624 <UART_SetConfig+0x5dc>
 800254c:	290b      	cmp	r1, #11
 800254e:	bf14      	ite	ne
 8002550:	2201      	movne	r2, #1
 8002552:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8002556:	6861      	ldr	r1, [r4, #4]
 8002558:	fbb0 f2f2 	udiv	r2, r0, r2
 800255c:	084b      	lsrs	r3, r1, #1
 800255e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002562:	fbb3 f3f1 	udiv	r3, r3, r1
 8002566:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002568:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800256a:	f1a3 0010 	sub.w	r0, r3, #16
 800256e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002572:	4288      	cmp	r0, r1
 8002574:	f63f adc1 	bhi.w	80020fa <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002578:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800257c:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800257e:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002582:	430b      	orrs	r3, r1
 8002584:	60c3      	str	r3, [r0, #12]
 8002586:	e5b9      	b.n	80020fc <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002588:	b1fb      	cbz	r3, 80025ca <UART_SetConfig+0x582>
 800258a:	2b01      	cmp	r3, #1
 800258c:	d01f      	beq.n	80025ce <UART_SetConfig+0x586>
 800258e:	2b02      	cmp	r3, #2
 8002590:	d01f      	beq.n	80025d2 <UART_SetConfig+0x58a>
 8002592:	2b03      	cmp	r3, #3
 8002594:	d01f      	beq.n	80025d6 <UART_SetConfig+0x58e>
 8002596:	2b04      	cmp	r3, #4
 8002598:	d01f      	beq.n	80025da <UART_SetConfig+0x592>
 800259a:	2b05      	cmp	r3, #5
 800259c:	d01f      	beq.n	80025de <UART_SetConfig+0x596>
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d01f      	beq.n	80025e2 <UART_SetConfig+0x59a>
 80025a2:	2b07      	cmp	r3, #7
 80025a4:	d01f      	beq.n	80025e6 <UART_SetConfig+0x59e>
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d01f      	beq.n	80025ea <UART_SetConfig+0x5a2>
 80025aa:	2b09      	cmp	r3, #9
 80025ac:	d01f      	beq.n	80025ee <UART_SetConfig+0x5a6>
 80025ae:	2b0a      	cmp	r3, #10
 80025b0:	d01f      	beq.n	80025f2 <UART_SetConfig+0x5aa>
 80025b2:	492f      	ldr	r1, [pc, #188]	; (8002670 <UART_SetConfig+0x628>)
 80025b4:	4a29      	ldr	r2, [pc, #164]	; (800265c <UART_SetConfig+0x614>)
 80025b6:	2b0b      	cmp	r3, #11
 80025b8:	bf14      	ite	ne
 80025ba:	4613      	movne	r3, r2
 80025bc:	460b      	moveq	r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025be:	6862      	ldr	r2, [r4, #4]
 80025c0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80025c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80025c8:	e7cd      	b.n	8002566 <UART_SetConfig+0x51e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025ca:	4b24      	ldr	r3, [pc, #144]	; (800265c <UART_SetConfig+0x614>)
 80025cc:	e7f7      	b.n	80025be <UART_SetConfig+0x576>
 80025ce:	4b1b      	ldr	r3, [pc, #108]	; (800263c <UART_SetConfig+0x5f4>)
 80025d0:	e7f5      	b.n	80025be <UART_SetConfig+0x576>
 80025d2:	4b28      	ldr	r3, [pc, #160]	; (8002674 <UART_SetConfig+0x62c>)
 80025d4:	e7f3      	b.n	80025be <UART_SetConfig+0x576>
 80025d6:	4b28      	ldr	r3, [pc, #160]	; (8002678 <UART_SetConfig+0x630>)
 80025d8:	e7f1      	b.n	80025be <UART_SetConfig+0x576>
 80025da:	4b28      	ldr	r3, [pc, #160]	; (800267c <UART_SetConfig+0x634>)
 80025dc:	e7ef      	b.n	80025be <UART_SetConfig+0x576>
 80025de:	4b28      	ldr	r3, [pc, #160]	; (8002680 <UART_SetConfig+0x638>)
 80025e0:	e7ed      	b.n	80025be <UART_SetConfig+0x576>
 80025e2:	4b28      	ldr	r3, [pc, #160]	; (8002684 <UART_SetConfig+0x63c>)
 80025e4:	e7eb      	b.n	80025be <UART_SetConfig+0x576>
 80025e6:	4b28      	ldr	r3, [pc, #160]	; (8002688 <UART_SetConfig+0x640>)
 80025e8:	e7e9      	b.n	80025be <UART_SetConfig+0x576>
 80025ea:	4b28      	ldr	r3, [pc, #160]	; (800268c <UART_SetConfig+0x644>)
 80025ec:	e7e7      	b.n	80025be <UART_SetConfig+0x576>
 80025ee:	4b28      	ldr	r3, [pc, #160]	; (8002690 <UART_SetConfig+0x648>)
 80025f0:	e7e5      	b.n	80025be <UART_SetConfig+0x576>
 80025f2:	4b28      	ldr	r3, [pc, #160]	; (8002694 <UART_SetConfig+0x64c>)
 80025f4:	e7e3      	b.n	80025be <UART_SetConfig+0x576>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025f6:	f7ff fad1 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 80025fa:	e790      	b.n	800251e <UART_SetConfig+0x4d6>
 80025fc:	2201      	movs	r2, #1
 80025fe:	e7aa      	b.n	8002556 <UART_SetConfig+0x50e>
 8002600:	2202      	movs	r2, #2
 8002602:	e7a8      	b.n	8002556 <UART_SetConfig+0x50e>
 8002604:	2204      	movs	r2, #4
 8002606:	e7a6      	b.n	8002556 <UART_SetConfig+0x50e>
 8002608:	2206      	movs	r2, #6
 800260a:	e7a4      	b.n	8002556 <UART_SetConfig+0x50e>
 800260c:	2208      	movs	r2, #8
 800260e:	e7a2      	b.n	8002556 <UART_SetConfig+0x50e>
 8002610:	220a      	movs	r2, #10
 8002612:	e7a0      	b.n	8002556 <UART_SetConfig+0x50e>
 8002614:	220c      	movs	r2, #12
 8002616:	e79e      	b.n	8002556 <UART_SetConfig+0x50e>
 8002618:	2210      	movs	r2, #16
 800261a:	e79c      	b.n	8002556 <UART_SetConfig+0x50e>
 800261c:	2220      	movs	r2, #32
 800261e:	e79a      	b.n	8002556 <UART_SetConfig+0x50e>
 8002620:	2240      	movs	r2, #64	; 0x40
 8002622:	e798      	b.n	8002556 <UART_SetConfig+0x50e>
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	e796      	b.n	8002556 <UART_SetConfig+0x50e>
 8002628:	28b0aa00 	.word	0x28b0aa00
 800262c:	00000000 	.word	0x00000000
 8002630:	14585500 	.word	0x14585500
 8002634:	00000000 	.word	0x00000000
 8002638:	000ffcff 	.word	0x000ffcff
 800263c:	00f42400 	.word	0x00f42400
 8002640:	7a120000 	.word	0x7a120000
 8002644:	3d090000 	.word	0x3d090000
 8002648:	1e848000 	.word	0x1e848000
 800264c:	186a0000 	.word	0x186a0000
 8002650:	0f424000 	.word	0x0f424000
 8002654:	07a12000 	.word	0x07a12000
 8002658:	03d09000 	.word	0x03d09000
 800265c:	01e84800 	.word	0x01e84800
 8002660:	f4240000 	.word	0xf4240000
 8002664:	00155500 	.word	0x00155500
 8002668:	000ccc00 	.word	0x000ccc00
 800266c:	000aaa00 	.word	0x000aaa00
 8002670:	0001e848 	.word	0x0001e848
 8002674:	007a1200 	.word	0x007a1200
 8002678:	00516154 	.word	0x00516154
 800267c:	003d0900 	.word	0x003d0900
 8002680:	0030d400 	.word	0x0030d400
 8002684:	0028b0aa 	.word	0x0028b0aa
 8002688:	001e8480 	.word	0x001e8480
 800268c:	000f4240 	.word	0x000f4240
 8002690:	0007a120 	.word	0x0007a120
 8002694:	0003d090 	.word	0x0003d090
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002698:	b1d3      	cbz	r3, 80026d0 <UART_SetConfig+0x688>
 800269a:	2b01      	cmp	r3, #1
 800269c:	d01b      	beq.n	80026d6 <UART_SetConfig+0x68e>
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d01c      	beq.n	80026dc <UART_SetConfig+0x694>
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d01d      	beq.n	80026e2 <UART_SetConfig+0x69a>
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d01e      	beq.n	80026e8 <UART_SetConfig+0x6a0>
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	d01f      	beq.n	80026ee <UART_SetConfig+0x6a6>
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d020      	beq.n	80026f4 <UART_SetConfig+0x6ac>
 80026b2:	2b07      	cmp	r3, #7
 80026b4:	d021      	beq.n	80026fa <UART_SetConfig+0x6b2>
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d022      	beq.n	8002700 <UART_SetConfig+0x6b8>
 80026ba:	2b09      	cmp	r3, #9
 80026bc:	d023      	beq.n	8002706 <UART_SetConfig+0x6be>
 80026be:	2b0a      	cmp	r3, #10
 80026c0:	d024      	beq.n	800270c <UART_SetConfig+0x6c4>
 80026c2:	2b0b      	cmp	r3, #11
 80026c4:	bf14      	ite	ne
 80026c6:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80026ca:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80026ce:	e776      	b.n	80025be <UART_SetConfig+0x576>
 80026d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d4:	e773      	b.n	80025be <UART_SetConfig+0x576>
 80026d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026da:	e770      	b.n	80025be <UART_SetConfig+0x576>
 80026dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026e0:	e76d      	b.n	80025be <UART_SetConfig+0x576>
 80026e2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80026e6:	e76a      	b.n	80025be <UART_SetConfig+0x576>
 80026e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ec:	e767      	b.n	80025be <UART_SetConfig+0x576>
 80026ee:	f641 1398 	movw	r3, #6552	; 0x1998
 80026f2:	e764      	b.n	80025be <UART_SetConfig+0x576>
 80026f4:	f241 5354 	movw	r3, #5460	; 0x1554
 80026f8:	e761      	b.n	80025be <UART_SetConfig+0x576>
 80026fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026fe:	e75e      	b.n	80025be <UART_SetConfig+0x576>
 8002700:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002704:	e75b      	b.n	80025be <UART_SetConfig+0x576>
 8002706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800270a:	e758      	b.n	80025be <UART_SetConfig+0x576>
 800270c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002710:	e755      	b.n	80025be <UART_SetConfig+0x576>
        ret = HAL_ERROR;
 8002712:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002714:	2300      	movs	r3, #0
 8002716:	e728      	b.n	800256a <UART_SetConfig+0x522>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002718:	f7ff fab0 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800271c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800271e:	2b00      	cmp	r3, #0
 8002720:	d062      	beq.n	80027e8 <UART_SetConfig+0x7a0>
 8002722:	2b01      	cmp	r3, #1
 8002724:	d062      	beq.n	80027ec <UART_SetConfig+0x7a4>
 8002726:	2b02      	cmp	r3, #2
 8002728:	d062      	beq.n	80027f0 <UART_SetConfig+0x7a8>
 800272a:	2b03      	cmp	r3, #3
 800272c:	d062      	beq.n	80027f4 <UART_SetConfig+0x7ac>
 800272e:	2b04      	cmp	r3, #4
 8002730:	d062      	beq.n	80027f8 <UART_SetConfig+0x7b0>
 8002732:	2b05      	cmp	r3, #5
 8002734:	d062      	beq.n	80027fc <UART_SetConfig+0x7b4>
 8002736:	2b06      	cmp	r3, #6
 8002738:	d062      	beq.n	8002800 <UART_SetConfig+0x7b8>
 800273a:	2b07      	cmp	r3, #7
 800273c:	d062      	beq.n	8002804 <UART_SetConfig+0x7bc>
 800273e:	2b08      	cmp	r3, #8
 8002740:	d062      	beq.n	8002808 <UART_SetConfig+0x7c0>
 8002742:	2b09      	cmp	r3, #9
 8002744:	d062      	beq.n	800280c <UART_SetConfig+0x7c4>
 8002746:	2b0a      	cmp	r3, #10
 8002748:	d062      	beq.n	8002810 <UART_SetConfig+0x7c8>
 800274a:	2b0b      	cmp	r3, #11
 800274c:	bf14      	ite	ne
 800274e:	2301      	movne	r3, #1
 8002750:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002754:	6862      	ldr	r2, [r4, #4]
 8002756:	fbb0 f3f3 	udiv	r3, r0, r3
 800275a:	e01c      	b.n	8002796 <UART_SetConfig+0x74e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800275c:	b35b      	cbz	r3, 80027b6 <UART_SetConfig+0x76e>
 800275e:	2b01      	cmp	r3, #1
 8002760:	d02b      	beq.n	80027ba <UART_SetConfig+0x772>
 8002762:	2b02      	cmp	r3, #2
 8002764:	d02b      	beq.n	80027be <UART_SetConfig+0x776>
 8002766:	2b03      	cmp	r3, #3
 8002768:	d02b      	beq.n	80027c2 <UART_SetConfig+0x77a>
 800276a:	2b04      	cmp	r3, #4
 800276c:	d02b      	beq.n	80027c6 <UART_SetConfig+0x77e>
 800276e:	2b05      	cmp	r3, #5
 8002770:	d02b      	beq.n	80027ca <UART_SetConfig+0x782>
 8002772:	2b06      	cmp	r3, #6
 8002774:	d02b      	beq.n	80027ce <UART_SetConfig+0x786>
 8002776:	2b07      	cmp	r3, #7
 8002778:	d02b      	beq.n	80027d2 <UART_SetConfig+0x78a>
 800277a:	2b08      	cmp	r3, #8
 800277c:	d02b      	beq.n	80027d6 <UART_SetConfig+0x78e>
 800277e:	2b09      	cmp	r3, #9
 8002780:	d02b      	beq.n	80027da <UART_SetConfig+0x792>
 8002782:	2b0a      	cmp	r3, #10
 8002784:	d02b      	beq.n	80027de <UART_SetConfig+0x796>
 8002786:	4a45      	ldr	r2, [pc, #276]	; (800289c <UART_SetConfig+0x854>)
 8002788:	f24f 4124 	movw	r1, #62500	; 0xf424
 800278c:	2b0b      	cmp	r3, #11
 800278e:	bf14      	ite	ne
 8002790:	4613      	movne	r3, r2
 8002792:	460b      	moveq	r3, r1
 8002794:	6862      	ldr	r2, [r4, #4]
 8002796:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800279a:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800279e:	2200      	movs	r2, #0
 80027a0:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027a2:	f1a3 0010 	sub.w	r0, r3, #16
 80027a6:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80027aa:	4288      	cmp	r0, r1
 80027ac:	f63f aca5 	bhi.w	80020fa <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 80027b0:	6821      	ldr	r1, [r4, #0]
 80027b2:	60cb      	str	r3, [r1, #12]
 80027b4:	e4a2      	b.n	80020fc <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027b6:	4b39      	ldr	r3, [pc, #228]	; (800289c <UART_SetConfig+0x854>)
 80027b8:	e7ec      	b.n	8002794 <UART_SetConfig+0x74c>
 80027ba:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <UART_SetConfig+0x858>)
 80027bc:	e7ea      	b.n	8002794 <UART_SetConfig+0x74c>
 80027be:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <UART_SetConfig+0x85c>)
 80027c0:	e7e8      	b.n	8002794 <UART_SetConfig+0x74c>
 80027c2:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <UART_SetConfig+0x860>)
 80027c4:	e7e6      	b.n	8002794 <UART_SetConfig+0x74c>
 80027c6:	4b39      	ldr	r3, [pc, #228]	; (80028ac <UART_SetConfig+0x864>)
 80027c8:	e7e4      	b.n	8002794 <UART_SetConfig+0x74c>
 80027ca:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <UART_SetConfig+0x868>)
 80027cc:	e7e2      	b.n	8002794 <UART_SetConfig+0x74c>
 80027ce:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <UART_SetConfig+0x86c>)
 80027d0:	e7e0      	b.n	8002794 <UART_SetConfig+0x74c>
 80027d2:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <UART_SetConfig+0x870>)
 80027d4:	e7de      	b.n	8002794 <UART_SetConfig+0x74c>
 80027d6:	4b39      	ldr	r3, [pc, #228]	; (80028bc <UART_SetConfig+0x874>)
 80027d8:	e7dc      	b.n	8002794 <UART_SetConfig+0x74c>
 80027da:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <UART_SetConfig+0x878>)
 80027dc:	e7da      	b.n	8002794 <UART_SetConfig+0x74c>
 80027de:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <UART_SetConfig+0x87c>)
 80027e0:	e7d8      	b.n	8002794 <UART_SetConfig+0x74c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027e2:	f7ff f9db 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 80027e6:	e799      	b.n	800271c <UART_SetConfig+0x6d4>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e7b3      	b.n	8002754 <UART_SetConfig+0x70c>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e7b1      	b.n	8002754 <UART_SetConfig+0x70c>
 80027f0:	2304      	movs	r3, #4
 80027f2:	e7af      	b.n	8002754 <UART_SetConfig+0x70c>
 80027f4:	2306      	movs	r3, #6
 80027f6:	e7ad      	b.n	8002754 <UART_SetConfig+0x70c>
 80027f8:	2308      	movs	r3, #8
 80027fa:	e7ab      	b.n	8002754 <UART_SetConfig+0x70c>
 80027fc:	230a      	movs	r3, #10
 80027fe:	e7a9      	b.n	8002754 <UART_SetConfig+0x70c>
 8002800:	230c      	movs	r3, #12
 8002802:	e7a7      	b.n	8002754 <UART_SetConfig+0x70c>
 8002804:	2310      	movs	r3, #16
 8002806:	e7a5      	b.n	8002754 <UART_SetConfig+0x70c>
 8002808:	2320      	movs	r3, #32
 800280a:	e7a3      	b.n	8002754 <UART_SetConfig+0x70c>
 800280c:	2340      	movs	r3, #64	; 0x40
 800280e:	e7a1      	b.n	8002754 <UART_SetConfig+0x70c>
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	e79f      	b.n	8002754 <UART_SetConfig+0x70c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002814:	b1cb      	cbz	r3, 800284a <UART_SetConfig+0x802>
 8002816:	2b01      	cmp	r3, #1
 8002818:	d01a      	beq.n	8002850 <UART_SetConfig+0x808>
 800281a:	2b02      	cmp	r3, #2
 800281c:	d01b      	beq.n	8002856 <UART_SetConfig+0x80e>
 800281e:	2b03      	cmp	r3, #3
 8002820:	d01c      	beq.n	800285c <UART_SetConfig+0x814>
 8002822:	2b04      	cmp	r3, #4
 8002824:	d01d      	beq.n	8002862 <UART_SetConfig+0x81a>
 8002826:	2b05      	cmp	r3, #5
 8002828:	d01e      	beq.n	8002868 <UART_SetConfig+0x820>
 800282a:	2b06      	cmp	r3, #6
 800282c:	d01f      	beq.n	800286e <UART_SetConfig+0x826>
 800282e:	2b07      	cmp	r3, #7
 8002830:	d020      	beq.n	8002874 <UART_SetConfig+0x82c>
 8002832:	2b08      	cmp	r3, #8
 8002834:	d021      	beq.n	800287a <UART_SetConfig+0x832>
 8002836:	2b09      	cmp	r3, #9
 8002838:	d022      	beq.n	8002880 <UART_SetConfig+0x838>
 800283a:	2b0a      	cmp	r3, #10
 800283c:	d023      	beq.n	8002886 <UART_SetConfig+0x83e>
 800283e:	2b0b      	cmp	r3, #11
 8002840:	bf14      	ite	ne
 8002842:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8002846:	2380      	moveq	r3, #128	; 0x80
 8002848:	e7a4      	b.n	8002794 <UART_SetConfig+0x74c>
 800284a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800284e:	e7a1      	b.n	8002794 <UART_SetConfig+0x74c>
 8002850:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002854:	e79e      	b.n	8002794 <UART_SetConfig+0x74c>
 8002856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800285a:	e79b      	b.n	8002794 <UART_SetConfig+0x74c>
 800285c:	f241 5355 	movw	r3, #5461	; 0x1555
 8002860:	e798      	b.n	8002794 <UART_SetConfig+0x74c>
 8002862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002866:	e795      	b.n	8002794 <UART_SetConfig+0x74c>
 8002868:	f640 43cc 	movw	r3, #3276	; 0xccc
 800286c:	e792      	b.n	8002794 <UART_SetConfig+0x74c>
 800286e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8002872:	e78f      	b.n	8002794 <UART_SetConfig+0x74c>
 8002874:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002878:	e78c      	b.n	8002794 <UART_SetConfig+0x74c>
 800287a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800287e:	e789      	b.n	8002794 <UART_SetConfig+0x74c>
 8002880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002884:	e786      	b.n	8002794 <UART_SetConfig+0x74c>
 8002886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800288a:	e783      	b.n	8002794 <UART_SetConfig+0x74c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800288c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002890:	f43f af3f 	beq.w	8002712 <UART_SetConfig+0x6ca>
        ret = HAL_ERROR;
 8002894:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002896:	2300      	movs	r3, #0
 8002898:	e783      	b.n	80027a2 <UART_SetConfig+0x75a>
 800289a:	bf00      	nop
 800289c:	00f42400 	.word	0x00f42400
 80028a0:	007a1200 	.word	0x007a1200
 80028a4:	003d0900 	.word	0x003d0900
 80028a8:	0028b0aa 	.word	0x0028b0aa
 80028ac:	001e8480 	.word	0x001e8480
 80028b0:	00186a00 	.word	0x00186a00
 80028b4:	00145855 	.word	0x00145855
 80028b8:	000f4240 	.word	0x000f4240
 80028bc:	0007a120 	.word	0x0007a120
 80028c0:	0003d090 	.word	0x0003d090
 80028c4:	0001e848 	.word	0x0001e848

080028c8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80028ca:	07da      	lsls	r2, r3, #31
{
 80028cc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028ce:	d506      	bpl.n	80028de <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028d0:	6801      	ldr	r1, [r0, #0]
 80028d2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80028d4:	684a      	ldr	r2, [r1, #4]
 80028d6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80028da:	4322      	orrs	r2, r4
 80028dc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028de:	079c      	lsls	r4, r3, #30
 80028e0:	d506      	bpl.n	80028f0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028e2:	6801      	ldr	r1, [r0, #0]
 80028e4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80028e6:	684a      	ldr	r2, [r1, #4]
 80028e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028ec:	4322      	orrs	r2, r4
 80028ee:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028f0:	0759      	lsls	r1, r3, #29
 80028f2:	d506      	bpl.n	8002902 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028f4:	6801      	ldr	r1, [r0, #0]
 80028f6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80028f8:	684a      	ldr	r2, [r1, #4]
 80028fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028fe:	4322      	orrs	r2, r4
 8002900:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002902:	071a      	lsls	r2, r3, #28
 8002904:	d506      	bpl.n	8002914 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002906:	6801      	ldr	r1, [r0, #0]
 8002908:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800290a:	684a      	ldr	r2, [r1, #4]
 800290c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002910:	4322      	orrs	r2, r4
 8002912:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002914:	06dc      	lsls	r4, r3, #27
 8002916:	d506      	bpl.n	8002926 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002918:	6801      	ldr	r1, [r0, #0]
 800291a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800291c:	688a      	ldr	r2, [r1, #8]
 800291e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002922:	4322      	orrs	r2, r4
 8002924:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002926:	0699      	lsls	r1, r3, #26
 8002928:	d506      	bpl.n	8002938 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800292a:	6801      	ldr	r1, [r0, #0]
 800292c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800292e:	688a      	ldr	r2, [r1, #8]
 8002930:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002934:	4322      	orrs	r2, r4
 8002936:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002938:	065a      	lsls	r2, r3, #25
 800293a:	d50f      	bpl.n	800295c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800293c:	6801      	ldr	r1, [r0, #0]
 800293e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002940:	684a      	ldr	r2, [r1, #4]
 8002942:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002946:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002948:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800294c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800294e:	d105      	bne.n	800295c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002950:	684a      	ldr	r2, [r1, #4]
 8002952:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002954:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002958:	4322      	orrs	r2, r4
 800295a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800295c:	061b      	lsls	r3, r3, #24
 800295e:	d506      	bpl.n	800296e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002960:	6802      	ldr	r2, [r0, #0]
 8002962:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002964:	6853      	ldr	r3, [r2, #4]
 8002966:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800296a:	430b      	orrs	r3, r1
 800296c:	6053      	str	r3, [r2, #4]
 800296e:	bd10      	pop	{r4, pc}

08002970 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002974:	9d06      	ldr	r5, [sp, #24]
 8002976:	4604      	mov	r4, r0
 8002978:	460f      	mov	r7, r1
 800297a:	4616      	mov	r6, r2
 800297c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800297e:	6821      	ldr	r1, [r4, #0]
 8002980:	69ca      	ldr	r2, [r1, #28]
 8002982:	ea37 0302 	bics.w	r3, r7, r2
 8002986:	bf0c      	ite	eq
 8002988:	2201      	moveq	r2, #1
 800298a:	2200      	movne	r2, #0
 800298c:	42b2      	cmp	r2, r6
 800298e:	d002      	beq.n	8002996 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002990:	2000      	movs	r0, #0
}
 8002992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002996:	1c6b      	adds	r3, r5, #1
 8002998:	d0f2      	beq.n	8002980 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299a:	f7fd ffc9 	bl	8000930 <HAL_GetTick>
 800299e:	eba0 0008 	sub.w	r0, r0, r8
 80029a2:	4285      	cmp	r5, r0
 80029a4:	d301      	bcc.n	80029aa <UART_WaitOnFlagUntilTimeout+0x3a>
 80029a6:	2d00      	cmp	r5, #0
 80029a8:	d1e9      	bne.n	800297e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029b2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80029bc:	2320      	movs	r3, #32
 80029be:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80029c2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80029c6:	2300      	movs	r3, #0
 80029c8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
 80029cc:	2003      	movs	r0, #3
 80029ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080029d2 <UART_CheckIdleState>:
{
 80029d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80029d4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d6:	2600      	movs	r6, #0
 80029d8:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 80029dc:	f7fd ffa8 	bl	8000930 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80029e6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029e8:	d417      	bmi.n	8002a1a <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	075b      	lsls	r3, r3, #29
 80029f0:	d50a      	bpl.n	8002a08 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2200      	movs	r2, #0
 80029fa:	462b      	mov	r3, r5
 80029fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a00:	4620      	mov	r0, r4
 8002a02:	f7ff ffb5 	bl	8002970 <UART_WaitOnFlagUntilTimeout>
 8002a06:	b9a0      	cbnz	r0, 8002a32 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002a08:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002a0a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002a0c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002a10:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002a14:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8002a18:	e00c      	b.n	8002a34 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	4632      	mov	r2, r6
 8002a22:	4603      	mov	r3, r0
 8002a24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f7ff ffa1 	bl	8002970 <UART_WaitOnFlagUntilTimeout>
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d0db      	beq.n	80029ea <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002a32:	2003      	movs	r0, #3
}
 8002a34:	b002      	add	sp, #8
 8002a36:	bd70      	pop	{r4, r5, r6, pc}

08002a38 <HAL_UART_Init>:
{
 8002a38:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	b350      	cbz	r0, 8002a94 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002a3e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8002a42:	b91b      	cbnz	r3, 8002a4c <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8002a44:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8002a48:	f000 fbb2 	bl	80031b0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002a4c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002a4e:	2324      	movs	r3, #36	; 0x24
 8002a50:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8002a54:	6813      	ldr	r3, [r2, #0]
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	f7ff faf3 	bl	8002048 <UART_SetConfig>
 8002a62:	2801      	cmp	r0, #1
 8002a64:	d016      	beq.n	8002a94 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a68:	b113      	cbz	r3, 8002a70 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f7ff ff2c 	bl	80028c8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a80:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002a88:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002a8a:	601a      	str	r2, [r3, #0]
}
 8002a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002a90:	f7ff bf9f 	b.w	80029d2 <UART_CheckIdleState>
}
 8002a94:	2001      	movs	r0, #1
 8002a96:	bd10      	pop	{r4, pc}

08002a98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	f88d 2003 	strb.w	r2, [sp, #3]
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	f88d 2004 	strb.w	r2, [sp, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f88d 2006 	strb.w	r2, [sp, #6]
 8002aac:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	f88d 2008 	strb.w	r2, [sp, #8]
 8002ab6:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002aba:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002abc:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002abe:	2104      	movs	r1, #4
 8002ac0:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002ac2:	f88d 3000 	strb.w	r3, [sp]
 8002ac6:	f88d 3001 	strb.w	r3, [sp, #1]
 8002aca:	f88d 3002 	strb.w	r3, [sp, #2]
 8002ace:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002ad2:	f88d 1009 	strb.w	r1, [sp, #9]
 8002ad6:	f88d 400a 	strb.w	r4, [sp, #10]
 8002ada:	f88d 100b 	strb.w	r1, [sp, #11]
 8002ade:	f88d 300d 	strb.w	r3, [sp, #13]
 8002ae2:	f88d 300e 	strb.w	r3, [sp, #14]
 8002ae6:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002aea:	b92a      	cbnz	r2, 8002af8 <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 8002aec:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002af0:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8002af4:	b004      	add	sp, #16
 8002af6:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002af8:	6802      	ldr	r2, [r0, #0]
 8002afa:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002afc:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002afe:	aa04      	add	r2, sp, #16
 8002b00:	eb02 7151 	add.w	r1, r2, r1, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002b04:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002b08:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 8002b0c:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8002b10:	00d2      	lsls	r2, r2, #3
 8002b12:	fb92 f2f1 	sdiv	r2, r2, r1
 8002b16:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002b1a:	aa04      	add	r2, sp, #16
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8002b22:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002b26:	00d2      	lsls	r2, r2, #3
 8002b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b2c:	e7e0      	b.n	8002af0 <UARTEx_SetNbDataToProcess+0x58>

08002b2e <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8002b2e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d014      	beq.n	8002b60 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b36:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002b38:	2324      	movs	r3, #36	; 0x24
 8002b3a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b3e:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8002b40:	6813      	ldr	r3, [r2, #0]
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002b48:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b50:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002b52:	2220      	movs	r2, #32
 8002b54:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002b58:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8002b60:	2002      	movs	r0, #2
}
 8002b62:	4770      	bx	lr

08002b64 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8002b64:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8002b66:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8002b6a:	2b01      	cmp	r3, #1
{
 8002b6c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8002b6e:	d01b      	beq.n	8002ba8 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8002b70:	2301      	movs	r3, #1
 8002b72:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8002b76:	2324      	movs	r3, #36	; 0x24
 8002b78:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b7c:	6803      	ldr	r3, [r0, #0]
 8002b7e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8002b8e:	4311      	orrs	r1, r2
 8002b90:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002b92:	f7ff ff81 	bl	8002a98 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b96:	6803      	ldr	r3, [r0, #0]
 8002b98:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8002ba6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8002ba8:	2002      	movs	r0, #2
}
 8002baa:	bd38      	pop	{r3, r4, r5, pc}

08002bac <HAL_UARTEx_SetRxFifoThreshold>:
{
 8002bac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8002bae:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8002bb2:	2b01      	cmp	r3, #1
{
 8002bb4:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8002bb6:	d01b      	beq.n	8002bf0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8002bbe:	2324      	movs	r3, #36	; 0x24
 8002bc0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bc4:	6803      	ldr	r3, [r0, #0]
 8002bc6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8002bd6:	4311      	orrs	r1, r2
 8002bd8:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002bda:	f7ff ff5d 	bl	8002a98 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002bde:	6803      	ldr	r3, [r0, #0]
 8002be0:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002be2:	2320      	movs	r3, #32
 8002be4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002be8:	2000      	movs	r0, #0
 8002bea:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8002bee:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8002bf0:	2002      	movs	r0, #2
}
 8002bf2:	bd38      	pop	{r3, r4, r5, pc}

08002bf4 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002bf4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002bf8:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8002bfc:	045b      	lsls	r3, r3, #17
 8002bfe:	0c5b      	lsrs	r3, r3, #17
 8002c00:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002c04:	2000      	movs	r0, #0
 8002c06:	4770      	bx	lr

08002c08 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c08:	b084      	sub	sp, #16
 8002c0a:	b510      	push	{r4, lr}
 8002c0c:	ac03      	add	r4, sp, #12
 8002c0e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002c12:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8002c1a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002c1e:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002c22:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8002c26:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8002c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR |= winterruptmask;
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c38:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8002c3c:	b004      	add	sp, #16
 8002c3e:	4610      	mov	r0, r2
 8002c40:	4770      	bx	lr
	...

08002c44 <adxlWriteI2C>:
#include "main.h"
#include <stdio.h>


void adxlWriteI2C(uint8_t reg, uint8_t value)
{
 8002c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t data[2];
	data[0] = reg;
	data[1] = value;
	HAL_I2C_Master_Transmit (&hi2c1, ADXL_ADDRESS_I2C, data, 2, 100);
 8002c46:	2364      	movs	r3, #100	; 0x64
	data[0] = reg;
 8002c48:	f88d 000c 	strb.w	r0, [sp, #12]
	data[1] = value;
 8002c4c:	f88d 100d 	strb.w	r1, [sp, #13]
	HAL_I2C_Master_Transmit (&hi2c1, ADXL_ADDRESS_I2C, data, 2, 100);
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	aa03      	add	r2, sp, #12
 8002c54:	2302      	movs	r3, #2
 8002c56:	21a6      	movs	r1, #166	; 0xa6
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <adxlWriteI2C+0x20>)
 8002c5a:	f7fe f915 	bl	8000e88 <HAL_I2C_Master_Transmit>
}
 8002c5e:	b005      	add	sp, #20
 8002c60:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c64:	200000a4 	.word	0x200000a4

08002c68 <adxlMultiByteReadI2C>:

void adxlMultiByteReadI2C(uint8_t reg, uint8_t *array)
{
 8002c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read (&hi2c1, ADXL_ADDRESS_I2C, reg, 1, (uint8_t *)array, 6, 100);
 8002c6a:	2364      	movs	r3, #100	; 0x64
 8002c6c:	9302      	str	r3, [sp, #8]
 8002c6e:	2306      	movs	r3, #6
 8002c70:	e88d 000a 	stmia.w	sp, {r1, r3}
 8002c74:	4602      	mov	r2, r0
 8002c76:	2301      	movs	r3, #1
 8002c78:	21a6      	movs	r1, #166	; 0xa6
 8002c7a:	4803      	ldr	r0, [pc, #12]	; (8002c88 <adxlMultiByteReadI2C+0x20>)
 8002c7c:	f7fe f998 	bl	8000fb0 <HAL_I2C_Mem_Read>
}
 8002c80:	b005      	add	sp, #20
 8002c82:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c86:	bf00      	nop
 8002c88:	200000a4 	.word	0x200000a4

08002c8c <adxlReadRegI2C>:

uint8_t adxlReadRegI2C(uint8_t reg)
{
 8002c8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t value = 0;
 8002c8e:	aa06      	add	r2, sp, #24
 8002c90:	2300      	movs	r3, #0
 8002c92:	f802 3d01 	strb.w	r3, [r2, #-1]!
	HAL_I2C_Mem_Read (&hi2c1, ADXL_ADDRESS_I2C, reg, 1, &value, 1, 100);
 8002c96:	2364      	movs	r3, #100	; 0x64
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002ca0:	21a6      	movs	r1, #166	; 0xa6
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	4803      	ldr	r0, [pc, #12]	; (8002cb4 <adxlReadRegI2C+0x28>)
 8002ca6:	f7fe f983 	bl	8000fb0 <HAL_I2C_Mem_Read>
	return value;
}
 8002caa:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002cae:	b007      	add	sp, #28
 8002cb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cb4:	200000a4 	.word	0x200000a4

08002cb8 <adxlInitTestI2C>:

void adxlInitTestI2C(void)
{
 8002cb8:	b508      	push	{r3, lr}

	printf("ADXL Configured For Real Time Measurements\n");
 8002cba:	4817      	ldr	r0, [pc, #92]	; (8002d18 <adxlInitTestI2C+0x60>)
 8002cbc:	f000 fcbe 	bl	800363c <puts>
	adxlWriteI2C(REG_POWER_CTRL, 0x00);  // Put in standby mode for init
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	202d      	movs	r0, #45	; 0x2d
 8002cc4:	f7ff ffbe 	bl	8002c44 <adxlWriteI2C>
	adxlWriteI2C(REG_INT_ENABLE, 0x00);
 8002cc8:	2100      	movs	r1, #0
 8002cca:	202e      	movs	r0, #46	; 0x2e
 8002ccc:	f7ff ffba 	bl	8002c44 <adxlWriteI2C>

	uint8_t regValue = 0;
	regValue = adxlReadRegI2C(REG_DEVID); // read the DEVID Register
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f7ff ffdb 	bl	8002c8c <adxlReadRegI2C>
	printf("Device ID:0x%x\n", regValue);
 8002cd6:	4601      	mov	r1, r0
 8002cd8:	4810      	ldr	r0, [pc, #64]	; (8002d1c <adxlInitTestI2C+0x64>)
 8002cda:	f000 fc3b 	bl	8003554 <iprintf>

	adxlWriteI2C(REG_BW_RATE, BW_800HZ); //set Bandwidth to 800Hz
 8002cde:	210d      	movs	r1, #13
 8002ce0:	202c      	movs	r0, #44	; 0x2c
 8002ce2:	f7ff ffaf 	bl	8002c44 <adxlWriteI2C>
	regValue = adxlReadRegI2C(REG_BW_RATE); // read the BandWidth Register
 8002ce6:	202c      	movs	r0, #44	; 0x2c
 8002ce8:	f7ff ffd0 	bl	8002c8c <adxlReadRegI2C>
	printf("BandWidth Rate:0x%x\n", regValue);
 8002cec:	4601      	mov	r1, r0
 8002cee:	480c      	ldr	r0, [pc, #48]	; (8002d20 <adxlInitTestI2C+0x68>)
 8002cf0:	f000 fc30 	bl	8003554 <iprintf>

	adxlWriteI2C(REG_POWER_CTRL, 0x00);  // reset all bits
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	202d      	movs	r0, #45	; 0x2d
 8002cf8:	f7ff ffa4 	bl	8002c44 <adxlWriteI2C>
	adxlWriteI2C(REG_POWER_CTRL, 0x08);  // power_cntl measure and wake up 8hz
 8002cfc:	2108      	movs	r1, #8
 8002cfe:	202d      	movs	r0, #45	; 0x2d
 8002d00:	f7ff ffa0 	bl	8002c44 <adxlWriteI2C>
	regValue = adxlReadRegI2C(REG_POWER_CTRL); // read the Power Control Register
 8002d04:	202d      	movs	r0, #45	; 0x2d
 8002d06:	f7ff ffc1 	bl	8002c8c <adxlReadRegI2C>
	printf("Power Control:0x%x\n", regValue);


}
 8002d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printf("Power Control:0x%x\n", regValue);
 8002d0e:	4601      	mov	r1, r0
 8002d10:	4804      	ldr	r0, [pc, #16]	; (8002d24 <adxlInitTestI2C+0x6c>)
 8002d12:	f000 bc1f 	b.w	8003554 <iprintf>
 8002d16:	bf00      	nop
 8002d18:	080044a4 	.word	0x080044a4
 8002d1c:	080044cf 	.word	0x080044cf
 8002d20:	080044df 	.word	0x080044df
 8002d24:	080044f4 	.word	0x080044f4

08002d28 <adxlInitInterruptTest>:

void adxlInitInterruptTest(void)
{
 8002d28:	b508      	push	{r3, lr}

	uint8_t regValue = 0;
	printf("ADXL Configured For Interrupts\n");
 8002d2a:	481b      	ldr	r0, [pc, #108]	; (8002d98 <adxlInitInterruptTest+0x70>)
 8002d2c:	f000 fc86 	bl	800363c <puts>

	adxlWriteI2C(REG_POWER_CTRL, 0x00);  // Put in standby mode for init
 8002d30:	2100      	movs	r1, #0
 8002d32:	202d      	movs	r0, #45	; 0x2d
 8002d34:	f7ff ff86 	bl	8002c44 <adxlWriteI2C>

	adxlWriteI2C(REG_BW_RATE, BW_800HZ);
 8002d38:	210d      	movs	r1, #13
 8002d3a:	202c      	movs	r0, #44	; 0x2c
 8002d3c:	f7ff ff82 	bl	8002c44 <adxlWriteI2C>
	regValue = adxlReadRegI2C(REG_BW_RATE);
 8002d40:	202c      	movs	r0, #44	; 0x2c
 8002d42:	f7ff ffa3 	bl	8002c8c <adxlReadRegI2C>
	printf("BandWidth Rate:0x%x\n", regValue);
 8002d46:	4601      	mov	r1, r0
 8002d48:	4814      	ldr	r0, [pc, #80]	; (8002d9c <adxlInitInterruptTest+0x74>)
 8002d4a:	f000 fc03 	bl	8003554 <iprintf>

	adxlWriteI2C(REG_INT_ENABLE, 0x00); //Disable Interrupts Before Configuring
 8002d4e:	2100      	movs	r1, #0
 8002d50:	202e      	movs	r0, #46	; 0x2e
 8002d52:	f7ff ff77 	bl	8002c44 <adxlWriteI2C>
	//adxlWriteI2C(REG_INT_MAP, 0x00); //Trigger Interrupt on INT1 when DATA_READY
	adxlWriteI2C(REG_INT_MAP, 0x10); //Trigger Interrupt on INT2 when DATA_READY
 8002d56:	2110      	movs	r1, #16
 8002d58:	202f      	movs	r0, #47	; 0x2f
 8002d5a:	f7ff ff73 	bl	8002c44 <adxlWriteI2C>
	adxlWriteI2C(REG_INT_ENABLE, 0x10); //Enable Interrupt when DATA_READY and ACTIVITY occurs
 8002d5e:	2110      	movs	r1, #16
 8002d60:	202e      	movs	r0, #46	; 0x2e
 8002d62:	f7ff ff6f 	bl	8002c44 <adxlWriteI2C>
	regValue = adxlReadRegI2C(REG_INT_ENABLE);
 8002d66:	202e      	movs	r0, #46	; 0x2e
 8002d68:	f7ff ff90 	bl	8002c8c <adxlReadRegI2C>
	printf("Interrupt Enabled:0x%x\n", regValue);
 8002d6c:	4601      	mov	r1, r0
 8002d6e:	480c      	ldr	r0, [pc, #48]	; (8002da0 <adxlInitInterruptTest+0x78>)
 8002d70:	f000 fbf0 	bl	8003554 <iprintf>

	adxlWriteI2C(REG_THRESH_ACT, THRESHOLD_ACTIVITY); //Set Activity THRESHOLD level for activity
 8002d74:	2106      	movs	r1, #6
 8002d76:	2024      	movs	r0, #36	; 0x24
 8002d78:	f7ff ff64 	bl	8002c44 <adxlWriteI2C>
	regValue = adxlReadRegI2C(REG_THRESH_ACT);
 8002d7c:	2024      	movs	r0, #36	; 0x24
 8002d7e:	f7ff ff85 	bl	8002c8c <adxlReadRegI2C>
	printf("Activity Threshold:0x%x\n", regValue);
 8002d82:	4601      	mov	r1, r0
 8002d84:	4807      	ldr	r0, [pc, #28]	; (8002da4 <adxlInitInterruptTest+0x7c>)
 8002d86:	f000 fbe5 	bl	8003554 <iprintf>
	adxlWriteI2C(REG_POWER_CTRL, 0x08);  // power_cntl measure and wake up 8hz
 8002d8a:	2108      	movs	r1, #8
 8002d8c:	202d      	movs	r0, #45	; 0x2d

}
 8002d8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	adxlWriteI2C(REG_POWER_CTRL, 0x08);  // power_cntl measure and wake up 8hz
 8002d92:	f7ff bf57 	b.w	8002c44 <adxlWriteI2C>
 8002d96:	bf00      	nop
 8002d98:	08004454 	.word	0x08004454
 8002d9c:	080044df 	.word	0x080044df
 8002da0:	08004473 	.word	0x08004473
 8002da4:	0800448b 	.word	0x0800448b

08002da8 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8002dac:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002dae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002db0:	4302      	orrs	r2, r0
 8002db2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db6:	4018      	ands	r0, r3
 8002db8:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8002dba:	9b01      	ldr	r3, [sp, #4]
}
 8002dbc:	b002      	add	sp, #8
 8002dbe:	4770      	bx	lr

08002dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	b0ae      	sub	sp, #184	; 0xb8
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dc4:	2248      	movs	r2, #72	; 0x48
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	a808      	add	r0, sp, #32
 8002dca:	f000 fbbb 	bl	8003544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dce:	221c      	movs	r2, #28
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	a801      	add	r0, sp, #4
 8002dd4:	f000 fbb6 	bl	8003544 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dd8:	2100      	movs	r1, #0
 8002dda:	2250      	movs	r2, #80	; 0x50
 8002ddc:	a81a      	add	r0, sp, #104	; 0x68
 8002dde:	f000 fbb1 	bl	8003544 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002de6:	2501      	movs	r5, #1
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002dee:	60da      	str	r2, [r3, #12]
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	f022 0203 	bic.w	r2, r2, #3
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002dfc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002e00:	f022 0218 	bic.w	r2, r2, #24
 8002e04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e08:	4a27      	ldr	r2, [pc, #156]	; (8002ea8 <SystemClock_Config+0xe8>)
 8002e0a:	6813      	ldr	r3, [r2, #0]
 8002e0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002e18:	950a      	str	r5, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002e22:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002e24:	2327      	movs	r3, #39	; 0x27
 8002e26:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e2c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e32:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e34:	2340      	movs	r3, #64	; 0x40
 8002e36:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e38:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002e3a:	2360      	movs	r3, #96	; 0x60
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e3c:	2400      	movs	r4, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002e3e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002e40:	2602      	movs	r6, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e42:	f7fe faef 	bl	8001424 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002e46:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002e48:	236f      	movs	r3, #111	; 0x6f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002e4a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002e4c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002e4e:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e50:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e52:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e54:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002e56:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002e58:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002e5a:	f7fe fda1 	bl	80019a0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002e5e:	f243 1305 	movw	r3, #12549	; 0x3105
 8002e62:	931a      	str	r3, [sp, #104]	; 0x68
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002e64:	2318      	movs	r3, #24
 8002e66:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e6c:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002e6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e72:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002e74:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002e78:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002e7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e7e:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002e80:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002e84:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002e86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e8a:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e8c:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002e8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e92:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e94:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002e96:	962c      	str	r6, [sp, #176]	; 0xb0
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002e98:	942d      	str	r4, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e9a:	f7fe ff2c 	bl	8001cf6 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002e9e:	f7ff f8cc 	bl	800203a <HAL_RCCEx_EnableMSIPLLMode>
}
 8002ea2:	b02e      	add	sp, #184	; 0xb8
 8002ea4:	bd70      	pop	{r4, r5, r6, pc}
 8002ea6:	bf00      	nop
 8002ea8:	58000400 	.word	0x58000400

08002eac <adxlTestMeasure>:

/* USER CODE BEGIN 4 */


void adxlTestMeasure()
{
 8002eac:	b538      	push	{r3, r4, r5, lr}
	adxlMultiByteReadI2C(0x32, measurement);
 8002eae:	4c30      	ldr	r4, [pc, #192]	; (8002f70 <adxlTestMeasure+0xc4>)
	x = ((measurement[0])| measurement[1]<<8);
	y = ((measurement[2])| measurement[3]<<8);
	z = ((measurement[4])| measurement[5]<<8);

	xg = x * scaleFactor;
	yg = y * scaleFactor;
 8002eb0:	4d30      	ldr	r5, [pc, #192]	; (8002f74 <adxlTestMeasure+0xc8>)
	adxlMultiByteReadI2C(0x32, measurement);
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	2032      	movs	r0, #50	; 0x32
 8002eb6:	f7ff fed7 	bl	8002c68 <adxlMultiByteReadI2C>
	x = ((measurement[0])| measurement[1]<<8);
 8002eba:	7823      	ldrb	r3, [r4, #0]
 8002ebc:	7862      	ldrb	r2, [r4, #1]
	y = ((measurement[2])| measurement[3]<<8);
 8002ebe:	482e      	ldr	r0, [pc, #184]	; (8002f78 <adxlTestMeasure+0xcc>)
	xg = x * scaleFactor;
 8002ec0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002f7c <adxlTestMeasure+0xd0>
	x = ((measurement[0])| measurement[1]<<8);
 8002ec4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ec8:	4a2d      	ldr	r2, [pc, #180]	; (8002f80 <adxlTestMeasure+0xd4>)
 8002eca:	b21b      	sxth	r3, r3
 8002ecc:	8013      	strh	r3, [r2, #0]
	y = ((measurement[2])| measurement[3]<<8);
 8002ece:	78a3      	ldrb	r3, [r4, #2]
 8002ed0:	78e1      	ldrb	r1, [r4, #3]
 8002ed2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ed6:	b21b      	sxth	r3, r3
 8002ed8:	8003      	strh	r3, [r0, #0]
	z = ((measurement[4])| measurement[5]<<8);
 8002eda:	7923      	ldrb	r3, [r4, #4]
 8002edc:	7961      	ldrb	r1, [r4, #5]
	zg = z * scaleFactor;
 8002ede:	4c29      	ldr	r4, [pc, #164]	; (8002f84 <adxlTestMeasure+0xd8>)
	z = ((measurement[4])| measurement[5]<<8);
 8002ee0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ee4:	4928      	ldr	r1, [pc, #160]	; (8002f88 <adxlTestMeasure+0xdc>)
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	800b      	strh	r3, [r1, #0]
	xg = x * scaleFactor;
 8002eea:	8813      	ldrh	r3, [r2, #0]
 8002eec:	4a27      	ldr	r2, [pc, #156]	; (8002f8c <adxlTestMeasure+0xe0>)
 8002eee:	b21b      	sxth	r3, r3
 8002ef0:	ee07 3a90 	vmov	s15, r3
 8002ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ef8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002efc:	ed82 7a00 	vstr	s14, [r2]
	yg = y * scaleFactor;
 8002f00:	8803      	ldrh	r3, [r0, #0]
 8002f02:	b21b      	sxth	r3, r3
 8002f04:	ee07 3a90 	vmov	s15, r3
 8002f08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002f10:	ed85 7a00 	vstr	s14, [r5]
	zg = z * scaleFactor;
 8002f14:	880b      	ldrh	r3, [r1, #0]
 8002f16:	b21b      	sxth	r3, r3
 8002f18:	ee07 3a90 	vmov	s15, r3
 8002f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f24:	edc4 7a00 	vstr	s15, [r4]

	printf("X:%f ", xg);
 8002f28:	6810      	ldr	r0, [r2, #0]
 8002f2a:	f7fd fadd 	bl	80004e8 <__aeabi_f2d>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4817      	ldr	r0, [pc, #92]	; (8002f90 <adxlTestMeasure+0xe4>)
 8002f34:	f000 fb0e 	bl	8003554 <iprintf>
	printf("Y:%f ", yg);
 8002f38:	6828      	ldr	r0, [r5, #0]
 8002f3a:	f7fd fad5 	bl	80004e8 <__aeabi_f2d>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4814      	ldr	r0, [pc, #80]	; (8002f94 <adxlTestMeasure+0xe8>)
 8002f44:	f000 fb06 	bl	8003554 <iprintf>
	printf("Z:%f\n", zg);
 8002f48:	6820      	ldr	r0, [r4, #0]
 8002f4a:	f7fd facd 	bl	80004e8 <__aeabi_f2d>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4811      	ldr	r0, [pc, #68]	; (8002f98 <adxlTestMeasure+0xec>)
 8002f54:	f000 fafe 	bl	8003554 <iprintf>

	if(readModeFlag == 1)
 8002f58:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <adxlTestMeasure+0xf0>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <adxlTestMeasure+0xc0>
		HAL_Delay(500);
 8002f60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8002f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_Delay(500);
 8002f68:	f7fd bcee 	b.w	8000948 <HAL_Delay>
 8002f6c:	bd38      	pop	{r3, r4, r5, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000408 	.word	0x20000408
 8002f74:	2000018c 	.word	0x2000018c
 8002f78:	20000188 	.word	0x20000188
 8002f7c:	3d48b439 	.word	0x3d48b439
 8002f80:	200000f0 	.word	0x200000f0
 8002f84:	200000f4 	.word	0x200000f4
 8002f88:	200000fa 	.word	0x200000fa
 8002f8c:	20000404 	.word	0x20000404
 8002f90:	08004508 	.word	0x08004508
 8002f94:	0800450e 	.word	0x0800450e
 8002f98:	08004514 	.word	0x08004514
 8002f9c:	20000090 	.word	0x20000090

08002fa0 <main>:
{
 8002fa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 8002fa2:	f7fd fca3 	bl	80008ec <HAL_Init>
  SystemClock_Config();
 8002fa6:	f7ff ff0b 	bl	8002dc0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002faa:	2214      	movs	r2, #20
 8002fac:	2100      	movs	r1, #0
 8002fae:	a801      	add	r0, sp, #4
 8002fb0:	f000 fac8 	bl	8003544 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb4:	2004      	movs	r0, #4
 8002fb6:	f7ff fef7 	bl	8002da8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fba:	2002      	movs	r0, #2
 8002fbc:	f7ff fef4 	bl	8002da8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f7ff fef1 	bl	8002da8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fc6:	2008      	movs	r0, #8
 8002fc8:	f7ff feee 	bl	8002da8 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2123      	movs	r1, #35	; 0x23
 8002fd0:	4846      	ldr	r0, [pc, #280]	; (80030ec <main+0x14c>)
  hi2c1.Instance = I2C1;
 8002fd2:	4d47      	ldr	r5, [pc, #284]	; (80030f0 <main+0x150>)
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002fd4:	f7fd fde6 	bl	8000ba4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ADXL_INT_Pin;
 8002fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = ADXL_INT_Pin;
 8002fde:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(ADXL_INT_GPIO_Port, &GPIO_InitStruct);
 8002fe0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fe2:	4b44      	ldr	r3, [pc, #272]	; (80030f4 <main+0x154>)
 8002fe4:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(ADXL_INT_GPIO_Port, &GPIO_InitStruct);
 8002fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ADXL_INT_GPIO_Port, &GPIO_InitStruct);
 8002fec:	f7fd fd28 	bl	8000a40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin;
 8002ff0:	2310      	movs	r3, #16
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ff2:	a901      	add	r1, sp, #4
 8002ff4:	4840      	ldr	r0, [pc, #256]	; (80030f8 <main+0x158>)
  GPIO_InitStruct.Pin = B1_Pin;
 8002ff6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff8:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ffa:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ffe:	f7fd fd1f 	bl	8000a40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8003002:	2323      	movs	r3, #35	; 0x23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003004:	a901      	add	r1, sp, #4
 8003006:	4839      	ldr	r0, [pc, #228]	; (80030ec <main+0x14c>)
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8003008:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800300e:	9602      	str	r6, [sp, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003010:	f7fd fd16 	bl	8000a40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 8003014:	2303      	movs	r3, #3
 8003016:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003018:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800301a:	4b38      	ldr	r3, [pc, #224]	; (80030fc <main+0x15c>)
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800301c:	4838      	ldr	r0, [pc, #224]	; (8003100 <main+0x160>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800301e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003020:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003022:	f7fd fd0d 	bl	8000a40 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003026:	4622      	mov	r2, r4
 8003028:	4621      	mov	r1, r4
 800302a:	2006      	movs	r0, #6
 800302c:	f7fd fcb2 	bl	8000994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003030:	2006      	movs	r0, #6
 8003032:	f7fd fce3 	bl	80009fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003036:	4622      	mov	r2, r4
 8003038:	4621      	mov	r1, r4
 800303a:	2007      	movs	r0, #7
 800303c:	f7fd fcaa 	bl	8000994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003040:	2007      	movs	r0, #7
 8003042:	f7fd fcdb 	bl	80009fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003046:	4621      	mov	r1, r4
 8003048:	4622      	mov	r2, r4
 800304a:	2017      	movs	r0, #23
 800304c:	f7fd fca2 	bl	8000994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003050:	2017      	movs	r0, #23
 8003052:	f7fd fcd3 	bl	80009fc <HAL_NVIC_EnableIRQ>
  hi2c1.Init.Timing = 0x00707CBB;
 8003056:	4a2b      	ldr	r2, [pc, #172]	; (8003104 <main+0x164>)
 8003058:	4b2b      	ldr	r3, [pc, #172]	; (8003108 <main+0x168>)
  hi2c1.Init.OwnAddress1 = 0;
 800305a:	60ac      	str	r4, [r5, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800305c:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x00707CBB;
 800305e:	e885 000c 	stmia.w	r5, {r2, r3}
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003062:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003064:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003066:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003068:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800306a:	622c      	str	r4, [r5, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800306c:	60ee      	str	r6, [r5, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800306e:	f7fd feba 	bl	8000de6 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003072:	4621      	mov	r1, r4
 8003074:	4628      	mov	r0, r5
 8003076:	f7fe f859 	bl	800112c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800307a:	4621      	mov	r1, r4
 800307c:	4628      	mov	r0, r5
 800307e:	f7fe f87b 	bl	8001178 <HAL_I2CEx_ConfigDigitalFilter>
  huart1.Instance = USART1;
 8003082:	4d22      	ldr	r5, [pc, #136]	; (800310c <main+0x16c>)
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8003084:	4822      	ldr	r0, [pc, #136]	; (8003110 <main+0x170>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003086:	60ec      	str	r4, [r5, #12]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8003088:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800308c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003090:	e885 000b 	stmia.w	r5, {r0, r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003094:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003096:	4628      	mov	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003098:	616b      	str	r3, [r5, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 800309a:	612c      	str	r4, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800309c:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800309e:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030a0:	622c      	str	r4, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030a2:	626c      	str	r4, [r5, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030a4:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030a6:	f7ff fcc7 	bl	8002a38 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030aa:	4621      	mov	r1, r4
 80030ac:	4628      	mov	r0, r5
 80030ae:	f7ff fd59 	bl	8002b64 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030b2:	4621      	mov	r1, r4
 80030b4:	4628      	mov	r0, r5
 80030b6:	f7ff fd79 	bl	8002bac <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80030ba:	4628      	mov	r0, r5
 80030bc:	f7ff fd37 	bl	8002b2e <HAL_UARTEx_DisableFifoMode>
  hpcd_USB_FS.Instance = USB;
 80030c0:	4814      	ldr	r0, [pc, #80]	; (8003114 <main+0x174>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <main+0x178>)
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80030c4:	6144      	str	r4, [r0, #20]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80030c6:	f04f 0e08 	mov.w	lr, #8
 80030ca:	e880 4008 	stmia.w	r0, {r3, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80030ce:	2302      	movs	r3, #2
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80030d0:	6184      	str	r4, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80030d2:	61c4      	str	r4, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80030d4:	6204      	str	r4, [r0, #32]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80030d6:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80030d8:	6103      	str	r3, [r0, #16]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80030da:	f7fe f872 	bl	80011c2 <HAL_PCD_Init>
	  if(readModeFlag == 1)
 80030de:	4c0f      	ldr	r4, [pc, #60]	; (800311c <main+0x17c>)
 80030e0:	7823      	ldrb	r3, [r4, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d1fc      	bne.n	80030e0 <main+0x140>
		  adxlTestMeasure();
 80030e6:	f7ff fee1 	bl	8002eac <adxlTestMeasure>
 80030ea:	e7f9      	b.n	80030e0 <main+0x140>
 80030ec:	48000400 	.word	0x48000400
 80030f0:	200000a4 	.word	0x200000a4
 80030f4:	10110000 	.word	0x10110000
 80030f8:	48000800 	.word	0x48000800
 80030fc:	10210000 	.word	0x10210000
 8003100:	48000c00 	.word	0x48000c00
 8003104:	40005400 	.word	0x40005400
 8003108:	00707cbb 	.word	0x00707cbb
 800310c:	200000fc 	.word	0x200000fc
 8003110:	40013800 	.word	0x40013800
 8003114:	20000190 	.word	0x20000190
 8003118:	40006800 	.word	0x40006800
 800311c:	20000090 	.word	0x20000090

08003120 <runTestRoutine>:

void runTestRoutine(uint8_t flag)
{

	if (flag == 1)
 8003120:	2801      	cmp	r0, #1
 8003122:	4b03      	ldr	r3, [pc, #12]	; (8003130 <runTestRoutine+0x10>)
	{
		readModeFlag = 1;
	}
	else readModeFlag = 0;
 8003124:	bf16      	itet	ne
 8003126:	2200      	movne	r2, #0
		readModeFlag = 1;
 8003128:	7018      	strbeq	r0, [r3, #0]
	else readModeFlag = 0;
 800312a:	701a      	strbne	r2, [r3, #0]
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000090 	.word	0x20000090

08003134 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8003138:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 800313a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800313c:	4302      	orrs	r2, r0
 800313e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003142:	4018      	ands	r0, r3
 8003144:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8003146:	9b01      	ldr	r3, [sp, #4]
}
 8003148:	b002      	add	sp, #8
 800314a:	4770      	bx	lr

0800314c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800314c:	4770      	bx	lr
	...

08003150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003150:	b510      	push	{r4, lr}
 8003152:	4604      	mov	r4, r0
 8003154:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003156:	2214      	movs	r2, #20
 8003158:	2100      	movs	r1, #0
 800315a:	a801      	add	r0, sp, #4
 800315c:	f000 f9f2 	bl	8003544 <memset>
  if(hi2c->Instance==I2C1)
 8003160:	6822      	ldr	r2, [r4, #0]
 8003162:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <HAL_I2C_MspInit+0x58>)
 8003164:	429a      	cmp	r2, r3
 8003166:	d11d      	bne.n	80031a4 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003168:	2002      	movs	r0, #2
 800316a:	f7ff ffe3 	bl	8003134 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800316e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003172:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003174:	2312      	movs	r3, #18
 8003176:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003178:	2301      	movs	r3, #1
 800317a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317c:	2300      	movs	r3, #0
 800317e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003180:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003182:	eb0d 0103 	add.w	r1, sp, r3
 8003186:	4809      	ldr	r0, [pc, #36]	; (80031ac <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003188:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318a:	f7fd fc59 	bl	8000a40 <HAL_GPIO_Init>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800318e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003192:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003194:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003198:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80031a2:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031a4:	b006      	add	sp, #24
 80031a6:	bd10      	pop	{r4, pc}
 80031a8:	40005400 	.word	0x40005400
 80031ac:	48000400 	.word	0x48000400

080031b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b0:	b510      	push	{r4, lr}
 80031b2:	4604      	mov	r4, r0
 80031b4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b6:	2214      	movs	r2, #20
 80031b8:	2100      	movs	r1, #0
 80031ba:	a801      	add	r0, sp, #4
 80031bc:	f000 f9c2 	bl	8003544 <memset>
  if(huart->Instance==USART1)
 80031c0:	6822      	ldr	r2, [r4, #0]
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <HAL_UART_MspInit+0x54>)
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d11a      	bne.n	80031fe <HAL_UART_MspInit+0x4e>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80031c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031cc:	2002      	movs	r0, #2
 80031ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031d4:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80031d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031dc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80031de:	9b00      	ldr	r3, [sp, #0]
 80031e0:	f7ff ffa8 	bl	8003134 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80031e4:	23c0      	movs	r3, #192	; 0xc0
 80031e6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e8:	2302      	movs	r3, #2
 80031ea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031f4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f6:	4804      	ldr	r0, [pc, #16]	; (8003208 <HAL_UART_MspInit+0x58>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031f8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fa:	f7fd fc21 	bl	8000a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031fe:	b006      	add	sp, #24
 8003200:	bd10      	pop	{r4, pc}
 8003202:	bf00      	nop
 8003204:	40013800 	.word	0x40013800
 8003208:	48000400 	.word	0x48000400

0800320c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800320c:	b510      	push	{r4, lr}
 800320e:	4604      	mov	r4, r0
 8003210:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003212:	2214      	movs	r2, #20
 8003214:	2100      	movs	r1, #0
 8003216:	a801      	add	r0, sp, #4
 8003218:	f000 f994 	bl	8003544 <memset>
  if(hpcd->Instance==USB)
 800321c:	6822      	ldr	r2, [r4, #0]
 800321e:	4b11      	ldr	r3, [pc, #68]	; (8003264 <HAL_PCD_MspInit+0x58>)
 8003220:	429a      	cmp	r2, r3
 8003222:	d11c      	bne.n	800325e <HAL_PCD_MspInit+0x52>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003224:	2001      	movs	r0, #1
 8003226:	f7ff ff85 	bl	8003134 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800322a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800322e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800323c:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003242:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003244:	f7fd fbfc 	bl	8000a40 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800324e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003252:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800325a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800325c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800325e:	b006      	add	sp, #24
 8003260:	bd10      	pop	{r4, pc}
 8003262:	bf00      	nop
 8003264:	40006800 	.word	0x40006800

08003268 <NMI_Handler>:
 8003268:	4770      	bx	lr

0800326a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800326a:	e7fe      	b.n	800326a <HardFault_Handler>

0800326c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800326c:	e7fe      	b.n	800326c <MemManage_Handler>

0800326e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800326e:	e7fe      	b.n	800326e <BusFault_Handler>

08003270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003270:	e7fe      	b.n	8003270 <UsageFault_Handler>

08003272 <SVC_Handler>:
 8003272:	4770      	bx	lr

08003274 <DebugMon_Handler>:
 8003274:	4770      	bx	lr

08003276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003276:	4770      	bx	lr

08003278 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003278:	f7fd bb4e 	b.w	8000918 <HAL_IncTick>

0800327c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800327c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//interrupt handler Code that Initiates for ADXL Real-Time Test Mode
	//Call specific adxl init routine and set flag for main while(1)
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); //turn on Green LED
 800327e:	4c0a      	ldr	r4, [pc, #40]	; (80032a8 <EXTI0_IRQHandler+0x2c>)
 8003280:	2201      	movs	r2, #1
 8003282:	4611      	mov	r1, r2
 8003284:	4620      	mov	r0, r4
 8003286:	f7fd fc8d 	bl	8000ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off Red LED
 800328a:	2200      	movs	r2, #0
 800328c:	2102      	movs	r1, #2
 800328e:	4620      	mov	r0, r4
 8003290:	f7fd fc88 	bl	8000ba4 <HAL_GPIO_WritePin>

	runTestRoutine(1);
 8003294:	2001      	movs	r0, #1
 8003296:	f7ff ff43 	bl	8003120 <runTestRoutine>
	adxlInitTestI2C(); //Init routine for Real-Time Test Mode
 800329a:	f7ff fd0d 	bl	8002cb8 <adxlInitTestI2C>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800329e:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80032a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80032a4:	f7fd bc84 	b.w	8000bb0 <HAL_GPIO_EXTI_IRQHandler>
 80032a8:	48000400 	.word	0x48000400

080032ac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80032ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off Green LED
 80032ae:	4c0a      	ldr	r4, [pc, #40]	; (80032d8 <EXTI1_IRQHandler+0x2c>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	4620      	mov	r0, r4
 80032b4:	2101      	movs	r1, #1
 80032b6:	f7fd fc75 	bl	8000ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); //turn on Red LED
 80032ba:	2201      	movs	r2, #1
 80032bc:	2102      	movs	r1, #2
 80032be:	4620      	mov	r0, r4
 80032c0:	f7fd fc70 	bl	8000ba4 <HAL_GPIO_WritePin>

	runTestRoutine(0);
 80032c4:	2000      	movs	r0, #0
 80032c6:	f7ff ff2b 	bl	8003120 <runTestRoutine>
	adxlInitInterruptTest(); //Init routine for Interrupt Test Mode
 80032ca:	f7ff fd2d 	bl	8002d28 <adxlInitInterruptTest>

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80032ce:	2002      	movs	r0, #2
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80032d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80032d4:	f7fd bc6c 	b.w	8000bb0 <HAL_GPIO_EXTI_IRQHandler>
 80032d8:	48000400 	.word	0x48000400

080032dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032dc:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	printf("ADXL Interrupt Occured!\n");
 80032de:	4808      	ldr	r0, [pc, #32]	; (8003300 <EXTI9_5_IRQHandler+0x24>)
 80032e0:	f000 f9ac 	bl	800363c <puts>
	adxlTestMeasure(); //Clears ADXL Interrupts automatically for Data_Ready;
 80032e4:	f7ff fde2 	bl	8002eac <adxlTestMeasure>
	volatile uint8_t regValue1;
	regValue1 = adxlReadRegI2C(REG_INT_SOURCE);
 80032e8:	2030      	movs	r0, #48	; 0x30
 80032ea:	f7ff fccf 	bl	8002c8c <adxlReadRegI2C>
 80032ee:	f88d 0007 	strb.w	r0, [sp, #7]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80032f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80032f6:	f7fd fc5b 	bl	8000bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80032fa:	b003      	add	sp, #12
 80032fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003300:	0800451a 	.word	0x0800451a

08003304 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	460e      	mov	r6, r1
 8003308:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800330a:	460c      	mov	r4, r1
 800330c:	1ba3      	subs	r3, r4, r6
 800330e:	429d      	cmp	r5, r3
 8003310:	dc01      	bgt.n	8003316 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8003312:	4628      	mov	r0, r5
 8003314:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8003316:	f3af 8000 	nop.w
 800331a:	f804 0b01 	strb.w	r0, [r4], #1
 800331e:	e7f5      	b.n	800330c <_read+0x8>

08003320 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003320:	b570      	push	{r4, r5, r6, lr}
 8003322:	460e      	mov	r6, r1
 8003324:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003326:	460c      	mov	r4, r1
 8003328:	1ba3      	subs	r3, r4, r6
 800332a:	429d      	cmp	r5, r3
 800332c:	dc01      	bgt.n	8003332 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800332e:	4628      	mov	r0, r5
 8003330:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8003332:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003336:	f3af 8000 	nop.w
 800333a:	e7f5      	b.n	8003328 <_write+0x8>

0800333c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800333c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <_sbrk+0x2c>)
 8003340:	6819      	ldr	r1, [r3, #0]
{
 8003342:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003344:	b909      	cbnz	r1, 800334a <_sbrk+0xe>
		heap_end = &end;
 8003346:	4909      	ldr	r1, [pc, #36]	; (800336c <_sbrk+0x30>)
 8003348:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800334a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800334c:	4669      	mov	r1, sp
 800334e:	4402      	add	r2, r0
 8003350:	428a      	cmp	r2, r1
 8003352:	d906      	bls.n	8003362 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003354:	f000 f8cc 	bl	80034f0 <__errno>
 8003358:	230c      	movs	r3, #12
 800335a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800335c:	f04f 30ff 	mov.w	r0, #4294967295
 8003360:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003362:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003364:	bd08      	pop	{r3, pc}
 8003366:	bf00      	nop
 8003368:	20000094 	.word	0x20000094
 800336c:	20000418 	.word	0x20000418

08003370 <_close>:

int _close(int file)
{
	return -1;
}
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	4770      	bx	lr

08003376 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003376:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800337a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800337c:	2000      	movs	r0, #0
 800337e:	4770      	bx	lr

08003380 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003380:	2001      	movs	r0, #1
 8003382:	4770      	bx	lr

08003384 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003384:	2000      	movs	r0, #0
 8003386:	4770      	bx	lr

08003388 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <SystemInit+0x60>)
 800338a:	2100      	movs	r1, #0
 800338c:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800338e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003392:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800339a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800339e:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 80033aa:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80033ae:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 80033b6:	4462      	add	r2, ip
 80033b8:	4002      	ands	r2, r0
 80033ba:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80033bc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80033c0:	f022 0205 	bic.w	r2, r2, #5
 80033c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80033c8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80033d4:	4a05      	ldr	r2, [pc, #20]	; (80033ec <SystemInit+0x64>)
 80033d6:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80033d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033e0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80033e2:	6199      	str	r1, [r3, #24]
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000ed00 	.word	0xe000ed00
 80033ec:	22041000 	.word	0x22041000

080033f0 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80033f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033f4:	4924      	ldr	r1, [pc, #144]	; (8003488 <SystemCoreClockUpdate+0x98>)
 80033f6:	6813      	ldr	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f8:	6890      	ldr	r0, [r2, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80033fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033fe:	f000 000c 	and.w	r0, r0, #12
{
 8003402:	b510      	push	{r4, lr}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8003404:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8003408:	4611      	mov	r1, r2
 800340a:	4a20      	ldr	r2, [pc, #128]	; (800348c <SystemCoreClockUpdate+0x9c>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800340c:	280c      	cmp	r0, #12
 800340e:	d839      	bhi.n	8003484 <SystemCoreClockUpdate+0x94>
 8003410:	e8df f000 	tbb	[pc, r0]
 8003414:	38383838 	.word	0x38383838
 8003418:	38383807 	.word	0x38383807
 800341c:	38383816 	.word	0x38383816
 8003420:	18          	.byte	0x18
 8003421:	00          	.byte	0x00
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <SystemCoreClockUpdate+0xa0>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 8003424:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 800342a:	481a      	ldr	r0, [pc, #104]	; (8003494 <SystemCoreClockUpdate+0xa4>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800342c:	6899      	ldr	r1, [r3, #8]
  SystemCoreClock = SystemCoreClock / tmp;
 800342e:	6813      	ldr	r3, [r2, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003430:	f3c1 1103 	ubfx	r1, r1, #4, #4
  SystemCoreClock = SystemCoreClock / tmp;
 8003434:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8003438:	fbb3 f3f1 	udiv	r3, r3, r1
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 8003440:	4b15      	ldr	r3, [pc, #84]	; (8003498 <SystemCoreClockUpdate+0xa8>)
 8003442:	e7ef      	b.n	8003424 <SystemCoreClockUpdate+0x34>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003444:	68c8      	ldr	r0, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003446:	68cb      	ldr	r3, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003448:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800344c:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8003450:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003452:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8003456:	d10e      	bne.n	8003476 <SystemCoreClockUpdate+0x86>
        pllvco = (HSI_VALUE / pllm);
 8003458:	490d      	ldr	r1, [pc, #52]	; (8003490 <SystemCoreClockUpdate+0xa0>)
        pllvco = (HSE_VALUE / pllm);
 800345a:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800345e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003462:	68c8      	ldr	r0, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003464:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003466:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800346a:	0f49      	lsrs	r1, r1, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800346c:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800346e:	3101      	adds	r1, #1
      SystemCoreClock = pllvco/pllr;
 8003470:	fbb3 f3f1 	udiv	r3, r3, r1
 8003474:	e7d6      	b.n	8003424 <SystemCoreClockUpdate+0x34>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8003476:	2803      	cmp	r0, #3
 8003478:	d101      	bne.n	800347e <SystemCoreClockUpdate+0x8e>
        pllvco = (HSE_VALUE / pllm);
 800347a:	4907      	ldr	r1, [pc, #28]	; (8003498 <SystemCoreClockUpdate+0xa8>)
 800347c:	e7ed      	b.n	800345a <SystemCoreClockUpdate+0x6a>
        pllvco = (msirange / pllm);
 800347e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003482:	e7ec      	b.n	800345e <SystemCoreClockUpdate+0x6e>
      SystemCoreClock = msirange;
 8003484:	6014      	str	r4, [r2, #0]
      break;
 8003486:	e7ce      	b.n	8003426 <SystemCoreClockUpdate+0x36>
 8003488:	08004594 	.word	0x08004594
 800348c:	2000000c 	.word	0x2000000c
 8003490:	00f42400 	.word	0x00f42400
 8003494:	08004534 	.word	0x08004534
 8003498:	01e84800 	.word	0x01e84800

0800349c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800349c:	480d      	ldr	r0, [pc, #52]	; (80034d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800349e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034a0:	480d      	ldr	r0, [pc, #52]	; (80034d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80034a2:	490e      	ldr	r1, [pc, #56]	; (80034dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80034a4:	4a0e      	ldr	r2, [pc, #56]	; (80034e0 <LoopForever+0xe>)
  movs r3, #0
 80034a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80034a8:	e002      	b.n	80034b0 <LoopCopyDataInit>

080034aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ae:	3304      	adds	r3, #4

080034b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034b4:	d3f9      	bcc.n	80034aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034b6:	4a0b      	ldr	r2, [pc, #44]	; (80034e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034b8:	4c0b      	ldr	r4, [pc, #44]	; (80034e8 <LoopForever+0x16>)
  movs r3, #0
 80034ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034bc:	e001      	b.n	80034c2 <LoopFillZerobss>

080034be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034c0:	3204      	adds	r2, #4

080034c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034c4:	d3fb      	bcc.n	80034be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80034c6:	f7ff ff5f 	bl	8003388 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80034ca:	f000 f817 	bl	80034fc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80034ce:	f7ff fd67 	bl	8002fa0 <main>

080034d2 <LoopForever>:

LoopForever:
  b LoopForever
 80034d2:	e7fe      	b.n	80034d2 <LoopForever>
  ldr   r0, =_estack
 80034d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80034d8:	20000004 	.word	0x20000004
  ldr r1, =_edata
 80034dc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80034e0:	0800467c 	.word	0x0800467c
  ldr r2, =_sbss
 80034e4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80034e8:	20000414 	.word	0x20000414

080034ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034ec:	e7fe      	b.n	80034ec <ADC1_IRQHandler>
	...

080034f0 <__errno>:
 80034f0:	4b01      	ldr	r3, [pc, #4]	; (80034f8 <__errno+0x8>)
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000010 	.word	0x20000010

080034fc <__libc_init_array>:
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	4e0d      	ldr	r6, [pc, #52]	; (8003534 <__libc_init_array+0x38>)
 8003500:	4c0d      	ldr	r4, [pc, #52]	; (8003538 <__libc_init_array+0x3c>)
 8003502:	1ba4      	subs	r4, r4, r6
 8003504:	10a4      	asrs	r4, r4, #2
 8003506:	2500      	movs	r5, #0
 8003508:	42a5      	cmp	r5, r4
 800350a:	d109      	bne.n	8003520 <__libc_init_array+0x24>
 800350c:	4e0b      	ldr	r6, [pc, #44]	; (800353c <__libc_init_array+0x40>)
 800350e:	4c0c      	ldr	r4, [pc, #48]	; (8003540 <__libc_init_array+0x44>)
 8003510:	f000 ff7c 	bl	800440c <_init>
 8003514:	1ba4      	subs	r4, r4, r6
 8003516:	10a4      	asrs	r4, r4, #2
 8003518:	2500      	movs	r5, #0
 800351a:	42a5      	cmp	r5, r4
 800351c:	d105      	bne.n	800352a <__libc_init_array+0x2e>
 800351e:	bd70      	pop	{r4, r5, r6, pc}
 8003520:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003524:	4798      	blx	r3
 8003526:	3501      	adds	r5, #1
 8003528:	e7ee      	b.n	8003508 <__libc_init_array+0xc>
 800352a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800352e:	4798      	blx	r3
 8003530:	3501      	adds	r5, #1
 8003532:	e7f2      	b.n	800351a <__libc_init_array+0x1e>
 8003534:	08004674 	.word	0x08004674
 8003538:	08004674 	.word	0x08004674
 800353c:	08004674 	.word	0x08004674
 8003540:	08004678 	.word	0x08004678

08003544 <memset>:
 8003544:	4402      	add	r2, r0
 8003546:	4603      	mov	r3, r0
 8003548:	4293      	cmp	r3, r2
 800354a:	d100      	bne.n	800354e <memset+0xa>
 800354c:	4770      	bx	lr
 800354e:	f803 1b01 	strb.w	r1, [r3], #1
 8003552:	e7f9      	b.n	8003548 <memset+0x4>

08003554 <iprintf>:
 8003554:	b40f      	push	{r0, r1, r2, r3}
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <iprintf+0x2c>)
 8003558:	b513      	push	{r0, r1, r4, lr}
 800355a:	681c      	ldr	r4, [r3, #0]
 800355c:	b124      	cbz	r4, 8003568 <iprintf+0x14>
 800355e:	69a3      	ldr	r3, [r4, #24]
 8003560:	b913      	cbnz	r3, 8003568 <iprintf+0x14>
 8003562:	4620      	mov	r0, r4
 8003564:	f000 fa24 	bl	80039b0 <__sinit>
 8003568:	ab05      	add	r3, sp, #20
 800356a:	9a04      	ldr	r2, [sp, #16]
 800356c:	68a1      	ldr	r1, [r4, #8]
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	4620      	mov	r0, r4
 8003572:	f000 fbe1 	bl	8003d38 <_vfiprintf_r>
 8003576:	b002      	add	sp, #8
 8003578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800357c:	b004      	add	sp, #16
 800357e:	4770      	bx	lr
 8003580:	20000010 	.word	0x20000010

08003584 <_puts_r>:
 8003584:	b570      	push	{r4, r5, r6, lr}
 8003586:	460e      	mov	r6, r1
 8003588:	4605      	mov	r5, r0
 800358a:	b118      	cbz	r0, 8003594 <_puts_r+0x10>
 800358c:	6983      	ldr	r3, [r0, #24]
 800358e:	b90b      	cbnz	r3, 8003594 <_puts_r+0x10>
 8003590:	f000 fa0e 	bl	80039b0 <__sinit>
 8003594:	69ab      	ldr	r3, [r5, #24]
 8003596:	68ac      	ldr	r4, [r5, #8]
 8003598:	b913      	cbnz	r3, 80035a0 <_puts_r+0x1c>
 800359a:	4628      	mov	r0, r5
 800359c:	f000 fa08 	bl	80039b0 <__sinit>
 80035a0:	4b23      	ldr	r3, [pc, #140]	; (8003630 <_puts_r+0xac>)
 80035a2:	429c      	cmp	r4, r3
 80035a4:	d117      	bne.n	80035d6 <_puts_r+0x52>
 80035a6:	686c      	ldr	r4, [r5, #4]
 80035a8:	89a3      	ldrh	r3, [r4, #12]
 80035aa:	071b      	lsls	r3, r3, #28
 80035ac:	d51d      	bpl.n	80035ea <_puts_r+0x66>
 80035ae:	6923      	ldr	r3, [r4, #16]
 80035b0:	b1db      	cbz	r3, 80035ea <_puts_r+0x66>
 80035b2:	3e01      	subs	r6, #1
 80035b4:	68a3      	ldr	r3, [r4, #8]
 80035b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035ba:	3b01      	subs	r3, #1
 80035bc:	60a3      	str	r3, [r4, #8]
 80035be:	b9e9      	cbnz	r1, 80035fc <_puts_r+0x78>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	da2e      	bge.n	8003622 <_puts_r+0x9e>
 80035c4:	4622      	mov	r2, r4
 80035c6:	210a      	movs	r1, #10
 80035c8:	4628      	mov	r0, r5
 80035ca:	f000 f83f 	bl	800364c <__swbuf_r>
 80035ce:	3001      	adds	r0, #1
 80035d0:	d011      	beq.n	80035f6 <_puts_r+0x72>
 80035d2:	200a      	movs	r0, #10
 80035d4:	bd70      	pop	{r4, r5, r6, pc}
 80035d6:	4b17      	ldr	r3, [pc, #92]	; (8003634 <_puts_r+0xb0>)
 80035d8:	429c      	cmp	r4, r3
 80035da:	d101      	bne.n	80035e0 <_puts_r+0x5c>
 80035dc:	68ac      	ldr	r4, [r5, #8]
 80035de:	e7e3      	b.n	80035a8 <_puts_r+0x24>
 80035e0:	4b15      	ldr	r3, [pc, #84]	; (8003638 <_puts_r+0xb4>)
 80035e2:	429c      	cmp	r4, r3
 80035e4:	bf08      	it	eq
 80035e6:	68ec      	ldreq	r4, [r5, #12]
 80035e8:	e7de      	b.n	80035a8 <_puts_r+0x24>
 80035ea:	4621      	mov	r1, r4
 80035ec:	4628      	mov	r0, r5
 80035ee:	f000 f87f 	bl	80036f0 <__swsetup_r>
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d0dd      	beq.n	80035b2 <_puts_r+0x2e>
 80035f6:	f04f 30ff 	mov.w	r0, #4294967295
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	da04      	bge.n	800360a <_puts_r+0x86>
 8003600:	69a2      	ldr	r2, [r4, #24]
 8003602:	4293      	cmp	r3, r2
 8003604:	db06      	blt.n	8003614 <_puts_r+0x90>
 8003606:	290a      	cmp	r1, #10
 8003608:	d004      	beq.n	8003614 <_puts_r+0x90>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	6022      	str	r2, [r4, #0]
 8003610:	7019      	strb	r1, [r3, #0]
 8003612:	e7cf      	b.n	80035b4 <_puts_r+0x30>
 8003614:	4622      	mov	r2, r4
 8003616:	4628      	mov	r0, r5
 8003618:	f000 f818 	bl	800364c <__swbuf_r>
 800361c:	3001      	adds	r0, #1
 800361e:	d1c9      	bne.n	80035b4 <_puts_r+0x30>
 8003620:	e7e9      	b.n	80035f6 <_puts_r+0x72>
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	200a      	movs	r0, #10
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	6022      	str	r2, [r4, #0]
 800362a:	7018      	strb	r0, [r3, #0]
 800362c:	bd70      	pop	{r4, r5, r6, pc}
 800362e:	bf00      	nop
 8003630:	080045f8 	.word	0x080045f8
 8003634:	08004618 	.word	0x08004618
 8003638:	080045d8 	.word	0x080045d8

0800363c <puts>:
 800363c:	4b02      	ldr	r3, [pc, #8]	; (8003648 <puts+0xc>)
 800363e:	4601      	mov	r1, r0
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	f7ff bf9f 	b.w	8003584 <_puts_r>
 8003646:	bf00      	nop
 8003648:	20000010 	.word	0x20000010

0800364c <__swbuf_r>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	460e      	mov	r6, r1
 8003650:	4614      	mov	r4, r2
 8003652:	4605      	mov	r5, r0
 8003654:	b118      	cbz	r0, 800365e <__swbuf_r+0x12>
 8003656:	6983      	ldr	r3, [r0, #24]
 8003658:	b90b      	cbnz	r3, 800365e <__swbuf_r+0x12>
 800365a:	f000 f9a9 	bl	80039b0 <__sinit>
 800365e:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <__swbuf_r+0x98>)
 8003660:	429c      	cmp	r4, r3
 8003662:	d12a      	bne.n	80036ba <__swbuf_r+0x6e>
 8003664:	686c      	ldr	r4, [r5, #4]
 8003666:	69a3      	ldr	r3, [r4, #24]
 8003668:	60a3      	str	r3, [r4, #8]
 800366a:	89a3      	ldrh	r3, [r4, #12]
 800366c:	071a      	lsls	r2, r3, #28
 800366e:	d52e      	bpl.n	80036ce <__swbuf_r+0x82>
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	b363      	cbz	r3, 80036ce <__swbuf_r+0x82>
 8003674:	6923      	ldr	r3, [r4, #16]
 8003676:	6820      	ldr	r0, [r4, #0]
 8003678:	1ac0      	subs	r0, r0, r3
 800367a:	6963      	ldr	r3, [r4, #20]
 800367c:	b2f6      	uxtb	r6, r6
 800367e:	4298      	cmp	r0, r3
 8003680:	4637      	mov	r7, r6
 8003682:	db04      	blt.n	800368e <__swbuf_r+0x42>
 8003684:	4621      	mov	r1, r4
 8003686:	4628      	mov	r0, r5
 8003688:	f000 f928 	bl	80038dc <_fflush_r>
 800368c:	bb28      	cbnz	r0, 80036da <__swbuf_r+0x8e>
 800368e:	68a3      	ldr	r3, [r4, #8]
 8003690:	3b01      	subs	r3, #1
 8003692:	60a3      	str	r3, [r4, #8]
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	6022      	str	r2, [r4, #0]
 800369a:	701e      	strb	r6, [r3, #0]
 800369c:	6963      	ldr	r3, [r4, #20]
 800369e:	3001      	adds	r0, #1
 80036a0:	4298      	cmp	r0, r3
 80036a2:	d004      	beq.n	80036ae <__swbuf_r+0x62>
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	07db      	lsls	r3, r3, #31
 80036a8:	d519      	bpl.n	80036de <__swbuf_r+0x92>
 80036aa:	2e0a      	cmp	r6, #10
 80036ac:	d117      	bne.n	80036de <__swbuf_r+0x92>
 80036ae:	4621      	mov	r1, r4
 80036b0:	4628      	mov	r0, r5
 80036b2:	f000 f913 	bl	80038dc <_fflush_r>
 80036b6:	b190      	cbz	r0, 80036de <__swbuf_r+0x92>
 80036b8:	e00f      	b.n	80036da <__swbuf_r+0x8e>
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <__swbuf_r+0x9c>)
 80036bc:	429c      	cmp	r4, r3
 80036be:	d101      	bne.n	80036c4 <__swbuf_r+0x78>
 80036c0:	68ac      	ldr	r4, [r5, #8]
 80036c2:	e7d0      	b.n	8003666 <__swbuf_r+0x1a>
 80036c4:	4b09      	ldr	r3, [pc, #36]	; (80036ec <__swbuf_r+0xa0>)
 80036c6:	429c      	cmp	r4, r3
 80036c8:	bf08      	it	eq
 80036ca:	68ec      	ldreq	r4, [r5, #12]
 80036cc:	e7cb      	b.n	8003666 <__swbuf_r+0x1a>
 80036ce:	4621      	mov	r1, r4
 80036d0:	4628      	mov	r0, r5
 80036d2:	f000 f80d 	bl	80036f0 <__swsetup_r>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d0cc      	beq.n	8003674 <__swbuf_r+0x28>
 80036da:	f04f 37ff 	mov.w	r7, #4294967295
 80036de:	4638      	mov	r0, r7
 80036e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036e2:	bf00      	nop
 80036e4:	080045f8 	.word	0x080045f8
 80036e8:	08004618 	.word	0x08004618
 80036ec:	080045d8 	.word	0x080045d8

080036f0 <__swsetup_r>:
 80036f0:	4b32      	ldr	r3, [pc, #200]	; (80037bc <__swsetup_r+0xcc>)
 80036f2:	b570      	push	{r4, r5, r6, lr}
 80036f4:	681d      	ldr	r5, [r3, #0]
 80036f6:	4606      	mov	r6, r0
 80036f8:	460c      	mov	r4, r1
 80036fa:	b125      	cbz	r5, 8003706 <__swsetup_r+0x16>
 80036fc:	69ab      	ldr	r3, [r5, #24]
 80036fe:	b913      	cbnz	r3, 8003706 <__swsetup_r+0x16>
 8003700:	4628      	mov	r0, r5
 8003702:	f000 f955 	bl	80039b0 <__sinit>
 8003706:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <__swsetup_r+0xd0>)
 8003708:	429c      	cmp	r4, r3
 800370a:	d10f      	bne.n	800372c <__swsetup_r+0x3c>
 800370c:	686c      	ldr	r4, [r5, #4]
 800370e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003712:	b29a      	uxth	r2, r3
 8003714:	0715      	lsls	r5, r2, #28
 8003716:	d42c      	bmi.n	8003772 <__swsetup_r+0x82>
 8003718:	06d0      	lsls	r0, r2, #27
 800371a:	d411      	bmi.n	8003740 <__swsetup_r+0x50>
 800371c:	2209      	movs	r2, #9
 800371e:	6032      	str	r2, [r6, #0]
 8003720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003724:	81a3      	strh	r3, [r4, #12]
 8003726:	f04f 30ff 	mov.w	r0, #4294967295
 800372a:	bd70      	pop	{r4, r5, r6, pc}
 800372c:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <__swsetup_r+0xd4>)
 800372e:	429c      	cmp	r4, r3
 8003730:	d101      	bne.n	8003736 <__swsetup_r+0x46>
 8003732:	68ac      	ldr	r4, [r5, #8]
 8003734:	e7eb      	b.n	800370e <__swsetup_r+0x1e>
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <__swsetup_r+0xd8>)
 8003738:	429c      	cmp	r4, r3
 800373a:	bf08      	it	eq
 800373c:	68ec      	ldreq	r4, [r5, #12]
 800373e:	e7e6      	b.n	800370e <__swsetup_r+0x1e>
 8003740:	0751      	lsls	r1, r2, #29
 8003742:	d512      	bpl.n	800376a <__swsetup_r+0x7a>
 8003744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003746:	b141      	cbz	r1, 800375a <__swsetup_r+0x6a>
 8003748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800374c:	4299      	cmp	r1, r3
 800374e:	d002      	beq.n	8003756 <__swsetup_r+0x66>
 8003750:	4630      	mov	r0, r6
 8003752:	f000 fa1b 	bl	8003b8c <_free_r>
 8003756:	2300      	movs	r3, #0
 8003758:	6363      	str	r3, [r4, #52]	; 0x34
 800375a:	89a3      	ldrh	r3, [r4, #12]
 800375c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003760:	81a3      	strh	r3, [r4, #12]
 8003762:	2300      	movs	r3, #0
 8003764:	6063      	str	r3, [r4, #4]
 8003766:	6923      	ldr	r3, [r4, #16]
 8003768:	6023      	str	r3, [r4, #0]
 800376a:	89a3      	ldrh	r3, [r4, #12]
 800376c:	f043 0308 	orr.w	r3, r3, #8
 8003770:	81a3      	strh	r3, [r4, #12]
 8003772:	6923      	ldr	r3, [r4, #16]
 8003774:	b94b      	cbnz	r3, 800378a <__swsetup_r+0x9a>
 8003776:	89a3      	ldrh	r3, [r4, #12]
 8003778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800377c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003780:	d003      	beq.n	800378a <__swsetup_r+0x9a>
 8003782:	4621      	mov	r1, r4
 8003784:	4630      	mov	r0, r6
 8003786:	f000 f9c1 	bl	8003b0c <__smakebuf_r>
 800378a:	89a2      	ldrh	r2, [r4, #12]
 800378c:	f012 0301 	ands.w	r3, r2, #1
 8003790:	d00c      	beq.n	80037ac <__swsetup_r+0xbc>
 8003792:	2300      	movs	r3, #0
 8003794:	60a3      	str	r3, [r4, #8]
 8003796:	6963      	ldr	r3, [r4, #20]
 8003798:	425b      	negs	r3, r3
 800379a:	61a3      	str	r3, [r4, #24]
 800379c:	6923      	ldr	r3, [r4, #16]
 800379e:	b953      	cbnz	r3, 80037b6 <__swsetup_r+0xc6>
 80037a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80037a8:	d1ba      	bne.n	8003720 <__swsetup_r+0x30>
 80037aa:	bd70      	pop	{r4, r5, r6, pc}
 80037ac:	0792      	lsls	r2, r2, #30
 80037ae:	bf58      	it	pl
 80037b0:	6963      	ldrpl	r3, [r4, #20]
 80037b2:	60a3      	str	r3, [r4, #8]
 80037b4:	e7f2      	b.n	800379c <__swsetup_r+0xac>
 80037b6:	2000      	movs	r0, #0
 80037b8:	e7f7      	b.n	80037aa <__swsetup_r+0xba>
 80037ba:	bf00      	nop
 80037bc:	20000010 	.word	0x20000010
 80037c0:	080045f8 	.word	0x080045f8
 80037c4:	08004618 	.word	0x08004618
 80037c8:	080045d8 	.word	0x080045d8

080037cc <__sflush_r>:
 80037cc:	898a      	ldrh	r2, [r1, #12]
 80037ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037d2:	4605      	mov	r5, r0
 80037d4:	0710      	lsls	r0, r2, #28
 80037d6:	460c      	mov	r4, r1
 80037d8:	d45a      	bmi.n	8003890 <__sflush_r+0xc4>
 80037da:	684b      	ldr	r3, [r1, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	dc05      	bgt.n	80037ec <__sflush_r+0x20>
 80037e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	dc02      	bgt.n	80037ec <__sflush_r+0x20>
 80037e6:	2000      	movs	r0, #0
 80037e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037ee:	2e00      	cmp	r6, #0
 80037f0:	d0f9      	beq.n	80037e6 <__sflush_r+0x1a>
 80037f2:	2300      	movs	r3, #0
 80037f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037f8:	682f      	ldr	r7, [r5, #0]
 80037fa:	602b      	str	r3, [r5, #0]
 80037fc:	d033      	beq.n	8003866 <__sflush_r+0x9a>
 80037fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	075a      	lsls	r2, r3, #29
 8003804:	d505      	bpl.n	8003812 <__sflush_r+0x46>
 8003806:	6863      	ldr	r3, [r4, #4]
 8003808:	1ac0      	subs	r0, r0, r3
 800380a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800380c:	b10b      	cbz	r3, 8003812 <__sflush_r+0x46>
 800380e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003810:	1ac0      	subs	r0, r0, r3
 8003812:	2300      	movs	r3, #0
 8003814:	4602      	mov	r2, r0
 8003816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003818:	6a21      	ldr	r1, [r4, #32]
 800381a:	4628      	mov	r0, r5
 800381c:	47b0      	blx	r6
 800381e:	1c43      	adds	r3, r0, #1
 8003820:	89a3      	ldrh	r3, [r4, #12]
 8003822:	d106      	bne.n	8003832 <__sflush_r+0x66>
 8003824:	6829      	ldr	r1, [r5, #0]
 8003826:	291d      	cmp	r1, #29
 8003828:	d84b      	bhi.n	80038c2 <__sflush_r+0xf6>
 800382a:	4a2b      	ldr	r2, [pc, #172]	; (80038d8 <__sflush_r+0x10c>)
 800382c:	40ca      	lsrs	r2, r1
 800382e:	07d6      	lsls	r6, r2, #31
 8003830:	d547      	bpl.n	80038c2 <__sflush_r+0xf6>
 8003832:	2200      	movs	r2, #0
 8003834:	6062      	str	r2, [r4, #4]
 8003836:	04d9      	lsls	r1, r3, #19
 8003838:	6922      	ldr	r2, [r4, #16]
 800383a:	6022      	str	r2, [r4, #0]
 800383c:	d504      	bpl.n	8003848 <__sflush_r+0x7c>
 800383e:	1c42      	adds	r2, r0, #1
 8003840:	d101      	bne.n	8003846 <__sflush_r+0x7a>
 8003842:	682b      	ldr	r3, [r5, #0]
 8003844:	b903      	cbnz	r3, 8003848 <__sflush_r+0x7c>
 8003846:	6560      	str	r0, [r4, #84]	; 0x54
 8003848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800384a:	602f      	str	r7, [r5, #0]
 800384c:	2900      	cmp	r1, #0
 800384e:	d0ca      	beq.n	80037e6 <__sflush_r+0x1a>
 8003850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003854:	4299      	cmp	r1, r3
 8003856:	d002      	beq.n	800385e <__sflush_r+0x92>
 8003858:	4628      	mov	r0, r5
 800385a:	f000 f997 	bl	8003b8c <_free_r>
 800385e:	2000      	movs	r0, #0
 8003860:	6360      	str	r0, [r4, #52]	; 0x34
 8003862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003866:	6a21      	ldr	r1, [r4, #32]
 8003868:	2301      	movs	r3, #1
 800386a:	4628      	mov	r0, r5
 800386c:	47b0      	blx	r6
 800386e:	1c41      	adds	r1, r0, #1
 8003870:	d1c6      	bne.n	8003800 <__sflush_r+0x34>
 8003872:	682b      	ldr	r3, [r5, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0c3      	beq.n	8003800 <__sflush_r+0x34>
 8003878:	2b1d      	cmp	r3, #29
 800387a:	d001      	beq.n	8003880 <__sflush_r+0xb4>
 800387c:	2b16      	cmp	r3, #22
 800387e:	d101      	bne.n	8003884 <__sflush_r+0xb8>
 8003880:	602f      	str	r7, [r5, #0]
 8003882:	e7b0      	b.n	80037e6 <__sflush_r+0x1a>
 8003884:	89a3      	ldrh	r3, [r4, #12]
 8003886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800388a:	81a3      	strh	r3, [r4, #12]
 800388c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003890:	690f      	ldr	r7, [r1, #16]
 8003892:	2f00      	cmp	r7, #0
 8003894:	d0a7      	beq.n	80037e6 <__sflush_r+0x1a>
 8003896:	0793      	lsls	r3, r2, #30
 8003898:	680e      	ldr	r6, [r1, #0]
 800389a:	bf08      	it	eq
 800389c:	694b      	ldreq	r3, [r1, #20]
 800389e:	600f      	str	r7, [r1, #0]
 80038a0:	bf18      	it	ne
 80038a2:	2300      	movne	r3, #0
 80038a4:	eba6 0807 	sub.w	r8, r6, r7
 80038a8:	608b      	str	r3, [r1, #8]
 80038aa:	f1b8 0f00 	cmp.w	r8, #0
 80038ae:	dd9a      	ble.n	80037e6 <__sflush_r+0x1a>
 80038b0:	4643      	mov	r3, r8
 80038b2:	463a      	mov	r2, r7
 80038b4:	6a21      	ldr	r1, [r4, #32]
 80038b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038b8:	4628      	mov	r0, r5
 80038ba:	47b0      	blx	r6
 80038bc:	2800      	cmp	r0, #0
 80038be:	dc07      	bgt.n	80038d0 <__sflush_r+0x104>
 80038c0:	89a3      	ldrh	r3, [r4, #12]
 80038c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c6:	81a3      	strh	r3, [r4, #12]
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295
 80038cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038d0:	4407      	add	r7, r0
 80038d2:	eba8 0800 	sub.w	r8, r8, r0
 80038d6:	e7e8      	b.n	80038aa <__sflush_r+0xde>
 80038d8:	20400001 	.word	0x20400001

080038dc <_fflush_r>:
 80038dc:	b538      	push	{r3, r4, r5, lr}
 80038de:	690b      	ldr	r3, [r1, #16]
 80038e0:	4605      	mov	r5, r0
 80038e2:	460c      	mov	r4, r1
 80038e4:	b1db      	cbz	r3, 800391e <_fflush_r+0x42>
 80038e6:	b118      	cbz	r0, 80038f0 <_fflush_r+0x14>
 80038e8:	6983      	ldr	r3, [r0, #24]
 80038ea:	b90b      	cbnz	r3, 80038f0 <_fflush_r+0x14>
 80038ec:	f000 f860 	bl	80039b0 <__sinit>
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <_fflush_r+0x48>)
 80038f2:	429c      	cmp	r4, r3
 80038f4:	d109      	bne.n	800390a <_fflush_r+0x2e>
 80038f6:	686c      	ldr	r4, [r5, #4]
 80038f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038fc:	b17b      	cbz	r3, 800391e <_fflush_r+0x42>
 80038fe:	4621      	mov	r1, r4
 8003900:	4628      	mov	r0, r5
 8003902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003906:	f7ff bf61 	b.w	80037cc <__sflush_r>
 800390a:	4b07      	ldr	r3, [pc, #28]	; (8003928 <_fflush_r+0x4c>)
 800390c:	429c      	cmp	r4, r3
 800390e:	d101      	bne.n	8003914 <_fflush_r+0x38>
 8003910:	68ac      	ldr	r4, [r5, #8]
 8003912:	e7f1      	b.n	80038f8 <_fflush_r+0x1c>
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <_fflush_r+0x50>)
 8003916:	429c      	cmp	r4, r3
 8003918:	bf08      	it	eq
 800391a:	68ec      	ldreq	r4, [r5, #12]
 800391c:	e7ec      	b.n	80038f8 <_fflush_r+0x1c>
 800391e:	2000      	movs	r0, #0
 8003920:	bd38      	pop	{r3, r4, r5, pc}
 8003922:	bf00      	nop
 8003924:	080045f8 	.word	0x080045f8
 8003928:	08004618 	.word	0x08004618
 800392c:	080045d8 	.word	0x080045d8

08003930 <_cleanup_r>:
 8003930:	4901      	ldr	r1, [pc, #4]	; (8003938 <_cleanup_r+0x8>)
 8003932:	f000 b8a9 	b.w	8003a88 <_fwalk_reent>
 8003936:	bf00      	nop
 8003938:	080038dd 	.word	0x080038dd

0800393c <std.isra.0>:
 800393c:	2300      	movs	r3, #0
 800393e:	b510      	push	{r4, lr}
 8003940:	4604      	mov	r4, r0
 8003942:	6003      	str	r3, [r0, #0]
 8003944:	6043      	str	r3, [r0, #4]
 8003946:	6083      	str	r3, [r0, #8]
 8003948:	8181      	strh	r1, [r0, #12]
 800394a:	6643      	str	r3, [r0, #100]	; 0x64
 800394c:	81c2      	strh	r2, [r0, #14]
 800394e:	6103      	str	r3, [r0, #16]
 8003950:	6143      	str	r3, [r0, #20]
 8003952:	6183      	str	r3, [r0, #24]
 8003954:	4619      	mov	r1, r3
 8003956:	2208      	movs	r2, #8
 8003958:	305c      	adds	r0, #92	; 0x5c
 800395a:	f7ff fdf3 	bl	8003544 <memset>
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <std.isra.0+0x38>)
 8003960:	6263      	str	r3, [r4, #36]	; 0x24
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <std.isra.0+0x3c>)
 8003964:	62a3      	str	r3, [r4, #40]	; 0x28
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <std.isra.0+0x40>)
 8003968:	62e3      	str	r3, [r4, #44]	; 0x2c
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <std.isra.0+0x44>)
 800396c:	6224      	str	r4, [r4, #32]
 800396e:	6323      	str	r3, [r4, #48]	; 0x30
 8003970:	bd10      	pop	{r4, pc}
 8003972:	bf00      	nop
 8003974:	080042b1 	.word	0x080042b1
 8003978:	080042d3 	.word	0x080042d3
 800397c:	0800430b 	.word	0x0800430b
 8003980:	0800432f 	.word	0x0800432f

08003984 <__sfmoreglue>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	1e4a      	subs	r2, r1, #1
 8003988:	2568      	movs	r5, #104	; 0x68
 800398a:	4355      	muls	r5, r2
 800398c:	460e      	mov	r6, r1
 800398e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003992:	f000 f949 	bl	8003c28 <_malloc_r>
 8003996:	4604      	mov	r4, r0
 8003998:	b140      	cbz	r0, 80039ac <__sfmoreglue+0x28>
 800399a:	2100      	movs	r1, #0
 800399c:	e880 0042 	stmia.w	r0, {r1, r6}
 80039a0:	300c      	adds	r0, #12
 80039a2:	60a0      	str	r0, [r4, #8]
 80039a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039a8:	f7ff fdcc 	bl	8003544 <memset>
 80039ac:	4620      	mov	r0, r4
 80039ae:	bd70      	pop	{r4, r5, r6, pc}

080039b0 <__sinit>:
 80039b0:	6983      	ldr	r3, [r0, #24]
 80039b2:	b510      	push	{r4, lr}
 80039b4:	4604      	mov	r4, r0
 80039b6:	bb33      	cbnz	r3, 8003a06 <__sinit+0x56>
 80039b8:	6483      	str	r3, [r0, #72]	; 0x48
 80039ba:	64c3      	str	r3, [r0, #76]	; 0x4c
 80039bc:	6503      	str	r3, [r0, #80]	; 0x50
 80039be:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <__sinit+0x58>)
 80039c0:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <__sinit+0x5c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6282      	str	r2, [r0, #40]	; 0x28
 80039c6:	4298      	cmp	r0, r3
 80039c8:	bf04      	itt	eq
 80039ca:	2301      	moveq	r3, #1
 80039cc:	6183      	streq	r3, [r0, #24]
 80039ce:	f000 f81f 	bl	8003a10 <__sfp>
 80039d2:	6060      	str	r0, [r4, #4]
 80039d4:	4620      	mov	r0, r4
 80039d6:	f000 f81b 	bl	8003a10 <__sfp>
 80039da:	60a0      	str	r0, [r4, #8]
 80039dc:	4620      	mov	r0, r4
 80039de:	f000 f817 	bl	8003a10 <__sfp>
 80039e2:	2200      	movs	r2, #0
 80039e4:	60e0      	str	r0, [r4, #12]
 80039e6:	2104      	movs	r1, #4
 80039e8:	6860      	ldr	r0, [r4, #4]
 80039ea:	f7ff ffa7 	bl	800393c <std.isra.0>
 80039ee:	2201      	movs	r2, #1
 80039f0:	2109      	movs	r1, #9
 80039f2:	68a0      	ldr	r0, [r4, #8]
 80039f4:	f7ff ffa2 	bl	800393c <std.isra.0>
 80039f8:	2202      	movs	r2, #2
 80039fa:	2112      	movs	r1, #18
 80039fc:	68e0      	ldr	r0, [r4, #12]
 80039fe:	f7ff ff9d 	bl	800393c <std.isra.0>
 8003a02:	2301      	movs	r3, #1
 8003a04:	61a3      	str	r3, [r4, #24]
 8003a06:	bd10      	pop	{r4, pc}
 8003a08:	080045d4 	.word	0x080045d4
 8003a0c:	08003931 	.word	0x08003931

08003a10 <__sfp>:
 8003a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a12:	4b1c      	ldr	r3, [pc, #112]	; (8003a84 <__sfp+0x74>)
 8003a14:	681e      	ldr	r6, [r3, #0]
 8003a16:	69b3      	ldr	r3, [r6, #24]
 8003a18:	4607      	mov	r7, r0
 8003a1a:	b913      	cbnz	r3, 8003a22 <__sfp+0x12>
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f7ff ffc7 	bl	80039b0 <__sinit>
 8003a22:	3648      	adds	r6, #72	; 0x48
 8003a24:	68b4      	ldr	r4, [r6, #8]
 8003a26:	6873      	ldr	r3, [r6, #4]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	d503      	bpl.n	8003a34 <__sfp+0x24>
 8003a2c:	6833      	ldr	r3, [r6, #0]
 8003a2e:	b133      	cbz	r3, 8003a3e <__sfp+0x2e>
 8003a30:	6836      	ldr	r6, [r6, #0]
 8003a32:	e7f7      	b.n	8003a24 <__sfp+0x14>
 8003a34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a38:	b16d      	cbz	r5, 8003a56 <__sfp+0x46>
 8003a3a:	3468      	adds	r4, #104	; 0x68
 8003a3c:	e7f4      	b.n	8003a28 <__sfp+0x18>
 8003a3e:	2104      	movs	r1, #4
 8003a40:	4638      	mov	r0, r7
 8003a42:	f7ff ff9f 	bl	8003984 <__sfmoreglue>
 8003a46:	6030      	str	r0, [r6, #0]
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	d1f1      	bne.n	8003a30 <__sfp+0x20>
 8003a4c:	230c      	movs	r3, #12
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	4604      	mov	r4, r0
 8003a52:	4620      	mov	r0, r4
 8003a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a5a:	81e3      	strh	r3, [r4, #14]
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	81a3      	strh	r3, [r4, #12]
 8003a60:	6665      	str	r5, [r4, #100]	; 0x64
 8003a62:	6025      	str	r5, [r4, #0]
 8003a64:	60a5      	str	r5, [r4, #8]
 8003a66:	6065      	str	r5, [r4, #4]
 8003a68:	6125      	str	r5, [r4, #16]
 8003a6a:	6165      	str	r5, [r4, #20]
 8003a6c:	61a5      	str	r5, [r4, #24]
 8003a6e:	2208      	movs	r2, #8
 8003a70:	4629      	mov	r1, r5
 8003a72:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a76:	f7ff fd65 	bl	8003544 <memset>
 8003a7a:	6365      	str	r5, [r4, #52]	; 0x34
 8003a7c:	63a5      	str	r5, [r4, #56]	; 0x38
 8003a7e:	64a5      	str	r5, [r4, #72]	; 0x48
 8003a80:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003a82:	e7e6      	b.n	8003a52 <__sfp+0x42>
 8003a84:	080045d4 	.word	0x080045d4

08003a88 <_fwalk_reent>:
 8003a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a8c:	4680      	mov	r8, r0
 8003a8e:	4689      	mov	r9, r1
 8003a90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a94:	2600      	movs	r6, #0
 8003a96:	b914      	cbnz	r4, 8003a9e <_fwalk_reent+0x16>
 8003a98:	4630      	mov	r0, r6
 8003a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a9e:	68a5      	ldr	r5, [r4, #8]
 8003aa0:	6867      	ldr	r7, [r4, #4]
 8003aa2:	3f01      	subs	r7, #1
 8003aa4:	d501      	bpl.n	8003aaa <_fwalk_reent+0x22>
 8003aa6:	6824      	ldr	r4, [r4, #0]
 8003aa8:	e7f5      	b.n	8003a96 <_fwalk_reent+0xe>
 8003aaa:	89ab      	ldrh	r3, [r5, #12]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d907      	bls.n	8003ac0 <_fwalk_reent+0x38>
 8003ab0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	d003      	beq.n	8003ac0 <_fwalk_reent+0x38>
 8003ab8:	4629      	mov	r1, r5
 8003aba:	4640      	mov	r0, r8
 8003abc:	47c8      	blx	r9
 8003abe:	4306      	orrs	r6, r0
 8003ac0:	3568      	adds	r5, #104	; 0x68
 8003ac2:	e7ee      	b.n	8003aa2 <_fwalk_reent+0x1a>

08003ac4 <__swhatbuf_r>:
 8003ac4:	b570      	push	{r4, r5, r6, lr}
 8003ac6:	460e      	mov	r6, r1
 8003ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003acc:	2900      	cmp	r1, #0
 8003ace:	b090      	sub	sp, #64	; 0x40
 8003ad0:	4614      	mov	r4, r2
 8003ad2:	461d      	mov	r5, r3
 8003ad4:	da07      	bge.n	8003ae6 <__swhatbuf_r+0x22>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	602b      	str	r3, [r5, #0]
 8003ada:	89b3      	ldrh	r3, [r6, #12]
 8003adc:	061a      	lsls	r2, r3, #24
 8003ade:	d410      	bmi.n	8003b02 <__swhatbuf_r+0x3e>
 8003ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae4:	e00e      	b.n	8003b04 <__swhatbuf_r+0x40>
 8003ae6:	aa01      	add	r2, sp, #4
 8003ae8:	f000 fc48 	bl	800437c <_fstat_r>
 8003aec:	2800      	cmp	r0, #0
 8003aee:	dbf2      	blt.n	8003ad6 <__swhatbuf_r+0x12>
 8003af0:	9a02      	ldr	r2, [sp, #8]
 8003af2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003af6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003afa:	425a      	negs	r2, r3
 8003afc:	415a      	adcs	r2, r3
 8003afe:	602a      	str	r2, [r5, #0]
 8003b00:	e7ee      	b.n	8003ae0 <__swhatbuf_r+0x1c>
 8003b02:	2340      	movs	r3, #64	; 0x40
 8003b04:	2000      	movs	r0, #0
 8003b06:	6023      	str	r3, [r4, #0]
 8003b08:	b010      	add	sp, #64	; 0x40
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}

08003b0c <__smakebuf_r>:
 8003b0c:	898b      	ldrh	r3, [r1, #12]
 8003b0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b10:	079d      	lsls	r5, r3, #30
 8003b12:	4606      	mov	r6, r0
 8003b14:	460c      	mov	r4, r1
 8003b16:	d507      	bpl.n	8003b28 <__smakebuf_r+0x1c>
 8003b18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	6123      	str	r3, [r4, #16]
 8003b20:	2301      	movs	r3, #1
 8003b22:	6163      	str	r3, [r4, #20]
 8003b24:	b002      	add	sp, #8
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	ab01      	add	r3, sp, #4
 8003b2a:	466a      	mov	r2, sp
 8003b2c:	f7ff ffca 	bl	8003ac4 <__swhatbuf_r>
 8003b30:	9900      	ldr	r1, [sp, #0]
 8003b32:	4605      	mov	r5, r0
 8003b34:	4630      	mov	r0, r6
 8003b36:	f000 f877 	bl	8003c28 <_malloc_r>
 8003b3a:	b948      	cbnz	r0, 8003b50 <__smakebuf_r+0x44>
 8003b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b40:	059a      	lsls	r2, r3, #22
 8003b42:	d4ef      	bmi.n	8003b24 <__smakebuf_r+0x18>
 8003b44:	f023 0303 	bic.w	r3, r3, #3
 8003b48:	f043 0302 	orr.w	r3, r3, #2
 8003b4c:	81a3      	strh	r3, [r4, #12]
 8003b4e:	e7e3      	b.n	8003b18 <__smakebuf_r+0xc>
 8003b50:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <__smakebuf_r+0x7c>)
 8003b52:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	6020      	str	r0, [r4, #0]
 8003b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5c:	81a3      	strh	r3, [r4, #12]
 8003b5e:	9b00      	ldr	r3, [sp, #0]
 8003b60:	6163      	str	r3, [r4, #20]
 8003b62:	9b01      	ldr	r3, [sp, #4]
 8003b64:	6120      	str	r0, [r4, #16]
 8003b66:	b15b      	cbz	r3, 8003b80 <__smakebuf_r+0x74>
 8003b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f000 fc17 	bl	80043a0 <_isatty_r>
 8003b72:	b128      	cbz	r0, 8003b80 <__smakebuf_r+0x74>
 8003b74:	89a3      	ldrh	r3, [r4, #12]
 8003b76:	f023 0303 	bic.w	r3, r3, #3
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	81a3      	strh	r3, [r4, #12]
 8003b80:	89a3      	ldrh	r3, [r4, #12]
 8003b82:	431d      	orrs	r5, r3
 8003b84:	81a5      	strh	r5, [r4, #12]
 8003b86:	e7cd      	b.n	8003b24 <__smakebuf_r+0x18>
 8003b88:	08003931 	.word	0x08003931

08003b8c <_free_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4605      	mov	r5, r0
 8003b90:	2900      	cmp	r1, #0
 8003b92:	d045      	beq.n	8003c20 <_free_r+0x94>
 8003b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b98:	1f0c      	subs	r4, r1, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bfb8      	it	lt
 8003b9e:	18e4      	addlt	r4, r4, r3
 8003ba0:	f000 fc20 	bl	80043e4 <__malloc_lock>
 8003ba4:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <_free_r+0x98>)
 8003ba6:	6813      	ldr	r3, [r2, #0]
 8003ba8:	4610      	mov	r0, r2
 8003baa:	b933      	cbnz	r3, 8003bba <_free_r+0x2e>
 8003bac:	6063      	str	r3, [r4, #4]
 8003bae:	6014      	str	r4, [r2, #0]
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bb6:	f000 bc16 	b.w	80043e6 <__malloc_unlock>
 8003bba:	42a3      	cmp	r3, r4
 8003bbc:	d90c      	bls.n	8003bd8 <_free_r+0x4c>
 8003bbe:	6821      	ldr	r1, [r4, #0]
 8003bc0:	1862      	adds	r2, r4, r1
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	bf04      	itt	eq
 8003bc6:	681a      	ldreq	r2, [r3, #0]
 8003bc8:	685b      	ldreq	r3, [r3, #4]
 8003bca:	6063      	str	r3, [r4, #4]
 8003bcc:	bf04      	itt	eq
 8003bce:	1852      	addeq	r2, r2, r1
 8003bd0:	6022      	streq	r2, [r4, #0]
 8003bd2:	6004      	str	r4, [r0, #0]
 8003bd4:	e7ec      	b.n	8003bb0 <_free_r+0x24>
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	b10a      	cbz	r2, 8003be0 <_free_r+0x54>
 8003bdc:	42a2      	cmp	r2, r4
 8003bde:	d9fa      	bls.n	8003bd6 <_free_r+0x4a>
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	1858      	adds	r0, r3, r1
 8003be4:	42a0      	cmp	r0, r4
 8003be6:	d10b      	bne.n	8003c00 <_free_r+0x74>
 8003be8:	6820      	ldr	r0, [r4, #0]
 8003bea:	4401      	add	r1, r0
 8003bec:	1858      	adds	r0, r3, r1
 8003bee:	4282      	cmp	r2, r0
 8003bf0:	6019      	str	r1, [r3, #0]
 8003bf2:	d1dd      	bne.n	8003bb0 <_free_r+0x24>
 8003bf4:	6810      	ldr	r0, [r2, #0]
 8003bf6:	6852      	ldr	r2, [r2, #4]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	4401      	add	r1, r0
 8003bfc:	6019      	str	r1, [r3, #0]
 8003bfe:	e7d7      	b.n	8003bb0 <_free_r+0x24>
 8003c00:	d902      	bls.n	8003c08 <_free_r+0x7c>
 8003c02:	230c      	movs	r3, #12
 8003c04:	602b      	str	r3, [r5, #0]
 8003c06:	e7d3      	b.n	8003bb0 <_free_r+0x24>
 8003c08:	6820      	ldr	r0, [r4, #0]
 8003c0a:	1821      	adds	r1, r4, r0
 8003c0c:	428a      	cmp	r2, r1
 8003c0e:	bf04      	itt	eq
 8003c10:	6811      	ldreq	r1, [r2, #0]
 8003c12:	6852      	ldreq	r2, [r2, #4]
 8003c14:	6062      	str	r2, [r4, #4]
 8003c16:	bf04      	itt	eq
 8003c18:	1809      	addeq	r1, r1, r0
 8003c1a:	6021      	streq	r1, [r4, #0]
 8003c1c:	605c      	str	r4, [r3, #4]
 8003c1e:	e7c7      	b.n	8003bb0 <_free_r+0x24>
 8003c20:	bd38      	pop	{r3, r4, r5, pc}
 8003c22:	bf00      	nop
 8003c24:	20000098 	.word	0x20000098

08003c28 <_malloc_r>:
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	1ccd      	adds	r5, r1, #3
 8003c2c:	f025 0503 	bic.w	r5, r5, #3
 8003c30:	3508      	adds	r5, #8
 8003c32:	2d0c      	cmp	r5, #12
 8003c34:	bf38      	it	cc
 8003c36:	250c      	movcc	r5, #12
 8003c38:	2d00      	cmp	r5, #0
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	db01      	blt.n	8003c42 <_malloc_r+0x1a>
 8003c3e:	42a9      	cmp	r1, r5
 8003c40:	d903      	bls.n	8003c4a <_malloc_r+0x22>
 8003c42:	230c      	movs	r3, #12
 8003c44:	6033      	str	r3, [r6, #0]
 8003c46:	2000      	movs	r0, #0
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
 8003c4a:	f000 fbcb 	bl	80043e4 <__malloc_lock>
 8003c4e:	4a23      	ldr	r2, [pc, #140]	; (8003cdc <_malloc_r+0xb4>)
 8003c50:	6814      	ldr	r4, [r2, #0]
 8003c52:	4621      	mov	r1, r4
 8003c54:	b991      	cbnz	r1, 8003c7c <_malloc_r+0x54>
 8003c56:	4c22      	ldr	r4, [pc, #136]	; (8003ce0 <_malloc_r+0xb8>)
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	b91b      	cbnz	r3, 8003c64 <_malloc_r+0x3c>
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	f000 fb17 	bl	8004290 <_sbrk_r>
 8003c62:	6020      	str	r0, [r4, #0]
 8003c64:	4629      	mov	r1, r5
 8003c66:	4630      	mov	r0, r6
 8003c68:	f000 fb12 	bl	8004290 <_sbrk_r>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d126      	bne.n	8003cbe <_malloc_r+0x96>
 8003c70:	230c      	movs	r3, #12
 8003c72:	6033      	str	r3, [r6, #0]
 8003c74:	4630      	mov	r0, r6
 8003c76:	f000 fbb6 	bl	80043e6 <__malloc_unlock>
 8003c7a:	e7e4      	b.n	8003c46 <_malloc_r+0x1e>
 8003c7c:	680b      	ldr	r3, [r1, #0]
 8003c7e:	1b5b      	subs	r3, r3, r5
 8003c80:	d41a      	bmi.n	8003cb8 <_malloc_r+0x90>
 8003c82:	2b0b      	cmp	r3, #11
 8003c84:	d90f      	bls.n	8003ca6 <_malloc_r+0x7e>
 8003c86:	600b      	str	r3, [r1, #0]
 8003c88:	50cd      	str	r5, [r1, r3]
 8003c8a:	18cc      	adds	r4, r1, r3
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f000 fbaa 	bl	80043e6 <__malloc_unlock>
 8003c92:	f104 000b 	add.w	r0, r4, #11
 8003c96:	1d23      	adds	r3, r4, #4
 8003c98:	f020 0007 	bic.w	r0, r0, #7
 8003c9c:	1ac3      	subs	r3, r0, r3
 8003c9e:	d01b      	beq.n	8003cd8 <_malloc_r+0xb0>
 8003ca0:	425a      	negs	r2, r3
 8003ca2:	50e2      	str	r2, [r4, r3]
 8003ca4:	bd70      	pop	{r4, r5, r6, pc}
 8003ca6:	428c      	cmp	r4, r1
 8003ca8:	bf0d      	iteet	eq
 8003caa:	6863      	ldreq	r3, [r4, #4]
 8003cac:	684b      	ldrne	r3, [r1, #4]
 8003cae:	6063      	strne	r3, [r4, #4]
 8003cb0:	6013      	streq	r3, [r2, #0]
 8003cb2:	bf18      	it	ne
 8003cb4:	460c      	movne	r4, r1
 8003cb6:	e7e9      	b.n	8003c8c <_malloc_r+0x64>
 8003cb8:	460c      	mov	r4, r1
 8003cba:	6849      	ldr	r1, [r1, #4]
 8003cbc:	e7ca      	b.n	8003c54 <_malloc_r+0x2c>
 8003cbe:	1cc4      	adds	r4, r0, #3
 8003cc0:	f024 0403 	bic.w	r4, r4, #3
 8003cc4:	42a0      	cmp	r0, r4
 8003cc6:	d005      	beq.n	8003cd4 <_malloc_r+0xac>
 8003cc8:	1a21      	subs	r1, r4, r0
 8003cca:	4630      	mov	r0, r6
 8003ccc:	f000 fae0 	bl	8004290 <_sbrk_r>
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	d0cd      	beq.n	8003c70 <_malloc_r+0x48>
 8003cd4:	6025      	str	r5, [r4, #0]
 8003cd6:	e7d9      	b.n	8003c8c <_malloc_r+0x64>
 8003cd8:	bd70      	pop	{r4, r5, r6, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000098 	.word	0x20000098
 8003ce0:	2000009c 	.word	0x2000009c

08003ce4 <__sfputc_r>:
 8003ce4:	6893      	ldr	r3, [r2, #8]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	b410      	push	{r4}
 8003cec:	6093      	str	r3, [r2, #8]
 8003cee:	da09      	bge.n	8003d04 <__sfputc_r+0x20>
 8003cf0:	6994      	ldr	r4, [r2, #24]
 8003cf2:	42a3      	cmp	r3, r4
 8003cf4:	db02      	blt.n	8003cfc <__sfputc_r+0x18>
 8003cf6:	b2cb      	uxtb	r3, r1
 8003cf8:	2b0a      	cmp	r3, #10
 8003cfa:	d103      	bne.n	8003d04 <__sfputc_r+0x20>
 8003cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d00:	f7ff bca4 	b.w	800364c <__swbuf_r>
 8003d04:	6813      	ldr	r3, [r2, #0]
 8003d06:	1c58      	adds	r0, r3, #1
 8003d08:	6010      	str	r0, [r2, #0]
 8003d0a:	7019      	strb	r1, [r3, #0]
 8003d0c:	b2c8      	uxtb	r0, r1
 8003d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <__sfputs_r>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	4606      	mov	r6, r0
 8003d18:	460f      	mov	r7, r1
 8003d1a:	4614      	mov	r4, r2
 8003d1c:	18d5      	adds	r5, r2, r3
 8003d1e:	42ac      	cmp	r4, r5
 8003d20:	d101      	bne.n	8003d26 <__sfputs_r+0x12>
 8003d22:	2000      	movs	r0, #0
 8003d24:	e007      	b.n	8003d36 <__sfputs_r+0x22>
 8003d26:	463a      	mov	r2, r7
 8003d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	f7ff ffd9 	bl	8003ce4 <__sfputc_r>
 8003d32:	1c43      	adds	r3, r0, #1
 8003d34:	d1f3      	bne.n	8003d1e <__sfputs_r+0xa>
 8003d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d38 <_vfiprintf_r>:
 8003d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d3c:	b09d      	sub	sp, #116	; 0x74
 8003d3e:	460c      	mov	r4, r1
 8003d40:	4617      	mov	r7, r2
 8003d42:	9303      	str	r3, [sp, #12]
 8003d44:	4606      	mov	r6, r0
 8003d46:	b118      	cbz	r0, 8003d50 <_vfiprintf_r+0x18>
 8003d48:	6983      	ldr	r3, [r0, #24]
 8003d4a:	b90b      	cbnz	r3, 8003d50 <_vfiprintf_r+0x18>
 8003d4c:	f7ff fe30 	bl	80039b0 <__sinit>
 8003d50:	4b7c      	ldr	r3, [pc, #496]	; (8003f44 <_vfiprintf_r+0x20c>)
 8003d52:	429c      	cmp	r4, r3
 8003d54:	d157      	bne.n	8003e06 <_vfiprintf_r+0xce>
 8003d56:	6874      	ldr	r4, [r6, #4]
 8003d58:	89a3      	ldrh	r3, [r4, #12]
 8003d5a:	0718      	lsls	r0, r3, #28
 8003d5c:	d55d      	bpl.n	8003e1a <_vfiprintf_r+0xe2>
 8003d5e:	6923      	ldr	r3, [r4, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d05a      	beq.n	8003e1a <_vfiprintf_r+0xe2>
 8003d64:	2300      	movs	r3, #0
 8003d66:	9309      	str	r3, [sp, #36]	; 0x24
 8003d68:	2320      	movs	r3, #32
 8003d6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d6e:	2330      	movs	r3, #48	; 0x30
 8003d70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d74:	f04f 0b01 	mov.w	fp, #1
 8003d78:	46b8      	mov	r8, r7
 8003d7a:	4645      	mov	r5, r8
 8003d7c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d155      	bne.n	8003e30 <_vfiprintf_r+0xf8>
 8003d84:	ebb8 0a07 	subs.w	sl, r8, r7
 8003d88:	d00b      	beq.n	8003da2 <_vfiprintf_r+0x6a>
 8003d8a:	4653      	mov	r3, sl
 8003d8c:	463a      	mov	r2, r7
 8003d8e:	4621      	mov	r1, r4
 8003d90:	4630      	mov	r0, r6
 8003d92:	f7ff ffbf 	bl	8003d14 <__sfputs_r>
 8003d96:	3001      	adds	r0, #1
 8003d98:	f000 80c4 	beq.w	8003f24 <_vfiprintf_r+0x1ec>
 8003d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d9e:	4453      	add	r3, sl
 8003da0:	9309      	str	r3, [sp, #36]	; 0x24
 8003da2:	f898 3000 	ldrb.w	r3, [r8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80bc 	beq.w	8003f24 <_vfiprintf_r+0x1ec>
 8003dac:	2300      	movs	r3, #0
 8003dae:	f04f 32ff 	mov.w	r2, #4294967295
 8003db2:	9304      	str	r3, [sp, #16]
 8003db4:	9307      	str	r3, [sp, #28]
 8003db6:	9205      	str	r2, [sp, #20]
 8003db8:	9306      	str	r3, [sp, #24]
 8003dba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dbe:	931a      	str	r3, [sp, #104]	; 0x68
 8003dc0:	2205      	movs	r2, #5
 8003dc2:	7829      	ldrb	r1, [r5, #0]
 8003dc4:	4860      	ldr	r0, [pc, #384]	; (8003f48 <_vfiprintf_r+0x210>)
 8003dc6:	f7fc f9db 	bl	8000180 <memchr>
 8003dca:	f105 0801 	add.w	r8, r5, #1
 8003dce:	9b04      	ldr	r3, [sp, #16]
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d131      	bne.n	8003e38 <_vfiprintf_r+0x100>
 8003dd4:	06d9      	lsls	r1, r3, #27
 8003dd6:	bf44      	itt	mi
 8003dd8:	2220      	movmi	r2, #32
 8003dda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003dde:	071a      	lsls	r2, r3, #28
 8003de0:	bf44      	itt	mi
 8003de2:	222b      	movmi	r2, #43	; 0x2b
 8003de4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003de8:	782a      	ldrb	r2, [r5, #0]
 8003dea:	2a2a      	cmp	r2, #42	; 0x2a
 8003dec:	d02c      	beq.n	8003e48 <_vfiprintf_r+0x110>
 8003dee:	9a07      	ldr	r2, [sp, #28]
 8003df0:	2100      	movs	r1, #0
 8003df2:	200a      	movs	r0, #10
 8003df4:	46a8      	mov	r8, r5
 8003df6:	3501      	adds	r5, #1
 8003df8:	f898 3000 	ldrb.w	r3, [r8]
 8003dfc:	3b30      	subs	r3, #48	; 0x30
 8003dfe:	2b09      	cmp	r3, #9
 8003e00:	d96d      	bls.n	8003ede <_vfiprintf_r+0x1a6>
 8003e02:	b371      	cbz	r1, 8003e62 <_vfiprintf_r+0x12a>
 8003e04:	e026      	b.n	8003e54 <_vfiprintf_r+0x11c>
 8003e06:	4b51      	ldr	r3, [pc, #324]	; (8003f4c <_vfiprintf_r+0x214>)
 8003e08:	429c      	cmp	r4, r3
 8003e0a:	d101      	bne.n	8003e10 <_vfiprintf_r+0xd8>
 8003e0c:	68b4      	ldr	r4, [r6, #8]
 8003e0e:	e7a3      	b.n	8003d58 <_vfiprintf_r+0x20>
 8003e10:	4b4f      	ldr	r3, [pc, #316]	; (8003f50 <_vfiprintf_r+0x218>)
 8003e12:	429c      	cmp	r4, r3
 8003e14:	bf08      	it	eq
 8003e16:	68f4      	ldreq	r4, [r6, #12]
 8003e18:	e79e      	b.n	8003d58 <_vfiprintf_r+0x20>
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f7ff fc67 	bl	80036f0 <__swsetup_r>
 8003e22:	2800      	cmp	r0, #0
 8003e24:	d09e      	beq.n	8003d64 <_vfiprintf_r+0x2c>
 8003e26:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2a:	b01d      	add	sp, #116	; 0x74
 8003e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e30:	2b25      	cmp	r3, #37	; 0x25
 8003e32:	d0a7      	beq.n	8003d84 <_vfiprintf_r+0x4c>
 8003e34:	46a8      	mov	r8, r5
 8003e36:	e7a0      	b.n	8003d7a <_vfiprintf_r+0x42>
 8003e38:	4a43      	ldr	r2, [pc, #268]	; (8003f48 <_vfiprintf_r+0x210>)
 8003e3a:	1a80      	subs	r0, r0, r2
 8003e3c:	fa0b f000 	lsl.w	r0, fp, r0
 8003e40:	4318      	orrs	r0, r3
 8003e42:	9004      	str	r0, [sp, #16]
 8003e44:	4645      	mov	r5, r8
 8003e46:	e7bb      	b.n	8003dc0 <_vfiprintf_r+0x88>
 8003e48:	9a03      	ldr	r2, [sp, #12]
 8003e4a:	1d11      	adds	r1, r2, #4
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	9103      	str	r1, [sp, #12]
 8003e50:	2a00      	cmp	r2, #0
 8003e52:	db01      	blt.n	8003e58 <_vfiprintf_r+0x120>
 8003e54:	9207      	str	r2, [sp, #28]
 8003e56:	e004      	b.n	8003e62 <_vfiprintf_r+0x12a>
 8003e58:	4252      	negs	r2, r2
 8003e5a:	f043 0302 	orr.w	r3, r3, #2
 8003e5e:	9207      	str	r2, [sp, #28]
 8003e60:	9304      	str	r3, [sp, #16]
 8003e62:	f898 3000 	ldrb.w	r3, [r8]
 8003e66:	2b2e      	cmp	r3, #46	; 0x2e
 8003e68:	d110      	bne.n	8003e8c <_vfiprintf_r+0x154>
 8003e6a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e70:	f108 0101 	add.w	r1, r8, #1
 8003e74:	d137      	bne.n	8003ee6 <_vfiprintf_r+0x1ae>
 8003e76:	9b03      	ldr	r3, [sp, #12]
 8003e78:	1d1a      	adds	r2, r3, #4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	9203      	str	r2, [sp, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bfb8      	it	lt
 8003e82:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e86:	f108 0802 	add.w	r8, r8, #2
 8003e8a:	9305      	str	r3, [sp, #20]
 8003e8c:	4d31      	ldr	r5, [pc, #196]	; (8003f54 <_vfiprintf_r+0x21c>)
 8003e8e:	f898 1000 	ldrb.w	r1, [r8]
 8003e92:	2203      	movs	r2, #3
 8003e94:	4628      	mov	r0, r5
 8003e96:	f7fc f973 	bl	8000180 <memchr>
 8003e9a:	b140      	cbz	r0, 8003eae <_vfiprintf_r+0x176>
 8003e9c:	2340      	movs	r3, #64	; 0x40
 8003e9e:	1b40      	subs	r0, r0, r5
 8003ea0:	fa03 f000 	lsl.w	r0, r3, r0
 8003ea4:	9b04      	ldr	r3, [sp, #16]
 8003ea6:	4303      	orrs	r3, r0
 8003ea8:	9304      	str	r3, [sp, #16]
 8003eaa:	f108 0801 	add.w	r8, r8, #1
 8003eae:	f898 1000 	ldrb.w	r1, [r8]
 8003eb2:	4829      	ldr	r0, [pc, #164]	; (8003f58 <_vfiprintf_r+0x220>)
 8003eb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eb8:	2206      	movs	r2, #6
 8003eba:	f108 0701 	add.w	r7, r8, #1
 8003ebe:	f7fc f95f 	bl	8000180 <memchr>
 8003ec2:	2800      	cmp	r0, #0
 8003ec4:	d034      	beq.n	8003f30 <_vfiprintf_r+0x1f8>
 8003ec6:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <_vfiprintf_r+0x224>)
 8003ec8:	bb03      	cbnz	r3, 8003f0c <_vfiprintf_r+0x1d4>
 8003eca:	9b03      	ldr	r3, [sp, #12]
 8003ecc:	3307      	adds	r3, #7
 8003ece:	f023 0307 	bic.w	r3, r3, #7
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	9303      	str	r3, [sp, #12]
 8003ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed8:	444b      	add	r3, r9
 8003eda:	9309      	str	r3, [sp, #36]	; 0x24
 8003edc:	e74c      	b.n	8003d78 <_vfiprintf_r+0x40>
 8003ede:	fb00 3202 	mla	r2, r0, r2, r3
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	e786      	b.n	8003df4 <_vfiprintf_r+0xbc>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	9305      	str	r3, [sp, #20]
 8003eea:	4618      	mov	r0, r3
 8003eec:	250a      	movs	r5, #10
 8003eee:	4688      	mov	r8, r1
 8003ef0:	3101      	adds	r1, #1
 8003ef2:	f898 2000 	ldrb.w	r2, [r8]
 8003ef6:	3a30      	subs	r2, #48	; 0x30
 8003ef8:	2a09      	cmp	r2, #9
 8003efa:	d903      	bls.n	8003f04 <_vfiprintf_r+0x1cc>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0c5      	beq.n	8003e8c <_vfiprintf_r+0x154>
 8003f00:	9005      	str	r0, [sp, #20]
 8003f02:	e7c3      	b.n	8003e8c <_vfiprintf_r+0x154>
 8003f04:	fb05 2000 	mla	r0, r5, r0, r2
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e7f0      	b.n	8003eee <_vfiprintf_r+0x1b6>
 8003f0c:	ab03      	add	r3, sp, #12
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	4622      	mov	r2, r4
 8003f12:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <_vfiprintf_r+0x228>)
 8003f14:	a904      	add	r1, sp, #16
 8003f16:	4630      	mov	r0, r6
 8003f18:	f3af 8000 	nop.w
 8003f1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f20:	4681      	mov	r9, r0
 8003f22:	d1d8      	bne.n	8003ed6 <_vfiprintf_r+0x19e>
 8003f24:	89a3      	ldrh	r3, [r4, #12]
 8003f26:	065b      	lsls	r3, r3, #25
 8003f28:	f53f af7d 	bmi.w	8003e26 <_vfiprintf_r+0xee>
 8003f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f2e:	e77c      	b.n	8003e2a <_vfiprintf_r+0xf2>
 8003f30:	ab03      	add	r3, sp, #12
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	4622      	mov	r2, r4
 8003f36:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <_vfiprintf_r+0x228>)
 8003f38:	a904      	add	r1, sp, #16
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f000 f888 	bl	8004050 <_printf_i>
 8003f40:	e7ec      	b.n	8003f1c <_vfiprintf_r+0x1e4>
 8003f42:	bf00      	nop
 8003f44:	080045f8 	.word	0x080045f8
 8003f48:	08004638 	.word	0x08004638
 8003f4c:	08004618 	.word	0x08004618
 8003f50:	080045d8 	.word	0x080045d8
 8003f54:	0800463e 	.word	0x0800463e
 8003f58:	08004642 	.word	0x08004642
 8003f5c:	00000000 	.word	0x00000000
 8003f60:	08003d15 	.word	0x08003d15

08003f64 <_printf_common>:
 8003f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	4691      	mov	r9, r2
 8003f6a:	461f      	mov	r7, r3
 8003f6c:	688a      	ldr	r2, [r1, #8]
 8003f6e:	690b      	ldr	r3, [r1, #16]
 8003f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f74:	4293      	cmp	r3, r2
 8003f76:	bfb8      	it	lt
 8003f78:	4613      	movlt	r3, r2
 8003f7a:	f8c9 3000 	str.w	r3, [r9]
 8003f7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f82:	4606      	mov	r6, r0
 8003f84:	460c      	mov	r4, r1
 8003f86:	b112      	cbz	r2, 8003f8e <_printf_common+0x2a>
 8003f88:	3301      	adds	r3, #1
 8003f8a:	f8c9 3000 	str.w	r3, [r9]
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	0699      	lsls	r1, r3, #26
 8003f92:	bf42      	ittt	mi
 8003f94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f98:	3302      	addmi	r3, #2
 8003f9a:	f8c9 3000 	strmi.w	r3, [r9]
 8003f9e:	6825      	ldr	r5, [r4, #0]
 8003fa0:	f015 0506 	ands.w	r5, r5, #6
 8003fa4:	d107      	bne.n	8003fb6 <_printf_common+0x52>
 8003fa6:	f104 0a19 	add.w	sl, r4, #25
 8003faa:	68e3      	ldr	r3, [r4, #12]
 8003fac:	f8d9 2000 	ldr.w	r2, [r9]
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	429d      	cmp	r5, r3
 8003fb4:	db29      	blt.n	800400a <_printf_common+0xa6>
 8003fb6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	3300      	adds	r3, #0
 8003fbe:	bf18      	it	ne
 8003fc0:	2301      	movne	r3, #1
 8003fc2:	0692      	lsls	r2, r2, #26
 8003fc4:	d42e      	bmi.n	8004024 <_printf_common+0xc0>
 8003fc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fca:	4639      	mov	r1, r7
 8003fcc:	4630      	mov	r0, r6
 8003fce:	47c0      	blx	r8
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	d021      	beq.n	8004018 <_printf_common+0xb4>
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	68e5      	ldr	r5, [r4, #12]
 8003fd8:	f8d9 2000 	ldr.w	r2, [r9]
 8003fdc:	f003 0306 	and.w	r3, r3, #6
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	bf08      	it	eq
 8003fe4:	1aad      	subeq	r5, r5, r2
 8003fe6:	68a3      	ldr	r3, [r4, #8]
 8003fe8:	6922      	ldr	r2, [r4, #16]
 8003fea:	bf0c      	ite	eq
 8003fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ff0:	2500      	movne	r5, #0
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	bfc4      	itt	gt
 8003ff6:	1a9b      	subgt	r3, r3, r2
 8003ff8:	18ed      	addgt	r5, r5, r3
 8003ffa:	f04f 0900 	mov.w	r9, #0
 8003ffe:	341a      	adds	r4, #26
 8004000:	454d      	cmp	r5, r9
 8004002:	d11b      	bne.n	800403c <_printf_common+0xd8>
 8004004:	2000      	movs	r0, #0
 8004006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400a:	2301      	movs	r3, #1
 800400c:	4652      	mov	r2, sl
 800400e:	4639      	mov	r1, r7
 8004010:	4630      	mov	r0, r6
 8004012:	47c0      	blx	r8
 8004014:	3001      	adds	r0, #1
 8004016:	d103      	bne.n	8004020 <_printf_common+0xbc>
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004020:	3501      	adds	r5, #1
 8004022:	e7c2      	b.n	8003faa <_printf_common+0x46>
 8004024:	18e1      	adds	r1, r4, r3
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	2030      	movs	r0, #48	; 0x30
 800402a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800402e:	4422      	add	r2, r4
 8004030:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004034:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004038:	3302      	adds	r3, #2
 800403a:	e7c4      	b.n	8003fc6 <_printf_common+0x62>
 800403c:	2301      	movs	r3, #1
 800403e:	4622      	mov	r2, r4
 8004040:	4639      	mov	r1, r7
 8004042:	4630      	mov	r0, r6
 8004044:	47c0      	blx	r8
 8004046:	3001      	adds	r0, #1
 8004048:	d0e6      	beq.n	8004018 <_printf_common+0xb4>
 800404a:	f109 0901 	add.w	r9, r9, #1
 800404e:	e7d7      	b.n	8004000 <_printf_common+0x9c>

08004050 <_printf_i>:
 8004050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004054:	4617      	mov	r7, r2
 8004056:	7e0a      	ldrb	r2, [r1, #24]
 8004058:	b085      	sub	sp, #20
 800405a:	2a6e      	cmp	r2, #110	; 0x6e
 800405c:	4698      	mov	r8, r3
 800405e:	4606      	mov	r6, r0
 8004060:	460c      	mov	r4, r1
 8004062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004064:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004068:	f000 80bc 	beq.w	80041e4 <_printf_i+0x194>
 800406c:	d81a      	bhi.n	80040a4 <_printf_i+0x54>
 800406e:	2a63      	cmp	r2, #99	; 0x63
 8004070:	d02e      	beq.n	80040d0 <_printf_i+0x80>
 8004072:	d80a      	bhi.n	800408a <_printf_i+0x3a>
 8004074:	2a00      	cmp	r2, #0
 8004076:	f000 80c8 	beq.w	800420a <_printf_i+0x1ba>
 800407a:	2a58      	cmp	r2, #88	; 0x58
 800407c:	f000 808a 	beq.w	8004194 <_printf_i+0x144>
 8004080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004084:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004088:	e02a      	b.n	80040e0 <_printf_i+0x90>
 800408a:	2a64      	cmp	r2, #100	; 0x64
 800408c:	d001      	beq.n	8004092 <_printf_i+0x42>
 800408e:	2a69      	cmp	r2, #105	; 0x69
 8004090:	d1f6      	bne.n	8004080 <_printf_i+0x30>
 8004092:	6821      	ldr	r1, [r4, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	f011 0f80 	tst.w	r1, #128	; 0x80
 800409a:	d023      	beq.n	80040e4 <_printf_i+0x94>
 800409c:	1d11      	adds	r1, r2, #4
 800409e:	6019      	str	r1, [r3, #0]
 80040a0:	6813      	ldr	r3, [r2, #0]
 80040a2:	e027      	b.n	80040f4 <_printf_i+0xa4>
 80040a4:	2a73      	cmp	r2, #115	; 0x73
 80040a6:	f000 80b4 	beq.w	8004212 <_printf_i+0x1c2>
 80040aa:	d808      	bhi.n	80040be <_printf_i+0x6e>
 80040ac:	2a6f      	cmp	r2, #111	; 0x6f
 80040ae:	d02a      	beq.n	8004106 <_printf_i+0xb6>
 80040b0:	2a70      	cmp	r2, #112	; 0x70
 80040b2:	d1e5      	bne.n	8004080 <_printf_i+0x30>
 80040b4:	680a      	ldr	r2, [r1, #0]
 80040b6:	f042 0220 	orr.w	r2, r2, #32
 80040ba:	600a      	str	r2, [r1, #0]
 80040bc:	e003      	b.n	80040c6 <_printf_i+0x76>
 80040be:	2a75      	cmp	r2, #117	; 0x75
 80040c0:	d021      	beq.n	8004106 <_printf_i+0xb6>
 80040c2:	2a78      	cmp	r2, #120	; 0x78
 80040c4:	d1dc      	bne.n	8004080 <_printf_i+0x30>
 80040c6:	2278      	movs	r2, #120	; 0x78
 80040c8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80040cc:	496e      	ldr	r1, [pc, #440]	; (8004288 <_printf_i+0x238>)
 80040ce:	e064      	b.n	800419a <_printf_i+0x14a>
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80040d6:	1d11      	adds	r1, r2, #4
 80040d8:	6019      	str	r1, [r3, #0]
 80040da:	6813      	ldr	r3, [r2, #0]
 80040dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0a3      	b.n	800422c <_printf_i+0x1dc>
 80040e4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80040e8:	f102 0104 	add.w	r1, r2, #4
 80040ec:	6019      	str	r1, [r3, #0]
 80040ee:	d0d7      	beq.n	80040a0 <_printf_i+0x50>
 80040f0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	da03      	bge.n	8004100 <_printf_i+0xb0>
 80040f8:	222d      	movs	r2, #45	; 0x2d
 80040fa:	425b      	negs	r3, r3
 80040fc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004100:	4962      	ldr	r1, [pc, #392]	; (800428c <_printf_i+0x23c>)
 8004102:	220a      	movs	r2, #10
 8004104:	e017      	b.n	8004136 <_printf_i+0xe6>
 8004106:	6820      	ldr	r0, [r4, #0]
 8004108:	6819      	ldr	r1, [r3, #0]
 800410a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800410e:	d003      	beq.n	8004118 <_printf_i+0xc8>
 8004110:	1d08      	adds	r0, r1, #4
 8004112:	6018      	str	r0, [r3, #0]
 8004114:	680b      	ldr	r3, [r1, #0]
 8004116:	e006      	b.n	8004126 <_printf_i+0xd6>
 8004118:	f010 0f40 	tst.w	r0, #64	; 0x40
 800411c:	f101 0004 	add.w	r0, r1, #4
 8004120:	6018      	str	r0, [r3, #0]
 8004122:	d0f7      	beq.n	8004114 <_printf_i+0xc4>
 8004124:	880b      	ldrh	r3, [r1, #0]
 8004126:	4959      	ldr	r1, [pc, #356]	; (800428c <_printf_i+0x23c>)
 8004128:	2a6f      	cmp	r2, #111	; 0x6f
 800412a:	bf14      	ite	ne
 800412c:	220a      	movne	r2, #10
 800412e:	2208      	moveq	r2, #8
 8004130:	2000      	movs	r0, #0
 8004132:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004136:	6865      	ldr	r5, [r4, #4]
 8004138:	60a5      	str	r5, [r4, #8]
 800413a:	2d00      	cmp	r5, #0
 800413c:	f2c0 809c 	blt.w	8004278 <_printf_i+0x228>
 8004140:	6820      	ldr	r0, [r4, #0]
 8004142:	f020 0004 	bic.w	r0, r0, #4
 8004146:	6020      	str	r0, [r4, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d13f      	bne.n	80041cc <_printf_i+0x17c>
 800414c:	2d00      	cmp	r5, #0
 800414e:	f040 8095 	bne.w	800427c <_printf_i+0x22c>
 8004152:	4675      	mov	r5, lr
 8004154:	2a08      	cmp	r2, #8
 8004156:	d10b      	bne.n	8004170 <_printf_i+0x120>
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	07da      	lsls	r2, r3, #31
 800415c:	d508      	bpl.n	8004170 <_printf_i+0x120>
 800415e:	6923      	ldr	r3, [r4, #16]
 8004160:	6862      	ldr	r2, [r4, #4]
 8004162:	429a      	cmp	r2, r3
 8004164:	bfde      	ittt	le
 8004166:	2330      	movle	r3, #48	; 0x30
 8004168:	f805 3c01 	strble.w	r3, [r5, #-1]
 800416c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004170:	ebae 0305 	sub.w	r3, lr, r5
 8004174:	6123      	str	r3, [r4, #16]
 8004176:	f8cd 8000 	str.w	r8, [sp]
 800417a:	463b      	mov	r3, r7
 800417c:	aa03      	add	r2, sp, #12
 800417e:	4621      	mov	r1, r4
 8004180:	4630      	mov	r0, r6
 8004182:	f7ff feef 	bl	8003f64 <_printf_common>
 8004186:	3001      	adds	r0, #1
 8004188:	d155      	bne.n	8004236 <_printf_i+0x1e6>
 800418a:	f04f 30ff 	mov.w	r0, #4294967295
 800418e:	b005      	add	sp, #20
 8004190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004194:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004198:	493c      	ldr	r1, [pc, #240]	; (800428c <_printf_i+0x23c>)
 800419a:	6822      	ldr	r2, [r4, #0]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80041a2:	f100 0504 	add.w	r5, r0, #4
 80041a6:	601d      	str	r5, [r3, #0]
 80041a8:	d001      	beq.n	80041ae <_printf_i+0x15e>
 80041aa:	6803      	ldr	r3, [r0, #0]
 80041ac:	e002      	b.n	80041b4 <_printf_i+0x164>
 80041ae:	0655      	lsls	r5, r2, #25
 80041b0:	d5fb      	bpl.n	80041aa <_printf_i+0x15a>
 80041b2:	8803      	ldrh	r3, [r0, #0]
 80041b4:	07d0      	lsls	r0, r2, #31
 80041b6:	bf44      	itt	mi
 80041b8:	f042 0220 	orrmi.w	r2, r2, #32
 80041bc:	6022      	strmi	r2, [r4, #0]
 80041be:	b91b      	cbnz	r3, 80041c8 <_printf_i+0x178>
 80041c0:	6822      	ldr	r2, [r4, #0]
 80041c2:	f022 0220 	bic.w	r2, r2, #32
 80041c6:	6022      	str	r2, [r4, #0]
 80041c8:	2210      	movs	r2, #16
 80041ca:	e7b1      	b.n	8004130 <_printf_i+0xe0>
 80041cc:	4675      	mov	r5, lr
 80041ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80041d2:	fb02 3310 	mls	r3, r2, r0, r3
 80041d6:	5ccb      	ldrb	r3, [r1, r3]
 80041d8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80041dc:	4603      	mov	r3, r0
 80041de:	2800      	cmp	r0, #0
 80041e0:	d1f5      	bne.n	80041ce <_printf_i+0x17e>
 80041e2:	e7b7      	b.n	8004154 <_printf_i+0x104>
 80041e4:	6808      	ldr	r0, [r1, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	6949      	ldr	r1, [r1, #20]
 80041ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 80041ee:	d004      	beq.n	80041fa <_printf_i+0x1aa>
 80041f0:	1d10      	adds	r0, r2, #4
 80041f2:	6018      	str	r0, [r3, #0]
 80041f4:	6813      	ldr	r3, [r2, #0]
 80041f6:	6019      	str	r1, [r3, #0]
 80041f8:	e007      	b.n	800420a <_printf_i+0x1ba>
 80041fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041fe:	f102 0004 	add.w	r0, r2, #4
 8004202:	6018      	str	r0, [r3, #0]
 8004204:	6813      	ldr	r3, [r2, #0]
 8004206:	d0f6      	beq.n	80041f6 <_printf_i+0x1a6>
 8004208:	8019      	strh	r1, [r3, #0]
 800420a:	2300      	movs	r3, #0
 800420c:	6123      	str	r3, [r4, #16]
 800420e:	4675      	mov	r5, lr
 8004210:	e7b1      	b.n	8004176 <_printf_i+0x126>
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	1d11      	adds	r1, r2, #4
 8004216:	6019      	str	r1, [r3, #0]
 8004218:	6815      	ldr	r5, [r2, #0]
 800421a:	6862      	ldr	r2, [r4, #4]
 800421c:	2100      	movs	r1, #0
 800421e:	4628      	mov	r0, r5
 8004220:	f7fb ffae 	bl	8000180 <memchr>
 8004224:	b108      	cbz	r0, 800422a <_printf_i+0x1da>
 8004226:	1b40      	subs	r0, r0, r5
 8004228:	6060      	str	r0, [r4, #4]
 800422a:	6863      	ldr	r3, [r4, #4]
 800422c:	6123      	str	r3, [r4, #16]
 800422e:	2300      	movs	r3, #0
 8004230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004234:	e79f      	b.n	8004176 <_printf_i+0x126>
 8004236:	6923      	ldr	r3, [r4, #16]
 8004238:	462a      	mov	r2, r5
 800423a:	4639      	mov	r1, r7
 800423c:	4630      	mov	r0, r6
 800423e:	47c0      	blx	r8
 8004240:	3001      	adds	r0, #1
 8004242:	d0a2      	beq.n	800418a <_printf_i+0x13a>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	079b      	lsls	r3, r3, #30
 8004248:	d507      	bpl.n	800425a <_printf_i+0x20a>
 800424a:	2500      	movs	r5, #0
 800424c:	f104 0919 	add.w	r9, r4, #25
 8004250:	68e3      	ldr	r3, [r4, #12]
 8004252:	9a03      	ldr	r2, [sp, #12]
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	429d      	cmp	r5, r3
 8004258:	db05      	blt.n	8004266 <_printf_i+0x216>
 800425a:	68e0      	ldr	r0, [r4, #12]
 800425c:	9b03      	ldr	r3, [sp, #12]
 800425e:	4298      	cmp	r0, r3
 8004260:	bfb8      	it	lt
 8004262:	4618      	movlt	r0, r3
 8004264:	e793      	b.n	800418e <_printf_i+0x13e>
 8004266:	2301      	movs	r3, #1
 8004268:	464a      	mov	r2, r9
 800426a:	4639      	mov	r1, r7
 800426c:	4630      	mov	r0, r6
 800426e:	47c0      	blx	r8
 8004270:	3001      	adds	r0, #1
 8004272:	d08a      	beq.n	800418a <_printf_i+0x13a>
 8004274:	3501      	adds	r5, #1
 8004276:	e7eb      	b.n	8004250 <_printf_i+0x200>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1a7      	bne.n	80041cc <_printf_i+0x17c>
 800427c:	780b      	ldrb	r3, [r1, #0]
 800427e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004282:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004286:	e765      	b.n	8004154 <_printf_i+0x104>
 8004288:	0800465a 	.word	0x0800465a
 800428c:	08004649 	.word	0x08004649

08004290 <_sbrk_r>:
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	4c06      	ldr	r4, [pc, #24]	; (80042ac <_sbrk_r+0x1c>)
 8004294:	2300      	movs	r3, #0
 8004296:	4605      	mov	r5, r0
 8004298:	4608      	mov	r0, r1
 800429a:	6023      	str	r3, [r4, #0]
 800429c:	f7ff f84e 	bl	800333c <_sbrk>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	d102      	bne.n	80042aa <_sbrk_r+0x1a>
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	b103      	cbz	r3, 80042aa <_sbrk_r+0x1a>
 80042a8:	602b      	str	r3, [r5, #0]
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
 80042ac:	20000410 	.word	0x20000410

080042b0 <__sread>:
 80042b0:	b510      	push	{r4, lr}
 80042b2:	460c      	mov	r4, r1
 80042b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b8:	f000 f896 	bl	80043e8 <_read_r>
 80042bc:	2800      	cmp	r0, #0
 80042be:	bfab      	itete	ge
 80042c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042c2:	89a3      	ldrhlt	r3, [r4, #12]
 80042c4:	181b      	addge	r3, r3, r0
 80042c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042ca:	bfac      	ite	ge
 80042cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80042ce:	81a3      	strhlt	r3, [r4, #12]
 80042d0:	bd10      	pop	{r4, pc}

080042d2 <__swrite>:
 80042d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d6:	461f      	mov	r7, r3
 80042d8:	898b      	ldrh	r3, [r1, #12]
 80042da:	05db      	lsls	r3, r3, #23
 80042dc:	4605      	mov	r5, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	4616      	mov	r6, r2
 80042e2:	d505      	bpl.n	80042f0 <__swrite+0x1e>
 80042e4:	2302      	movs	r3, #2
 80042e6:	2200      	movs	r2, #0
 80042e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ec:	f000 f868 	bl	80043c0 <_lseek_r>
 80042f0:	89a3      	ldrh	r3, [r4, #12]
 80042f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042fa:	81a3      	strh	r3, [r4, #12]
 80042fc:	4632      	mov	r2, r6
 80042fe:	463b      	mov	r3, r7
 8004300:	4628      	mov	r0, r5
 8004302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004306:	f000 b817 	b.w	8004338 <_write_r>

0800430a <__sseek>:
 800430a:	b510      	push	{r4, lr}
 800430c:	460c      	mov	r4, r1
 800430e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004312:	f000 f855 	bl	80043c0 <_lseek_r>
 8004316:	1c43      	adds	r3, r0, #1
 8004318:	89a3      	ldrh	r3, [r4, #12]
 800431a:	bf15      	itete	ne
 800431c:	6560      	strne	r0, [r4, #84]	; 0x54
 800431e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004326:	81a3      	strheq	r3, [r4, #12]
 8004328:	bf18      	it	ne
 800432a:	81a3      	strhne	r3, [r4, #12]
 800432c:	bd10      	pop	{r4, pc}

0800432e <__sclose>:
 800432e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004332:	f000 b813 	b.w	800435c <_close_r>
	...

08004338 <_write_r>:
 8004338:	b538      	push	{r3, r4, r5, lr}
 800433a:	4c07      	ldr	r4, [pc, #28]	; (8004358 <_write_r+0x20>)
 800433c:	4605      	mov	r5, r0
 800433e:	4608      	mov	r0, r1
 8004340:	4611      	mov	r1, r2
 8004342:	2200      	movs	r2, #0
 8004344:	6022      	str	r2, [r4, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	f7fe ffea 	bl	8003320 <_write>
 800434c:	1c43      	adds	r3, r0, #1
 800434e:	d102      	bne.n	8004356 <_write_r+0x1e>
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	b103      	cbz	r3, 8004356 <_write_r+0x1e>
 8004354:	602b      	str	r3, [r5, #0]
 8004356:	bd38      	pop	{r3, r4, r5, pc}
 8004358:	20000410 	.word	0x20000410

0800435c <_close_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	4c06      	ldr	r4, [pc, #24]	; (8004378 <_close_r+0x1c>)
 8004360:	2300      	movs	r3, #0
 8004362:	4605      	mov	r5, r0
 8004364:	4608      	mov	r0, r1
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	f7ff f802 	bl	8003370 <_close>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d102      	bne.n	8004376 <_close_r+0x1a>
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	b103      	cbz	r3, 8004376 <_close_r+0x1a>
 8004374:	602b      	str	r3, [r5, #0]
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	20000410 	.word	0x20000410

0800437c <_fstat_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	4c07      	ldr	r4, [pc, #28]	; (800439c <_fstat_r+0x20>)
 8004380:	2300      	movs	r3, #0
 8004382:	4605      	mov	r5, r0
 8004384:	4608      	mov	r0, r1
 8004386:	4611      	mov	r1, r2
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	f7fe fff4 	bl	8003376 <_fstat>
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	d102      	bne.n	8004398 <_fstat_r+0x1c>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	b103      	cbz	r3, 8004398 <_fstat_r+0x1c>
 8004396:	602b      	str	r3, [r5, #0]
 8004398:	bd38      	pop	{r3, r4, r5, pc}
 800439a:	bf00      	nop
 800439c:	20000410 	.word	0x20000410

080043a0 <_isatty_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	4c06      	ldr	r4, [pc, #24]	; (80043bc <_isatty_r+0x1c>)
 80043a4:	2300      	movs	r3, #0
 80043a6:	4605      	mov	r5, r0
 80043a8:	4608      	mov	r0, r1
 80043aa:	6023      	str	r3, [r4, #0]
 80043ac:	f7fe ffe8 	bl	8003380 <_isatty>
 80043b0:	1c43      	adds	r3, r0, #1
 80043b2:	d102      	bne.n	80043ba <_isatty_r+0x1a>
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	b103      	cbz	r3, 80043ba <_isatty_r+0x1a>
 80043b8:	602b      	str	r3, [r5, #0]
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
 80043bc:	20000410 	.word	0x20000410

080043c0 <_lseek_r>:
 80043c0:	b538      	push	{r3, r4, r5, lr}
 80043c2:	4c07      	ldr	r4, [pc, #28]	; (80043e0 <_lseek_r+0x20>)
 80043c4:	4605      	mov	r5, r0
 80043c6:	4608      	mov	r0, r1
 80043c8:	4611      	mov	r1, r2
 80043ca:	2200      	movs	r2, #0
 80043cc:	6022      	str	r2, [r4, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	f7fe ffd8 	bl	8003384 <_lseek>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d102      	bne.n	80043de <_lseek_r+0x1e>
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	b103      	cbz	r3, 80043de <_lseek_r+0x1e>
 80043dc:	602b      	str	r3, [r5, #0]
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	20000410 	.word	0x20000410

080043e4 <__malloc_lock>:
 80043e4:	4770      	bx	lr

080043e6 <__malloc_unlock>:
 80043e6:	4770      	bx	lr

080043e8 <_read_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4c07      	ldr	r4, [pc, #28]	; (8004408 <_read_r+0x20>)
 80043ec:	4605      	mov	r5, r0
 80043ee:	4608      	mov	r0, r1
 80043f0:	4611      	mov	r1, r2
 80043f2:	2200      	movs	r2, #0
 80043f4:	6022      	str	r2, [r4, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f7fe ff84 	bl	8003304 <_read>
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	d102      	bne.n	8004406 <_read_r+0x1e>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	b103      	cbz	r3, 8004406 <_read_r+0x1e>
 8004404:	602b      	str	r3, [r5, #0]
 8004406:	bd38      	pop	{r3, r4, r5, pc}
 8004408:	20000410 	.word	0x20000410

0800440c <_init>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	bf00      	nop
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr

08004418 <_fini>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr
