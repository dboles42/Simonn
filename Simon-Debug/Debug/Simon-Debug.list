
Simon-Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002888  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080029c8  080029c8  000129c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002a98  08002a98  00012a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002aa0  08002aa0  00012aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002aa4  08002aa4  00012aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  08002aa8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000434  20000010  08002ab4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000444  08002ab4  00020444  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016dc8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003174  00000000  00000000  00036e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008fd9  00000000  00000000  00039f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e60  00000000  00000000  00042f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001880  00000000  00000000  00043db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000078b0  00000000  00000000  00045638  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000616c  00000000  00000000  0004cee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00053054  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002678  00000000  00000000  000530d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	080029b0 	.word	0x080029b0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	080029b0 	.word	0x080029b0

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b97a 	b.w	800048c <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	468c      	mov	ip, r1
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	9e08      	ldr	r6, [sp, #32]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d151      	bne.n	8000264 <__udivmoddi4+0xb4>
 80001c0:	428a      	cmp	r2, r1
 80001c2:	4617      	mov	r7, r2
 80001c4:	d96d      	bls.n	80002a2 <__udivmoddi4+0xf2>
 80001c6:	fab2 fe82 	clz	lr, r2
 80001ca:	f1be 0f00 	cmp.w	lr, #0
 80001ce:	d00b      	beq.n	80001e8 <__udivmoddi4+0x38>
 80001d0:	f1ce 0c20 	rsb	ip, lr, #32
 80001d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80001d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80001dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80001e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80001e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80001e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80001ec:	0c25      	lsrs	r5, r4, #16
 80001ee:	fbbc f8fa 	udiv	r8, ip, sl
 80001f2:	fa1f f987 	uxth.w	r9, r7
 80001f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80001fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80001fe:	fb08 f309 	mul.w	r3, r8, r9
 8000202:	42ab      	cmp	r3, r5
 8000204:	d90a      	bls.n	800021c <__udivmoddi4+0x6c>
 8000206:	19ed      	adds	r5, r5, r7
 8000208:	f108 32ff 	add.w	r2, r8, #4294967295
 800020c:	f080 8123 	bcs.w	8000456 <__udivmoddi4+0x2a6>
 8000210:	42ab      	cmp	r3, r5
 8000212:	f240 8120 	bls.w	8000456 <__udivmoddi4+0x2a6>
 8000216:	f1a8 0802 	sub.w	r8, r8, #2
 800021a:	443d      	add	r5, r7
 800021c:	1aed      	subs	r5, r5, r3
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb5 f0fa 	udiv	r0, r5, sl
 8000224:	fb0a 5510 	mls	r5, sl, r0, r5
 8000228:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800022c:	fb00 f909 	mul.w	r9, r0, r9
 8000230:	45a1      	cmp	r9, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x98>
 8000234:	19e4      	adds	r4, r4, r7
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295
 800023a:	f080 810a 	bcs.w	8000452 <__udivmoddi4+0x2a2>
 800023e:	45a1      	cmp	r9, r4
 8000240:	f240 8107 	bls.w	8000452 <__udivmoddi4+0x2a2>
 8000244:	3802      	subs	r0, #2
 8000246:	443c      	add	r4, r7
 8000248:	eba4 0409 	sub.w	r4, r4, r9
 800024c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000250:	2100      	movs	r1, #0
 8000252:	2e00      	cmp	r6, #0
 8000254:	d061      	beq.n	800031a <__udivmoddi4+0x16a>
 8000256:	fa24 f40e 	lsr.w	r4, r4, lr
 800025a:	2300      	movs	r3, #0
 800025c:	6034      	str	r4, [r6, #0]
 800025e:	6073      	str	r3, [r6, #4]
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	428b      	cmp	r3, r1
 8000266:	d907      	bls.n	8000278 <__udivmoddi4+0xc8>
 8000268:	2e00      	cmp	r6, #0
 800026a:	d054      	beq.n	8000316 <__udivmoddi4+0x166>
 800026c:	2100      	movs	r1, #0
 800026e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000272:	4608      	mov	r0, r1
 8000274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000278:	fab3 f183 	clz	r1, r3
 800027c:	2900      	cmp	r1, #0
 800027e:	f040 808e 	bne.w	800039e <__udivmoddi4+0x1ee>
 8000282:	42ab      	cmp	r3, r5
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xdc>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80fa 	bhi.w	8000480 <__udivmoddi4+0x2d0>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb65 0503 	sbc.w	r5, r5, r3
 8000292:	2001      	movs	r0, #1
 8000294:	46ac      	mov	ip, r5
 8000296:	2e00      	cmp	r6, #0
 8000298:	d03f      	beq.n	800031a <__udivmoddi4+0x16a>
 800029a:	e886 1010 	stmia.w	r6, {r4, ip}
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b912      	cbnz	r2, 80002aa <__udivmoddi4+0xfa>
 80002a4:	2701      	movs	r7, #1
 80002a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002aa:	fab7 fe87 	clz	lr, r7
 80002ae:	f1be 0f00 	cmp.w	lr, #0
 80002b2:	d134      	bne.n	800031e <__udivmoddi4+0x16e>
 80002b4:	1beb      	subs	r3, r5, r7
 80002b6:	0c3a      	lsrs	r2, r7, #16
 80002b8:	fa1f fc87 	uxth.w	ip, r7
 80002bc:	2101      	movs	r1, #1
 80002be:	fbb3 f8f2 	udiv	r8, r3, r2
 80002c2:	0c25      	lsrs	r5, r4, #16
 80002c4:	fb02 3318 	mls	r3, r2, r8, r3
 80002c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80002cc:	fb0c f308 	mul.w	r3, ip, r8
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x134>
 80002d4:	19ed      	adds	r5, r5, r7
 80002d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x132>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	f200 80d1 	bhi.w	8000484 <__udivmoddi4+0x2d4>
 80002e2:	4680      	mov	r8, r0
 80002e4:	1aed      	subs	r5, r5, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80002ec:	fb02 5510 	mls	r5, r2, r0, r5
 80002f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80002f4:	fb0c fc00 	mul.w	ip, ip, r0
 80002f8:	45a4      	cmp	ip, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x15c>
 80002fc:	19e4      	adds	r4, r4, r7
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x15a>
 8000304:	45a4      	cmp	ip, r4
 8000306:	f200 80b8 	bhi.w	800047a <__udivmoddi4+0x2ca>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 040c 	sub.w	r4, r4, ip
 8000310:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000314:	e79d      	b.n	8000252 <__udivmoddi4+0xa2>
 8000316:	4631      	mov	r1, r6
 8000318:	4630      	mov	r0, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	f1ce 0420 	rsb	r4, lr, #32
 8000322:	fa05 f30e 	lsl.w	r3, r5, lr
 8000326:	fa07 f70e 	lsl.w	r7, r7, lr
 800032a:	fa20 f804 	lsr.w	r8, r0, r4
 800032e:	0c3a      	lsrs	r2, r7, #16
 8000330:	fa25 f404 	lsr.w	r4, r5, r4
 8000334:	ea48 0803 	orr.w	r8, r8, r3
 8000338:	fbb4 f1f2 	udiv	r1, r4, r2
 800033c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000340:	fb02 4411 	mls	r4, r2, r1, r4
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800034c:	fb01 f30c 	mul.w	r3, r1, ip
 8000350:	42ab      	cmp	r3, r5
 8000352:	fa00 f40e 	lsl.w	r4, r0, lr
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x1bc>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f101 30ff 	add.w	r0, r1, #4294967295
 800035e:	f080 808a 	bcs.w	8000476 <__udivmoddi4+0x2c6>
 8000362:	42ab      	cmp	r3, r5
 8000364:	f240 8087 	bls.w	8000476 <__udivmoddi4+0x2c6>
 8000368:	3902      	subs	r1, #2
 800036a:	443d      	add	r5, r7
 800036c:	1aeb      	subs	r3, r5, r3
 800036e:	fa1f f588 	uxth.w	r5, r8
 8000372:	fbb3 f0f2 	udiv	r0, r3, r2
 8000376:	fb02 3310 	mls	r3, r2, r0, r3
 800037a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800037e:	fb00 f30c 	mul.w	r3, r0, ip
 8000382:	42ab      	cmp	r3, r5
 8000384:	d907      	bls.n	8000396 <__udivmoddi4+0x1e6>
 8000386:	19ed      	adds	r5, r5, r7
 8000388:	f100 38ff 	add.w	r8, r0, #4294967295
 800038c:	d26f      	bcs.n	800046e <__udivmoddi4+0x2be>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d96d      	bls.n	800046e <__udivmoddi4+0x2be>
 8000392:	3802      	subs	r0, #2
 8000394:	443d      	add	r5, r7
 8000396:	1aeb      	subs	r3, r5, r3
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	e78f      	b.n	80002be <__udivmoddi4+0x10e>
 800039e:	f1c1 0720 	rsb	r7, r1, #32
 80003a2:	fa22 f807 	lsr.w	r8, r2, r7
 80003a6:	408b      	lsls	r3, r1
 80003a8:	fa05 f401 	lsl.w	r4, r5, r1
 80003ac:	ea48 0303 	orr.w	r3, r8, r3
 80003b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80003b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80003b8:	40fd      	lsrs	r5, r7
 80003ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80003be:	fbb5 f9fc 	udiv	r9, r5, ip
 80003c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80003c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80003ca:	fa1f f883 	uxth.w	r8, r3
 80003ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003d2:	fb09 f408 	mul.w	r4, r9, r8
 80003d6:	42ac      	cmp	r4, r5
 80003d8:	fa02 f201 	lsl.w	r2, r2, r1
 80003dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x244>
 80003e2:	18ed      	adds	r5, r5, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	d243      	bcs.n	8000472 <__udivmoddi4+0x2c2>
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	d941      	bls.n	8000472 <__udivmoddi4+0x2c2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	441d      	add	r5, r3
 80003f4:	1b2d      	subs	r5, r5, r4
 80003f6:	fa1f fe8e 	uxth.w	lr, lr
 80003fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80003fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000402:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000406:	fb00 f808 	mul.w	r8, r0, r8
 800040a:	45a0      	cmp	r8, r4
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x26e>
 800040e:	18e4      	adds	r4, r4, r3
 8000410:	f100 35ff 	add.w	r5, r0, #4294967295
 8000414:	d229      	bcs.n	800046a <__udivmoddi4+0x2ba>
 8000416:	45a0      	cmp	r8, r4
 8000418:	d927      	bls.n	800046a <__udivmoddi4+0x2ba>
 800041a:	3802      	subs	r0, #2
 800041c:	441c      	add	r4, r3
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	eba4 0408 	sub.w	r4, r4, r8
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	454c      	cmp	r4, r9
 800042c:	46c6      	mov	lr, r8
 800042e:	464d      	mov	r5, r9
 8000430:	d315      	bcc.n	800045e <__udivmoddi4+0x2ae>
 8000432:	d012      	beq.n	800045a <__udivmoddi4+0x2aa>
 8000434:	b156      	cbz	r6, 800044c <__udivmoddi4+0x29c>
 8000436:	ebba 030e 	subs.w	r3, sl, lr
 800043a:	eb64 0405 	sbc.w	r4, r4, r5
 800043e:	fa04 f707 	lsl.w	r7, r4, r7
 8000442:	40cb      	lsrs	r3, r1
 8000444:	431f      	orrs	r7, r3
 8000446:	40cc      	lsrs	r4, r1
 8000448:	6037      	str	r7, [r6, #0]
 800044a:	6074      	str	r4, [r6, #4]
 800044c:	2100      	movs	r1, #0
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	4618      	mov	r0, r3
 8000454:	e6f8      	b.n	8000248 <__udivmoddi4+0x98>
 8000456:	4690      	mov	r8, r2
 8000458:	e6e0      	b.n	800021c <__udivmoddi4+0x6c>
 800045a:	45c2      	cmp	sl, r8
 800045c:	d2ea      	bcs.n	8000434 <__udivmoddi4+0x284>
 800045e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000462:	eb69 0503 	sbc.w	r5, r9, r3
 8000466:	3801      	subs	r0, #1
 8000468:	e7e4      	b.n	8000434 <__udivmoddi4+0x284>
 800046a:	4628      	mov	r0, r5
 800046c:	e7d7      	b.n	800041e <__udivmoddi4+0x26e>
 800046e:	4640      	mov	r0, r8
 8000470:	e791      	b.n	8000396 <__udivmoddi4+0x1e6>
 8000472:	4681      	mov	r9, r0
 8000474:	e7be      	b.n	80003f4 <__udivmoddi4+0x244>
 8000476:	4601      	mov	r1, r0
 8000478:	e778      	b.n	800036c <__udivmoddi4+0x1bc>
 800047a:	3802      	subs	r0, #2
 800047c:	443c      	add	r4, r7
 800047e:	e745      	b.n	800030c <__udivmoddi4+0x15c>
 8000480:	4608      	mov	r0, r1
 8000482:	e708      	b.n	8000296 <__udivmoddi4+0xe6>
 8000484:	f1a8 0802 	sub.w	r8, r8, #2
 8000488:	443d      	add	r5, r7
 800048a:	e72b      	b.n	80002e4 <__udivmoddi4+0x134>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000490:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000492:	4c10      	ldr	r4, [pc, #64]	; (80004d4 <HAL_InitTick+0x44>)
 8000494:	6823      	ldr	r3, [r4, #0]
{
 8000496:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000498:	b90b      	cbnz	r3, 800049e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800049a:	2001      	movs	r0, #1
 800049c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 800049e:	f000 fe99 	bl	80011d4 <HAL_RCC_GetHCLKFreq>
 80004a2:	6822      	ldr	r2, [r4, #0]
 80004a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80004ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80004b0:	f000 f888 	bl	80005c4 <HAL_SYSTICK_Config>
 80004b4:	4604      	mov	r4, r0
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d1ef      	bne.n	800049a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ba:	2d0f      	cmp	r5, #15
 80004bc:	d8ed      	bhi.n	800049a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004be:	4602      	mov	r2, r0
 80004c0:	4629      	mov	r1, r5
 80004c2:	f04f 30ff 	mov.w	r0, #4294967295
 80004c6:	f000 f849 	bl	800055c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004ca:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <HAL_InitTick+0x48>)
 80004cc:	4620      	mov	r0, r4
 80004ce:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 80004d0:	bd38      	pop	{r3, r4, r5, pc}
 80004d2:	bf00      	nop
 80004d4:	20000004 	.word	0x20000004
 80004d8:	20000008 	.word	0x20000008

080004dc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004dc:	4a09      	ldr	r2, [pc, #36]	; (8000504 <HAL_Init+0x28>)
 80004de:	6813      	ldr	r3, [r2, #0]
 80004e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80004e4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ea:	f000 f825 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004ee:	2000      	movs	r0, #0
 80004f0:	f7ff ffce 	bl	8000490 <HAL_InitTick>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b918      	cbnz	r0, 8000500 <HAL_Init+0x24>
    HAL_MspInit();
 80004f8:	f002 f8b4 	bl	8002664 <HAL_MspInit>
}
 80004fc:	4620      	mov	r0, r4
 80004fe:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000500:	2401      	movs	r4, #1
 8000502:	e7fb      	b.n	80004fc <HAL_Init+0x20>
 8000504:	58004000 	.word	0x58004000

08000508 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000508:	4a03      	ldr	r2, [pc, #12]	; (8000518 <HAL_IncTick+0x10>)
 800050a:	4904      	ldr	r1, [pc, #16]	; (800051c <HAL_IncTick+0x14>)
 800050c:	6813      	ldr	r3, [r2, #0]
 800050e:	6809      	ldr	r1, [r1, #0]
 8000510:	440b      	add	r3, r1
 8000512:	6013      	str	r3, [r2, #0]
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	2000002c 	.word	0x2000002c
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000520:	4b01      	ldr	r3, [pc, #4]	; (8000528 <HAL_GetTick+0x8>)
 8000522:	6818      	ldr	r0, [r3, #0]
}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	2000002c 	.word	0x2000002c

0800052c <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTickPrio+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000008 	.word	0x20000008

08000538 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800053a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800053c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000540:	041b      	lsls	r3, r3, #16
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000548:	0200      	lsls	r0, r0, #8
 800054a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000552:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000554:	60d3      	str	r3, [r2, #12]
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	68dc      	ldr	r4, [r3, #12]
 8000562:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000566:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056c:	2b04      	cmp	r3, #4
 800056e:	bf28      	it	cs
 8000570:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000572:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000574:	f04f 0501 	mov.w	r5, #1
 8000578:	fa05 f303 	lsl.w	r3, r5, r3
 800057c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000580:	bf8c      	ite	hi
 8000582:	3c03      	subhi	r4, #3
 8000584:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000586:	4019      	ands	r1, r3
 8000588:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800058a:	fa05 f404 	lsl.w	r4, r5, r4
 800058e:	3c01      	subs	r4, #1
 8000590:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000592:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	ea42 0201 	orr.w	r2, r2, r1
 8000598:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	bfaf      	iteee	ge
 800059e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	f000 000f 	andlt.w	r0, r0, #15
 80005a6:	4b06      	ldrlt	r3, [pc, #24]	; (80005c0 <HAL_NVIC_SetPriority+0x64>)
 80005a8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005aa:	bfa5      	ittet	ge
 80005ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	e000ed14 	.word	0xe000ed14

080005c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005c4:	3801      	subs	r0, #1
 80005c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005ca:	d20a      	bcs.n	80005e2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005d0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	21f0      	movs	r1, #240	; 0xf0
 80005d4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005d8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005da:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005dc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005e2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000e010 	.word	0xe000e010
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80005f4:	4a55      	ldr	r2, [pc, #340]	; (800074c <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005f6:	f8d1 8000 	ldr.w	r8, [r1]
  uint32_t position = 0x00u;
 80005fa:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005fc:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000600:	fa38 f403 	lsrs.w	r4, r8, r3
 8000604:	d101      	bne.n	800060a <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 8000606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800060a:	2401      	movs	r4, #1
 800060c:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8000610:	ea18 050a 	ands.w	r5, r8, sl
 8000614:	f000 808f 	beq.w	8000736 <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000618:	684c      	ldr	r4, [r1, #4]
 800061a:	f024 0b10 	bic.w	fp, r4, #16
 800061e:	f1bb 0f02 	cmp.w	fp, #2
 8000622:	d111      	bne.n	8000648 <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3u];
 8000624:	08df      	lsrs	r7, r3, #3
 8000626:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800062a:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800062e:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000630:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000634:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000638:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800063c:	690e      	ldr	r6, [r1, #16]
 800063e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000642:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000646:	623e      	str	r6, [r7, #32]
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800064c:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 800064e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000650:	fa07 f70c 	lsl.w	r7, r7, ip
 8000654:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000656:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800065a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800065c:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000660:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000664:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000668:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 800066c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800066e:	d811      	bhi.n	8000694 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8000670:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000672:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000676:	68ce      	ldr	r6, [r1, #12]
 8000678:	fa06 fe0c 	lsl.w	lr, r6, ip
 800067c:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000680:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000682:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000684:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000688:	f3c4 1600 	ubfx	r6, r4, #4, #1
 800068c:	409e      	lsls	r6, r3
 800068e:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000692:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000694:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000696:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000698:	688e      	ldr	r6, [r1, #8]
 800069a:	fa06 f60c 	lsl.w	r6, r6, ip
 800069e:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006a0:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80006a2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006a4:	d547      	bpl.n	8000736 <HAL_GPIO_Init+0x146>
 80006a6:	f023 0703 	bic.w	r7, r3, #3
 80006aa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006ae:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006b2:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80006b6:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006b8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80006bc:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006c0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006c4:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006c8:	d037      	beq.n	800073a <HAL_GPIO_Init+0x14a>
 80006ca:	4e21      	ldr	r6, [pc, #132]	; (8000750 <HAL_GPIO_Init+0x160>)
 80006cc:	42b0      	cmp	r0, r6
 80006ce:	d036      	beq.n	800073e <HAL_GPIO_Init+0x14e>
 80006d0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80006d4:	42b0      	cmp	r0, r6
 80006d6:	d034      	beq.n	8000742 <HAL_GPIO_Init+0x152>
 80006d8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80006dc:	42b0      	cmp	r0, r6
 80006de:	d032      	beq.n	8000746 <HAL_GPIO_Init+0x156>
 80006e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80006e4:	42b0      	cmp	r0, r6
 80006e6:	bf14      	ite	ne
 80006e8:	2607      	movne	r6, #7
 80006ea:	2604      	moveq	r6, #4
 80006ec:	fa06 f60e 	lsl.w	r6, r6, lr
 80006f0:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80006f4:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 80006f6:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 80006fa:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006fc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000700:	bf0c      	ite	eq
 8000702:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000704:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000706:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 800070a:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800070e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000712:	bf0c      	ite	eq
 8000714:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000716:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000718:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 800071c:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800071e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000722:	bf0c      	ite	eq
 8000724:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000726:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000728:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 800072a:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800072c:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800072e:	bf54      	ite	pl
 8000730:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000732:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000734:	6056      	str	r6, [r2, #4]
    position++;
 8000736:	3301      	adds	r3, #1
 8000738:	e762      	b.n	8000600 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800073a:	2600      	movs	r6, #0
 800073c:	e7d6      	b.n	80006ec <HAL_GPIO_Init+0xfc>
 800073e:	2601      	movs	r6, #1
 8000740:	e7d4      	b.n	80006ec <HAL_GPIO_Init+0xfc>
 8000742:	2602      	movs	r6, #2
 8000744:	e7d2      	b.n	80006ec <HAL_GPIO_Init+0xfc>
 8000746:	2603      	movs	r6, #3
 8000748:	e7d0      	b.n	80006ec <HAL_GPIO_Init+0xfc>
 800074a:	bf00      	nop
 800074c:	58000800 	.word	0x58000800
 8000750:	48000400 	.word	0x48000400

08000754 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000754:	b10a      	cbz	r2, 800075a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000756:	6181      	str	r1, [r0, #24]
 8000758:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800075a:	6281      	str	r1, [r0, #40]	; 0x28
 800075c:	4770      	bx	lr

0800075e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800075e:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000760:	4604      	mov	r4, r0
{
 8000762:	b086      	sub	sp, #24
  if (hpcd == NULL)
 8000764:	2800      	cmp	r0, #0
 8000766:	d057      	beq.n	8000818 <HAL_PCD_Init+0xba>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000768:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 800076c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000770:	b91b      	cbnz	r3, 800077a <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000772:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000776:	f002 f803 	bl	8002780 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800077a:	2303      	movs	r3, #3
 800077c:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000780:	6820      	ldr	r0, [r4, #0]
 8000782:	f001 fde7 	bl	8002354 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000786:	2200      	movs	r2, #0
 8000788:	6860      	ldr	r0, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800078a:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800078c:	4615      	mov	r5, r2
 800078e:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000790:	4298      	cmp	r0, r3
 8000792:	f102 0201 	add.w	r2, r2, #1
 8000796:	d820      	bhi.n	80007da <HAL_PCD_Init+0x7c>
 8000798:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800079a:	4611      	mov	r1, r2
 800079c:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800079e:	4298      	cmp	r0, r3
 80007a0:	f102 0201 	add.w	r2, r2, #1
 80007a4:	d828      	bhi.n	80007f8 <HAL_PCD_Init+0x9a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80007a6:	f104 0610 	add.w	r6, r4, #16
 80007aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007ac:	466d      	mov	r5, sp
 80007ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b0:	6833      	ldr	r3, [r6, #0]
 80007b2:	602b      	str	r3, [r5, #0]
 80007b4:	1d23      	adds	r3, r4, #4
 80007b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007b8:	6820      	ldr	r0, [r4, #0]
 80007ba:	f001 fdd5 	bl	8002368 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80007be:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80007c0:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80007c2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80007c6:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80007ca:	69e3      	ldr	r3, [r4, #28]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d102      	bne.n	80007d6 <HAL_PCD_Init+0x78>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80007d0:	4620      	mov	r0, r4
 80007d2:	f000 f824 	bl	800081e <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80007d6:	4628      	mov	r0, r5
 80007d8:	e01f      	b.n	800081a <HAL_PCD_Init+0xbc>
    hpcd->IN_ep[i].is_in = 1U;
 80007da:	eb04 1143 	add.w	r1, r4, r3, lsl #5
    hpcd->IN_ep[i].num = i;
 80007de:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80007e2:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].xfer_len = 0U;
 80007e4:	3302      	adds	r3, #2
 80007e6:	015b      	lsls	r3, r3, #5
    hpcd->IN_ep[i].is_in = 1U;
 80007e8:	f881 6029 	strb.w	r6, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80007ec:	f881 502b 	strb.w	r5, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 80007f0:	638d      	str	r5, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80007f2:	63cd      	str	r5, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80007f4:	50e5      	str	r5, [r4, r3]
 80007f6:	e7ca      	b.n	800078e <HAL_PCD_Init+0x30>
    hpcd->OUT_ep[i].is_in = 0U;
 80007f8:	eb04 1543 	add.w	r5, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 80007fc:	f885 3128 	strb.w	r3, [r5, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000800:	330a      	adds	r3, #10
 8000802:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8000804:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000808:	f885 112b 	strb.w	r1, [r5, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800080c:	f8c5 1138 	str.w	r1, [r5, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000810:	f8c5 113c 	str.w	r1, [r5, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000814:	50e1      	str	r1, [r4, r3]
 8000816:	e7c1      	b.n	800079c <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8000818:	2001      	movs	r0, #1
}
 800081a:	b006      	add	sp, #24
 800081c:	bd70      	pop	{r4, r5, r6, pc}

0800081e <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 800081e:	6802      	ldr	r2, [r0, #0]
{
 8000820:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8000822:	2101      	movs	r1, #1
 8000824:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8000828:	2000      	movs	r0, #0
 800082a:	f883 0260 	strb.w	r0, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800082e:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8000832:	b29b      	uxth	r3, r3
 8000834:	430b      	orrs	r3, r1
 8000836:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800083a:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800083e:	b29b      	uxth	r3, r3
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8000848:	4770      	bx	lr
	...

0800084c <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800084c:	4a02      	ldr	r2, [pc, #8]	; (8000858 <HAL_PWR_EnableBkUpAccess+0xc>)
 800084e:	6813      	ldr	r3, [r2, #0]
 8000850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	4770      	bx	lr
 8000858:	58000400 	.word	0x58000400

0800085c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 800085c:	4b02      	ldr	r3, [pc, #8]	; (8000868 <HAL_PWREx_GetVoltageRange+0xc>)
 800085e:	6818      	ldr	r0, [r3, #0]
}
 8000860:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	58000400 	.word	0x58000400

0800086c <LL_RCC_HSE_IsReady>:
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800086c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000870:	6818      	ldr	r0, [r3, #0]
}
 8000872:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8000876:	4770      	bx	lr

08000878 <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087c:	6818      	ldr	r0, [r3, #0]
}
 800087e:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8000882:	4770      	bx	lr

08000884 <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000888:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 800088c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000890:	4770      	bx	lr

08000892 <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000896:	6818      	ldr	r0, [r3, #0]
}
 8000898:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800089c:	4770      	bx	lr

0800089e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800089e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008a2:	6813      	ldr	r3, [r2, #0]
 80008a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008a8:	4318      	orrs	r0, r3
 80008aa:	6010      	str	r0, [r2, #0]
 80008ac:	4770      	bx	lr

080008ae <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80008ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  if(msiRange > LL_RCC_MSIRANGE_11)
  {
    msiRange = LL_RCC_MSIRANGE_11;
  }
  return msiRange;
}
 80008b8:	28b0      	cmp	r0, #176	; 0xb0
 80008ba:	bf28      	it	cs
 80008bc:	20b0      	movcs	r0, #176	; 0xb0
 80008be:	4770      	bx	lr

080008c0 <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80008c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008c4:	6853      	ldr	r3, [r2, #4]
 80008c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80008ca:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80008ce:	6050      	str	r0, [r2, #4]
 80008d0:	4770      	bx	lr

080008d2 <LL_RCC_PLL_IsReady>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80008d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d6:	6818      	ldr	r0, [r3, #0]
}
 80008d8:	f3c0 6040 	ubfx	r0, r0, #25, #1
 80008dc:	4770      	bx	lr
	...

080008e0 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
  
  /* MSI frequency range in Hz */
  if(MSI_Range > RCC_MSIRANGE_11)
 80008e0:	28b0      	cmp	r0, #176	; 0xb0
 80008e2:	4b32      	ldr	r3, [pc, #200]	; (80009ac <RCC_SetFlashLatencyFromMSIRange+0xcc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }
  
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80008e4:	4a32      	ldr	r2, [pc, #200]	; (80009b0 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80008e6:	bf98      	it	ls
 80008e8:	0900      	lsrls	r0, r0, #4
{
 80008ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80008ec:	bf8c      	ite	hi
 80008ee:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80008f0:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80008f4:	4c2f      	ldr	r4, [pc, #188]	; (80009b4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80008f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80008fa:	b08d      	sub	sp, #52	; 0x34
 80008fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8000900:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8000904:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8000906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090a:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8000910:	fbb5 f5f3 	udiv	r5, r5, r3
 8000914:	f7ff ffa2 	bl	800085c <HAL_PWREx_GetVoltageRange>
 8000918:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800091a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800091e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8000922:	f104 0210 	add.w	r2, r4, #16
 8000926:	ca07      	ldmia	r2, {r0, r1, r2}
 8000928:	ab01      	add	r3, sp, #4
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800092a:	341c      	adds	r4, #28
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800092c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8000930:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000934:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8000938:	ac0c      	add	r4, sp, #48	; 0x30
 800093a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800093e:	d11f      	bne.n	8000980 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 8000940:	2300      	movs	r3, #0
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8000942:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8000946:	4295      	cmp	r5, r2
 8000948:	d815      	bhi.n	8000976 <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
      {
        latency = FLASH_LATENCY_RANGE[index];
 800094a:	aa0c      	add	r2, sp, #48	; 0x30
 800094c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000950:	f853 4c10 	ldr.w	r4, [r3, #-16]
        break;
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000954:	4d19      	ldr	r5, [pc, #100]	; (80009bc <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 8000956:	682b      	ldr	r3, [r5, #0]
 8000958:	f023 0307 	bic.w	r3, r3, #7
 800095c:	4323      	orrs	r3, r4
 800095e:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000960:	f7ff fdde 	bl	8000520 <HAL_GetTick>
 8000964:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8000966:	682b      	ldr	r3, [r5, #0]
 8000968:	f003 0307 	and.w	r3, r3, #7
 800096c:	429c      	cmp	r4, r3
 800096e:	d116      	bne.n	800099e <RCC_SetFlashLatencyFromMSIRange+0xbe>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8000970:	2000      	movs	r0, #0
}
 8000972:	b00d      	add	sp, #52	; 0x34
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8000976:	3301      	adds	r3, #1
 8000978:	2b04      	cmp	r3, #4
 800097a:	d1e2      	bne.n	8000942 <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800097c:	2400      	movs	r4, #0
 800097e:	e7e9      	b.n	8000954 <RCC_SetFlashLatencyFromMSIRange+0x74>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8000980:	9b01      	ldr	r3, [sp, #4]
 8000982:	429d      	cmp	r5, r3
 8000984:	d907      	bls.n	8000996 <RCC_SetFlashLatencyFromMSIRange+0xb6>
 8000986:	9b02      	ldr	r3, [sp, #8]
 8000988:	429d      	cmp	r5, r3
 800098a:	d906      	bls.n	800099a <RCC_SetFlashLatencyFromMSIRange+0xba>
 800098c:	9b03      	ldr	r3, [sp, #12]
 800098e:	429d      	cmp	r5, r3
 8000990:	d8f4      	bhi.n	800097c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8000992:	2302      	movs	r3, #2
 8000994:	e7d9      	b.n	800094a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8000996:	2300      	movs	r3, #0
 8000998:	e7d7      	b.n	800094a <RCC_SetFlashLatencyFromMSIRange+0x6a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800099a:	2301      	movs	r3, #1
 800099c:	e7d5      	b.n	800094a <RCC_SetFlashLatencyFromMSIRange+0x6a>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800099e:	f7ff fdbf 	bl	8000520 <HAL_GetTick>
 80009a2:	1b80      	subs	r0, r0, r6
 80009a4:	2802      	cmp	r0, #2
 80009a6:	d9de      	bls.n	8000966 <RCC_SetFlashLatencyFromMSIRange+0x86>
      return HAL_TIMEOUT;
 80009a8:	2003      	movs	r0, #3
 80009aa:	e7e2      	b.n	8000972 <RCC_SetFlashLatencyFromMSIRange+0x92>
 80009ac:	08002a58 	.word	0x08002a58
 80009b0:	080029f8 	.word	0x080029f8
 80009b4:	080029c8 	.word	0x080029c8
 80009b8:	000f4240 	.word	0x000f4240
 80009bc:	58004000 	.word	0x58004000

080009c0 <HAL_RCC_OscConfig>:
{
 80009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(RCC_OscInitStruct == NULL)
 80009c2:	4604      	mov	r4, r0
 80009c4:	b908      	cbnz	r0, 80009ca <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80009c6:	2001      	movs	r0, #1
 80009c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009ca:	6803      	ldr	r3, [r0, #0]
 80009cc:	069d      	lsls	r5, r3, #26
 80009ce:	d529      	bpl.n	8000a24 <HAL_RCC_OscConfig+0x64>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80009d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009d4:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80009d6:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80009d8:	f013 030c 	ands.w	r3, r3, #12
 80009dc:	d005      	beq.n	80009ea <HAL_RCC_OscConfig+0x2a>
 80009de:	2b0c      	cmp	r3, #12
 80009e0:	d145      	bne.n	8000a6e <HAL_RCC_OscConfig+0xae>
 80009e2:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d141      	bne.n	8000a6e <HAL_RCC_OscConfig+0xae>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009ea:	f7ff ff52 	bl	8000892 <LL_RCC_MSI_IsReady>
 80009ee:	b110      	cbz	r0, 80009f6 <HAL_RCC_OscConfig+0x36>
 80009f0:	69e3      	ldr	r3, [r4, #28]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d0e7      	beq.n	80009c6 <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009f8:	f7ff ff59 	bl	80008ae <LL_RCC_MSI_GetRange>
 80009fc:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a00:	d92a      	bls.n	8000a58 <HAL_RCC_OscConfig+0x98>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a02:	f7ff ff6d 	bl	80008e0 <RCC_SetFlashLatencyFromMSIRange>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	d1dd      	bne.n	80009c6 <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000a0c:	f7ff ff47 	bl	800089e <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a10:	6a20      	ldr	r0, [r4, #32]
 8000a12:	f7ff ff55 	bl	80008c0 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();  
 8000a16:	f001 ff1f 	bl	8002858 <SystemCoreClockUpdate>
        if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff fd38 	bl	8000490 <HAL_InitTick>
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d1d0      	bne.n	80009c6 <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a24:	6823      	ldr	r3, [r4, #0]
 8000a26:	07d8      	lsls	r0, r3, #31
 8000a28:	d44e      	bmi.n	8000ac8 <HAL_RCC_OscConfig+0x108>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a2a:	6823      	ldr	r3, [r4, #0]
 8000a2c:	0799      	lsls	r1, r3, #30
 8000a2e:	f100 8098 	bmi.w	8000b62 <HAL_RCC_OscConfig+0x1a2>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8000a32:	6823      	ldr	r3, [r4, #0]
 8000a34:	f013 0f18 	tst.w	r3, #24
 8000a38:	f040 80d9 	bne.w	8000bee <HAL_RCC_OscConfig+0x22e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	075a      	lsls	r2, r3, #29
 8000a40:	f100 8165 	bmi.w	8000d0e <HAL_RCC_OscConfig+0x34e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000a44:	6823      	ldr	r3, [r4, #0]
 8000a46:	065a      	lsls	r2, r3, #25
 8000a48:	f100 81b7 	bmi.w	8000dba <HAL_RCC_OscConfig+0x3fa>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000a4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000a4e:	2900      	cmp	r1, #0
 8000a50:	f040 81df 	bne.w	8000e12 <HAL_RCC_OscConfig+0x452>
  return HAL_OK;
 8000a54:	2000      	movs	r0, #0
 8000a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a58:	f7ff ff21 	bl	800089e <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a5c:	6a20      	ldr	r0, [r4, #32]
 8000a5e:	f7ff ff2f 	bl	80008c0 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000a64:	f7ff ff3c 	bl	80008e0 <RCC_SetFlashLatencyFromMSIRange>
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d0d4      	beq.n	8000a16 <HAL_RCC_OscConfig+0x56>
 8000a6c:	e7ab      	b.n	80009c6 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a6e:	69e2      	ldr	r2, [r4, #28]
 8000a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a74:	b1ba      	cbz	r2, 8000aa6 <HAL_RCC_OscConfig+0xe6>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	f042 0201 	orr.w	r2, r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a7e:	f7ff fd4f 	bl	8000520 <HAL_GetTick>
 8000a82:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 8000a84:	f7ff ff05 	bl	8000892 <LL_RCC_MSI_IsReady>
 8000a88:	b130      	cbz	r0, 8000a98 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000a8c:	f7ff ff07 	bl	800089e <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a90:	6a20      	ldr	r0, [r4, #32]
 8000a92:	f7ff ff15 	bl	80008c0 <LL_RCC_MSI_SetCalibTrimming>
 8000a96:	e7c5      	b.n	8000a24 <HAL_RCC_OscConfig+0x64>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a98:	f7ff fd42 	bl	8000520 <HAL_GetTick>
 8000a9c:	1b40      	subs	r0, r0, r5
 8000a9e:	2802      	cmp	r0, #2
 8000aa0:	d9f0      	bls.n	8000a84 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	f022 0201 	bic.w	r2, r2, #1
 8000aac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000aae:	f7ff fd37 	bl	8000520 <HAL_GetTick>
 8000ab2:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 8000ab4:	f7ff feed 	bl	8000892 <LL_RCC_MSI_IsReady>
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d0b3      	beq.n	8000a24 <HAL_RCC_OscConfig+0x64>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000abc:	f7ff fd30 	bl	8000520 <HAL_GetTick>
 8000ac0:	1b40      	subs	r0, r0, r5
 8000ac2:	2802      	cmp	r0, #2
 8000ac4:	d9f6      	bls.n	8000ab4 <HAL_RCC_OscConfig+0xf4>
 8000ac6:	e7ec      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000acc:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000ace:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ad0:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000ad4:	2b08      	cmp	r3, #8
 8000ad6:	d005      	beq.n	8000ae4 <HAL_RCC_OscConfig+0x124>
 8000ad8:	2b0c      	cmp	r3, #12
 8000ada:	d10b      	bne.n	8000af4 <HAL_RCC_OscConfig+0x134>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000adc:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8000ae0:	2b03      	cmp	r3, #3
 8000ae2:	d107      	bne.n	8000af4 <HAL_RCC_OscConfig+0x134>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ae4:	f7ff fec2 	bl	800086c <LL_RCC_HSE_IsReady>
 8000ae8:	2800      	cmp	r0, #0
 8000aea:	d09e      	beq.n	8000a2a <HAL_RCC_OscConfig+0x6a>
 8000aec:	6863      	ldr	r3, [r4, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d19b      	bne.n	8000a2a <HAL_RCC_OscConfig+0x6a>
 8000af2:	e768      	b.n	80009c6 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af4:	6862      	ldr	r2, [r4, #4]
 8000af6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000afe:	d110      	bne.n	8000b22 <HAL_RCC_OscConfig+0x162>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b08:	f7ff fd0a 	bl	8000520 <HAL_GetTick>
 8000b0c:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 8000b0e:	f7ff fead 	bl	800086c <LL_RCC_HSE_IsReady>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d189      	bne.n	8000a2a <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b16:	f7ff fd03 	bl	8000520 <HAL_GetTick>
 8000b1a:	1b40      	subs	r0, r0, r5
 8000b1c:	2864      	cmp	r0, #100	; 0x64
 8000b1e:	d9f6      	bls.n	8000b0e <HAL_RCC_OscConfig+0x14e>
 8000b20:	e7bf      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b22:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000b26:	d104      	bne.n	8000b32 <HAL_RCC_OscConfig+0x172>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	e7e6      	b.n	8000b00 <HAL_RCC_OscConfig+0x140>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000b32:	6819      	ldr	r1, [r3, #0]
 8000b34:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000b38:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000b3a:	6819      	ldr	r1, [r3, #0]
 8000b3c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000b40:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b42:	2a00      	cmp	r2, #0
 8000b44:	d1e0      	bne.n	8000b08 <HAL_RCC_OscConfig+0x148>
        tickstart = HAL_GetTick();
 8000b46:	f7ff fceb 	bl	8000520 <HAL_GetTick>
 8000b4a:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 8000b4c:	f7ff fe8e 	bl	800086c <LL_RCC_HSE_IsReady>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	f43f af6a 	beq.w	8000a2a <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b56:	f7ff fce3 	bl	8000520 <HAL_GetTick>
 8000b5a:	1b40      	subs	r0, r0, r5
 8000b5c:	2864      	cmp	r0, #100	; 0x64
 8000b5e:	d9f5      	bls.n	8000b4c <HAL_RCC_OscConfig+0x18c>
 8000b60:	e79f      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b66:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000b68:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b6a:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d005      	beq.n	8000b7e <HAL_RCC_OscConfig+0x1be>
 8000b72:	2b0c      	cmp	r3, #12
 8000b74:	d114      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x1e0>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000b76:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d110      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x1e0>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b7e:	f7ff fe7b 	bl	8000878 <LL_RCC_HSI_IsReady>
 8000b82:	b118      	cbz	r0, 8000b8c <HAL_RCC_OscConfig+0x1cc>
 8000b84:	68e3      	ldr	r3, [r4, #12]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f43f af1d 	beq.w	80009c6 <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b90:	6921      	ldr	r1, [r4, #16]
 8000b92:	6853      	ldr	r3, [r2, #4]
 8000b94:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000b98:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000b9c:	6053      	str	r3, [r2, #4]
 8000b9e:	e748      	b.n	8000a32 <HAL_RCC_OscConfig+0x72>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ba0:	68e2      	ldr	r2, [r4, #12]
 8000ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba6:	b182      	cbz	r2, 8000bca <HAL_RCC_OscConfig+0x20a>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fcb6 	bl	8000520 <HAL_GetTick>
 8000bb4:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 8000bb6:	f7ff fe5f 	bl	8000878 <LL_RCC_HSI_IsReady>
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	d1e6      	bne.n	8000b8c <HAL_RCC_OscConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bbe:	f7ff fcaf 	bl	8000520 <HAL_GetTick>
 8000bc2:	1b40      	subs	r0, r0, r5
 8000bc4:	2802      	cmp	r0, #2
 8000bc6:	d9f6      	bls.n	8000bb6 <HAL_RCC_OscConfig+0x1f6>
 8000bc8:	e76b      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bd0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bd2:	f7ff fca5 	bl	8000520 <HAL_GetTick>
 8000bd6:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 8000bd8:	f7ff fe4e 	bl	8000878 <LL_RCC_HSI_IsReady>
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	f43f af28 	beq.w	8000a32 <HAL_RCC_OscConfig+0x72>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000be2:	f7ff fc9d 	bl	8000520 <HAL_GetTick>
 8000be6:	1b40      	subs	r0, r0, r5
 8000be8:	2802      	cmp	r0, #2
 8000bea:	d9f5      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x218>
 8000bec:	e759      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bee:	6962      	ldr	r2, [r4, #20]
 8000bf0:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000bf4:	2a00      	cmp	r2, #0
 8000bf6:	d06b      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x310>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8000bf8:	06db      	lsls	r3, r3, #27
 8000bfa:	d543      	bpl.n	8000c84 <HAL_RCC_OscConfig+0x2c4>
        if (LL_RCC_LSI1_IsReady() == 0U)
 8000bfc:	f7ff fe42 	bl	8000884 <LL_RCC_LSI1_IsReady>
 8000c00:	b310      	cbz	r0, 8000c48 <HAL_RCC_OscConfig+0x288>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000c02:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000c06:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8000c12:	f7ff fc85 	bl	8000520 <HAL_GetTick>
 8000c16:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000c18:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000c1c:	071f      	lsls	r7, r3, #28
 8000c1e:	f140 8178 	bpl.w	8000f12 <HAL_RCC_OscConfig+0x552>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000c22:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000c26:	69a2      	ldr	r2, [r4, #24]
 8000c28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c30:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000c34:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000c38:	f023 0301 	bic.w	r3, r3, #1
 8000c3c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8000c40:	f7ff fc6e 	bl	8000520 <HAL_GetTick>
 8000c44:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8000c46:	e018      	b.n	8000c7a <HAL_RCC_OscConfig+0x2ba>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000c48:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8000c54:	f7ff fc64 	bl	8000520 <HAL_GetTick>
 8000c58:	4605      	mov	r5, r0
          while(LL_RCC_LSI1_IsReady() == 0U)
 8000c5a:	f7ff fe13 	bl	8000884 <LL_RCC_LSI1_IsReady>
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d1cf      	bne.n	8000c02 <HAL_RCC_OscConfig+0x242>
            if((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8000c62:	f7ff fc5d 	bl	8000520 <HAL_GetTick>
 8000c66:	1b40      	subs	r0, r0, r5
 8000c68:	2802      	cmp	r0, #2
 8000c6a:	d9f6      	bls.n	8000c5a <HAL_RCC_OscConfig+0x29a>
 8000c6c:	e719      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8000c6e:	f7ff fc57 	bl	8000520 <HAL_GetTick>
 8000c72:	1b40      	subs	r0, r0, r5
 8000c74:	2802      	cmp	r0, #2
 8000c76:	f63f af14 	bhi.w	8000aa2 <HAL_RCC_OscConfig+0xe2>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8000c7a:	f7ff fe03 	bl	8000884 <LL_RCC_LSI1_IsReady>
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d1f5      	bne.n	8000c6e <HAL_RCC_OscConfig+0x2ae>
 8000c82:	e6db      	b.n	8000a3c <HAL_RCC_OscConfig+0x7c>
 8000c84:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8000c90:	f7ff fc46 	bl	8000520 <HAL_GetTick>
 8000c94:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 8000c96:	f7ff fdf5 	bl	8000884 <LL_RCC_LSI1_IsReady>
 8000c9a:	b198      	cbz	r0, 8000cc4 <HAL_RCC_OscConfig+0x304>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000ca0:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000ca2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000ca6:	f022 0204 	bic.w	r2, r2, #4
 8000caa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000cae:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000cb2:	0718      	lsls	r0, r3, #28
 8000cb4:	f57f aec2 	bpl.w	8000a3c <HAL_RCC_OscConfig+0x7c>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8000cb8:	f7ff fc32 	bl	8000520 <HAL_GetTick>
 8000cbc:	1b80      	subs	r0, r0, r6
 8000cbe:	2803      	cmp	r0, #3
 8000cc0:	d9f5      	bls.n	8000cae <HAL_RCC_OscConfig+0x2ee>
 8000cc2:	e6ee      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8000cc4:	f7ff fc2c 	bl	8000520 <HAL_GetTick>
 8000cc8:	1b80      	subs	r0, r0, r6
 8000cca:	2802      	cmp	r0, #2
 8000ccc:	d9e3      	bls.n	8000c96 <HAL_RCC_OscConfig+0x2d6>
 8000cce:	e6e8      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000cd0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000cd4:	f023 0304 	bic.w	r3, r3, #4
 8000cd8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000cdc:	f7ff fc20 	bl	8000520 <HAL_GetTick>
 8000ce0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000ce2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000ce6:	0719      	lsls	r1, r3, #28
 8000ce8:	f140 811a 	bpl.w	8000f20 <HAL_RCC_OscConfig+0x560>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8000cec:	f7ff fc18 	bl	8000520 <HAL_GetTick>
 8000cf0:	1b80      	subs	r0, r0, r6
 8000cf2:	2803      	cmp	r0, #3
 8000cf4:	d9f5      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x322>
 8000cf6:	e6d4      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8000cf8:	f7ff fc12 	bl	8000520 <HAL_GetTick>
 8000cfc:	1b40      	subs	r0, r0, r5
 8000cfe:	2802      	cmp	r0, #2
 8000d00:	f63f aecf 	bhi.w	8000aa2 <HAL_RCC_OscConfig+0xe2>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8000d04:	f7ff fdbe 	bl	8000884 <LL_RCC_LSI1_IsReady>
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d1f5      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x338>
 8000d0c:	e696      	b.n	8000a3c <HAL_RCC_OscConfig+0x7c>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d0e:	4d89      	ldr	r5, [pc, #548]	; (8000f34 <HAL_RCC_OscConfig+0x574>)
 8000d10:	682b      	ldr	r3, [r5, #0]
 8000d12:	05db      	lsls	r3, r3, #23
 8000d14:	d51c      	bpl.n	8000d50 <HAL_RCC_OscConfig+0x390>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d16:	68a3      	ldr	r3, [r4, #8]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000d1e:	d125      	bne.n	8000d6c <HAL_RCC_OscConfig+0x3ac>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d20:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000d2c:	f7ff fbf8 	bl	8000520 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000d30:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8000d34:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d36:	f241 3588 	movw	r5, #5000	; 0x1388
 8000d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d3e:	0798      	lsls	r0, r3, #30
 8000d40:	f53f ae80 	bmi.w	8000a44 <HAL_RCC_OscConfig+0x84>
 8000d44:	f7ff fbec 	bl	8000520 <HAL_GetTick>
 8000d48:	1b80      	subs	r0, r0, r6
 8000d4a:	42a8      	cmp	r0, r5
 8000d4c:	d9f5      	bls.n	8000d3a <HAL_RCC_OscConfig+0x37a>
 8000d4e:	e6a8      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
      HAL_PWR_EnableBkUpAccess();
 8000d50:	f7ff fd7c 	bl	800084c <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8000d54:	f7ff fbe4 	bl	8000520 <HAL_GetTick>
 8000d58:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d5a:	682b      	ldr	r3, [r5, #0]
 8000d5c:	05df      	lsls	r7, r3, #23
 8000d5e:	d4da      	bmi.n	8000d16 <HAL_RCC_OscConfig+0x356>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d60:	f7ff fbde 	bl	8000520 <HAL_GetTick>
 8000d64:	1b80      	subs	r0, r0, r6
 8000d66:	2802      	cmp	r0, #2
 8000d68:	d9f7      	bls.n	8000d5a <HAL_RCC_OscConfig+0x39a>
 8000d6a:	e69a      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d6c:	2b05      	cmp	r3, #5
 8000d6e:	d106      	bne.n	8000d7e <HAL_RCC_OscConfig+0x3be>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d70:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8000d7c:	e7d0      	b.n	8000d20 <HAL_RCC_OscConfig+0x360>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d7e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8000d82:	f022 0201 	bic.w	r2, r2, #1
 8000d86:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d8a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8000d8e:	f022 0204 	bic.w	r2, r2, #4
 8000d92:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1c8      	bne.n	8000d2c <HAL_RCC_OscConfig+0x36c>
      tickstart = HAL_GetTick();
 8000d9a:	f7ff fbc1 	bl	8000520 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d9e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000da2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000da4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000da8:	0799      	lsls	r1, r3, #30
 8000daa:	f57f ae4b 	bpl.w	8000a44 <HAL_RCC_OscConfig+0x84>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dae:	f7ff fbb7 	bl	8000520 <HAL_GetTick>
 8000db2:	1bc0      	subs	r0, r0, r7
 8000db4:	42b0      	cmp	r0, r6
 8000db6:	d9f5      	bls.n	8000da4 <HAL_RCC_OscConfig+0x3e4>
 8000db8:	e673      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000dba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000dbc:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000dc0:	b19b      	cbz	r3, 8000dea <HAL_RCC_OscConfig+0x42a>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000dc2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000dce:	f7ff fba7 	bl	8000520 <HAL_GetTick>
 8000dd2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000dd4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000dd8:	079a      	lsls	r2, r3, #30
 8000dda:	f53f ae37 	bmi.w	8000a4c <HAL_RCC_OscConfig+0x8c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000dde:	f7ff fb9f 	bl	8000520 <HAL_GetTick>
 8000de2:	1b80      	subs	r0, r0, r6
 8000de4:	2802      	cmp	r0, #2
 8000de6:	d9f5      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x414>
 8000de8:	e65b      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000dea:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000dee:	f023 0301 	bic.w	r3, r3, #1
 8000df2:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000df6:	f7ff fb93 	bl	8000520 <HAL_GetTick>
 8000dfa:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000dfc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000e00:	079b      	lsls	r3, r3, #30
 8000e02:	f57f ae23 	bpl.w	8000a4c <HAL_RCC_OscConfig+0x8c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e06:	f7ff fb8b 	bl	8000520 <HAL_GetTick>
 8000e0a:	1b80      	subs	r0, r0, r6
 8000e0c:	2802      	cmp	r0, #2
 8000e0e:	d9f5      	bls.n	8000dfc <HAL_RCC_OscConfig+0x43c>
 8000e10:	e647      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e1c:	2a0c      	cmp	r2, #12
 8000e1e:	d052      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x506>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000e20:	681a      	ldr	r2, [r3, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000e22:	2902      	cmp	r1, #2
 8000e24:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	d134      	bne.n	8000e96 <HAL_RCC_OscConfig+0x4d6>
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fb78 	bl	8000520 <HAL_GetTick>
 8000e30:	4605      	mov	r5, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8000e32:	f7ff fd4e 	bl	80008d2 <LL_RCC_PLL_IsReady>
 8000e36:	bb40      	cbnz	r0, 8000e8a <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e40:	68d0      	ldr	r0, [r2, #12]
 8000e42:	430b      	orrs	r3, r1
 8000e44:	493c      	ldr	r1, [pc, #240]	; (8000f38 <HAL_RCC_OscConfig+0x578>)
 8000e46:	4001      	ands	r1, r0
 8000e48:	430b      	orrs	r3, r1
 8000e4a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000e50:	430b      	orrs	r3, r1
 8000e52:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000e54:	430b      	orrs	r3, r1
 8000e56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000e58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000e5c:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000e5e:	6813      	ldr	r3, [r2, #0]
 8000e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e64:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e66:	68d3      	ldr	r3, [r2, #12]
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8000e6e:	f7ff fb57 	bl	8000520 <HAL_GetTick>
 8000e72:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() == 0U)
 8000e74:	f7ff fd2d 	bl	80008d2 <LL_RCC_PLL_IsReady>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f47f adeb 	bne.w	8000a54 <HAL_RCC_OscConfig+0x94>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e7e:	f7ff fb4f 	bl	8000520 <HAL_GetTick>
 8000e82:	1b00      	subs	r0, r0, r4
 8000e84:	2802      	cmp	r0, #2
 8000e86:	d9f5      	bls.n	8000e74 <HAL_RCC_OscConfig+0x4b4>
 8000e88:	e60b      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e8a:	f7ff fb49 	bl	8000520 <HAL_GetTick>
 8000e8e:	1b40      	subs	r0, r0, r5
 8000e90:	2802      	cmp	r0, #2
 8000e92:	d9ce      	bls.n	8000e32 <HAL_RCC_OscConfig+0x472>
 8000e94:	e605      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	f022 0203 	bic.w	r2, r2, #3
 8000e9c:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8000ea4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ea8:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fb39 	bl	8000520 <HAL_GetTick>
 8000eae:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8000eb0:	f7ff fd0f 	bl	80008d2 <LL_RCC_PLL_IsReady>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	f43f adcd 	beq.w	8000a54 <HAL_RCC_OscConfig+0x94>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eba:	f7ff fb31 	bl	8000520 <HAL_GetTick>
 8000ebe:	1b00      	subs	r0, r0, r4
 8000ec0:	2802      	cmp	r0, #2
 8000ec2:	d9f5      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x4f0>
 8000ec4:	e5ed      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
      uint32_t pllcfgr = RCC->PLLCFGR;
 8000ec6:	68d8      	ldr	r0, [r3, #12]
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ec8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000eca:	f000 0203 	and.w	r2, r0, #3
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	f47f ad79 	bne.w	80009c6 <HAL_RCC_OscConfig+0x6>
 8000ed4:	6b62      	ldr	r2, [r4, #52]	; 0x34
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ed6:	f000 0370 	and.w	r3, r0, #112	; 0x70
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eda:	4293      	cmp	r3, r2
 8000edc:	f47f ad73 	bne.w	80009c6 <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ee0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8000ee2:	f3c0 2306 	ubfx	r3, r0, #8, #7
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	f47f ad6d 	bne.w	80009c6 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8000eec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000eee:	f400 1378 	and.w	r3, r0, #4063232	; 0x3e0000
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	f47f ad67 	bne.w	80009c6 <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000ef8:	6c22      	ldr	r2, [r4, #64]	; 0x40
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000efa:	f000 6360 	and.w	r3, r0, #234881024	; 0xe000000
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000efe:	4293      	cmp	r3, r2
 8000f00:	f47f ad61 	bne.w	80009c6 <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000f04:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8000f06:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
    return HAL_ERROR;
 8000f0a:	1ac0      	subs	r0, r0, r3
 8000f0c:	bf18      	it	ne
 8000f0e:	2001      	movne	r0, #1
 8000f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8000f12:	f7ff fb05 	bl	8000520 <HAL_GetTick>
 8000f16:	1b80      	subs	r0, r0, r6
 8000f18:	2803      	cmp	r0, #3
 8000f1a:	f67f ae7d 	bls.w	8000c18 <HAL_RCC_OscConfig+0x258>
 8000f1e:	e5c0      	b.n	8000aa2 <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000f20:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000f24:	f023 0301 	bic.w	r3, r3, #1
 8000f28:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000f2c:	f7ff faf8 	bl	8000520 <HAL_GetTick>
 8000f30:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 8000f32:	e6e7      	b.n	8000d04 <HAL_RCC_OscConfig+0x344>
 8000f34:	58000400 	.word	0x58000400
 8000f38:	11c1808c 	.word	0x11c1808c

08000f3c <HAL_RCC_ClockConfig>:
{
 8000f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f40:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000f42:	4604      	mov	r4, r0
 8000f44:	b910      	cbnz	r0, 8000f4c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f46:	2001      	movs	r0, #1
 8000f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f4c:	4e79      	ldr	r6, [pc, #484]	; (8001134 <HAL_RCC_ClockConfig+0x1f8>)
 8000f4e:	6833      	ldr	r3, [r6, #0]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	428b      	cmp	r3, r1
 8000f56:	d372      	bcc.n	800103e <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	0799      	lsls	r1, r3, #30
 8000f5c:	d50e      	bpl.n	8000f7c <HAL_RCC_ClockConfig+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000f5e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8000f62:	68a2      	ldr	r2, [r4, #8]
 8000f64:	68b3      	ldr	r3, [r6, #8]
 8000f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000f6e:	f7ff fad7 	bl	8000520 <HAL_GetTick>
 8000f72:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8000f74:	68b3      	ldr	r3, [r6, #8]
 8000f76:	03db      	lsls	r3, r3, #15
 8000f78:	f140 80b8 	bpl.w	80010ec <HAL_RCC_ClockConfig+0x1b0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	069a      	lsls	r2, r3, #26
 8000f80:	d511      	bpl.n	8000fa6 <HAL_RCC_ClockConfig+0x6a>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000f82:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8000f86:	6962      	ldr	r2, [r4, #20]
 8000f88:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8000f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f90:	4313      	orrs	r3, r2
 8000f92:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8000f96:	f7ff fac3 	bl	8000520 <HAL_GetTick>
 8000f9a:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8000f9c:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8000fa0:	0399      	lsls	r1, r3, #14
 8000fa2:	f140 80aa 	bpl.w	80010fa <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	0658      	lsls	r0, r3, #25
 8000faa:	d512      	bpl.n	8000fd2 <HAL_RCC_ClockConfig+0x96>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000fac:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8000fb0:	69a2      	ldr	r2, [r4, #24]
 8000fb2:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8000fb6:	f023 030f 	bic.w	r3, r3, #15
 8000fba:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8000fbe:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8000fc2:	f7ff faad 	bl	8000520 <HAL_GetTick>
 8000fc6:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8000fc8:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8000fcc:	03db      	lsls	r3, r3, #15
 8000fce:	f140 809b 	bpl.w	8001108 <HAL_RCC_ClockConfig+0x1cc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fd2:	6823      	ldr	r3, [r4, #0]
 8000fd4:	075a      	lsls	r2, r3, #29
 8000fd6:	d50e      	bpl.n	8000ff6 <HAL_RCC_ClockConfig+0xba>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000fd8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8000fdc:	68e2      	ldr	r2, [r4, #12]
 8000fde:	68b3      	ldr	r3, [r6, #8]
 8000fe0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000fe8:	f7ff fa9a 	bl	8000520 <HAL_GetTick>
 8000fec:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8000fee:	68b3      	ldr	r3, [r6, #8]
 8000ff0:	0399      	lsls	r1, r3, #14
 8000ff2:	f140 8090 	bpl.w	8001116 <HAL_RCC_ClockConfig+0x1da>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	0718      	lsls	r0, r3, #28
 8000ffa:	d50f      	bpl.n	800101c <HAL_RCC_ClockConfig+0xe0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ffc:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001000:	6922      	ldr	r2, [r4, #16]
 8001002:	68b3      	ldr	r3, [r6, #8]
 8001004:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001008:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800100c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800100e:	f7ff fa87 	bl	8000520 <HAL_GetTick>
 8001012:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001014:	68b3      	ldr	r3, [r6, #8]
 8001016:	035b      	lsls	r3, r3, #13
 8001018:	f140 8084 	bpl.w	8001124 <HAL_RCC_ClockConfig+0x1e8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	07da      	lsls	r2, r3, #31
 8001020:	d423      	bmi.n	800106a <HAL_RCC_ClockConfig+0x12e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001022:	4c44      	ldr	r4, [pc, #272]	; (8001134 <HAL_RCC_ClockConfig+0x1f8>)
 8001024:	6823      	ldr	r3, [r4, #0]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	429d      	cmp	r5, r3
 800102c:	d34b      	bcc.n	80010c6 <HAL_RCC_ClockConfig+0x18a>
  SystemCoreClockUpdate();
 800102e:	f001 fc13 	bl	8002858 <SystemCoreClockUpdate>
  return HAL_InitTick (HAL_GetTickPrio());
 8001032:	f7ff fa7b 	bl	800052c <HAL_GetTickPrio>
}
 8001036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick (HAL_GetTickPrio());
 800103a:	f7ff ba29 	b.w	8000490 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800103e:	6833      	ldr	r3, [r6, #0]
 8001040:	f023 0307 	bic.w	r3, r3, #7
 8001044:	430b      	orrs	r3, r1
 8001046:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001048:	f7ff fa6a 	bl	8000520 <HAL_GetTick>
 800104c:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800104e:	6833      	ldr	r3, [r6, #0]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	429d      	cmp	r5, r3
 8001056:	f43f af7f 	beq.w	8000f58 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800105a:	f7ff fa61 	bl	8000520 <HAL_GetTick>
 800105e:	1bc0      	subs	r0, r0, r7
 8001060:	2802      	cmp	r0, #2
 8001062:	d9f4      	bls.n	800104e <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 8001064:	2003      	movs	r0, #3
 8001066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800106a:	6863      	ldr	r3, [r4, #4]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d11e      	bne.n	80010ae <HAL_RCC_ClockConfig+0x172>
      if (LL_RCC_HSE_IsReady() == 0U)
 8001070:	f7ff fbfc 	bl	800086c <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 8001074:	2800      	cmp	r0, #0
 8001076:	f43f af66 	beq.w	8000f46 <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800107a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800107e:	6862      	ldr	r2, [r4, #4]
 8001080:	68b3      	ldr	r3, [r6, #8]
 8001082:	f023 0303 	bic.w	r3, r3, #3
 8001086:	4313      	orrs	r3, r2
 8001088:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800108a:	f7ff fa49 	bl	8000520 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800108e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001092:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001094:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001096:	6862      	ldr	r2, [r4, #4]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010a0:	d0bf      	beq.n	8001022 <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a2:	f7ff fa3d 	bl	8000520 <HAL_GetTick>
 80010a6:	1bc0      	subs	r0, r0, r7
 80010a8:	4540      	cmp	r0, r8
 80010aa:	d9f3      	bls.n	8001094 <HAL_RCC_ClockConfig+0x158>
 80010ac:	e7da      	b.n	8001064 <HAL_RCC_ClockConfig+0x128>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d102      	bne.n	80010b8 <HAL_RCC_ClockConfig+0x17c>
      if (LL_RCC_PLL_IsReady() == 0U)
 80010b2:	f7ff fc0e 	bl	80008d2 <LL_RCC_PLL_IsReady>
 80010b6:	e7dd      	b.n	8001074 <HAL_RCC_ClockConfig+0x138>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80010b8:	b913      	cbnz	r3, 80010c0 <HAL_RCC_ClockConfig+0x184>
      if (LL_RCC_MSI_IsReady() == 0U)
 80010ba:	f7ff fbea 	bl	8000892 <LL_RCC_MSI_IsReady>
 80010be:	e7d9      	b.n	8001074 <HAL_RCC_ClockConfig+0x138>
      if (LL_RCC_HSI_IsReady() == 0U)
 80010c0:	f7ff fbda 	bl	8000878 <LL_RCC_HSI_IsReady>
 80010c4:	e7d6      	b.n	8001074 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	f023 0307 	bic.w	r3, r3, #7
 80010cc:	432b      	orrs	r3, r5
 80010ce:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80010d0:	f7ff fa26 	bl	8000520 <HAL_GetTick>
 80010d4:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d6:	6823      	ldr	r3, [r4, #0]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	429d      	cmp	r5, r3
 80010de:	d0a6      	beq.n	800102e <HAL_RCC_ClockConfig+0xf2>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80010e0:	f7ff fa1e 	bl	8000520 <HAL_GetTick>
 80010e4:	1b80      	subs	r0, r0, r6
 80010e6:	2802      	cmp	r0, #2
 80010e8:	d9f5      	bls.n	80010d6 <HAL_RCC_ClockConfig+0x19a>
 80010ea:	e7bb      	b.n	8001064 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80010ec:	f7ff fa18 	bl	8000520 <HAL_GetTick>
 80010f0:	1bc0      	subs	r0, r0, r7
 80010f2:	2802      	cmp	r0, #2
 80010f4:	f67f af3e 	bls.w	8000f74 <HAL_RCC_ClockConfig+0x38>
 80010f8:	e7b4      	b.n	8001064 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80010fa:	f7ff fa11 	bl	8000520 <HAL_GetTick>
 80010fe:	1bc0      	subs	r0, r0, r7
 8001100:	2802      	cmp	r0, #2
 8001102:	f67f af4b 	bls.w	8000f9c <HAL_RCC_ClockConfig+0x60>
 8001106:	e7ad      	b.n	8001064 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001108:	f7ff fa0a 	bl	8000520 <HAL_GetTick>
 800110c:	1bc0      	subs	r0, r0, r7
 800110e:	2802      	cmp	r0, #2
 8001110:	f67f af5a 	bls.w	8000fc8 <HAL_RCC_ClockConfig+0x8c>
 8001114:	e7a6      	b.n	8001064 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001116:	f7ff fa03 	bl	8000520 <HAL_GetTick>
 800111a:	1bc0      	subs	r0, r0, r7
 800111c:	2802      	cmp	r0, #2
 800111e:	f67f af66 	bls.w	8000fee <HAL_RCC_ClockConfig+0xb2>
 8001122:	e79f      	b.n	8001064 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001124:	f7ff f9fc 	bl	8000520 <HAL_GetTick>
 8001128:	1bc0      	subs	r0, r0, r7
 800112a:	2802      	cmp	r0, #2
 800112c:	f67f af72 	bls.w	8001014 <HAL_RCC_ClockConfig+0xd8>
 8001130:	e798      	b.n	8001064 <HAL_RCC_ClockConfig+0x128>
 8001132:	bf00      	nop
 8001134:	58004000 	.word	0x58004000

08001138 <HAL_RCC_GetSysClockFreq>:
 8001138:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 800113c:	b508      	push	{r3, lr}
 800113e:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001140:	f013 030c 	ands.w	r3, r3, #12
 8001144:	d107      	bne.n	8001156 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001146:	f7ff fbb2 	bl	80008ae <LL_RCC_MSI_GetRange>
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x90>)
 800114c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001150:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001154:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001156:	2b04      	cmp	r3, #4
 8001158:	d033      	beq.n	80011c2 <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800115a:	2b08      	cmp	r3, #8
 800115c:	d107      	bne.n	800116e <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800115e:	6813      	ldr	r3, [r2, #0]
       sysclockfreq = HSE_VALUE;
 8001160:	481a      	ldr	r0, [pc, #104]	; (80011cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001162:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001168:	bf08      	it	eq
 800116a:	4618      	moveq	r0, r3
 800116c:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800116e:	68d3      	ldr	r3, [r2, #12]
 8001170:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001174:	2b02      	cmp	r3, #2
 8001176:	d022      	beq.n	80011be <HAL_RCC_GetSysClockFreq+0x86>
 8001178:	2b03      	cmp	r3, #3
 800117a:	d118      	bne.n	80011ae <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800117c:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = HSE_VALUE;
 800117e:	4814      	ldr	r0, [pc, #80]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001180:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001186:	bf08      	it	eq
 8001188:	4603      	moveq	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800118a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800118e:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001190:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001192:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001194:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8001198:	4358      	muls	r0, r3
 800119a:	f3c1 1302 	ubfx	r3, r1, #4, #3
 800119e:	3301      	adds	r3, #1
 80011a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80011a4:	0f53      	lsrs	r3, r2, #29
 80011a6:	3301      	adds	r3, #1
 80011a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80011ac:	bd08      	pop	{r3, pc}
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80011ae:	f7ff fb7e 	bl	80008ae <LL_RCC_MSI_GetRange>
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x90>)
 80011b4:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80011b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80011bc:	e7e5      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 80011be:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_RCC_GetSysClockFreq+0x94>)
 80011c0:	e7e3      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 80011c2:	4802      	ldr	r0, [pc, #8]	; (80011cc <HAL_RCC_GetSysClockFreq+0x94>)
}
 80011c4:	bd08      	pop	{r3, pc}
 80011c6:	bf00      	nop
 80011c8:	08002a58 	.word	0x08002a58
 80011cc:	00f42400 	.word	0x00f42400
 80011d0:	01e84800 	.word	0x01e84800

080011d4 <HAL_RCC_GetHCLKFreq>:
{
 80011d4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80011d6:	f7ff ffaf 	bl	8001138 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_RCC_GetHCLKFreq+0x1c>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80011ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80011ee:	bd08      	pop	{r3, pc}
 80011f0:	080029f8 	.word	0x080029f8

080011f4 <HAL_RCC_GetPCLK1Freq>:
{
 80011f4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80011f6:	f7ff ffed 	bl	80011d4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80011fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	f003 031f 	and.w	r3, r3, #31
}
 800120e:	40d8      	lsrs	r0, r3
 8001210:	bd08      	pop	{r3, pc}
 8001212:	bf00      	nop
 8001214:	08002a38 	.word	0x08002a38

08001218 <HAL_RCC_GetPCLK2Freq>:
{
 8001218:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800121a:	f7ff ffdb 	bl	80011d4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800121e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800122a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122e:	f003 031f 	and.w	r3, r3, #31
}
 8001232:	40d8      	lsrs	r0, r3
 8001234:	bd08      	pop	{r3, pc}
 8001236:	bf00      	nop
 8001238:	08002a38 	.word	0x08002a38

0800123c <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800123c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001240:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8001244:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001248:	4770      	bx	lr

0800124a <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800124a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800124e:	0902      	lsrs	r2, r0, #4
 8001250:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001254:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8001258:	0100      	lsls	r0, r0, #4
 800125a:	ea23 0302 	bic.w	r3, r3, r2
 800125e:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 8001262:	4318      	orrs	r0, r3
 8001264:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
 8001268:	4770      	bx	lr

0800126a <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800126a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800126e:	6813      	ldr	r3, [r2, #0]
 8001270:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4770      	bx	lr

08001278 <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800127c:	6813      	ldr	r3, [r2, #0]
 800127e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4770      	bx	lr

08001286 <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8001286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128a:	6818      	ldr	r0, [r3, #0]
}
 800128c:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8001290:	4770      	bx	lr

08001292 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001294:	6805      	ldr	r5, [r0, #0]
 8001296:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 800129a:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800129c:	d043      	beq.n	8001326 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800129e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80012a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012a4:	d015      	beq.n	80012d2 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80012a6:	d802      	bhi.n	80012ae <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80012a8:	b1d3      	cbz	r3, 80012e0 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80012aa:	2501      	movs	r5, #1
 80012ac:	e03b      	b.n	8001326 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 80012ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80012b2:	d002      	beq.n	80012ba <HAL_RCCEx_PeriphCLKConfig+0x28>
 80012b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80012b8:	d1f7      	bne.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80012ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80012c0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80012c4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80012c8:	430b      	orrs	r3, r1
 80012ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80012ce:	2500      	movs	r5, #0
 80012d0:	e029      	b.n	8001326 <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80012d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012d6:	68d3      	ldr	r3, [r2, #12]
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012dc:	60d3      	str	r3, [r2, #12]
        break;
 80012de:	e7ec      	b.n	80012ba <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80012e0:	f7ff ffca 	bl	8001278 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80012e4:	f7ff f91c 	bl	8000520 <HAL_GetTick>
 80012e8:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80012ea:	f7ff ffcc 	bl	8001286 <LL_RCC_PLLSAI1_IsReady>
 80012ee:	b9a0      	cbnz	r0, 800131a <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80012f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012f4:	6861      	ldr	r1, [r4, #4]
 80012f6:	6913      	ldr	r3, [r2, #16]
 80012f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80012fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001300:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8001302:	6913      	ldr	r3, [r2, #16]
 8001304:	68a1      	ldr	r1, [r4, #8]
 8001306:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 800130a:	430b      	orrs	r3, r1
 800130c:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800130e:	f7ff ffac 	bl	800126a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001312:	f7ff f905 	bl	8000520 <HAL_GetTick>
 8001316:	4605      	mov	r5, r0
 8001318:	e0ba      	b.n	8001490 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800131a:	f7ff f901 	bl	8000520 <HAL_GetTick>
 800131e:	1b40      	subs	r0, r0, r5
 8001320:	2802      	cmp	r0, #2
 8001322:	d9e2      	bls.n	80012ea <HAL_RCCEx_PeriphCLKConfig+0x58>
      status = HAL_TIMEOUT;
 8001324:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	051a      	lsls	r2, r3, #20
 800132a:	d515      	bpl.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800132c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if(rtcclocksource != PeriphClkInit->RTCClockSelection)
 8001330:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001332:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8001336:	f407 7740 	and.w	r7, r7, #768	; 0x300
 800133a:	42bb      	cmp	r3, r7
 800133c:	d00c      	beq.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 800133e:	f7ff fa85 	bl	800084c <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001342:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if(rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8001346:	2f00      	cmp	r7, #0
 8001348:	f040 80ad 	bne.w	80014a6 <HAL_RCCEx_PeriphCLKConfig+0x214>
 800134c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800134e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001352:	4313      	orrs	r3, r2
 8001354:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	07df      	lsls	r7, r3, #31
 800135c:	d509      	bpl.n	8001372 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800135e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001362:	69a0      	ldr	r0, [r4, #24]
 8001364:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001368:	f022 0203 	bic.w	r2, r2, #3
 800136c:	4302      	orrs	r2, r0
 800136e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001372:	079e      	lsls	r6, r3, #30
 8001374:	d509      	bpl.n	800138a <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137a:	69e0      	ldr	r0, [r4, #28]
 800137c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001380:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001384:	4302      	orrs	r2, r0
 8001386:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800138a:	06d8      	lsls	r0, r3, #27
 800138c:	d50c      	bpl.n	80013a8 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800138e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001390:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001394:	0c31      	lsrs	r1, r6, #16
 8001396:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800139a:	0409      	lsls	r1, r1, #16
 800139c:	ea22 0201 	bic.w	r2, r2, r1
 80013a0:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80013a4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80013a8:	0699      	lsls	r1, r3, #26
 80013aa:	d50c      	bpl.n	80013c6 <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80013ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013ae:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80013b2:	0c31      	lsrs	r1, r6, #16
 80013b4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80013b8:	0409      	lsls	r1, r1, #16
 80013ba:	ea22 0201 	bic.w	r2, r2, r1
 80013be:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80013c2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80013c6:	075a      	lsls	r2, r3, #29
 80013c8:	d502      	bpl.n	80013d0 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80013ca:	6a20      	ldr	r0, [r4, #32]
 80013cc:	f7ff ff3d 	bl	800124a <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	071b      	lsls	r3, r3, #28
 80013d4:	d502      	bpl.n	80013dc <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80013d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80013d8:	f7ff ff37 	bl	800124a <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80013dc:	6823      	ldr	r3, [r4, #0]
 80013de:	05df      	lsls	r7, r3, #23
 80013e0:	d510      	bpl.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x172>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80013e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80013ec:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80013f0:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80013f2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80013f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80013fa:	d17d      	bne.n	80014f8 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80013fc:	68d3      	ldr	r3, [r2, #12]
 80013fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001402:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001404:	6822      	ldr	r2, [r4, #0]
 8001406:	0596      	lsls	r6, r2, #22
 8001408:	d509      	bpl.n	800141e <HAL_RCCEx_PeriphCLKConfig+0x18c>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800140a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800140e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001410:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001414:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001418:	4303      	orrs	r3, r0
 800141a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800141e:	0550      	lsls	r0, r2, #21
 8001420:	d511      	bpl.n	8001446 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8001422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001426:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001428:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800142c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001430:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8001432:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001436:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800143a:	f040 8094 	bne.w	8001566 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800143e:	68d3      	ldr	r3, [r2, #12]
 8001440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001444:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8001446:	6822      	ldr	r2, [r4, #0]
 8001448:	04d1      	lsls	r1, r2, #19
 800144a:	d509      	bpl.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800144c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001450:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001452:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8001456:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800145a:	4303      	orrs	r3, r0
 800145c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8001460:	0493      	lsls	r3, r2, #18
 8001462:	d50d      	bpl.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001468:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800146a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800146c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001470:	430b      	orrs	r3, r1
 8001472:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001474:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001476:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001478:	f023 0303 	bic.w	r3, r3, #3
 800147c:	430b      	orrs	r3, r1
 800147e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001480:	4628      	mov	r0, r5
 8001482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001484:	f7ff f84c 	bl	8000520 <HAL_GetTick>
 8001488:	1b40      	subs	r0, r0, r5
 800148a:	2802      	cmp	r0, #2
 800148c:	f63f af4a 	bhi.w	8001324 <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8001490:	f7ff fef9 	bl	8001286 <LL_RCC_PLLSAI1_IsReady>
 8001494:	2801      	cmp	r0, #1
 8001496:	d1f5      	bne.n	8001484 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800149c:	6961      	ldr	r1, [r4, #20]
 800149e:	6913      	ldr	r3, [r2, #16]
 80014a0:	430b      	orrs	r3, r1
 80014a2:	6113      	str	r3, [r2, #16]
 80014a4:	e709      	b.n	80012ba <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80014a6:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80014aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014ae:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80014b2:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80014b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014ba:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80014be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014c4:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 80014c6:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80014ca:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80014ce:	07db      	lsls	r3, r3, #31
 80014d0:	f57f af42 	bpl.w	8001358 <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 80014d4:	f7ff f824 	bl	8000520 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d8:	f241 3688 	movw	r6, #5000	; 0x1388
          tickstart = HAL_GetTick();
 80014dc:	4607      	mov	r7, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 80014de:	e004      	b.n	80014ea <HAL_RCCEx_PeriphCLKConfig+0x258>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e0:	f7ff f81e 	bl	8000520 <HAL_GetTick>
 80014e4:	1bc0      	subs	r0, r0, r7
 80014e6:	42b0      	cmp	r0, r6
 80014e8:	d804      	bhi.n	80014f4 <HAL_RCCEx_PeriphCLKConfig+0x262>
          while (LL_RCC_LSE_IsReady() != 1U)
 80014ea:	f7ff fea7 	bl	800123c <LL_RCC_LSE_IsReady>
 80014ee:	2801      	cmp	r0, #1
 80014f0:	d1f6      	bne.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80014f2:	e731      	b.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0xc6>
              ret = HAL_TIMEOUT;
 80014f4:	2503      	movs	r5, #3
 80014f6:	e72f      	b.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80014f8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80014fc:	d182      	bne.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x172>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80014fe:	f7ff febb 	bl	8001278 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001502:	f7ff f80d 	bl	8000520 <HAL_GetTick>
 8001506:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001508:	f7ff febd 	bl	8001286 <LL_RCC_PLLSAI1_IsReady>
 800150c:	b9a0      	cbnz	r0, 8001538 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800150e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001512:	6861      	ldr	r1, [r4, #4]
 8001514:	6913      	ldr	r3, [r2, #16]
 8001516:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800151a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800151e:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8001520:	6913      	ldr	r3, [r2, #16]
 8001522:	68e1      	ldr	r1, [r4, #12]
 8001524:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8001528:	430b      	orrs	r3, r1
 800152a:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800152c:	f7ff fe9d 	bl	800126a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001530:	f7fe fff6 	bl	8000520 <HAL_GetTick>
 8001534:	4606      	mov	r6, r0
 8001536:	e00b      	b.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001538:	f7fe fff2 	bl	8000520 <HAL_GetTick>
 800153c:	1b80      	subs	r0, r0, r6
 800153e:	2802      	cmp	r0, #2
 8001540:	d9e2      	bls.n	8001508 <HAL_RCCEx_PeriphCLKConfig+0x276>
              ret = HAL_TIMEOUT;
 8001542:	2503      	movs	r5, #3
 8001544:	e75e      	b.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x172>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001546:	f7fe ffeb 	bl	8000520 <HAL_GetTick>
 800154a:	1b80      	subs	r0, r0, r6
 800154c:	2802      	cmp	r0, #2
 800154e:	d8f8      	bhi.n	8001542 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8001550:	f7ff fe99 	bl	8001286 <LL_RCC_PLLSAI1_IsReady>
 8001554:	2801      	cmp	r0, #1
 8001556:	d1f6      	bne.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800155c:	6961      	ldr	r1, [r4, #20]
 800155e:	6913      	ldr	r3, [r2, #16]
 8001560:	430b      	orrs	r3, r1
 8001562:	6113      	str	r3, [r2, #16]
 8001564:	e74e      	b.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x172>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001566:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800156a:	f47f af6c 	bne.w	8001446 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800156e:	f7ff fe83 	bl	8001278 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001572:	f7fe ffd5 	bl	8000520 <HAL_GetTick>
 8001576:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001578:	f7ff fe85 	bl	8001286 <LL_RCC_PLLSAI1_IsReady>
 800157c:	b9a0      	cbnz	r0, 80015a8 <HAL_RCCEx_PeriphCLKConfig+0x316>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800157e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001582:	6861      	ldr	r1, [r4, #4]
 8001584:	6913      	ldr	r3, [r2, #16]
 8001586:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800158a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800158e:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8001590:	6913      	ldr	r3, [r2, #16]
 8001592:	6921      	ldr	r1, [r4, #16]
 8001594:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8001598:	430b      	orrs	r3, r1
 800159a:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800159c:	f7ff fe65 	bl	800126a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015a0:	f7fe ffbe 	bl	8000520 <HAL_GetTick>
 80015a4:	4606      	mov	r6, r0
 80015a6:	e00b      	b.n	80015c0 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80015a8:	f7fe ffba 	bl	8000520 <HAL_GetTick>
 80015ac:	1b80      	subs	r0, r0, r6
 80015ae:	2802      	cmp	r0, #2
 80015b0:	d9e2      	bls.n	8001578 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
              ret = HAL_TIMEOUT;
 80015b2:	2503      	movs	r5, #3
 80015b4:	e747      	b.n	8001446 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80015b6:	f7fe ffb3 	bl	8000520 <HAL_GetTick>
 80015ba:	1b80      	subs	r0, r0, r6
 80015bc:	2802      	cmp	r0, #2
 80015be:	d8f8      	bhi.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0x320>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80015c0:	f7ff fe61 	bl	8001286 <LL_RCC_PLLSAI1_IsReady>
 80015c4:	2801      	cmp	r0, #1
 80015c6:	d1f6      	bne.n	80015b6 <HAL_RCCEx_PeriphCLKConfig+0x324>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80015c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015cc:	6961      	ldr	r1, [r4, #20]
 80015ce:	6913      	ldr	r3, [r2, #16]
 80015d0:	430b      	orrs	r3, r1
 80015d2:	6113      	str	r3, [r2, #16]
 80015d4:	e737      	b.n	8001446 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

080015d6 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80015d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015da:	6813      	ldr	r3, [r2, #0]
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4770      	bx	lr

080015e4 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80015e4:	6802      	ldr	r2, [r0, #0]
{
 80015e6:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80015e8:	68d3      	ldr	r3, [r2, #12]
 80015ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80015ee:	60d3      	str	r3, [r2, #12]
{
 80015f0:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 80015f2:	f7fe ff95 	bl	8000520 <HAL_GetTick>
 80015f6:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	069b      	lsls	r3, r3, #26
 80015fe:	d501      	bpl.n	8001604 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001600:	2000      	movs	r0, #0
 8001602:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001604:	f7fe ff8c 	bl	8000520 <HAL_GetTick>
 8001608:	1b40      	subs	r0, r0, r5
 800160a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800160e:	d9f3      	bls.n	80015f8 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001610:	2003      	movs	r0, #3
}
 8001612:	bd38      	pop	{r3, r4, r5, pc}

08001614 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001614:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001616:	6803      	ldr	r3, [r0, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	0652      	lsls	r2, r2, #25
{
 800161c:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800161e:	d501      	bpl.n	8001624 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001620:	2000      	movs	r0, #0
 8001622:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800162a:	f7fe ff79 	bl	8000520 <HAL_GetTick>
 800162e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001630:	6823      	ldr	r3, [r4, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	065b      	lsls	r3, r3, #25
 8001636:	d4f3      	bmi.n	8001620 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001638:	f7fe ff72 	bl	8000520 <HAL_GetTick>
 800163c:	1b40      	subs	r0, r0, r5
 800163e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001642:	d9f5      	bls.n	8001630 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001644:	2003      	movs	r0, #3
}
 8001646:	bd38      	pop	{r3, r4, r5, pc}

08001648 <HAL_RTC_Init>:
{
 8001648:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800164a:	4604      	mov	r4, r0
 800164c:	b1d8      	cbz	r0, 8001686 <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800164e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001652:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001656:	b91b      	cbnz	r3, 8001660 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8001658:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 800165c:	f001 f854 	bl	8002708 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001660:	2302      	movs	r3, #2
 8001662:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	22ca      	movs	r2, #202	; 0xca
 800166a:	625a      	str	r2, [r3, #36]	; 0x24
 800166c:	2253      	movs	r2, #83	; 0x53
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001670:	4620      	mov	r0, r4
 8001672:	f7ff ffcf 	bl	8001614 <RTC_EnterInitMode>
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	4605      	mov	r5, r0
 800167a:	b130      	cbz	r0, 800168a <HAL_RTC_Init+0x42>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800167c:	22ff      	movs	r2, #255	; 0xff
 800167e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001680:	2304      	movs	r3, #4
 8001682:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 8001686:	2501      	movs	r5, #1
 8001688:	e038      	b.n	80016fc <HAL_RTC_Init+0xb4>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800168a:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800168c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800168e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001696:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001698:	6862      	ldr	r2, [r4, #4]
 800169a:	6899      	ldr	r1, [r3, #8]
 800169c:	4302      	orrs	r2, r0
 800169e:	69a0      	ldr	r0, [r4, #24]
 80016a0:	4302      	orrs	r2, r0
 80016a2:	430a      	orrs	r2, r1
 80016a4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80016a6:	68e2      	ldr	r2, [r4, #12]
 80016a8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80016ae:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80016b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80016b4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016bc:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80016be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016c0:	f022 0203 	bic.w	r2, r2, #3
 80016c4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80016c6:	69e2      	ldr	r2, [r4, #28]
 80016c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80016ca:	4302      	orrs	r2, r0
 80016cc:	430a      	orrs	r2, r1
 80016ce:	64da      	str	r2, [r3, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	069b      	lsls	r3, r3, #26
 80016d4:	d40c      	bmi.n	80016f0 <HAL_RTC_Init+0xa8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80016d6:	4620      	mov	r0, r4
 80016d8:	f7ff ff84 	bl	80015e4 <HAL_RTC_WaitForSynchro>
 80016dc:	b140      	cbz	r0, 80016f0 <HAL_RTC_Init+0xa8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	22ff      	movs	r2, #255	; 0xff
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80016e4:	2304      	movs	r3, #4
 80016e6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80016ea:	f884 5020 	strb.w	r5, [r4, #32]
 80016ee:	e7ca      	b.n	8001686 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	22ff      	movs	r2, #255	; 0xff
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80016f6:	2301      	movs	r3, #1
 80016f8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80016fc:	4628      	mov	r0, r5
 80016fe:	bd38      	pop	{r3, r4, r5, pc}

08001700 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001700:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001702:	4604      	mov	r4, r0
 8001704:	2800      	cmp	r0, #0
 8001706:	d04a      	beq.n	800179e <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800170c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001710:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001714:	b91b      	cbnz	r3, 800171e <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001716:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800171a:	f001 f805 	bl	8002728 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800171e:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001720:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001722:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001726:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001728:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800172a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800172e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001738:	d92e      	bls.n	8001798 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800173a:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800173c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001740:	bf18      	it	ne
 8001742:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001744:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001746:	b92b      	cbnz	r3, 8001754 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001748:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800174c:	bf8c      	ite	hi
 800174e:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001750:	2301      	movls	r3, #1
 8001752:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001754:	68a6      	ldr	r6, [r4, #8]
 8001756:	6863      	ldr	r3, [r4, #4]
 8001758:	69a5      	ldr	r5, [r4, #24]
 800175a:	4333      	orrs	r3, r6
 800175c:	6926      	ldr	r6, [r4, #16]
 800175e:	4333      	orrs	r3, r6
 8001760:	6966      	ldr	r6, [r4, #20]
 8001762:	4333      	orrs	r3, r6
 8001764:	69e6      	ldr	r6, [r4, #28]
 8001766:	4333      	orrs	r3, r6
 8001768:	6a26      	ldr	r6, [r4, #32]
 800176a:	4333      	orrs	r3, r6
 800176c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800176e:	4333      	orrs	r3, r6
 8001770:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8001774:	4333      	orrs	r3, r6
 8001776:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800177a:	431a      	orrs	r2, r3
 800177c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800177e:	0c2d      	lsrs	r5, r5, #16
 8001780:	431a      	orrs	r2, r3
 8001782:	f005 0504 	and.w	r5, r5, #4
 8001786:	432a      	orrs	r2, r5
 8001788:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 800178a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800178c:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800178e:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001790:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001792:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001796:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001798:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800179c:	e7d0      	b.n	8001740 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 800179e:	2001      	movs	r0, #1
}
 80017a0:	bd70      	pop	{r4, r5, r6, pc}
 80017a2:	0000      	movs	r0, r0
 80017a4:	0000      	movs	r0, r0
	...

080017a8 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80017a8:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017aa:	69c1      	ldr	r1, [r0, #28]
 80017ac:	6883      	ldr	r3, [r0, #8]
{
 80017ae:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80017b2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017b4:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017b6:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017b8:	4303      	orrs	r3, r0
 80017ba:	6960      	ldr	r0, [r4, #20]
 80017bc:	4303      	orrs	r3, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 80017be:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017c0:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 80017c2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017c4:	48ac      	ldr	r0, [pc, #688]	; (8001a78 <UART_SetConfig+0x2d0>)
 80017c6:	4028      	ands	r0, r5
 80017c8:	4303      	orrs	r3, r0
 80017ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017cc:	6853      	ldr	r3, [r2, #4]
 80017ce:	68e0      	ldr	r0, [r4, #12]
 80017d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017d4:	4303      	orrs	r3, r0
 80017d6:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80017d8:	4ba8      	ldr	r3, [pc, #672]	; (8001a7c <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80017da:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80017dc:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80017de:	bf1c      	itt	ne
 80017e0:	6a23      	ldrne	r3, [r4, #32]
 80017e2:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80017e4:	6893      	ldr	r3, [r2, #8]
 80017e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80017ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80017ee:	4303      	orrs	r3, r0
 80017f0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80017f2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80017f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017f6:	f020 000f 	bic.w	r0, r0, #15
 80017fa:	4318      	orrs	r0, r3
 80017fc:	62d0      	str	r0, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80017fe:	48a0      	ldr	r0, [pc, #640]	; (8001a80 <UART_SetConfig+0x2d8>)
 8001800:	4282      	cmp	r2, r0
 8001802:	d11a      	bne.n	800183a <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8001804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001808:	489e      	ldr	r0, [pc, #632]	; (8001a84 <UART_SetConfig+0x2dc>)
 800180a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800180e:	f002 0203 	and.w	r2, r2, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001812:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001816:	5c82      	ldrb	r2, [r0, r2]
 8001818:	f102 32ff 	add.w	r2, r2, #4294967295
 800181c:	f000 8220 	beq.w	8001c60 <UART_SetConfig+0x4b8>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001820:	2a07      	cmp	r2, #7
 8001822:	f200 83e7 	bhi.w	8001ff4 <UART_SetConfig+0x84c>
 8001826:	e8df f012 	tbh	[pc, r2, lsl #1]
 800182a:	0327      	.short	0x0327
 800182c:	03e50349 	.word	0x03e50349
 8001830:	03e5038c 	.word	0x03e5038c
 8001834:	03e503e5 	.word	0x03e503e5
 8001838:	03a5      	.short	0x03a5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800183a:	4890      	ldr	r0, [pc, #576]	; (8001a7c <UART_SetConfig+0x2d4>)
 800183c:	4282      	cmp	r2, r0
 800183e:	f040 83d5 	bne.w	8001fec <UART_SetConfig+0x844>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8001842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001846:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800184a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800184e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001852:	f000 8094 	beq.w	800197e <UART_SetConfig+0x1d6>
 8001856:	d80c      	bhi.n	8001872 <UART_SetConfig+0xca>
 8001858:	b3ca      	cbz	r2, 80018ce <UART_SetConfig+0x126>
        ret = HAL_ERROR;
 800185a:	2201      	movs	r2, #1
      ret = HAL_ERROR;
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800185c:	2301      	movs	r3, #1
 800185e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8001862:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001866:	2300      	movs	r3, #0
 8001868:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 800186a:	6723      	str	r3, [r4, #112]	; 0x70

  return ret;
}
 800186c:	4610      	mov	r0, r2
 800186e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001872:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001876:	d064      	beq.n	8001942 <UART_SetConfig+0x19a>
 8001878:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800187c:	d1ed      	bne.n	800185a <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 80e1 	beq.w	8001a46 <UART_SetConfig+0x29e>
 8001884:	2b01      	cmp	r3, #1
 8001886:	f000 80e1 	beq.w	8001a4c <UART_SetConfig+0x2a4>
 800188a:	2b02      	cmp	r3, #2
 800188c:	f000 80e1 	beq.w	8001a52 <UART_SetConfig+0x2aa>
 8001890:	2b03      	cmp	r3, #3
 8001892:	f000 80e1 	beq.w	8001a58 <UART_SetConfig+0x2b0>
 8001896:	2b04      	cmp	r3, #4
 8001898:	f000 80e1 	beq.w	8001a5e <UART_SetConfig+0x2b6>
 800189c:	2b05      	cmp	r3, #5
 800189e:	f000 80e1 	beq.w	8001a64 <UART_SetConfig+0x2bc>
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	f000 80e1 	beq.w	8001a6a <UART_SetConfig+0x2c2>
 80018a8:	2b07      	cmp	r3, #7
 80018aa:	f000 80e1 	beq.w	8001a70 <UART_SetConfig+0x2c8>
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	f000 8100 	beq.w	8001ab4 <UART_SetConfig+0x30c>
 80018b4:	2b09      	cmp	r3, #9
 80018b6:	f000 8100 	beq.w	8001aba <UART_SetConfig+0x312>
 80018ba:	2b0a      	cmp	r3, #10
 80018bc:	f000 8100 	beq.w	8001ac0 <UART_SetConfig+0x318>
 80018c0:	2b0b      	cmp	r3, #11
 80018c2:	bf14      	ite	ne
 80018c4:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80018c8:	2080      	moveq	r0, #128	; 0x80
 80018ca:	2308      	movs	r3, #8
 80018cc:	e093      	b.n	80019f6 <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80018ce:	f7ff fc91 	bl	80011f4 <HAL_RCC_GetPCLK1Freq>
 80018d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018d4:	b1fb      	cbz	r3, 8001916 <UART_SetConfig+0x16e>
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d01f      	beq.n	800191a <UART_SetConfig+0x172>
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d01f      	beq.n	800191e <UART_SetConfig+0x176>
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d01f      	beq.n	8001922 <UART_SetConfig+0x17a>
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d01f      	beq.n	8001926 <UART_SetConfig+0x17e>
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d01f      	beq.n	800192a <UART_SetConfig+0x182>
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d01f      	beq.n	800192e <UART_SetConfig+0x186>
 80018ee:	2b07      	cmp	r3, #7
 80018f0:	d01f      	beq.n	8001932 <UART_SetConfig+0x18a>
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d01f      	beq.n	8001936 <UART_SetConfig+0x18e>
 80018f6:	2b09      	cmp	r3, #9
 80018f8:	d01f      	beq.n	800193a <UART_SetConfig+0x192>
 80018fa:	2b0a      	cmp	r3, #10
 80018fc:	d01f      	beq.n	800193e <UART_SetConfig+0x196>
 80018fe:	2b0b      	cmp	r3, #11
 8001900:	bf14      	ite	ne
 8001902:	2301      	movne	r3, #1
 8001904:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8001908:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800190c:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 800190e:	2800      	cmp	r0, #0
 8001910:	d171      	bne.n	80019f6 <UART_SetConfig+0x24e>
 8001912:	4602      	mov	r2, r0
 8001914:	e7a2      	b.n	800185c <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8001916:	2301      	movs	r3, #1
 8001918:	e7f6      	b.n	8001908 <UART_SetConfig+0x160>
 800191a:	2302      	movs	r3, #2
 800191c:	e7f4      	b.n	8001908 <UART_SetConfig+0x160>
 800191e:	2304      	movs	r3, #4
 8001920:	e7f2      	b.n	8001908 <UART_SetConfig+0x160>
 8001922:	2306      	movs	r3, #6
 8001924:	e7f0      	b.n	8001908 <UART_SetConfig+0x160>
 8001926:	2308      	movs	r3, #8
 8001928:	e7ee      	b.n	8001908 <UART_SetConfig+0x160>
 800192a:	230a      	movs	r3, #10
 800192c:	e7ec      	b.n	8001908 <UART_SetConfig+0x160>
 800192e:	230c      	movs	r3, #12
 8001930:	e7ea      	b.n	8001908 <UART_SetConfig+0x160>
 8001932:	2310      	movs	r3, #16
 8001934:	e7e8      	b.n	8001908 <UART_SetConfig+0x160>
 8001936:	2320      	movs	r3, #32
 8001938:	e7e6      	b.n	8001908 <UART_SetConfig+0x160>
 800193a:	2340      	movs	r3, #64	; 0x40
 800193c:	e7e4      	b.n	8001908 <UART_SetConfig+0x160>
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	e7e2      	b.n	8001908 <UART_SetConfig+0x160>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8001942:	2b00      	cmp	r3, #0
 8001944:	d052      	beq.n	80019ec <UART_SetConfig+0x244>
 8001946:	2b01      	cmp	r3, #1
 8001948:	d052      	beq.n	80019f0 <UART_SetConfig+0x248>
 800194a:	2b02      	cmp	r3, #2
 800194c:	d052      	beq.n	80019f4 <UART_SetConfig+0x24c>
 800194e:	2b03      	cmp	r3, #3
 8001950:	d069      	beq.n	8001a26 <UART_SetConfig+0x27e>
 8001952:	2b04      	cmp	r3, #4
 8001954:	d069      	beq.n	8001a2a <UART_SetConfig+0x282>
 8001956:	2b05      	cmp	r3, #5
 8001958:	d069      	beq.n	8001a2e <UART_SetConfig+0x286>
 800195a:	2b06      	cmp	r3, #6
 800195c:	d069      	beq.n	8001a32 <UART_SetConfig+0x28a>
 800195e:	2b07      	cmp	r3, #7
 8001960:	d069      	beq.n	8001a36 <UART_SetConfig+0x28e>
 8001962:	2b08      	cmp	r3, #8
 8001964:	d069      	beq.n	8001a3a <UART_SetConfig+0x292>
 8001966:	2b09      	cmp	r3, #9
 8001968:	d069      	beq.n	8001a3e <UART_SetConfig+0x296>
 800196a:	2b0a      	cmp	r3, #10
 800196c:	d069      	beq.n	8001a42 <UART_SetConfig+0x29a>
 800196e:	4846      	ldr	r0, [pc, #280]	; (8001a88 <UART_SetConfig+0x2e0>)
 8001970:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001974:	2b0b      	cmp	r3, #11
 8001976:	bf08      	it	eq
 8001978:	4610      	moveq	r0, r2
 800197a:	2302      	movs	r3, #2
 800197c:	e03b      	b.n	80019f6 <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800197e:	f7ff fbdb 	bl	8001138 <HAL_RCC_GetSysClockFreq>
 8001982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001984:	b1e3      	cbz	r3, 80019c0 <UART_SetConfig+0x218>
 8001986:	2b01      	cmp	r3, #1
 8001988:	d01c      	beq.n	80019c4 <UART_SetConfig+0x21c>
 800198a:	2b02      	cmp	r3, #2
 800198c:	d01c      	beq.n	80019c8 <UART_SetConfig+0x220>
 800198e:	2b03      	cmp	r3, #3
 8001990:	d01c      	beq.n	80019cc <UART_SetConfig+0x224>
 8001992:	2b04      	cmp	r3, #4
 8001994:	d01c      	beq.n	80019d0 <UART_SetConfig+0x228>
 8001996:	2b05      	cmp	r3, #5
 8001998:	d01c      	beq.n	80019d4 <UART_SetConfig+0x22c>
 800199a:	2b06      	cmp	r3, #6
 800199c:	d01c      	beq.n	80019d8 <UART_SetConfig+0x230>
 800199e:	2b07      	cmp	r3, #7
 80019a0:	d01c      	beq.n	80019dc <UART_SetConfig+0x234>
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d01c      	beq.n	80019e0 <UART_SetConfig+0x238>
 80019a6:	2b09      	cmp	r3, #9
 80019a8:	d01c      	beq.n	80019e4 <UART_SetConfig+0x23c>
 80019aa:	2b0a      	cmp	r3, #10
 80019ac:	d01c      	beq.n	80019e8 <UART_SetConfig+0x240>
 80019ae:	2b0b      	cmp	r3, #11
 80019b0:	bf14      	ite	ne
 80019b2:	2301      	movne	r3, #1
 80019b4:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80019b8:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80019bc:	2304      	movs	r3, #4
 80019be:	e7a6      	b.n	800190e <UART_SetConfig+0x166>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80019c0:	2301      	movs	r3, #1
 80019c2:	e7f9      	b.n	80019b8 <UART_SetConfig+0x210>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e7f7      	b.n	80019b8 <UART_SetConfig+0x210>
 80019c8:	2304      	movs	r3, #4
 80019ca:	e7f5      	b.n	80019b8 <UART_SetConfig+0x210>
 80019cc:	2306      	movs	r3, #6
 80019ce:	e7f3      	b.n	80019b8 <UART_SetConfig+0x210>
 80019d0:	2308      	movs	r3, #8
 80019d2:	e7f1      	b.n	80019b8 <UART_SetConfig+0x210>
 80019d4:	230a      	movs	r3, #10
 80019d6:	e7ef      	b.n	80019b8 <UART_SetConfig+0x210>
 80019d8:	230c      	movs	r3, #12
 80019da:	e7ed      	b.n	80019b8 <UART_SetConfig+0x210>
 80019dc:	2310      	movs	r3, #16
 80019de:	e7eb      	b.n	80019b8 <UART_SetConfig+0x210>
 80019e0:	2320      	movs	r3, #32
 80019e2:	e7e9      	b.n	80019b8 <UART_SetConfig+0x210>
 80019e4:	2340      	movs	r3, #64	; 0x40
 80019e6:	e7e7      	b.n	80019b8 <UART_SetConfig+0x210>
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	e7e5      	b.n	80019b8 <UART_SetConfig+0x210>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80019ec:	4826      	ldr	r0, [pc, #152]	; (8001a88 <UART_SetConfig+0x2e0>)
 80019ee:	e7c4      	b.n	800197a <UART_SetConfig+0x1d2>
 80019f0:	4826      	ldr	r0, [pc, #152]	; (8001a8c <UART_SetConfig+0x2e4>)
 80019f2:	e7c2      	b.n	800197a <UART_SetConfig+0x1d2>
 80019f4:	4826      	ldr	r0, [pc, #152]	; (8001a90 <UART_SetConfig+0x2e8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80019f6:	6862      	ldr	r2, [r4, #4]
 80019f8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80019fc:	4281      	cmp	r1, r0
 80019fe:	f63f af2c 	bhi.w	800185a <UART_SetConfig+0xb2>
 8001a02:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001a06:	f63f af28 	bhi.w	800185a <UART_SetConfig+0xb2>
        switch (clocksource)
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	f200 8125 	bhi.w	8001c5a <UART_SetConfig+0x4b2>
 8001a10:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001a14:	01230059 	.word	0x01230059
 8001a18:	01230095 	.word	0x01230095
 8001a1c:	012300d1 	.word	0x012300d1
 8001a20:	01230123 	.word	0x01230123
 8001a24:	00ea      	.short	0x00ea
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8001a26:	481b      	ldr	r0, [pc, #108]	; (8001a94 <UART_SetConfig+0x2ec>)
 8001a28:	e7a7      	b.n	800197a <UART_SetConfig+0x1d2>
 8001a2a:	481b      	ldr	r0, [pc, #108]	; (8001a98 <UART_SetConfig+0x2f0>)
 8001a2c:	e7a5      	b.n	800197a <UART_SetConfig+0x1d2>
 8001a2e:	481b      	ldr	r0, [pc, #108]	; (8001a9c <UART_SetConfig+0x2f4>)
 8001a30:	e7a3      	b.n	800197a <UART_SetConfig+0x1d2>
 8001a32:	481b      	ldr	r0, [pc, #108]	; (8001aa0 <UART_SetConfig+0x2f8>)
 8001a34:	e7a1      	b.n	800197a <UART_SetConfig+0x1d2>
 8001a36:	481b      	ldr	r0, [pc, #108]	; (8001aa4 <UART_SetConfig+0x2fc>)
 8001a38:	e79f      	b.n	800197a <UART_SetConfig+0x1d2>
 8001a3a:	481b      	ldr	r0, [pc, #108]	; (8001aa8 <UART_SetConfig+0x300>)
 8001a3c:	e79d      	b.n	800197a <UART_SetConfig+0x1d2>
 8001a3e:	481b      	ldr	r0, [pc, #108]	; (8001aac <UART_SetConfig+0x304>)
 8001a40:	e79b      	b.n	800197a <UART_SetConfig+0x1d2>
 8001a42:	481b      	ldr	r0, [pc, #108]	; (8001ab0 <UART_SetConfig+0x308>)
 8001a44:	e799      	b.n	800197a <UART_SetConfig+0x1d2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8001a46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a4a:	e73e      	b.n	80018ca <UART_SetConfig+0x122>
 8001a4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a50:	e73b      	b.n	80018ca <UART_SetConfig+0x122>
 8001a52:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a56:	e738      	b.n	80018ca <UART_SetConfig+0x122>
 8001a58:	f241 5055 	movw	r0, #5461	; 0x1555
 8001a5c:	e735      	b.n	80018ca <UART_SetConfig+0x122>
 8001a5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a62:	e732      	b.n	80018ca <UART_SetConfig+0x122>
 8001a64:	f640 40cc 	movw	r0, #3276	; 0xccc
 8001a68:	e72f      	b.n	80018ca <UART_SetConfig+0x122>
 8001a6a:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8001a6e:	e72c      	b.n	80018ca <UART_SetConfig+0x122>
 8001a70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a74:	e729      	b.n	80018ca <UART_SetConfig+0x122>
 8001a76:	bf00      	nop
 8001a78:	cfff69f3 	.word	0xcfff69f3
 8001a7c:	40008000 	.word	0x40008000
 8001a80:	40013800 	.word	0x40013800
 8001a84:	080029f4 	.word	0x080029f4
 8001a88:	00f42400 	.word	0x00f42400
 8001a8c:	007a1200 	.word	0x007a1200
 8001a90:	003d0900 	.word	0x003d0900
 8001a94:	0028b0aa 	.word	0x0028b0aa
 8001a98:	001e8480 	.word	0x001e8480
 8001a9c:	00186a00 	.word	0x00186a00
 8001aa0:	00145855 	.word	0x00145855
 8001aa4:	000f4240 	.word	0x000f4240
 8001aa8:	0007a120 	.word	0x0007a120
 8001aac:	0003d090 	.word	0x0003d090
 8001ab0:	0001e848 	.word	0x0001e848
 8001ab4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ab8:	e79d      	b.n	80019f6 <UART_SetConfig+0x24e>
 8001aba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001abe:	e704      	b.n	80018ca <UART_SetConfig+0x122>
 8001ac0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ac4:	e701      	b.n	80018ca <UART_SetConfig+0x122>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001ac6:	f7ff fb95 	bl	80011f4 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 8089 	beq.w	8001be4 <UART_SetConfig+0x43c>
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d072      	beq.n	8001bbc <UART_SetConfig+0x414>
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d072      	beq.n	8001bc0 <UART_SetConfig+0x418>
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d072      	beq.n	8001bc4 <UART_SetConfig+0x41c>
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d072      	beq.n	8001bc8 <UART_SetConfig+0x420>
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	d072      	beq.n	8001bcc <UART_SetConfig+0x424>
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d072      	beq.n	8001bd0 <UART_SetConfig+0x428>
 8001aea:	2b07      	cmp	r3, #7
 8001aec:	d072      	beq.n	8001bd4 <UART_SetConfig+0x42c>
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d072      	beq.n	8001bd8 <UART_SetConfig+0x430>
 8001af2:	2b09      	cmp	r3, #9
 8001af4:	d072      	beq.n	8001bdc <UART_SetConfig+0x434>
 8001af6:	2b0a      	cmp	r3, #10
 8001af8:	d072      	beq.n	8001be0 <UART_SetConfig+0x438>
 8001afa:	2b0b      	cmp	r3, #11
 8001afc:	d172      	bne.n	8001be4 <UART_SetConfig+0x43c>
 8001afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b02:	2300      	movs	r3, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	f7fe fb3b 	bl	8000180 <__aeabi_uldivmod>
 8001b0a:	6865      	ldr	r5, [r4, #4]
 8001b0c:	020f      	lsls	r7, r1, #8
 8001b0e:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8001b12:	0206      	lsls	r6, r0, #8
 8001b14:	0868      	lsrs	r0, r5, #1
 8001b16:	eb16 0b00 	adds.w	fp, r6, r0
 8001b1a:	f147 0c00 	adc.w	ip, r7, #0
 8001b1e:	462a      	mov	r2, r5
 8001b20:	2300      	movs	r3, #0
 8001b22:	4658      	mov	r0, fp
 8001b24:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001b26:	f7fe fb2b 	bl	8000180 <__aeabi_uldivmod>
            break;
 8001b2a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001b2c:	4b9a      	ldr	r3, [pc, #616]	; (8001d98 <UART_SetConfig+0x5f0>)
 8001b2e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001b32:	4299      	cmp	r1, r3
 8001b34:	f63f ae91 	bhi.w	800185a <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	60d8      	str	r0, [r3, #12]
 8001b3c:	e68e      	b.n	800185c <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d036      	beq.n	8001bb2 <UART_SetConfig+0x40a>
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d016      	beq.n	8001b76 <UART_SetConfig+0x3ce>
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d016      	beq.n	8001b7a <UART_SetConfig+0x3d2>
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d016      	beq.n	8001b7e <UART_SetConfig+0x3d6>
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d01e      	beq.n	8001b92 <UART_SetConfig+0x3ea>
 8001b54:	2b05      	cmp	r3, #5
 8001b56:	d01e      	beq.n	8001b96 <UART_SetConfig+0x3ee>
 8001b58:	2b06      	cmp	r3, #6
 8001b5a:	d01e      	beq.n	8001b9a <UART_SetConfig+0x3f2>
 8001b5c:	2b07      	cmp	r3, #7
 8001b5e:	d020      	beq.n	8001ba2 <UART_SetConfig+0x3fa>
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d020      	beq.n	8001ba6 <UART_SetConfig+0x3fe>
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	d020      	beq.n	8001baa <UART_SetConfig+0x402>
 8001b68:	2b0a      	cmp	r3, #10
 8001b6a:	d020      	beq.n	8001bae <UART_SetConfig+0x406>
 8001b6c:	2b0b      	cmp	r3, #11
 8001b6e:	d120      	bne.n	8001bb2 <UART_SetConfig+0x40a>
 8001b70:	488a      	ldr	r0, [pc, #552]	; (8001d9c <UART_SetConfig+0x5f4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001b72:	2100      	movs	r1, #0
 8001b74:	e006      	b.n	8001b84 <UART_SetConfig+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001b76:	488a      	ldr	r0, [pc, #552]	; (8001da0 <UART_SetConfig+0x5f8>)
 8001b78:	e7fb      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001b7a:	488a      	ldr	r0, [pc, #552]	; (8001da4 <UART_SetConfig+0x5fc>)
 8001b7c:	e7f9      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001b7e:	a182      	add	r1, pc, #520	; (adr r1, 8001d88 <UART_SetConfig+0x5e0>)
 8001b80:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001b84:	0855      	lsrs	r5, r2, #1
 8001b86:	1940      	adds	r0, r0, r5
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	f141 0100 	adc.w	r1, r1, #0
 8001b90:	e7c9      	b.n	8001b26 <UART_SetConfig+0x37e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001b92:	4885      	ldr	r0, [pc, #532]	; (8001da8 <UART_SetConfig+0x600>)
 8001b94:	e7ed      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001b96:	4885      	ldr	r0, [pc, #532]	; (8001dac <UART_SetConfig+0x604>)
 8001b98:	e7eb      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001b9a:	a17d      	add	r1, pc, #500	; (adr r1, 8001d90 <UART_SetConfig+0x5e8>)
 8001b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ba0:	e7f0      	b.n	8001b84 <UART_SetConfig+0x3dc>
 8001ba2:	4883      	ldr	r0, [pc, #524]	; (8001db0 <UART_SetConfig+0x608>)
 8001ba4:	e7e5      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001ba6:	4883      	ldr	r0, [pc, #524]	; (8001db4 <UART_SetConfig+0x60c>)
 8001ba8:	e7e3      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001baa:	4883      	ldr	r0, [pc, #524]	; (8001db8 <UART_SetConfig+0x610>)
 8001bac:	e7e1      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001bae:	4883      	ldr	r0, [pc, #524]	; (8001dbc <UART_SetConfig+0x614>)
 8001bb0:	e7df      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001bb2:	4883      	ldr	r0, [pc, #524]	; (8001dc0 <UART_SetConfig+0x618>)
 8001bb4:	e7dd      	b.n	8001b72 <UART_SetConfig+0x3ca>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001bb6:	f7ff fabf 	bl	8001138 <HAL_RCC_GetSysClockFreq>
 8001bba:	e786      	b.n	8001aca <UART_SetConfig+0x322>
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	e7a0      	b.n	8001b02 <UART_SetConfig+0x35a>
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	e79e      	b.n	8001b02 <UART_SetConfig+0x35a>
 8001bc4:	2206      	movs	r2, #6
 8001bc6:	e79c      	b.n	8001b02 <UART_SetConfig+0x35a>
 8001bc8:	2208      	movs	r2, #8
 8001bca:	e79a      	b.n	8001b02 <UART_SetConfig+0x35a>
 8001bcc:	220a      	movs	r2, #10
 8001bce:	e798      	b.n	8001b02 <UART_SetConfig+0x35a>
 8001bd0:	220c      	movs	r2, #12
 8001bd2:	e796      	b.n	8001b02 <UART_SetConfig+0x35a>
 8001bd4:	2210      	movs	r2, #16
 8001bd6:	e794      	b.n	8001b02 <UART_SetConfig+0x35a>
 8001bd8:	2220      	movs	r2, #32
 8001bda:	e792      	b.n	8001b02 <UART_SetConfig+0x35a>
 8001bdc:	2240      	movs	r2, #64	; 0x40
 8001bde:	e790      	b.n	8001b02 <UART_SetConfig+0x35a>
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	e78e      	b.n	8001b02 <UART_SetConfig+0x35a>
 8001be4:	2201      	movs	r2, #1
 8001be6:	e78c      	b.n	8001b02 <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bea:	b39b      	cbz	r3, 8001c54 <UART_SetConfig+0x4ac>
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d016      	beq.n	8001c1e <UART_SetConfig+0x476>
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d017      	beq.n	8001c24 <UART_SetConfig+0x47c>
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d018      	beq.n	8001c2a <UART_SetConfig+0x482>
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d018      	beq.n	8001c2e <UART_SetConfig+0x486>
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	d019      	beq.n	8001c34 <UART_SetConfig+0x48c>
 8001c00:	2b06      	cmp	r3, #6
 8001c02:	d019      	beq.n	8001c38 <UART_SetConfig+0x490>
 8001c04:	2b07      	cmp	r3, #7
 8001c06:	d019      	beq.n	8001c3c <UART_SetConfig+0x494>
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d01a      	beq.n	8001c42 <UART_SetConfig+0x49a>
 8001c0c:	2b09      	cmp	r3, #9
 8001c0e:	d01b      	beq.n	8001c48 <UART_SetConfig+0x4a0>
 8001c10:	2b0a      	cmp	r3, #10
 8001c12:	d01c      	beq.n	8001c4e <UART_SetConfig+0x4a6>
 8001c14:	2b0b      	cmp	r3, #11
 8001c16:	d11d      	bne.n	8001c54 <UART_SetConfig+0x4ac>
 8001c18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c1c:	e7a9      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001c1e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001c22:	e7a6      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001c24:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001c28:	e7a3      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001c2a:	4866      	ldr	r0, [pc, #408]	; (8001dc4 <UART_SetConfig+0x61c>)
 8001c2c:	e7a1      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001c2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001c32:	e79e      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001c34:	4864      	ldr	r0, [pc, #400]	; (8001dc8 <UART_SetConfig+0x620>)
 8001c36:	e79c      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001c38:	4864      	ldr	r0, [pc, #400]	; (8001dcc <UART_SetConfig+0x624>)
 8001c3a:	e79a      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001c3c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001c40:	e797      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001c42:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001c46:	e794      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001c48:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001c4c:	e791      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001c4e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001c52:	e78e      	b.n	8001b72 <UART_SetConfig+0x3ca>
 8001c54:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001c58:	e78b      	b.n	8001b72 <UART_SetConfig+0x3ca>
            ret = HAL_ERROR;
 8001c5a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	e765      	b.n	8001b2c <UART_SetConfig+0x384>
    switch (clocksource)
 8001c60:	2a07      	cmp	r2, #7
 8001c62:	f200 8106 	bhi.w	8001e72 <UART_SetConfig+0x6ca>
 8001c66:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001c6a:	0008      	.short	0x0008
 8001c6c:	0104003f 	.word	0x0104003f
 8001c70:	01040076 	.word	0x01040076
 8001c74:	01040104 	.word	0x01040104
 8001c78:	00c7      	.short	0x00c7
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001c7a:	f7ff facd 	bl	8001218 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001c7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c80:	2900      	cmp	r1, #0
 8001c82:	d06b      	beq.n	8001d5c <UART_SetConfig+0x5b4>
 8001c84:	2901      	cmp	r1, #1
 8001c86:	d06b      	beq.n	8001d60 <UART_SetConfig+0x5b8>
 8001c88:	2902      	cmp	r1, #2
 8001c8a:	d06b      	beq.n	8001d64 <UART_SetConfig+0x5bc>
 8001c8c:	2903      	cmp	r1, #3
 8001c8e:	d06b      	beq.n	8001d68 <UART_SetConfig+0x5c0>
 8001c90:	2904      	cmp	r1, #4
 8001c92:	d06b      	beq.n	8001d6c <UART_SetConfig+0x5c4>
 8001c94:	2905      	cmp	r1, #5
 8001c96:	d06b      	beq.n	8001d70 <UART_SetConfig+0x5c8>
 8001c98:	2906      	cmp	r1, #6
 8001c9a:	d06b      	beq.n	8001d74 <UART_SetConfig+0x5cc>
 8001c9c:	2907      	cmp	r1, #7
 8001c9e:	d06b      	beq.n	8001d78 <UART_SetConfig+0x5d0>
 8001ca0:	2908      	cmp	r1, #8
 8001ca2:	d06b      	beq.n	8001d7c <UART_SetConfig+0x5d4>
 8001ca4:	2909      	cmp	r1, #9
 8001ca6:	d06b      	beq.n	8001d80 <UART_SetConfig+0x5d8>
 8001ca8:	290a      	cmp	r1, #10
 8001caa:	d06b      	beq.n	8001d84 <UART_SetConfig+0x5dc>
 8001cac:	290b      	cmp	r1, #11
 8001cae:	bf14      	ite	ne
 8001cb0:	2201      	movne	r2, #1
 8001cb2:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8001cb6:	6861      	ldr	r1, [r4, #4]
 8001cb8:	fbb0 f2f2 	udiv	r2, r0, r2
 8001cbc:	084b      	lsrs	r3, r1, #1
 8001cbe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8001cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001cc8:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001cca:	f1a3 0010 	sub.w	r0, r3, #16
 8001cce:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001cd2:	4288      	cmp	r0, r1
 8001cd4:	f63f adc1 	bhi.w	800185a <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001cd8:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001cdc:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001cde:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001ce2:	430b      	orrs	r3, r1
 8001ce4:	60c3      	str	r3, [r0, #12]
 8001ce6:	e5b9      	b.n	800185c <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001ce8:	b1fb      	cbz	r3, 8001d2a <UART_SetConfig+0x582>
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d01f      	beq.n	8001d2e <UART_SetConfig+0x586>
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d01f      	beq.n	8001d32 <UART_SetConfig+0x58a>
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d01f      	beq.n	8001d36 <UART_SetConfig+0x58e>
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d01f      	beq.n	8001d3a <UART_SetConfig+0x592>
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	d01f      	beq.n	8001d3e <UART_SetConfig+0x596>
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d01f      	beq.n	8001d42 <UART_SetConfig+0x59a>
 8001d02:	2b07      	cmp	r3, #7
 8001d04:	d01f      	beq.n	8001d46 <UART_SetConfig+0x59e>
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d01f      	beq.n	8001d4a <UART_SetConfig+0x5a2>
 8001d0a:	2b09      	cmp	r3, #9
 8001d0c:	d01f      	beq.n	8001d4e <UART_SetConfig+0x5a6>
 8001d0e:	2b0a      	cmp	r3, #10
 8001d10:	d01f      	beq.n	8001d52 <UART_SetConfig+0x5aa>
 8001d12:	492f      	ldr	r1, [pc, #188]	; (8001dd0 <UART_SetConfig+0x628>)
 8001d14:	4a29      	ldr	r2, [pc, #164]	; (8001dbc <UART_SetConfig+0x614>)
 8001d16:	2b0b      	cmp	r3, #11
 8001d18:	bf14      	ite	ne
 8001d1a:	4613      	movne	r3, r2
 8001d1c:	460b      	moveq	r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001d1e:	6862      	ldr	r2, [r4, #4]
 8001d20:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d28:	e7cd      	b.n	8001cc6 <UART_SetConfig+0x51e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <UART_SetConfig+0x614>)
 8001d2c:	e7f7      	b.n	8001d1e <UART_SetConfig+0x576>
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <UART_SetConfig+0x5f4>)
 8001d30:	e7f5      	b.n	8001d1e <UART_SetConfig+0x576>
 8001d32:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <UART_SetConfig+0x62c>)
 8001d34:	e7f3      	b.n	8001d1e <UART_SetConfig+0x576>
 8001d36:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <UART_SetConfig+0x630>)
 8001d38:	e7f1      	b.n	8001d1e <UART_SetConfig+0x576>
 8001d3a:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <UART_SetConfig+0x634>)
 8001d3c:	e7ef      	b.n	8001d1e <UART_SetConfig+0x576>
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <UART_SetConfig+0x638>)
 8001d40:	e7ed      	b.n	8001d1e <UART_SetConfig+0x576>
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <UART_SetConfig+0x63c>)
 8001d44:	e7eb      	b.n	8001d1e <UART_SetConfig+0x576>
 8001d46:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <UART_SetConfig+0x640>)
 8001d48:	e7e9      	b.n	8001d1e <UART_SetConfig+0x576>
 8001d4a:	4b28      	ldr	r3, [pc, #160]	; (8001dec <UART_SetConfig+0x644>)
 8001d4c:	e7e7      	b.n	8001d1e <UART_SetConfig+0x576>
 8001d4e:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <UART_SetConfig+0x648>)
 8001d50:	e7e5      	b.n	8001d1e <UART_SetConfig+0x576>
 8001d52:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <UART_SetConfig+0x64c>)
 8001d54:	e7e3      	b.n	8001d1e <UART_SetConfig+0x576>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001d56:	f7ff f9ef 	bl	8001138 <HAL_RCC_GetSysClockFreq>
 8001d5a:	e790      	b.n	8001c7e <UART_SetConfig+0x4d6>
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	e7aa      	b.n	8001cb6 <UART_SetConfig+0x50e>
 8001d60:	2202      	movs	r2, #2
 8001d62:	e7a8      	b.n	8001cb6 <UART_SetConfig+0x50e>
 8001d64:	2204      	movs	r2, #4
 8001d66:	e7a6      	b.n	8001cb6 <UART_SetConfig+0x50e>
 8001d68:	2206      	movs	r2, #6
 8001d6a:	e7a4      	b.n	8001cb6 <UART_SetConfig+0x50e>
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	e7a2      	b.n	8001cb6 <UART_SetConfig+0x50e>
 8001d70:	220a      	movs	r2, #10
 8001d72:	e7a0      	b.n	8001cb6 <UART_SetConfig+0x50e>
 8001d74:	220c      	movs	r2, #12
 8001d76:	e79e      	b.n	8001cb6 <UART_SetConfig+0x50e>
 8001d78:	2210      	movs	r2, #16
 8001d7a:	e79c      	b.n	8001cb6 <UART_SetConfig+0x50e>
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	e79a      	b.n	8001cb6 <UART_SetConfig+0x50e>
 8001d80:	2240      	movs	r2, #64	; 0x40
 8001d82:	e798      	b.n	8001cb6 <UART_SetConfig+0x50e>
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	e796      	b.n	8001cb6 <UART_SetConfig+0x50e>
 8001d88:	28b0aa00 	.word	0x28b0aa00
 8001d8c:	00000000 	.word	0x00000000
 8001d90:	14585500 	.word	0x14585500
 8001d94:	00000000 	.word	0x00000000
 8001d98:	000ffcff 	.word	0x000ffcff
 8001d9c:	00f42400 	.word	0x00f42400
 8001da0:	7a120000 	.word	0x7a120000
 8001da4:	3d090000 	.word	0x3d090000
 8001da8:	1e848000 	.word	0x1e848000
 8001dac:	186a0000 	.word	0x186a0000
 8001db0:	0f424000 	.word	0x0f424000
 8001db4:	07a12000 	.word	0x07a12000
 8001db8:	03d09000 	.word	0x03d09000
 8001dbc:	01e84800 	.word	0x01e84800
 8001dc0:	f4240000 	.word	0xf4240000
 8001dc4:	00155500 	.word	0x00155500
 8001dc8:	000ccc00 	.word	0x000ccc00
 8001dcc:	000aaa00 	.word	0x000aaa00
 8001dd0:	0001e848 	.word	0x0001e848
 8001dd4:	007a1200 	.word	0x007a1200
 8001dd8:	00516154 	.word	0x00516154
 8001ddc:	003d0900 	.word	0x003d0900
 8001de0:	0030d400 	.word	0x0030d400
 8001de4:	0028b0aa 	.word	0x0028b0aa
 8001de8:	001e8480 	.word	0x001e8480
 8001dec:	000f4240 	.word	0x000f4240
 8001df0:	0007a120 	.word	0x0007a120
 8001df4:	0003d090 	.word	0x0003d090
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001df8:	b1d3      	cbz	r3, 8001e30 <UART_SetConfig+0x688>
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d01b      	beq.n	8001e36 <UART_SetConfig+0x68e>
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d01c      	beq.n	8001e3c <UART_SetConfig+0x694>
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d01d      	beq.n	8001e42 <UART_SetConfig+0x69a>
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d01e      	beq.n	8001e48 <UART_SetConfig+0x6a0>
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d01f      	beq.n	8001e4e <UART_SetConfig+0x6a6>
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d020      	beq.n	8001e54 <UART_SetConfig+0x6ac>
 8001e12:	2b07      	cmp	r3, #7
 8001e14:	d021      	beq.n	8001e5a <UART_SetConfig+0x6b2>
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d022      	beq.n	8001e60 <UART_SetConfig+0x6b8>
 8001e1a:	2b09      	cmp	r3, #9
 8001e1c:	d023      	beq.n	8001e66 <UART_SetConfig+0x6be>
 8001e1e:	2b0a      	cmp	r3, #10
 8001e20:	d024      	beq.n	8001e6c <UART_SetConfig+0x6c4>
 8001e22:	2b0b      	cmp	r3, #11
 8001e24:	bf14      	ite	ne
 8001e26:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8001e2a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8001e2e:	e776      	b.n	8001d1e <UART_SetConfig+0x576>
 8001e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e34:	e773      	b.n	8001d1e <UART_SetConfig+0x576>
 8001e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e3a:	e770      	b.n	8001d1e <UART_SetConfig+0x576>
 8001e3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e40:	e76d      	b.n	8001d1e <UART_SetConfig+0x576>
 8001e42:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8001e46:	e76a      	b.n	8001d1e <UART_SetConfig+0x576>
 8001e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4c:	e767      	b.n	8001d1e <UART_SetConfig+0x576>
 8001e4e:	f641 1398 	movw	r3, #6552	; 0x1998
 8001e52:	e764      	b.n	8001d1e <UART_SetConfig+0x576>
 8001e54:	f241 5354 	movw	r3, #5460	; 0x1554
 8001e58:	e761      	b.n	8001d1e <UART_SetConfig+0x576>
 8001e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e5e:	e75e      	b.n	8001d1e <UART_SetConfig+0x576>
 8001e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e64:	e75b      	b.n	8001d1e <UART_SetConfig+0x576>
 8001e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e6a:	e758      	b.n	8001d1e <UART_SetConfig+0x576>
 8001e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e70:	e755      	b.n	8001d1e <UART_SetConfig+0x576>
        ret = HAL_ERROR;
 8001e72:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e728      	b.n	8001cca <UART_SetConfig+0x522>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e78:	f7ff f9ce 	bl	8001218 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d062      	beq.n	8001f48 <UART_SetConfig+0x7a0>
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d062      	beq.n	8001f4c <UART_SetConfig+0x7a4>
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d062      	beq.n	8001f50 <UART_SetConfig+0x7a8>
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d062      	beq.n	8001f54 <UART_SetConfig+0x7ac>
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d062      	beq.n	8001f58 <UART_SetConfig+0x7b0>
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d062      	beq.n	8001f5c <UART_SetConfig+0x7b4>
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d062      	beq.n	8001f60 <UART_SetConfig+0x7b8>
 8001e9a:	2b07      	cmp	r3, #7
 8001e9c:	d062      	beq.n	8001f64 <UART_SetConfig+0x7bc>
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d062      	beq.n	8001f68 <UART_SetConfig+0x7c0>
 8001ea2:	2b09      	cmp	r3, #9
 8001ea4:	d062      	beq.n	8001f6c <UART_SetConfig+0x7c4>
 8001ea6:	2b0a      	cmp	r3, #10
 8001ea8:	d062      	beq.n	8001f70 <UART_SetConfig+0x7c8>
 8001eaa:	2b0b      	cmp	r3, #11
 8001eac:	bf14      	ite	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8001eb4:	6862      	ldr	r2, [r4, #4]
 8001eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eba:	e01c      	b.n	8001ef6 <UART_SetConfig+0x74e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001ebc:	b35b      	cbz	r3, 8001f16 <UART_SetConfig+0x76e>
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d02b      	beq.n	8001f1a <UART_SetConfig+0x772>
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d02b      	beq.n	8001f1e <UART_SetConfig+0x776>
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d02b      	beq.n	8001f22 <UART_SetConfig+0x77a>
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d02b      	beq.n	8001f26 <UART_SetConfig+0x77e>
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d02b      	beq.n	8001f2a <UART_SetConfig+0x782>
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d02b      	beq.n	8001f2e <UART_SetConfig+0x786>
 8001ed6:	2b07      	cmp	r3, #7
 8001ed8:	d02b      	beq.n	8001f32 <UART_SetConfig+0x78a>
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d02b      	beq.n	8001f36 <UART_SetConfig+0x78e>
 8001ede:	2b09      	cmp	r3, #9
 8001ee0:	d02b      	beq.n	8001f3a <UART_SetConfig+0x792>
 8001ee2:	2b0a      	cmp	r3, #10
 8001ee4:	d02b      	beq.n	8001f3e <UART_SetConfig+0x796>
 8001ee6:	4a45      	ldr	r2, [pc, #276]	; (8001ffc <UART_SetConfig+0x854>)
 8001ee8:	f24f 4124 	movw	r1, #62500	; 0xf424
 8001eec:	2b0b      	cmp	r3, #11
 8001eee:	bf14      	ite	ne
 8001ef0:	4613      	movne	r3, r2
 8001ef2:	460b      	moveq	r3, r1
 8001ef4:	6862      	ldr	r2, [r4, #4]
 8001ef6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001efa:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8001efe:	2200      	movs	r2, #0
 8001f00:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f02:	f1a3 0010 	sub.w	r0, r3, #16
 8001f06:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001f0a:	4288      	cmp	r0, r1
 8001f0c:	f63f aca5 	bhi.w	800185a <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 8001f10:	6821      	ldr	r1, [r4, #0]
 8001f12:	60cb      	str	r3, [r1, #12]
 8001f14:	e4a2      	b.n	800185c <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f16:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <UART_SetConfig+0x854>)
 8001f18:	e7ec      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001f1a:	4b39      	ldr	r3, [pc, #228]	; (8002000 <UART_SetConfig+0x858>)
 8001f1c:	e7ea      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001f1e:	4b39      	ldr	r3, [pc, #228]	; (8002004 <UART_SetConfig+0x85c>)
 8001f20:	e7e8      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001f22:	4b39      	ldr	r3, [pc, #228]	; (8002008 <UART_SetConfig+0x860>)
 8001f24:	e7e6      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001f26:	4b39      	ldr	r3, [pc, #228]	; (800200c <UART_SetConfig+0x864>)
 8001f28:	e7e4      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001f2a:	4b39      	ldr	r3, [pc, #228]	; (8002010 <UART_SetConfig+0x868>)
 8001f2c:	e7e2      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001f2e:	4b39      	ldr	r3, [pc, #228]	; (8002014 <UART_SetConfig+0x86c>)
 8001f30:	e7e0      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001f32:	4b39      	ldr	r3, [pc, #228]	; (8002018 <UART_SetConfig+0x870>)
 8001f34:	e7de      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001f36:	4b39      	ldr	r3, [pc, #228]	; (800201c <UART_SetConfig+0x874>)
 8001f38:	e7dc      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001f3a:	4b39      	ldr	r3, [pc, #228]	; (8002020 <UART_SetConfig+0x878>)
 8001f3c:	e7da      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001f3e:	4b39      	ldr	r3, [pc, #228]	; (8002024 <UART_SetConfig+0x87c>)
 8001f40:	e7d8      	b.n	8001ef4 <UART_SetConfig+0x74c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f42:	f7ff f8f9 	bl	8001138 <HAL_RCC_GetSysClockFreq>
 8001f46:	e799      	b.n	8001e7c <UART_SetConfig+0x6d4>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e7b3      	b.n	8001eb4 <UART_SetConfig+0x70c>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e7b1      	b.n	8001eb4 <UART_SetConfig+0x70c>
 8001f50:	2304      	movs	r3, #4
 8001f52:	e7af      	b.n	8001eb4 <UART_SetConfig+0x70c>
 8001f54:	2306      	movs	r3, #6
 8001f56:	e7ad      	b.n	8001eb4 <UART_SetConfig+0x70c>
 8001f58:	2308      	movs	r3, #8
 8001f5a:	e7ab      	b.n	8001eb4 <UART_SetConfig+0x70c>
 8001f5c:	230a      	movs	r3, #10
 8001f5e:	e7a9      	b.n	8001eb4 <UART_SetConfig+0x70c>
 8001f60:	230c      	movs	r3, #12
 8001f62:	e7a7      	b.n	8001eb4 <UART_SetConfig+0x70c>
 8001f64:	2310      	movs	r3, #16
 8001f66:	e7a5      	b.n	8001eb4 <UART_SetConfig+0x70c>
 8001f68:	2320      	movs	r3, #32
 8001f6a:	e7a3      	b.n	8001eb4 <UART_SetConfig+0x70c>
 8001f6c:	2340      	movs	r3, #64	; 0x40
 8001f6e:	e7a1      	b.n	8001eb4 <UART_SetConfig+0x70c>
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	e79f      	b.n	8001eb4 <UART_SetConfig+0x70c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f74:	b1cb      	cbz	r3, 8001faa <UART_SetConfig+0x802>
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d01a      	beq.n	8001fb0 <UART_SetConfig+0x808>
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d01b      	beq.n	8001fb6 <UART_SetConfig+0x80e>
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d01c      	beq.n	8001fbc <UART_SetConfig+0x814>
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d01d      	beq.n	8001fc2 <UART_SetConfig+0x81a>
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d01e      	beq.n	8001fc8 <UART_SetConfig+0x820>
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d01f      	beq.n	8001fce <UART_SetConfig+0x826>
 8001f8e:	2b07      	cmp	r3, #7
 8001f90:	d020      	beq.n	8001fd4 <UART_SetConfig+0x82c>
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d021      	beq.n	8001fda <UART_SetConfig+0x832>
 8001f96:	2b09      	cmp	r3, #9
 8001f98:	d022      	beq.n	8001fe0 <UART_SetConfig+0x838>
 8001f9a:	2b0a      	cmp	r3, #10
 8001f9c:	d023      	beq.n	8001fe6 <UART_SetConfig+0x83e>
 8001f9e:	2b0b      	cmp	r3, #11
 8001fa0:	bf14      	ite	ne
 8001fa2:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8001fa6:	2380      	moveq	r3, #128	; 0x80
 8001fa8:	e7a4      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fae:	e7a1      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001fb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fb4:	e79e      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001fb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fba:	e79b      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001fbc:	f241 5355 	movw	r3, #5461	; 0x1555
 8001fc0:	e798      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc6:	e795      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001fc8:	f640 43cc 	movw	r3, #3276	; 0xccc
 8001fcc:	e792      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001fce:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8001fd2:	e78f      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001fd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fd8:	e78c      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fde:	e789      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe4:	e786      	b.n	8001ef4 <UART_SetConfig+0x74c>
 8001fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fea:	e783      	b.n	8001ef4 <UART_SetConfig+0x74c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fec:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001ff0:	f43f af3f 	beq.w	8001e72 <UART_SetConfig+0x6ca>
        ret = HAL_ERROR;
 8001ff4:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e783      	b.n	8001f02 <UART_SetConfig+0x75a>
 8001ffa:	bf00      	nop
 8001ffc:	00f42400 	.word	0x00f42400
 8002000:	007a1200 	.word	0x007a1200
 8002004:	003d0900 	.word	0x003d0900
 8002008:	0028b0aa 	.word	0x0028b0aa
 800200c:	001e8480 	.word	0x001e8480
 8002010:	00186a00 	.word	0x00186a00
 8002014:	00145855 	.word	0x00145855
 8002018:	000f4240 	.word	0x000f4240
 800201c:	0007a120 	.word	0x0007a120
 8002020:	0003d090 	.word	0x0003d090
 8002024:	0001e848 	.word	0x0001e848

08002028 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002028:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800202a:	07da      	lsls	r2, r3, #31
{
 800202c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800202e:	d506      	bpl.n	800203e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002030:	6801      	ldr	r1, [r0, #0]
 8002032:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002034:	684a      	ldr	r2, [r1, #4]
 8002036:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800203a:	4322      	orrs	r2, r4
 800203c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800203e:	079c      	lsls	r4, r3, #30
 8002040:	d506      	bpl.n	8002050 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002042:	6801      	ldr	r1, [r0, #0]
 8002044:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002046:	684a      	ldr	r2, [r1, #4]
 8002048:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800204c:	4322      	orrs	r2, r4
 800204e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002050:	0759      	lsls	r1, r3, #29
 8002052:	d506      	bpl.n	8002062 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002054:	6801      	ldr	r1, [r0, #0]
 8002056:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002058:	684a      	ldr	r2, [r1, #4]
 800205a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800205e:	4322      	orrs	r2, r4
 8002060:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002062:	071a      	lsls	r2, r3, #28
 8002064:	d506      	bpl.n	8002074 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002066:	6801      	ldr	r1, [r0, #0]
 8002068:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800206a:	684a      	ldr	r2, [r1, #4]
 800206c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002070:	4322      	orrs	r2, r4
 8002072:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002074:	06dc      	lsls	r4, r3, #27
 8002076:	d506      	bpl.n	8002086 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002078:	6801      	ldr	r1, [r0, #0]
 800207a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800207c:	688a      	ldr	r2, [r1, #8]
 800207e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002082:	4322      	orrs	r2, r4
 8002084:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002086:	0699      	lsls	r1, r3, #26
 8002088:	d506      	bpl.n	8002098 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800208a:	6801      	ldr	r1, [r0, #0]
 800208c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800208e:	688a      	ldr	r2, [r1, #8]
 8002090:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002094:	4322      	orrs	r2, r4
 8002096:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002098:	065a      	lsls	r2, r3, #25
 800209a:	d50f      	bpl.n	80020bc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800209c:	6801      	ldr	r1, [r0, #0]
 800209e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80020a0:	684a      	ldr	r2, [r1, #4]
 80020a2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80020a6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020a8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020ac:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020ae:	d105      	bne.n	80020bc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020b0:	684a      	ldr	r2, [r1, #4]
 80020b2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80020b4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80020b8:	4322      	orrs	r2, r4
 80020ba:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020bc:	061b      	lsls	r3, r3, #24
 80020be:	d506      	bpl.n	80020ce <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020c0:	6802      	ldr	r2, [r0, #0]
 80020c2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80020c4:	6853      	ldr	r3, [r2, #4]
 80020c6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80020ca:	430b      	orrs	r3, r1
 80020cc:	6053      	str	r3, [r2, #4]
 80020ce:	bd10      	pop	{r4, pc}

080020d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020d4:	9d06      	ldr	r5, [sp, #24]
 80020d6:	4604      	mov	r4, r0
 80020d8:	460f      	mov	r7, r1
 80020da:	4616      	mov	r6, r2
 80020dc:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020de:	6821      	ldr	r1, [r4, #0]
 80020e0:	69ca      	ldr	r2, [r1, #28]
 80020e2:	ea37 0302 	bics.w	r3, r7, r2
 80020e6:	bf0c      	ite	eq
 80020e8:	2201      	moveq	r2, #1
 80020ea:	2200      	movne	r2, #0
 80020ec:	42b2      	cmp	r2, r6
 80020ee:	d002      	beq.n	80020f6 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80020f0:	2000      	movs	r0, #0
}
 80020f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80020f6:	1c6b      	adds	r3, r5, #1
 80020f8:	d0f2      	beq.n	80020e0 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020fa:	f7fe fa11 	bl	8000520 <HAL_GetTick>
 80020fe:	eba0 0008 	sub.w	r0, r0, r8
 8002102:	4285      	cmp	r5, r0
 8002104:	d301      	bcc.n	800210a <UART_WaitOnFlagUntilTimeout+0x3a>
 8002106:	2d00      	cmp	r5, #0
 8002108:	d1e9      	bne.n	80020de <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002112:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800211c:	2320      	movs	r3, #32
 800211e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8002122:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8002126:	2300      	movs	r3, #0
 8002128:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
 800212c:	2003      	movs	r0, #3
 800212e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002132 <UART_CheckIdleState>:
{
 8002132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002134:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002136:	2600      	movs	r6, #0
 8002138:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800213c:	f7fe f9f0 	bl	8000520 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002146:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002148:	d417      	bmi.n	800217a <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	075b      	lsls	r3, r3, #29
 8002150:	d50a      	bpl.n	8002168 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002152:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2200      	movs	r2, #0
 800215a:	462b      	mov	r3, r5
 800215c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002160:	4620      	mov	r0, r4
 8002162:	f7ff ffb5 	bl	80020d0 <UART_WaitOnFlagUntilTimeout>
 8002166:	b9a0      	cbnz	r0, 8002192 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002168:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800216a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800216c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002170:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002174:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8002178:	e00c      	b.n	8002194 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800217a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	4632      	mov	r2, r6
 8002182:	4603      	mov	r3, r0
 8002184:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002188:	4620      	mov	r0, r4
 800218a:	f7ff ffa1 	bl	80020d0 <UART_WaitOnFlagUntilTimeout>
 800218e:	2800      	cmp	r0, #0
 8002190:	d0db      	beq.n	800214a <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002192:	2003      	movs	r0, #3
}
 8002194:	b002      	add	sp, #8
 8002196:	bd70      	pop	{r4, r5, r6, pc}

08002198 <HAL_UART_Init>:
{
 8002198:	b510      	push	{r4, lr}
  if (huart == NULL)
 800219a:	4604      	mov	r4, r0
 800219c:	b350      	cbz	r0, 80021f4 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800219e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80021a2:	b91b      	cbnz	r3, 80021ac <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80021a4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80021a8:	f000 fa5e 	bl	8002668 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80021ac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021ae:	2324      	movs	r3, #36	; 0x24
 80021b0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80021b4:	6813      	ldr	r3, [r2, #0]
 80021b6:	f023 0301 	bic.w	r3, r3, #1
 80021ba:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021bc:	4620      	mov	r0, r4
 80021be:	f7ff faf3 	bl	80017a8 <UART_SetConfig>
 80021c2:	2801      	cmp	r0, #1
 80021c4:	d016      	beq.n	80021f4 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021c8:	b113      	cbz	r3, 80021d0 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff ff2c 	bl	8002028 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021e0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80021e8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80021ea:	601a      	str	r2, [r3, #0]
}
 80021ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80021f0:	f7ff bf9f 	b.w	8002132 <UART_CheckIdleState>
}
 80021f4:	2001      	movs	r0, #1
 80021f6:	bd10      	pop	{r4, pc}

080021f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80021f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80021fa:	2203      	movs	r2, #3
 80021fc:	f88d 2003 	strb.w	r2, [sp, #3]
 8002200:	2207      	movs	r2, #7
 8002202:	f88d 2004 	strb.w	r2, [sp, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f88d 2006 	strb.w	r2, [sp, #6]
 800220c:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002210:	2208      	movs	r2, #8
 8002212:	f88d 2008 	strb.w	r2, [sp, #8]
 8002216:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800221a:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800221c:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800221e:	2104      	movs	r1, #4
 8002220:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002222:	f88d 3000 	strb.w	r3, [sp]
 8002226:	f88d 3001 	strb.w	r3, [sp, #1]
 800222a:	f88d 3002 	strb.w	r3, [sp, #2]
 800222e:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002232:	f88d 1009 	strb.w	r1, [sp, #9]
 8002236:	f88d 400a 	strb.w	r4, [sp, #10]
 800223a:	f88d 100b 	strb.w	r1, [sp, #11]
 800223e:	f88d 300d 	strb.w	r3, [sp, #13]
 8002242:	f88d 300e 	strb.w	r3, [sp, #14]
 8002246:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800224a:	b92a      	cbnz	r2, 8002258 <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 800224c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002250:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8002254:	b004      	add	sp, #16
 8002256:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002258:	6802      	ldr	r2, [r0, #0]
 800225a:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800225c:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800225e:	aa04      	add	r2, sp, #16
 8002260:	eb02 7151 	add.w	r1, r2, r1, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002264:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002268:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800226c:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8002270:	00d2      	lsls	r2, r2, #3
 8002272:	fb92 f2f1 	sdiv	r2, r2, r1
 8002276:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800227a:	aa04      	add	r2, sp, #16
 800227c:	4413      	add	r3, r2
 800227e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8002282:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002286:	00d2      	lsls	r2, r2, #3
 8002288:	fb92 f3f3 	sdiv	r3, r2, r3
 800228c:	e7e0      	b.n	8002250 <UARTEx_SetNbDataToProcess+0x58>

0800228e <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800228e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8002292:	2b01      	cmp	r3, #1
 8002294:	d014      	beq.n	80022c0 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002296:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002298:	2324      	movs	r3, #36	; 0x24
 800229a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800229e:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80022a0:	6813      	ldr	r3, [r2, #0]
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80022a8:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80022b0:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80022b2:	2220      	movs	r2, #32
 80022b4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80022b8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 80022bc:	4618      	mov	r0, r3
 80022be:	4770      	bx	lr
  __HAL_LOCK(huart);
 80022c0:	2002      	movs	r0, #2
}
 80022c2:	4770      	bx	lr

080022c4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80022c4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80022c6:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80022ca:	2b01      	cmp	r3, #1
{
 80022cc:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80022ce:	d01b      	beq.n	8002308 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 80022d0:	2301      	movs	r3, #1
 80022d2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80022d6:	2324      	movs	r3, #36	; 0x24
 80022d8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80022dc:	6803      	ldr	r3, [r0, #0]
 80022de:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80022ee:	4311      	orrs	r1, r2
 80022f0:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80022f2:	f7ff ff81 	bl	80021f8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80022f6:	6803      	ldr	r3, [r0, #0]
 80022f8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80022fa:	2320      	movs	r3, #32
 80022fc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002300:	2000      	movs	r0, #0
 8002302:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8002306:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8002308:	2002      	movs	r0, #2
}
 800230a:	bd38      	pop	{r3, r4, r5, pc}

0800230c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800230c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800230e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8002312:	2b01      	cmp	r3, #1
{
 8002314:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8002316:	d01b      	beq.n	8002350 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8002318:	2301      	movs	r3, #1
 800231a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800231e:	2324      	movs	r3, #36	; 0x24
 8002320:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002324:	6803      	ldr	r3, [r0, #0]
 8002326:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8002336:	4311      	orrs	r1, r2
 8002338:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800233a:	f7ff ff5d 	bl	80021f8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800233e:	6803      	ldr	r3, [r0, #0]
 8002340:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002342:	2320      	movs	r3, #32
 8002344:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002348:	2000      	movs	r0, #0
 800234a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 800234e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8002350:	2002      	movs	r0, #2
}
 8002352:	bd38      	pop	{r3, r4, r5, pc}

08002354 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002354:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002358:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 800235c:	045b      	lsls	r3, r3, #17
 800235e:	0c5b      	lsrs	r3, r3, #17
 8002360:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002364:	2000      	movs	r0, #0
 8002366:	4770      	bx	lr

08002368 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002368:	b084      	sub	sp, #16
 800236a:	b510      	push	{r4, lr}
 800236c:	ac03      	add	r4, sp, #12
 800236e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002372:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8002374:	2301      	movs	r3, #1
 8002376:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 800237a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800237e:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002382:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8002386:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 800238a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR |= winterruptmask;
 800238e:	b29b      	uxth	r3, r3
 8002390:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002398:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 800239c:	b004      	add	sp, #16
 800239e:	4610      	mov	r0, r2
 80023a0:	4770      	bx	lr

080023a2 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80023a6:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023aa:	4302      	orrs	r2, r0
 80023ac:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b0:	4018      	ands	r0, r3
 80023b2:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80023b4:	9b01      	ldr	r3, [sp, #4]
}
 80023b6:	b002      	add	sp, #8
 80023b8:	4770      	bx	lr
	...

080023bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023bc:	b570      	push	{r4, r5, r6, lr}
 80023be:	b0ae      	sub	sp, #184	; 0xb8
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023c0:	2248      	movs	r2, #72	; 0x48
 80023c2:	2100      	movs	r1, #0
 80023c4:	a808      	add	r0, sp, #32
 80023c6:	f000 faeb 	bl	80029a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ca:	221c      	movs	r2, #28
 80023cc:	2100      	movs	r1, #0
 80023ce:	a801      	add	r0, sp, #4
 80023d0:	f000 fae6 	bl	80029a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023d4:	2100      	movs	r1, #0
 80023d6:	2250      	movs	r2, #80	; 0x50
 80023d8:	a81a      	add	r0, sp, #104	; 0x68
 80023da:	f000 fae1 	bl	80029a0 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80023de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023e2:	2501      	movs	r5, #1
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023ea:	60da      	str	r2, [r3, #12]
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	f022 0203 	bic.w	r2, r2, #3
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80023f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80023fc:	f022 0218 	bic.w	r2, r2, #24
 8002400:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002404:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <SystemClock_Config+0xe8>)
 8002406:	6813      	ldr	r3, [r2, #0]
 8002408:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800240c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002414:	950a      	str	r5, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002416:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800241e:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002420:	232f      	movs	r3, #47	; 0x2f
 8002422:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002428:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800242a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800242e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002430:	2340      	movs	r3, #64	; 0x40
 8002432:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002434:	2360      	movs	r3, #96	; 0x60
 8002436:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002438:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800243a:	2305      	movs	r3, #5
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800243c:	2400      	movs	r4, #0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800243e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002440:	2602      	movs	r6, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002442:	f7fe fabd 	bl	80009c0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002446:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002448:	236f      	movs	r3, #111	; 0x6f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800244a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800244c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800244e:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002450:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002452:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002454:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002456:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002458:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800245a:	f7fe fd6f 	bl	8000f3c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RTC
 800245e:	f642 1303 	movw	r3, #10499	; 0x2903
 8002462:	931a      	str	r3, [sp, #104]	; 0x68
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002464:	2318      	movs	r3, #24
 8002466:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800246c:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800246e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002472:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002474:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002478:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800247a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800247e:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002480:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002484:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800248a:	932a      	str	r3, [sp, #168]	; 0xa8
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800248c:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800248e:	2310      	movs	r3, #16
 8002490:	932d      	str	r3, [sp, #180]	; 0xb4
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002492:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002494:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002496:	962c      	str	r6, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002498:	f7fe fefb 	bl	8001292 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800249c:	f7ff f89b 	bl	80015d6 <HAL_RCCEx_EnableMSIPLLMode>
}
 80024a0:	b02e      	add	sp, #184	; 0xb8
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
 80024a4:	58000400 	.word	0x58000400

080024a8 <main>:
{
 80024a8:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
  HAL_Init();
 80024aa:	f7fe f817 	bl	80004dc <HAL_Init>
  SystemClock_Config();
 80024ae:	f7ff ff85 	bl	80023bc <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b2:	2214      	movs	r2, #20
 80024b4:	2100      	movs	r1, #0
 80024b6:	a801      	add	r0, sp, #4
 80024b8:	f000 fa72 	bl	80029a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024bc:	2004      	movs	r0, #4
 80024be:	f7ff ff70 	bl	80023a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	2001      	movs	r0, #1
 80024c4:	f7ff ff6d 	bl	80023a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c8:	2002      	movs	r0, #2
 80024ca:	f7ff ff6a 	bl	80023a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ce:	2008      	movs	r0, #8
 80024d0:	f7ff ff67 	bl	80023a2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80024d4:	2201      	movs	r2, #1
 80024d6:	2110      	movs	r1, #16
 80024d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024dc:	f7fe f93a 	bl	8000754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2123      	movs	r1, #35	; 0x23
 80024e4:	484c      	ldr	r0, [pc, #304]	; (8002618 <main+0x170>)
 80024e6:	f7fe f935 	bl	8000754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80024ea:	2710      	movs	r7, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ec:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ee:	2602      	movs	r6, #2
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80024f0:	a901      	add	r1, sp, #4
 80024f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f6:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80024f8:	9701      	str	r7, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fa:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024fc:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024fe:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002500:	f7fe f876 	bl	80005f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002504:	a901      	add	r1, sp, #4
 8002506:	4845      	ldr	r0, [pc, #276]	; (800261c <main+0x174>)
  GPIO_InitStruct.Pin = B1_Pin;
 8002508:	9701      	str	r7, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250a:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800250e:	f7fe f86f 	bl	80005f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8002512:	2323      	movs	r3, #35	; 0x23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	a901      	add	r1, sp, #4
 8002516:	4840      	ldr	r0, [pc, #256]	; (8002618 <main+0x170>)
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8002518:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251a:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	9403      	str	r4, [sp, #12]
  hlpuart1.Instance = LPUART1;
 800251e:	4d40      	ldr	r5, [pc, #256]	; (8002620 <main+0x178>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002522:	f7fe f865 	bl	80005f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002526:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002528:	a901      	add	r1, sp, #4
 800252a:	483e      	ldr	r0, [pc, #248]	; (8002624 <main+0x17c>)
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800252c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252e:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002532:	f7fe f85d 	bl	80005f0 <HAL_GPIO_Init>
  hlpuart1.Init.BaudRate = 9600;
 8002536:	4a3c      	ldr	r2, [pc, #240]	; (8002628 <main+0x180>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002538:	60ac      	str	r4, [r5, #8]
  hlpuart1.Init.BaudRate = 9600;
 800253a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800253e:	f04f 080c 	mov.w	r8, #12
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002542:	4628      	mov	r0, r5
  hlpuart1.Init.BaudRate = 9600;
 8002544:	e885 000c 	stmia.w	r5, {r2, r3}
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002548:	60ec      	str	r4, [r5, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800254a:	612c      	str	r4, [r5, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800254c:	f8c5 8014 	str.w	r8, [r5, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002550:	61ac      	str	r4, [r5, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002552:	622c      	str	r4, [r5, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002554:	626c      	str	r4, [r5, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002556:	62ac      	str	r4, [r5, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002558:	666c      	str	r4, [r5, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800255a:	f7ff fe1d 	bl	8002198 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800255e:	4621      	mov	r1, r4
 8002560:	4628      	mov	r0, r5
 8002562:	f7ff feaf 	bl	80022c4 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002566:	4621      	mov	r1, r4
 8002568:	4628      	mov	r0, r5
 800256a:	f7ff fecf 	bl	800230c <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800256e:	4628      	mov	r0, r5
  huart1.Instance = USART1;
 8002570:	4d2e      	ldr	r5, [pc, #184]	; (800262c <main+0x184>)
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002572:	f7ff fe8c 	bl	800228e <HAL_UARTEx_DisableFifoMode>
  huart1.Init.BaudRate = 115200;
 8002576:	492e      	ldr	r1, [pc, #184]	; (8002630 <main+0x188>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002578:	60ac      	str	r4, [r5, #8]
  huart1.Init.BaudRate = 115200;
 800257a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800257e:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 8002580:	e885 000a 	stmia.w	r5, {r1, r3}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002584:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002586:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002588:	f8c5 8014 	str.w	r8, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258c:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800258e:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002590:	622c      	str	r4, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002592:	626c      	str	r4, [r5, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002594:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002596:	f7ff fdff 	bl	8002198 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800259a:	4621      	mov	r1, r4
 800259c:	4628      	mov	r0, r5
 800259e:	f7ff fe91 	bl	80022c4 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025a2:	4621      	mov	r1, r4
 80025a4:	4628      	mov	r0, r5
 80025a6:	f7ff feb1 	bl	800230c <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80025aa:	4628      	mov	r0, r5
 80025ac:	f7ff fe6f 	bl	800228e <HAL_UARTEx_DisableFifoMode>
  hrtc.Instance = RTC;
 80025b0:	4820      	ldr	r0, [pc, #128]	; (8002634 <main+0x18c>)
 80025b2:	4b21      	ldr	r3, [pc, #132]	; (8002638 <main+0x190>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025b4:	6104      	str	r4, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80025b6:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 80025ba:	237f      	movs	r3, #127	; 0x7f
 80025bc:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80025be:	23ff      	movs	r3, #255	; 0xff
 80025c0:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80025c2:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025c4:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80025c6:	61c4      	str	r4, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025c8:	f7ff f83e 	bl	8001648 <HAL_RTC_Init>
  hspi1.Instance = SPI1;
 80025cc:	481b      	ldr	r0, [pc, #108]	; (800263c <main+0x194>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025ce:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <main+0x198>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80025d0:	61c7      	str	r7, [r0, #28]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025d2:	f44f 7582 	mov.w	r5, #260	; 0x104
 80025d6:	e880 0028 	stmia.w	r0, {r3, r5}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80025de:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e4:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 80025e6:	2307      	movs	r3, #7
 80025e8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ea:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ec:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ee:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025f0:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025f2:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f4:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025f6:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025f8:	f7ff f882 	bl	8001700 <HAL_SPI_Init>
  hpcd_USB_FS.Instance = USB;
 80025fc:	4811      	ldr	r0, [pc, #68]	; (8002644 <main+0x19c>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <main+0x1a0>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002600:	6086      	str	r6, [r0, #8]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002602:	2708      	movs	r7, #8
 8002604:	e880 0088 	stmia.w	r0, {r3, r7}
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002608:	6106      	str	r6, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800260a:	6144      	str	r4, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800260c:	6184      	str	r4, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800260e:	61c4      	str	r4, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002610:	6204      	str	r4, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002612:	f7fe f8a4 	bl	800075e <HAL_PCD_Init>
 8002616:	e7fe      	b.n	8002616 <main+0x16e>
 8002618:	48000400 	.word	0x48000400
 800261c:	48000800 	.word	0x48000800
 8002620:	20000030 	.word	0x20000030
 8002624:	48000c00 	.word	0x48000c00
 8002628:	40008000 	.word	0x40008000
 800262c:	200000bc 	.word	0x200000bc
 8002630:	40013800 	.word	0x40013800
 8002634:	20000148 	.word	0x20000148
 8002638:	40002800 	.word	0x40002800
 800263c:	2000016c 	.word	0x2000016c
 8002640:	40013000 	.word	0x40013000
 8002644:	200001d0 	.word	0x200001d0
 8002648:	40006800 	.word	0x40006800

0800264c <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 800264c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8002650:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002654:	4302      	orrs	r2, r0
 8002656:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265a:	4018      	ands	r0, r3
 800265c:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800265e:	9b01      	ldr	r3, [sp, #4]
}
 8002660:	b002      	add	sp, #8
 8002662:	4770      	bx	lr

08002664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002664:	4770      	bx	lr
	...

08002668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002668:	b510      	push	{r4, lr}
 800266a:	4604      	mov	r4, r0
 800266c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266e:	2214      	movs	r2, #20
 8002670:	2100      	movs	r1, #0
 8002672:	a803      	add	r0, sp, #12
 8002674:	f000 f994 	bl	80029a0 <memset>
  if(huart->Instance==LPUART1)
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <HAL_UART_MspInit+0x90>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d11c      	bne.n	80026ba <HAL_UART_MspInit+0x52>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002684:	2004      	movs	r0, #4
 8002686:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002696:	9b01      	ldr	r3, [sp, #4]
 8002698:	f7ff ffd8 	bl	800264c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration    
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800269c:	2303      	movs	r3, #3
 800269e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026aa:	4814      	ldr	r0, [pc, #80]	; (80026fc <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80026ac:	2308      	movs	r3, #8
 80026ae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b2:	f7fd ff9d 	bl	80005f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026b6:	b008      	add	sp, #32
 80026b8:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART1)
 80026ba:	4a11      	ldr	r2, [pc, #68]	; (8002700 <HAL_UART_MspInit+0x98>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d1fa      	bne.n	80026b6 <HAL_UART_MspInit+0x4e>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80026c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c4:	2002      	movs	r0, #2
 80026c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026cc:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80026ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d4:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80026d6:	9b02      	ldr	r3, [sp, #8]
 80026d8:	f7ff ffb8 	bl	800264c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80026dc:	23c0      	movs	r3, #192	; 0xc0
 80026de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026e4:	2301      	movs	r3, #1
 80026e6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e8:	2300      	movs	r3, #0
 80026ea:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026ec:	2307      	movs	r3, #7
 80026ee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f0:	a903      	add	r1, sp, #12
 80026f2:	4804      	ldr	r0, [pc, #16]	; (8002704 <HAL_UART_MspInit+0x9c>)
 80026f4:	e7dd      	b.n	80026b2 <HAL_UART_MspInit+0x4a>
 80026f6:	bf00      	nop
 80026f8:	40008000 	.word	0x40008000
 80026fc:	48000800 	.word	0x48000800
 8002700:	40013800 	.word	0x40013800
 8002704:	48000400 	.word	0x48000400

08002708 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8002708:	6802      	ldr	r2, [r0, #0]
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RTC_MspInit+0x1c>)
 800270c:	429a      	cmp	r2, r3
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800270e:	bf01      	itttt	eq
 8002710:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
 8002714:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 8002718:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 800271c:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40002800 	.word	0x40002800

08002728 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002728:	b510      	push	{r4, lr}
 800272a:	4604      	mov	r4, r0
 800272c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272e:	2214      	movs	r2, #20
 8002730:	2100      	movs	r1, #0
 8002732:	a801      	add	r0, sp, #4
 8002734:	f000 f934 	bl	80029a0 <memset>
  if(hspi->Instance==SPI1)
 8002738:	6822      	ldr	r2, [r4, #0]
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_SPI_MspInit+0x54>)
 800273c:	429a      	cmp	r2, r3
 800273e:	d11b      	bne.n	8002778 <HAL_SPI_MspInit+0x50>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002744:	2001      	movs	r0, #1
 8002746:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002748:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800274c:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800274e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002754:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002756:	9b00      	ldr	r3, [sp, #0]
 8002758:	f7ff ff78 	bl	800264c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800275c:	23e0      	movs	r3, #224	; 0xe0
 800275e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800276c:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002772:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002774:	f7fd ff3c 	bl	80005f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002778:	b006      	add	sp, #24
 800277a:	bd10      	pop	{r4, pc}
 800277c:	40013000 	.word	0x40013000

08002780 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002780:	b510      	push	{r4, lr}
 8002782:	4604      	mov	r4, r0
 8002784:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002786:	2214      	movs	r2, #20
 8002788:	2100      	movs	r1, #0
 800278a:	a801      	add	r0, sp, #4
 800278c:	f000 f908 	bl	80029a0 <memset>
  if(hpcd->Instance==USB)
 8002790:	6822      	ldr	r2, [r4, #0]
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_PCD_MspInit+0x58>)
 8002794:	429a      	cmp	r2, r3
 8002796:	d11c      	bne.n	80027d2 <HAL_PCD_MspInit+0x52>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002798:	2001      	movs	r0, #1
 800279a:	f7ff ff57 	bl	800264c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800279e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80027a2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ae:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80027b0:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80027b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b8:	f7fd ff1a 	bl	80005f0 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80027c6:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ce:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80027d0:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80027d2:	b006      	add	sp, #24
 80027d4:	bd10      	pop	{r4, pc}
 80027d6:	bf00      	nop
 80027d8:	40006800 	.word	0x40006800

080027dc <NMI_Handler>:
 80027dc:	4770      	bx	lr

080027de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027de:	e7fe      	b.n	80027de <HardFault_Handler>

080027e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e0:	e7fe      	b.n	80027e0 <MemManage_Handler>

080027e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e2:	e7fe      	b.n	80027e2 <BusFault_Handler>

080027e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e4:	e7fe      	b.n	80027e4 <UsageFault_Handler>

080027e6 <SVC_Handler>:
 80027e6:	4770      	bx	lr

080027e8 <DebugMon_Handler>:
 80027e8:	4770      	bx	lr

080027ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ea:	4770      	bx	lr

080027ec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ec:	f7fd be8c 	b.w	8000508 <HAL_IncTick>

080027f0 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80027f0:	4b17      	ldr	r3, [pc, #92]	; (8002850 <SystemInit+0x60>)
 80027f2:	2100      	movs	r1, #0
 80027f4:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80027f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027fa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80027fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002806:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8002812:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002816:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 800281e:	4462      	add	r2, ip
 8002820:	4002      	ands	r2, r0
 8002822:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002824:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002828:	f022 0205 	bic.w	r2, r2, #5
 800282c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002830:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002834:	f022 0201 	bic.w	r2, r2, #1
 8002838:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800283c:	4a05      	ldr	r2, [pc, #20]	; (8002854 <SystemInit+0x64>)
 800283e:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002840:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002848:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800284a:	6199      	str	r1, [r3, #24]
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000ed00 	.word	0xe000ed00
 8002854:	22041000 	.word	0x22041000

08002858 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8002858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285c:	4924      	ldr	r1, [pc, #144]	; (80028f0 <SystemCoreClockUpdate+0x98>)
 800285e:	6813      	ldr	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002860:	6890      	ldr	r0, [r2, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8002862:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002866:	f000 000c 	and.w	r0, r0, #12
{
 800286a:	b510      	push	{r4, lr}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800286c:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8002870:	4611      	mov	r1, r2
 8002872:	4a20      	ldr	r2, [pc, #128]	; (80028f4 <SystemCoreClockUpdate+0x9c>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002874:	280c      	cmp	r0, #12
 8002876:	d839      	bhi.n	80028ec <SystemCoreClockUpdate+0x94>
 8002878:	e8df f000 	tbb	[pc, r0]
 800287c:	38383838 	.word	0x38383838
 8002880:	38383807 	.word	0x38383807
 8002884:	38383816 	.word	0x38383816
 8002888:	18          	.byte	0x18
 8002889:	00          	.byte	0x00
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 800288a:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <SystemCoreClockUpdate+0xa0>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 800288c:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800288e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8002892:	481a      	ldr	r0, [pc, #104]	; (80028fc <SystemCoreClockUpdate+0xa4>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002894:	6899      	ldr	r1, [r3, #8]
  SystemCoreClock = SystemCoreClock / tmp;
 8002896:	6813      	ldr	r3, [r2, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002898:	f3c1 1103 	ubfx	r1, r1, #4, #4
  SystemCoreClock = SystemCoreClock / tmp;
 800289c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80028a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <SystemCoreClockUpdate+0xa8>)
 80028aa:	e7ef      	b.n	800288c <SystemCoreClockUpdate+0x34>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80028ac:	68c8      	ldr	r0, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80028ae:	68cb      	ldr	r3, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80028b0:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80028b4:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80028b8:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80028ba:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80028be:	d10e      	bne.n	80028de <SystemCoreClockUpdate+0x86>
        pllvco = (HSI_VALUE / pllm);
 80028c0:	490d      	ldr	r1, [pc, #52]	; (80028f8 <SystemCoreClockUpdate+0xa0>)
        pllvco = (HSE_VALUE / pllm);
 80028c2:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ca:	68c8      	ldr	r0, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80028cc:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028ce:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80028d2:	0f49      	lsrs	r1, r1, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028d4:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80028d6:	3101      	adds	r1, #1
      SystemCoreClock = pllvco/pllr;
 80028d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80028dc:	e7d6      	b.n	800288c <SystemCoreClockUpdate+0x34>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80028de:	2803      	cmp	r0, #3
 80028e0:	d101      	bne.n	80028e6 <SystemCoreClockUpdate+0x8e>
        pllvco = (HSE_VALUE / pllm);
 80028e2:	4907      	ldr	r1, [pc, #28]	; (8002900 <SystemCoreClockUpdate+0xa8>)
 80028e4:	e7ed      	b.n	80028c2 <SystemCoreClockUpdate+0x6a>
        pllvco = (msirange / pllm);
 80028e6:	fbb4 f3f3 	udiv	r3, r4, r3
 80028ea:	e7ec      	b.n	80028c6 <SystemCoreClockUpdate+0x6e>
      SystemCoreClock = msirange;
 80028ec:	6014      	str	r4, [r2, #0]
      break;
 80028ee:	e7ce      	b.n	800288e <SystemCoreClockUpdate+0x36>
 80028f0:	08002a58 	.word	0x08002a58
 80028f4:	2000000c 	.word	0x2000000c
 80028f8:	00f42400 	.word	0x00f42400
 80028fc:	080029f8 	.word	0x080029f8
 8002900:	01e84800 	.word	0x01e84800

08002904 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002904:	480d      	ldr	r0, [pc, #52]	; (800293c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002906:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002908:	480d      	ldr	r0, [pc, #52]	; (8002940 <LoopForever+0x6>)
  ldr r1, =_edata
 800290a:	490e      	ldr	r1, [pc, #56]	; (8002944 <LoopForever+0xa>)
  ldr r2, =_sidata
 800290c:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <LoopForever+0xe>)
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002910:	e002      	b.n	8002918 <LoopCopyDataInit>

08002912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002916:	3304      	adds	r3, #4

08002918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800291a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800291c:	d3f9      	bcc.n	8002912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002920:	4c0b      	ldr	r4, [pc, #44]	; (8002950 <LoopForever+0x16>)
  movs r3, #0
 8002922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002924:	e001      	b.n	800292a <LoopFillZerobss>

08002926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002928:	3204      	adds	r2, #4

0800292a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800292a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800292c:	d3fb      	bcc.n	8002926 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800292e:	f7ff ff5f 	bl	80027f0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002932:	f000 f811 	bl	8002958 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002936:	f7ff fdb7 	bl	80024a8 <main>

0800293a <LoopForever>:

LoopForever:
  b LoopForever
 800293a:	e7fe      	b.n	800293a <LoopForever>
  ldr   r0, =_estack
 800293c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002940:	20000004 	.word	0x20000004
  ldr r1, =_edata
 8002944:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002948:	08002aa8 	.word	0x08002aa8
  ldr r2, =_sbss
 800294c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002950:	20000444 	.word	0x20000444

08002954 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002954:	e7fe      	b.n	8002954 <ADC1_IRQHandler>
	...

08002958 <__libc_init_array>:
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	4e0d      	ldr	r6, [pc, #52]	; (8002990 <__libc_init_array+0x38>)
 800295c:	4c0d      	ldr	r4, [pc, #52]	; (8002994 <__libc_init_array+0x3c>)
 800295e:	1ba4      	subs	r4, r4, r6
 8002960:	10a4      	asrs	r4, r4, #2
 8002962:	2500      	movs	r5, #0
 8002964:	42a5      	cmp	r5, r4
 8002966:	d109      	bne.n	800297c <__libc_init_array+0x24>
 8002968:	4e0b      	ldr	r6, [pc, #44]	; (8002998 <__libc_init_array+0x40>)
 800296a:	4c0c      	ldr	r4, [pc, #48]	; (800299c <__libc_init_array+0x44>)
 800296c:	f000 f820 	bl	80029b0 <_init>
 8002970:	1ba4      	subs	r4, r4, r6
 8002972:	10a4      	asrs	r4, r4, #2
 8002974:	2500      	movs	r5, #0
 8002976:	42a5      	cmp	r5, r4
 8002978:	d105      	bne.n	8002986 <__libc_init_array+0x2e>
 800297a:	bd70      	pop	{r4, r5, r6, pc}
 800297c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002980:	4798      	blx	r3
 8002982:	3501      	adds	r5, #1
 8002984:	e7ee      	b.n	8002964 <__libc_init_array+0xc>
 8002986:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800298a:	4798      	blx	r3
 800298c:	3501      	adds	r5, #1
 800298e:	e7f2      	b.n	8002976 <__libc_init_array+0x1e>
 8002990:	08002aa0 	.word	0x08002aa0
 8002994:	08002aa0 	.word	0x08002aa0
 8002998:	08002aa0 	.word	0x08002aa0
 800299c:	08002aa4 	.word	0x08002aa4

080029a0 <memset>:
 80029a0:	4402      	add	r2, r0
 80029a2:	4603      	mov	r3, r0
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d100      	bne.n	80029aa <memset+0xa>
 80029a8:	4770      	bx	lr
 80029aa:	f803 1b01 	strb.w	r1, [r3], #1
 80029ae:	e7f9      	b.n	80029a4 <memset+0x4>

080029b0 <_init>:
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b2:	bf00      	nop
 80029b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b6:	bc08      	pop	{r3}
 80029b8:	469e      	mov	lr, r3
 80029ba:	4770      	bx	lr

080029bc <_fini>:
 80029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029be:	bf00      	nop
 80029c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c2:	bc08      	pop	{r3}
 80029c4:	469e      	mov	lr, r3
 80029c6:	4770      	bx	lr
