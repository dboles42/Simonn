
Simon-Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc8  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08003d08  08003d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003e3c  08003e3c  00013e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003e40  08003e40  00013e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000004  08003e44  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003a  20000018  08003e58  00020018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000054  08003e92  00020054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 000000a4  20000068  08003ea3  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 TIMERSERVER_CONTEXT 00000099  2000010c  08003f47  0002010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000204  200001a8  08003fe0  000201a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200003ac  08003fe0  000203ac  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030a28  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 0000001c  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000018b  2003001c  2003001c  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301a8  200301a8  000301a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 17 .debug_info   00033774  00000000  00000000  00030a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00006045  00000000  00000000  000641cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000102ce  00000000  00000000  0006a211  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 00001800  00000000  00000000  0007a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00002118  00000000  00000000  0007bce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0000d945  00000000  00000000  0007ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0000c9cf  00000000  00000000  0008b73d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007c  00000000  00000000  0009810c  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00004844  00000000  00000000  00098188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001a8 	.word	0x200001a8
 800015c:	00000000 	.word	0x00000000
 8000160:	08003cf0 	.word	0x08003cf0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ac 	.word	0x200001ac
 800017c:	08003cf0 	.word	0x08003cf0

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b97a 	b.w	800048c <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	468c      	mov	ip, r1
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	9e08      	ldr	r6, [sp, #32]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d151      	bne.n	8000264 <__udivmoddi4+0xb4>
 80001c0:	428a      	cmp	r2, r1
 80001c2:	4617      	mov	r7, r2
 80001c4:	d96d      	bls.n	80002a2 <__udivmoddi4+0xf2>
 80001c6:	fab2 fe82 	clz	lr, r2
 80001ca:	f1be 0f00 	cmp.w	lr, #0
 80001ce:	d00b      	beq.n	80001e8 <__udivmoddi4+0x38>
 80001d0:	f1ce 0c20 	rsb	ip, lr, #32
 80001d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80001d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80001dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80001e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80001e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80001e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80001ec:	0c25      	lsrs	r5, r4, #16
 80001ee:	fbbc f8fa 	udiv	r8, ip, sl
 80001f2:	fa1f f987 	uxth.w	r9, r7
 80001f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80001fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80001fe:	fb08 f309 	mul.w	r3, r8, r9
 8000202:	42ab      	cmp	r3, r5
 8000204:	d90a      	bls.n	800021c <__udivmoddi4+0x6c>
 8000206:	19ed      	adds	r5, r5, r7
 8000208:	f108 32ff 	add.w	r2, r8, #4294967295
 800020c:	f080 8123 	bcs.w	8000456 <__udivmoddi4+0x2a6>
 8000210:	42ab      	cmp	r3, r5
 8000212:	f240 8120 	bls.w	8000456 <__udivmoddi4+0x2a6>
 8000216:	f1a8 0802 	sub.w	r8, r8, #2
 800021a:	443d      	add	r5, r7
 800021c:	1aed      	subs	r5, r5, r3
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb5 f0fa 	udiv	r0, r5, sl
 8000224:	fb0a 5510 	mls	r5, sl, r0, r5
 8000228:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800022c:	fb00 f909 	mul.w	r9, r0, r9
 8000230:	45a1      	cmp	r9, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x98>
 8000234:	19e4      	adds	r4, r4, r7
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295
 800023a:	f080 810a 	bcs.w	8000452 <__udivmoddi4+0x2a2>
 800023e:	45a1      	cmp	r9, r4
 8000240:	f240 8107 	bls.w	8000452 <__udivmoddi4+0x2a2>
 8000244:	3802      	subs	r0, #2
 8000246:	443c      	add	r4, r7
 8000248:	eba4 0409 	sub.w	r4, r4, r9
 800024c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000250:	2100      	movs	r1, #0
 8000252:	2e00      	cmp	r6, #0
 8000254:	d061      	beq.n	800031a <__udivmoddi4+0x16a>
 8000256:	fa24 f40e 	lsr.w	r4, r4, lr
 800025a:	2300      	movs	r3, #0
 800025c:	6034      	str	r4, [r6, #0]
 800025e:	6073      	str	r3, [r6, #4]
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	428b      	cmp	r3, r1
 8000266:	d907      	bls.n	8000278 <__udivmoddi4+0xc8>
 8000268:	2e00      	cmp	r6, #0
 800026a:	d054      	beq.n	8000316 <__udivmoddi4+0x166>
 800026c:	2100      	movs	r1, #0
 800026e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000272:	4608      	mov	r0, r1
 8000274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000278:	fab3 f183 	clz	r1, r3
 800027c:	2900      	cmp	r1, #0
 800027e:	f040 808e 	bne.w	800039e <__udivmoddi4+0x1ee>
 8000282:	42ab      	cmp	r3, r5
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xdc>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80fa 	bhi.w	8000480 <__udivmoddi4+0x2d0>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb65 0503 	sbc.w	r5, r5, r3
 8000292:	2001      	movs	r0, #1
 8000294:	46ac      	mov	ip, r5
 8000296:	2e00      	cmp	r6, #0
 8000298:	d03f      	beq.n	800031a <__udivmoddi4+0x16a>
 800029a:	e886 1010 	stmia.w	r6, {r4, ip}
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b912      	cbnz	r2, 80002aa <__udivmoddi4+0xfa>
 80002a4:	2701      	movs	r7, #1
 80002a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002aa:	fab7 fe87 	clz	lr, r7
 80002ae:	f1be 0f00 	cmp.w	lr, #0
 80002b2:	d134      	bne.n	800031e <__udivmoddi4+0x16e>
 80002b4:	1beb      	subs	r3, r5, r7
 80002b6:	0c3a      	lsrs	r2, r7, #16
 80002b8:	fa1f fc87 	uxth.w	ip, r7
 80002bc:	2101      	movs	r1, #1
 80002be:	fbb3 f8f2 	udiv	r8, r3, r2
 80002c2:	0c25      	lsrs	r5, r4, #16
 80002c4:	fb02 3318 	mls	r3, r2, r8, r3
 80002c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80002cc:	fb0c f308 	mul.w	r3, ip, r8
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x134>
 80002d4:	19ed      	adds	r5, r5, r7
 80002d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x132>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	f200 80d1 	bhi.w	8000484 <__udivmoddi4+0x2d4>
 80002e2:	4680      	mov	r8, r0
 80002e4:	1aed      	subs	r5, r5, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80002ec:	fb02 5510 	mls	r5, r2, r0, r5
 80002f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80002f4:	fb0c fc00 	mul.w	ip, ip, r0
 80002f8:	45a4      	cmp	ip, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x15c>
 80002fc:	19e4      	adds	r4, r4, r7
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x15a>
 8000304:	45a4      	cmp	ip, r4
 8000306:	f200 80b8 	bhi.w	800047a <__udivmoddi4+0x2ca>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 040c 	sub.w	r4, r4, ip
 8000310:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000314:	e79d      	b.n	8000252 <__udivmoddi4+0xa2>
 8000316:	4631      	mov	r1, r6
 8000318:	4630      	mov	r0, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	f1ce 0420 	rsb	r4, lr, #32
 8000322:	fa05 f30e 	lsl.w	r3, r5, lr
 8000326:	fa07 f70e 	lsl.w	r7, r7, lr
 800032a:	fa20 f804 	lsr.w	r8, r0, r4
 800032e:	0c3a      	lsrs	r2, r7, #16
 8000330:	fa25 f404 	lsr.w	r4, r5, r4
 8000334:	ea48 0803 	orr.w	r8, r8, r3
 8000338:	fbb4 f1f2 	udiv	r1, r4, r2
 800033c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000340:	fb02 4411 	mls	r4, r2, r1, r4
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800034c:	fb01 f30c 	mul.w	r3, r1, ip
 8000350:	42ab      	cmp	r3, r5
 8000352:	fa00 f40e 	lsl.w	r4, r0, lr
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x1bc>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f101 30ff 	add.w	r0, r1, #4294967295
 800035e:	f080 808a 	bcs.w	8000476 <__udivmoddi4+0x2c6>
 8000362:	42ab      	cmp	r3, r5
 8000364:	f240 8087 	bls.w	8000476 <__udivmoddi4+0x2c6>
 8000368:	3902      	subs	r1, #2
 800036a:	443d      	add	r5, r7
 800036c:	1aeb      	subs	r3, r5, r3
 800036e:	fa1f f588 	uxth.w	r5, r8
 8000372:	fbb3 f0f2 	udiv	r0, r3, r2
 8000376:	fb02 3310 	mls	r3, r2, r0, r3
 800037a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800037e:	fb00 f30c 	mul.w	r3, r0, ip
 8000382:	42ab      	cmp	r3, r5
 8000384:	d907      	bls.n	8000396 <__udivmoddi4+0x1e6>
 8000386:	19ed      	adds	r5, r5, r7
 8000388:	f100 38ff 	add.w	r8, r0, #4294967295
 800038c:	d26f      	bcs.n	800046e <__udivmoddi4+0x2be>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d96d      	bls.n	800046e <__udivmoddi4+0x2be>
 8000392:	3802      	subs	r0, #2
 8000394:	443d      	add	r5, r7
 8000396:	1aeb      	subs	r3, r5, r3
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	e78f      	b.n	80002be <__udivmoddi4+0x10e>
 800039e:	f1c1 0720 	rsb	r7, r1, #32
 80003a2:	fa22 f807 	lsr.w	r8, r2, r7
 80003a6:	408b      	lsls	r3, r1
 80003a8:	fa05 f401 	lsl.w	r4, r5, r1
 80003ac:	ea48 0303 	orr.w	r3, r8, r3
 80003b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80003b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80003b8:	40fd      	lsrs	r5, r7
 80003ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80003be:	fbb5 f9fc 	udiv	r9, r5, ip
 80003c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80003c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80003ca:	fa1f f883 	uxth.w	r8, r3
 80003ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003d2:	fb09 f408 	mul.w	r4, r9, r8
 80003d6:	42ac      	cmp	r4, r5
 80003d8:	fa02 f201 	lsl.w	r2, r2, r1
 80003dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x244>
 80003e2:	18ed      	adds	r5, r5, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	d243      	bcs.n	8000472 <__udivmoddi4+0x2c2>
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	d941      	bls.n	8000472 <__udivmoddi4+0x2c2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	441d      	add	r5, r3
 80003f4:	1b2d      	subs	r5, r5, r4
 80003f6:	fa1f fe8e 	uxth.w	lr, lr
 80003fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80003fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000402:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000406:	fb00 f808 	mul.w	r8, r0, r8
 800040a:	45a0      	cmp	r8, r4
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x26e>
 800040e:	18e4      	adds	r4, r4, r3
 8000410:	f100 35ff 	add.w	r5, r0, #4294967295
 8000414:	d229      	bcs.n	800046a <__udivmoddi4+0x2ba>
 8000416:	45a0      	cmp	r8, r4
 8000418:	d927      	bls.n	800046a <__udivmoddi4+0x2ba>
 800041a:	3802      	subs	r0, #2
 800041c:	441c      	add	r4, r3
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	eba4 0408 	sub.w	r4, r4, r8
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	454c      	cmp	r4, r9
 800042c:	46c6      	mov	lr, r8
 800042e:	464d      	mov	r5, r9
 8000430:	d315      	bcc.n	800045e <__udivmoddi4+0x2ae>
 8000432:	d012      	beq.n	800045a <__udivmoddi4+0x2aa>
 8000434:	b156      	cbz	r6, 800044c <__udivmoddi4+0x29c>
 8000436:	ebba 030e 	subs.w	r3, sl, lr
 800043a:	eb64 0405 	sbc.w	r4, r4, r5
 800043e:	fa04 f707 	lsl.w	r7, r4, r7
 8000442:	40cb      	lsrs	r3, r1
 8000444:	431f      	orrs	r7, r3
 8000446:	40cc      	lsrs	r4, r1
 8000448:	6037      	str	r7, [r6, #0]
 800044a:	6074      	str	r4, [r6, #4]
 800044c:	2100      	movs	r1, #0
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	4618      	mov	r0, r3
 8000454:	e6f8      	b.n	8000248 <__udivmoddi4+0x98>
 8000456:	4690      	mov	r8, r2
 8000458:	e6e0      	b.n	800021c <__udivmoddi4+0x6c>
 800045a:	45c2      	cmp	sl, r8
 800045c:	d2ea      	bcs.n	8000434 <__udivmoddi4+0x284>
 800045e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000462:	eb69 0503 	sbc.w	r5, r9, r3
 8000466:	3801      	subs	r0, #1
 8000468:	e7e4      	b.n	8000434 <__udivmoddi4+0x284>
 800046a:	4628      	mov	r0, r5
 800046c:	e7d7      	b.n	800041e <__udivmoddi4+0x26e>
 800046e:	4640      	mov	r0, r8
 8000470:	e791      	b.n	8000396 <__udivmoddi4+0x1e6>
 8000472:	4681      	mov	r9, r0
 8000474:	e7be      	b.n	80003f4 <__udivmoddi4+0x244>
 8000476:	4601      	mov	r1, r0
 8000478:	e778      	b.n	800036c <__udivmoddi4+0x1bc>
 800047a:	3802      	subs	r0, #2
 800047c:	443c      	add	r4, r7
 800047e:	e745      	b.n	800030c <__udivmoddi4+0x15c>
 8000480:	4608      	mov	r0, r1
 8000482:	e708      	b.n	8000296 <__udivmoddi4+0xe6>
 8000484:	f1a8 0802 	sub.w	r8, r8, #2
 8000488:	443d      	add	r5, r7
 800048a:	e72b      	b.n	80002e4 <__udivmoddi4+0x134>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000490:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000492:	4c10      	ldr	r4, [pc, #64]	; (80004d4 <HAL_InitTick+0x44>)
 8000494:	6823      	ldr	r3, [r4, #0]
{
 8000496:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000498:	b90b      	cbnz	r3, 800049e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800049a:	2001      	movs	r0, #1
 800049c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 800049e:	f000 fe45 	bl	800112c <HAL_RCC_GetHCLKFreq>
 80004a2:	6822      	ldr	r2, [r4, #0]
 80004a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80004ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80004b0:	f000 f894 	bl	80005dc <HAL_SYSTICK_Config>
 80004b4:	4604      	mov	r4, r0
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d1ef      	bne.n	800049a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ba:	2d0f      	cmp	r5, #15
 80004bc:	d8ed      	bhi.n	800049a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004be:	4602      	mov	r2, r0
 80004c0:	4629      	mov	r1, r5
 80004c2:	f04f 30ff 	mov.w	r0, #4294967295
 80004c6:	f000 f849 	bl	800055c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004ca:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <HAL_InitTick+0x48>)
 80004cc:	4620      	mov	r0, r4
 80004ce:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 80004d0:	bd38      	pop	{r3, r4, r5, pc}
 80004d2:	bf00      	nop
 80004d4:	20000004 	.word	0x20000004
 80004d8:	20000008 	.word	0x20000008

080004dc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004dc:	4a09      	ldr	r2, [pc, #36]	; (8000504 <HAL_Init+0x28>)
 80004de:	6813      	ldr	r3, [r2, #0]
 80004e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80004e4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ea:	f000 f825 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004ee:	2000      	movs	r0, #0
 80004f0:	f7ff ffce 	bl	8000490 <HAL_InitTick>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b918      	cbnz	r0, 8000500 <HAL_Init+0x24>
    HAL_MspInit();
 80004f8:	f003 fa83 	bl	8003a02 <HAL_MspInit>
}
 80004fc:	4620      	mov	r0, r4
 80004fe:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000500:	2401      	movs	r4, #1
 8000502:	e7fb      	b.n	80004fc <HAL_Init+0x20>
 8000504:	58004000 	.word	0x58004000

08000508 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000508:	4a03      	ldr	r2, [pc, #12]	; (8000518 <HAL_IncTick+0x10>)
 800050a:	4904      	ldr	r1, [pc, #16]	; (800051c <HAL_IncTick+0x14>)
 800050c:	6813      	ldr	r3, [r2, #0]
 800050e:	6809      	ldr	r1, [r1, #0]
 8000510:	440b      	add	r3, r1
 8000512:	6013      	str	r3, [r2, #0]
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	2000027c 	.word	0x2000027c
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000520:	4b01      	ldr	r3, [pc, #4]	; (8000528 <HAL_GetTick+0x8>)
 8000522:	6818      	ldr	r0, [r3, #0]
}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	2000027c 	.word	0x2000027c

0800052c <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTickPrio+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000008 	.word	0x20000008

08000538 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800053a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800053c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000540:	041b      	lsls	r3, r3, #16
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000548:	0200      	lsls	r0, r0, #8
 800054a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000552:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000554:	60d3      	str	r3, [r2, #12]
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	68dc      	ldr	r4, [r3, #12]
 8000562:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000566:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056c:	2b04      	cmp	r3, #4
 800056e:	bf28      	it	cs
 8000570:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000572:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000574:	f04f 0501 	mov.w	r5, #1
 8000578:	fa05 f303 	lsl.w	r3, r5, r3
 800057c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000580:	bf8c      	ite	hi
 8000582:	3c03      	subhi	r4, #3
 8000584:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000586:	4019      	ands	r1, r3
 8000588:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800058a:	fa05 f404 	lsl.w	r4, r5, r4
 800058e:	3c01      	subs	r4, #1
 8000590:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000592:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	ea42 0201 	orr.w	r2, r2, r1
 8000598:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	bfaf      	iteee	ge
 800059e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	f000 000f 	andlt.w	r0, r0, #15
 80005a6:	4b06      	ldrlt	r3, [pc, #24]	; (80005c0 <HAL_NVIC_SetPriority+0x64>)
 80005a8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005aa:	bfa5      	ittet	ge
 80005ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	e000ed14 	.word	0xe000ed14

080005c4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005c4:	0942      	lsrs	r2, r0, #5
 80005c6:	2301      	movs	r3, #1
 80005c8:	f000 001f 	and.w	r0, r0, #31
 80005cc:	fa03 f000 	lsl.w	r0, r3, r0
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <HAL_NVIC_EnableIRQ+0x14>)
 80005d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005d6:	4770      	bx	lr
 80005d8:	e000e100 	.word	0xe000e100

080005dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005dc:	3801      	subs	r0, #1
 80005de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005e2:	d20a      	bcs.n	80005fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005e8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	21f0      	movs	r1, #240	; 0xf0
 80005ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e010 	.word	0xe000e010
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <HAL_NVIC_SetPendingIRQ>:
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000608:	0943      	lsrs	r3, r0, #5
 800060a:	2201      	movs	r2, #1
 800060c:	f000 001f 	and.w	r0, r0, #31
 8000610:	fa02 f000 	lsl.w	r0, r2, r0
 8000614:	3340      	adds	r3, #64	; 0x40
 8000616:	4a02      	ldr	r2, [pc, #8]	; (8000620 <HAL_NVIC_SetPendingIRQ+0x18>)
 8000618:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000e100 	.word	0xe000e100

08000624 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000624:	0943      	lsrs	r3, r0, #5
 8000626:	2201      	movs	r2, #1
 8000628:	f000 001f 	and.w	r0, r0, #31
 800062c:	fa02 f000 	lsl.w	r0, r2, r0
 8000630:	3360      	adds	r3, #96	; 0x60
 8000632:	4a02      	ldr	r2, [pc, #8]	; (800063c <HAL_NVIC_ClearPendingIRQ+0x18>)
 8000634:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000e100 	.word	0xe000e100

08000640 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000644:	4a55      	ldr	r2, [pc, #340]	; (800079c <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000646:	f8d1 8000 	ldr.w	r8, [r1]
  uint32_t position = 0x00u;
 800064a:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800064c:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000650:	fa38 f403 	lsrs.w	r4, r8, r3
 8000654:	d101      	bne.n	800065a <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 8000656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800065a:	2401      	movs	r4, #1
 800065c:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8000660:	ea18 050a 	ands.w	r5, r8, sl
 8000664:	f000 808f 	beq.w	8000786 <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000668:	684c      	ldr	r4, [r1, #4]
 800066a:	f024 0b10 	bic.w	fp, r4, #16
 800066e:	f1bb 0f02 	cmp.w	fp, #2
 8000672:	d111      	bne.n	8000698 <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3u];
 8000674:	08df      	lsrs	r7, r3, #3
 8000676:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800067a:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800067e:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000680:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000684:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000688:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800068c:	690e      	ldr	r6, [r1, #16]
 800068e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000692:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000696:	623e      	str	r6, [r7, #32]
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800069c:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 800069e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006a0:	fa07 f70c 	lsl.w	r7, r7, ip
 80006a4:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006a6:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006aa:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006ac:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006b0:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006b4:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006b8:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80006bc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006be:	d811      	bhi.n	80006e4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 80006c0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80006c2:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006c6:	68ce      	ldr	r6, [r1, #12]
 80006c8:	fa06 fe0c 	lsl.w	lr, r6, ip
 80006cc:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80006d0:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006d2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006d4:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80006d8:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80006dc:	409e      	lsls	r6, r3
 80006de:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80006e2:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80006e4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80006e6:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80006e8:	688e      	ldr	r6, [r1, #8]
 80006ea:	fa06 f60c 	lsl.w	r6, r6, ip
 80006ee:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006f0:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80006f2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006f4:	d547      	bpl.n	8000786 <HAL_GPIO_Init+0x146>
 80006f6:	f023 0703 	bic.w	r7, r3, #3
 80006fa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006fe:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000702:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8000706:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000708:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800070c:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000710:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000714:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000718:	d037      	beq.n	800078a <HAL_GPIO_Init+0x14a>
 800071a:	4e21      	ldr	r6, [pc, #132]	; (80007a0 <HAL_GPIO_Init+0x160>)
 800071c:	42b0      	cmp	r0, r6
 800071e:	d036      	beq.n	800078e <HAL_GPIO_Init+0x14e>
 8000720:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000724:	42b0      	cmp	r0, r6
 8000726:	d034      	beq.n	8000792 <HAL_GPIO_Init+0x152>
 8000728:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800072c:	42b0      	cmp	r0, r6
 800072e:	d032      	beq.n	8000796 <HAL_GPIO_Init+0x156>
 8000730:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000734:	42b0      	cmp	r0, r6
 8000736:	bf14      	ite	ne
 8000738:	2607      	movne	r6, #7
 800073a:	2604      	moveq	r6, #4
 800073c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000740:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000744:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000746:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 800074a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800074c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000750:	bf0c      	ite	eq
 8000752:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000754:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000756:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 800075a:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800075e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000762:	bf0c      	ite	eq
 8000764:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000766:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000768:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 800076c:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800076e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000772:	bf0c      	ite	eq
 8000774:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000776:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000778:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 800077a:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800077c:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800077e:	bf54      	ite	pl
 8000780:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000782:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000784:	6056      	str	r6, [r2, #4]
    position++;
 8000786:	3301      	adds	r3, #1
 8000788:	e762      	b.n	8000650 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800078a:	2600      	movs	r6, #0
 800078c:	e7d6      	b.n	800073c <HAL_GPIO_Init+0xfc>
 800078e:	2601      	movs	r6, #1
 8000790:	e7d4      	b.n	800073c <HAL_GPIO_Init+0xfc>
 8000792:	2602      	movs	r6, #2
 8000794:	e7d2      	b.n	800073c <HAL_GPIO_Init+0xfc>
 8000796:	2603      	movs	r6, #3
 8000798:	e7d0      	b.n	800073c <HAL_GPIO_Init+0xfc>
 800079a:	bf00      	nop
 800079c:	58000800 	.word	0x58000800
 80007a0:	48000400 	.word	0x48000400

080007a4 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80007a4:	4a02      	ldr	r2, [pc, #8]	; (80007b0 <HAL_PWR_EnableBkUpAccess+0xc>)
 80007a6:	6813      	ldr	r3, [r2, #0]
 80007a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	4770      	bx	lr
 80007b0:	58000400 	.word	0x58000400

080007b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <HAL_PWREx_GetVoltageRange+0xc>)
 80007b6:	6818      	ldr	r0, [r3, #0]
}
 80007b8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	58000400 	.word	0x58000400

080007c4 <LL_RCC_HSE_IsReady>:
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80007c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c8:	6818      	ldr	r0, [r3, #0]
}
 80007ca:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80007ce:	4770      	bx	lr

080007d0 <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80007d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d4:	6818      	ldr	r0, [r3, #0]
}
 80007d6:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80007da:	4770      	bx	lr

080007dc <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80007dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e0:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 80007e4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80007e8:	4770      	bx	lr

080007ea <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80007ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ee:	6818      	ldr	r0, [r3, #0]
}
 80007f0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80007f4:	4770      	bx	lr

080007f6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80007f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007fa:	6813      	ldr	r3, [r2, #0]
 80007fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000800:	4318      	orrs	r0, r3
 8000802:	6010      	str	r0, [r2, #0]
 8000804:	4770      	bx	lr

08000806 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  if(msiRange > LL_RCC_MSIRANGE_11)
  {
    msiRange = LL_RCC_MSIRANGE_11;
  }
  return msiRange;
}
 8000810:	28b0      	cmp	r0, #176	; 0xb0
 8000812:	bf28      	it	cs
 8000814:	20b0      	movcs	r0, #176	; 0xb0
 8000816:	4770      	bx	lr

08000818 <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800081c:	6853      	ldr	r3, [r2, #4]
 800081e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000822:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8000826:	6050      	str	r0, [r2, #4]
 8000828:	4770      	bx	lr

0800082a <LL_RCC_PLL_IsReady>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800082a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082e:	6818      	ldr	r0, [r3, #0]
}
 8000830:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8000834:	4770      	bx	lr
	...

08000838 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
  
  /* MSI frequency range in Hz */
  if(MSI_Range > RCC_MSIRANGE_11)
 8000838:	28b0      	cmp	r0, #176	; 0xb0
 800083a:	4b32      	ldr	r3, [pc, #200]	; (8000904 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }
  
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800083c:	4a32      	ldr	r2, [pc, #200]	; (8000908 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800083e:	bf98      	it	ls
 8000840:	0900      	lsrls	r0, r0, #4
{
 8000842:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8000844:	bf8c      	ite	hi
 8000846:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8000848:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800084c:	4c2f      	ldr	r4, [pc, #188]	; (800090c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800084e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8000852:	b08d      	sub	sp, #52	; 0x34
 8000854:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8000858:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800085c:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800085e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000862:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8000866:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8000868:	fbb5 f5f3 	udiv	r5, r5, r3
 800086c:	f7ff ffa2 	bl	80007b4 <HAL_PWREx_GetVoltageRange>
 8000870:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8000872:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000876:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800087a:	f104 0210 	add.w	r2, r4, #16
 800087e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000880:	ab01      	add	r3, sp, #4
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8000882:	341c      	adds	r4, #28
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8000884:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8000888:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800088c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8000890:	ac0c      	add	r4, sp, #48	; 0x30
 8000892:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000896:	d11f      	bne.n	80008d8 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 8000898:	2300      	movs	r3, #0
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800089a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800089e:	4295      	cmp	r5, r2
 80008a0:	d815      	bhi.n	80008ce <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
      {
        latency = FLASH_LATENCY_RANGE[index];
 80008a2:	aa0c      	add	r2, sp, #48	; 0x30
 80008a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80008a8:	f853 4c10 	ldr.w	r4, [r3, #-16]
        break;
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80008ac:	4d19      	ldr	r5, [pc, #100]	; (8000914 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 80008ae:	682b      	ldr	r3, [r5, #0]
 80008b0:	f023 0307 	bic.w	r3, r3, #7
 80008b4:	4323      	orrs	r3, r4
 80008b6:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80008b8:	f7ff fe32 	bl	8000520 <HAL_GetTick>
 80008bc:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	f003 0307 	and.w	r3, r3, #7
 80008c4:	429c      	cmp	r4, r3
 80008c6:	d116      	bne.n	80008f6 <RCC_SetFlashLatencyFromMSIRange+0xbe>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80008c8:	2000      	movs	r0, #0
}
 80008ca:	b00d      	add	sp, #52	; 0x34
 80008cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80008ce:	3301      	adds	r3, #1
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d1e2      	bne.n	800089a <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80008d4:	2400      	movs	r4, #0
 80008d6:	e7e9      	b.n	80008ac <RCC_SetFlashLatencyFromMSIRange+0x74>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80008d8:	9b01      	ldr	r3, [sp, #4]
 80008da:	429d      	cmp	r5, r3
 80008dc:	d907      	bls.n	80008ee <RCC_SetFlashLatencyFromMSIRange+0xb6>
 80008de:	9b02      	ldr	r3, [sp, #8]
 80008e0:	429d      	cmp	r5, r3
 80008e2:	d906      	bls.n	80008f2 <RCC_SetFlashLatencyFromMSIRange+0xba>
 80008e4:	9b03      	ldr	r3, [sp, #12]
 80008e6:	429d      	cmp	r5, r3
 80008e8:	d8f4      	bhi.n	80008d4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80008ea:	2302      	movs	r3, #2
 80008ec:	e7d9      	b.n	80008a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80008ee:	2300      	movs	r3, #0
 80008f0:	e7d7      	b.n	80008a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80008f2:	2301      	movs	r3, #1
 80008f4:	e7d5      	b.n	80008a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80008f6:	f7ff fe13 	bl	8000520 <HAL_GetTick>
 80008fa:	1b80      	subs	r0, r0, r6
 80008fc:	2802      	cmp	r0, #2
 80008fe:	d9de      	bls.n	80008be <RCC_SetFlashLatencyFromMSIRange+0x86>
      return HAL_TIMEOUT;
 8000900:	2003      	movs	r0, #3
 8000902:	e7e2      	b.n	80008ca <RCC_SetFlashLatencyFromMSIRange+0x92>
 8000904:	08003df4 	.word	0x08003df4
 8000908:	08003d94 	.word	0x08003d94
 800090c:	08003d08 	.word	0x08003d08
 8000910:	000f4240 	.word	0x000f4240
 8000914:	58004000 	.word	0x58004000

08000918 <HAL_RCC_OscConfig>:
{
 8000918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(RCC_OscInitStruct == NULL)
 800091a:	4604      	mov	r4, r0
 800091c:	b908      	cbnz	r0, 8000922 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 800091e:	2001      	movs	r0, #1
 8000920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000922:	6803      	ldr	r3, [r0, #0]
 8000924:	069d      	lsls	r5, r3, #26
 8000926:	d529      	bpl.n	800097c <HAL_RCC_OscConfig+0x64>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000928:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800092c:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800092e:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000930:	f013 030c 	ands.w	r3, r3, #12
 8000934:	d005      	beq.n	8000942 <HAL_RCC_OscConfig+0x2a>
 8000936:	2b0c      	cmp	r3, #12
 8000938:	d145      	bne.n	80009c6 <HAL_RCC_OscConfig+0xae>
 800093a:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800093e:	2b01      	cmp	r3, #1
 8000940:	d141      	bne.n	80009c6 <HAL_RCC_OscConfig+0xae>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000942:	f7ff ff52 	bl	80007ea <LL_RCC_MSI_IsReady>
 8000946:	b110      	cbz	r0, 800094e <HAL_RCC_OscConfig+0x36>
 8000948:	69e3      	ldr	r3, [r4, #28]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0e7      	beq.n	800091e <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800094e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000950:	f7ff ff59 	bl	8000806 <LL_RCC_MSI_GetRange>
 8000954:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000956:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000958:	d92a      	bls.n	80009b0 <HAL_RCC_OscConfig+0x98>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800095a:	f7ff ff6d 	bl	8000838 <RCC_SetFlashLatencyFromMSIRange>
 800095e:	2800      	cmp	r0, #0
 8000960:	d1dd      	bne.n	800091e <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000962:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000964:	f7ff ff47 	bl	80007f6 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000968:	6a20      	ldr	r0, [r4, #32]
 800096a:	f7ff ff55 	bl	8000818 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();  
 800096e:	f003 f907 	bl	8003b80 <SystemCoreClockUpdate>
        if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff fd8c 	bl	8000490 <HAL_InitTick>
 8000978:	2800      	cmp	r0, #0
 800097a:	d1d0      	bne.n	800091e <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800097c:	6823      	ldr	r3, [r4, #0]
 800097e:	07d8      	lsls	r0, r3, #31
 8000980:	d44e      	bmi.n	8000a20 <HAL_RCC_OscConfig+0x108>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	0799      	lsls	r1, r3, #30
 8000986:	f100 8098 	bmi.w	8000aba <HAL_RCC_OscConfig+0x1a2>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800098a:	6823      	ldr	r3, [r4, #0]
 800098c:	f013 0f18 	tst.w	r3, #24
 8000990:	f040 80d9 	bne.w	8000b46 <HAL_RCC_OscConfig+0x22e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000994:	6823      	ldr	r3, [r4, #0]
 8000996:	075a      	lsls	r2, r3, #29
 8000998:	f100 8165 	bmi.w	8000c66 <HAL_RCC_OscConfig+0x34e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800099c:	6823      	ldr	r3, [r4, #0]
 800099e:	065a      	lsls	r2, r3, #25
 80009a0:	f100 81b7 	bmi.w	8000d12 <HAL_RCC_OscConfig+0x3fa>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80009a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80009a6:	2900      	cmp	r1, #0
 80009a8:	f040 81df 	bne.w	8000d6a <HAL_RCC_OscConfig+0x452>
  return HAL_OK;
 80009ac:	2000      	movs	r0, #0
 80009ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009b0:	f7ff ff21 	bl	80007f6 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009b4:	6a20      	ldr	r0, [r4, #32]
 80009b6:	f7ff ff2f 	bl	8000818 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80009bc:	f7ff ff3c 	bl	8000838 <RCC_SetFlashLatencyFromMSIRange>
 80009c0:	2800      	cmp	r0, #0
 80009c2:	d0d4      	beq.n	800096e <HAL_RCC_OscConfig+0x56>
 80009c4:	e7ab      	b.n	800091e <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80009c6:	69e2      	ldr	r2, [r4, #28]
 80009c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009cc:	b1ba      	cbz	r2, 80009fe <HAL_RCC_OscConfig+0xe6>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	f042 0201 	orr.w	r2, r2, #1
 80009d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009d6:	f7ff fda3 	bl	8000520 <HAL_GetTick>
 80009da:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 80009dc:	f7ff ff05 	bl	80007ea <LL_RCC_MSI_IsReady>
 80009e0:	b130      	cbz	r0, 80009f0 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80009e4:	f7ff ff07 	bl	80007f6 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009e8:	6a20      	ldr	r0, [r4, #32]
 80009ea:	f7ff ff15 	bl	8000818 <LL_RCC_MSI_SetCalibTrimming>
 80009ee:	e7c5      	b.n	800097c <HAL_RCC_OscConfig+0x64>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009f0:	f7ff fd96 	bl	8000520 <HAL_GetTick>
 80009f4:	1b40      	subs	r0, r0, r5
 80009f6:	2802      	cmp	r0, #2
 80009f8:	d9f0      	bls.n	80009dc <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 80009fa:	2003      	movs	r0, #3
 80009fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	f022 0201 	bic.w	r2, r2, #1
 8000a04:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a06:	f7ff fd8b 	bl	8000520 <HAL_GetTick>
 8000a0a:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 8000a0c:	f7ff feed 	bl	80007ea <LL_RCC_MSI_IsReady>
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d0b3      	beq.n	800097c <HAL_RCC_OscConfig+0x64>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a14:	f7ff fd84 	bl	8000520 <HAL_GetTick>
 8000a18:	1b40      	subs	r0, r0, r5
 8000a1a:	2802      	cmp	r0, #2
 8000a1c:	d9f6      	bls.n	8000a0c <HAL_RCC_OscConfig+0xf4>
 8000a1e:	e7ec      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a24:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000a26:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a28:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000a2c:	2b08      	cmp	r3, #8
 8000a2e:	d005      	beq.n	8000a3c <HAL_RCC_OscConfig+0x124>
 8000a30:	2b0c      	cmp	r3, #12
 8000a32:	d10b      	bne.n	8000a4c <HAL_RCC_OscConfig+0x134>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000a34:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8000a38:	2b03      	cmp	r3, #3
 8000a3a:	d107      	bne.n	8000a4c <HAL_RCC_OscConfig+0x134>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a3c:	f7ff fec2 	bl	80007c4 <LL_RCC_HSE_IsReady>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d09e      	beq.n	8000982 <HAL_RCC_OscConfig+0x6a>
 8000a44:	6863      	ldr	r3, [r4, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d19b      	bne.n	8000982 <HAL_RCC_OscConfig+0x6a>
 8000a4a:	e768      	b.n	800091e <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a4c:	6862      	ldr	r2, [r4, #4]
 8000a4e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a56:	d110      	bne.n	8000a7a <HAL_RCC_OscConfig+0x162>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a60:	f7ff fd5e 	bl	8000520 <HAL_GetTick>
 8000a64:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 8000a66:	f7ff fead 	bl	80007c4 <LL_RCC_HSE_IsReady>
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	d189      	bne.n	8000982 <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a6e:	f7ff fd57 	bl	8000520 <HAL_GetTick>
 8000a72:	1b40      	subs	r0, r0, r5
 8000a74:	2864      	cmp	r0, #100	; 0x64
 8000a76:	d9f6      	bls.n	8000a66 <HAL_RCC_OscConfig+0x14e>
 8000a78:	e7bf      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a7a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000a7e:	d104      	bne.n	8000a8a <HAL_RCC_OscConfig+0x172>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	e7e6      	b.n	8000a58 <HAL_RCC_OscConfig+0x140>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000a8a:	6819      	ldr	r1, [r3, #0]
 8000a8c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000a90:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000a92:	6819      	ldr	r1, [r3, #0]
 8000a94:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000a98:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	d1e0      	bne.n	8000a60 <HAL_RCC_OscConfig+0x148>
        tickstart = HAL_GetTick();
 8000a9e:	f7ff fd3f 	bl	8000520 <HAL_GetTick>
 8000aa2:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 8000aa4:	f7ff fe8e 	bl	80007c4 <LL_RCC_HSE_IsReady>
 8000aa8:	2800      	cmp	r0, #0
 8000aaa:	f43f af6a 	beq.w	8000982 <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aae:	f7ff fd37 	bl	8000520 <HAL_GetTick>
 8000ab2:	1b40      	subs	r0, r0, r5
 8000ab4:	2864      	cmp	r0, #100	; 0x64
 8000ab6:	d9f5      	bls.n	8000aa4 <HAL_RCC_OscConfig+0x18c>
 8000ab8:	e79f      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000aba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000abe:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000ac0:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ac2:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	d005      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x1be>
 8000aca:	2b0c      	cmp	r3, #12
 8000acc:	d114      	bne.n	8000af8 <HAL_RCC_OscConfig+0x1e0>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000ace:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d110      	bne.n	8000af8 <HAL_RCC_OscConfig+0x1e0>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ad6:	f7ff fe7b 	bl	80007d0 <LL_RCC_HSI_IsReady>
 8000ada:	b118      	cbz	r0, 8000ae4 <HAL_RCC_OscConfig+0x1cc>
 8000adc:	68e3      	ldr	r3, [r4, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f43f af1d 	beq.w	800091e <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ae8:	6921      	ldr	r1, [r4, #16]
 8000aea:	6853      	ldr	r3, [r2, #4]
 8000aec:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000af0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000af4:	6053      	str	r3, [r2, #4]
 8000af6:	e748      	b.n	800098a <HAL_RCC_OscConfig+0x72>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000af8:	68e2      	ldr	r2, [r4, #12]
 8000afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000afe:	b182      	cbz	r2, 8000b22 <HAL_RCC_OscConfig+0x20a>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b08:	f7ff fd0a 	bl	8000520 <HAL_GetTick>
 8000b0c:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 8000b0e:	f7ff fe5f 	bl	80007d0 <LL_RCC_HSI_IsReady>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d1e6      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b16:	f7ff fd03 	bl	8000520 <HAL_GetTick>
 8000b1a:	1b40      	subs	r0, r0, r5
 8000b1c:	2802      	cmp	r0, #2
 8000b1e:	d9f6      	bls.n	8000b0e <HAL_RCC_OscConfig+0x1f6>
 8000b20:	e76b      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b28:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b2a:	f7ff fcf9 	bl	8000520 <HAL_GetTick>
 8000b2e:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 8000b30:	f7ff fe4e 	bl	80007d0 <LL_RCC_HSI_IsReady>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	f43f af28 	beq.w	800098a <HAL_RCC_OscConfig+0x72>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b3a:	f7ff fcf1 	bl	8000520 <HAL_GetTick>
 8000b3e:	1b40      	subs	r0, r0, r5
 8000b40:	2802      	cmp	r0, #2
 8000b42:	d9f5      	bls.n	8000b30 <HAL_RCC_OscConfig+0x218>
 8000b44:	e759      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b46:	6962      	ldr	r2, [r4, #20]
 8000b48:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	d06b      	beq.n	8000c28 <HAL_RCC_OscConfig+0x310>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8000b50:	06db      	lsls	r3, r3, #27
 8000b52:	d543      	bpl.n	8000bdc <HAL_RCC_OscConfig+0x2c4>
        if (LL_RCC_LSI1_IsReady() == 0U)
 8000b54:	f7ff fe42 	bl	80007dc <LL_RCC_LSI1_IsReady>
 8000b58:	b310      	cbz	r0, 8000ba0 <HAL_RCC_OscConfig+0x288>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000b5a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000b5e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8000b6a:	f7ff fcd9 	bl	8000520 <HAL_GetTick>
 8000b6e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000b70:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000b74:	071f      	lsls	r7, r3, #28
 8000b76:	f140 8178 	bpl.w	8000e6a <HAL_RCC_OscConfig+0x552>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000b7a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000b7e:	69a2      	ldr	r2, [r4, #24]
 8000b80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b88:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000b8c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000b90:	f023 0301 	bic.w	r3, r3, #1
 8000b94:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8000b98:	f7ff fcc2 	bl	8000520 <HAL_GetTick>
 8000b9c:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8000b9e:	e018      	b.n	8000bd2 <HAL_RCC_OscConfig+0x2ba>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000ba0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8000bac:	f7ff fcb8 	bl	8000520 <HAL_GetTick>
 8000bb0:	4605      	mov	r5, r0
          while(LL_RCC_LSI1_IsReady() == 0U)
 8000bb2:	f7ff fe13 	bl	80007dc <LL_RCC_LSI1_IsReady>
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d1cf      	bne.n	8000b5a <HAL_RCC_OscConfig+0x242>
            if((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8000bba:	f7ff fcb1 	bl	8000520 <HAL_GetTick>
 8000bbe:	1b40      	subs	r0, r0, r5
 8000bc0:	2802      	cmp	r0, #2
 8000bc2:	d9f6      	bls.n	8000bb2 <HAL_RCC_OscConfig+0x29a>
 8000bc4:	e719      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8000bc6:	f7ff fcab 	bl	8000520 <HAL_GetTick>
 8000bca:	1b40      	subs	r0, r0, r5
 8000bcc:	2802      	cmp	r0, #2
 8000bce:	f63f af14 	bhi.w	80009fa <HAL_RCC_OscConfig+0xe2>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8000bd2:	f7ff fe03 	bl	80007dc <LL_RCC_LSI1_IsReady>
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	d1f5      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x2ae>
 8000bda:	e6db      	b.n	8000994 <HAL_RCC_OscConfig+0x7c>
 8000bdc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8000be8:	f7ff fc9a 	bl	8000520 <HAL_GetTick>
 8000bec:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 8000bee:	f7ff fdf5 	bl	80007dc <LL_RCC_LSI1_IsReady>
 8000bf2:	b198      	cbz	r0, 8000c1c <HAL_RCC_OscConfig+0x304>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000bf8:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000bfa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000bfe:	f022 0204 	bic.w	r2, r2, #4
 8000c02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000c06:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000c0a:	0718      	lsls	r0, r3, #28
 8000c0c:	f57f aec2 	bpl.w	8000994 <HAL_RCC_OscConfig+0x7c>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8000c10:	f7ff fc86 	bl	8000520 <HAL_GetTick>
 8000c14:	1b80      	subs	r0, r0, r6
 8000c16:	2803      	cmp	r0, #3
 8000c18:	d9f5      	bls.n	8000c06 <HAL_RCC_OscConfig+0x2ee>
 8000c1a:	e6ee      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8000c1c:	f7ff fc80 	bl	8000520 <HAL_GetTick>
 8000c20:	1b80      	subs	r0, r0, r6
 8000c22:	2802      	cmp	r0, #2
 8000c24:	d9e3      	bls.n	8000bee <HAL_RCC_OscConfig+0x2d6>
 8000c26:	e6e8      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000c28:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000c2c:	f023 0304 	bic.w	r3, r3, #4
 8000c30:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000c34:	f7ff fc74 	bl	8000520 <HAL_GetTick>
 8000c38:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000c3a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000c3e:	0719      	lsls	r1, r3, #28
 8000c40:	f140 811a 	bpl.w	8000e78 <HAL_RCC_OscConfig+0x560>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8000c44:	f7ff fc6c 	bl	8000520 <HAL_GetTick>
 8000c48:	1b80      	subs	r0, r0, r6
 8000c4a:	2803      	cmp	r0, #3
 8000c4c:	d9f5      	bls.n	8000c3a <HAL_RCC_OscConfig+0x322>
 8000c4e:	e6d4      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8000c50:	f7ff fc66 	bl	8000520 <HAL_GetTick>
 8000c54:	1b40      	subs	r0, r0, r5
 8000c56:	2802      	cmp	r0, #2
 8000c58:	f63f aecf 	bhi.w	80009fa <HAL_RCC_OscConfig+0xe2>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8000c5c:	f7ff fdbe 	bl	80007dc <LL_RCC_LSI1_IsReady>
 8000c60:	2800      	cmp	r0, #0
 8000c62:	d1f5      	bne.n	8000c50 <HAL_RCC_OscConfig+0x338>
 8000c64:	e696      	b.n	8000994 <HAL_RCC_OscConfig+0x7c>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c66:	4d89      	ldr	r5, [pc, #548]	; (8000e8c <HAL_RCC_OscConfig+0x574>)
 8000c68:	682b      	ldr	r3, [r5, #0]
 8000c6a:	05db      	lsls	r3, r3, #23
 8000c6c:	d51c      	bpl.n	8000ca8 <HAL_RCC_OscConfig+0x390>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c6e:	68a3      	ldr	r3, [r4, #8]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000c76:	d125      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x3ac>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000c78:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000c84:	f7ff fc4c 	bl	8000520 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000c88:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8000c8c:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c8e:	f241 3588 	movw	r5, #5000	; 0x1388
 8000c92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c96:	0798      	lsls	r0, r3, #30
 8000c98:	f53f ae80 	bmi.w	800099c <HAL_RCC_OscConfig+0x84>
 8000c9c:	f7ff fc40 	bl	8000520 <HAL_GetTick>
 8000ca0:	1b80      	subs	r0, r0, r6
 8000ca2:	42a8      	cmp	r0, r5
 8000ca4:	d9f5      	bls.n	8000c92 <HAL_RCC_OscConfig+0x37a>
 8000ca6:	e6a8      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
      HAL_PWR_EnableBkUpAccess();
 8000ca8:	f7ff fd7c 	bl	80007a4 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8000cac:	f7ff fc38 	bl	8000520 <HAL_GetTick>
 8000cb0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000cb2:	682b      	ldr	r3, [r5, #0]
 8000cb4:	05df      	lsls	r7, r3, #23
 8000cb6:	d4da      	bmi.n	8000c6e <HAL_RCC_OscConfig+0x356>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cb8:	f7ff fc32 	bl	8000520 <HAL_GetTick>
 8000cbc:	1b80      	subs	r0, r0, r6
 8000cbe:	2802      	cmp	r0, #2
 8000cc0:	d9f7      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x39a>
 8000cc2:	e69a      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cc4:	2b05      	cmp	r3, #5
 8000cc6:	d106      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x3be>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000cc8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8000cd4:	e7d0      	b.n	8000c78 <HAL_RCC_OscConfig+0x360>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000cd6:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8000cda:	f022 0201 	bic.w	r2, r2, #1
 8000cde:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000ce2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8000ce6:	f022 0204 	bic.w	r2, r2, #4
 8000cea:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1c8      	bne.n	8000c84 <HAL_RCC_OscConfig+0x36c>
      tickstart = HAL_GetTick();
 8000cf2:	f7ff fc15 	bl	8000520 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cf6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000cfa:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000cfc:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000d00:	0799      	lsls	r1, r3, #30
 8000d02:	f57f ae4b 	bpl.w	800099c <HAL_RCC_OscConfig+0x84>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d06:	f7ff fc0b 	bl	8000520 <HAL_GetTick>
 8000d0a:	1bc0      	subs	r0, r0, r7
 8000d0c:	42b0      	cmp	r0, r6
 8000d0e:	d9f5      	bls.n	8000cfc <HAL_RCC_OscConfig+0x3e4>
 8000d10:	e673      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000d12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d14:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000d18:	b19b      	cbz	r3, 8000d42 <HAL_RCC_OscConfig+0x42a>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000d1a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000d26:	f7ff fbfb 	bl	8000520 <HAL_GetTick>
 8000d2a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000d2c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000d30:	079a      	lsls	r2, r3, #30
 8000d32:	f53f ae37 	bmi.w	80009a4 <HAL_RCC_OscConfig+0x8c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d36:	f7ff fbf3 	bl	8000520 <HAL_GetTick>
 8000d3a:	1b80      	subs	r0, r0, r6
 8000d3c:	2802      	cmp	r0, #2
 8000d3e:	d9f5      	bls.n	8000d2c <HAL_RCC_OscConfig+0x414>
 8000d40:	e65b      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000d42:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000d46:	f023 0301 	bic.w	r3, r3, #1
 8000d4a:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000d4e:	f7ff fbe7 	bl	8000520 <HAL_GetTick>
 8000d52:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000d54:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000d58:	079b      	lsls	r3, r3, #30
 8000d5a:	f57f ae23 	bpl.w	80009a4 <HAL_RCC_OscConfig+0x8c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d5e:	f7ff fbdf 	bl	8000520 <HAL_GetTick>
 8000d62:	1b80      	subs	r0, r0, r6
 8000d64:	2802      	cmp	r0, #2
 8000d66:	d9f5      	bls.n	8000d54 <HAL_RCC_OscConfig+0x43c>
 8000d68:	e647      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d74:	2a0c      	cmp	r2, #12
 8000d76:	d052      	beq.n	8000e1e <HAL_RCC_OscConfig+0x506>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000d78:	681a      	ldr	r2, [r3, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d7a:	2902      	cmp	r1, #2
 8000d7c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	d134      	bne.n	8000dee <HAL_RCC_OscConfig+0x4d6>
        tickstart = HAL_GetTick();
 8000d84:	f7ff fbcc 	bl	8000520 <HAL_GetTick>
 8000d88:	4605      	mov	r5, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8000d8a:	f7ff fd4e 	bl	800082a <LL_RCC_PLL_IsReady>
 8000d8e:	bb40      	cbnz	r0, 8000de2 <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d98:	68d0      	ldr	r0, [r2, #12]
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	493c      	ldr	r1, [pc, #240]	; (8000e90 <HAL_RCC_OscConfig+0x578>)
 8000d9e:	4001      	ands	r1, r0
 8000da0:	430b      	orrs	r3, r1
 8000da2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000da4:	430b      	orrs	r3, r1
 8000da6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000da8:	430b      	orrs	r3, r1
 8000daa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000dac:	430b      	orrs	r3, r1
 8000dae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000db0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000db4:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000db6:	6813      	ldr	r3, [r2, #0]
 8000db8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dbc:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000dbe:	68d3      	ldr	r3, [r2, #12]
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8000dc6:	f7ff fbab 	bl	8000520 <HAL_GetTick>
 8000dca:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() == 0U)
 8000dcc:	f7ff fd2d 	bl	800082a <LL_RCC_PLL_IsReady>
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	f47f adeb 	bne.w	80009ac <HAL_RCC_OscConfig+0x94>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dd6:	f7ff fba3 	bl	8000520 <HAL_GetTick>
 8000dda:	1b00      	subs	r0, r0, r4
 8000ddc:	2802      	cmp	r0, #2
 8000dde:	d9f5      	bls.n	8000dcc <HAL_RCC_OscConfig+0x4b4>
 8000de0:	e60b      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000de2:	f7ff fb9d 	bl	8000520 <HAL_GetTick>
 8000de6:	1b40      	subs	r0, r0, r5
 8000de8:	2802      	cmp	r0, #2
 8000dea:	d9ce      	bls.n	8000d8a <HAL_RCC_OscConfig+0x472>
 8000dec:	e605      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	f022 0203 	bic.w	r2, r2, #3
 8000df4:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8000dfc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e00:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8000e02:	f7ff fb8d 	bl	8000520 <HAL_GetTick>
 8000e06:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8000e08:	f7ff fd0f 	bl	800082a <LL_RCC_PLL_IsReady>
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	f43f adcd 	beq.w	80009ac <HAL_RCC_OscConfig+0x94>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e12:	f7ff fb85 	bl	8000520 <HAL_GetTick>
 8000e16:	1b00      	subs	r0, r0, r4
 8000e18:	2802      	cmp	r0, #2
 8000e1a:	d9f5      	bls.n	8000e08 <HAL_RCC_OscConfig+0x4f0>
 8000e1c:	e5ed      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
      uint32_t pllcfgr = RCC->PLLCFGR;
 8000e1e:	68d8      	ldr	r0, [r3, #12]
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e22:	f000 0203 	and.w	r2, r0, #3
 8000e26:	429a      	cmp	r2, r3
 8000e28:	f47f ad79 	bne.w	800091e <HAL_RCC_OscConfig+0x6>
 8000e2c:	6b62      	ldr	r2, [r4, #52]	; 0x34
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e2e:	f000 0370 	and.w	r3, r0, #112	; 0x70
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e32:	4293      	cmp	r3, r2
 8000e34:	f47f ad73 	bne.w	800091e <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8000e3a:	f3c0 2306 	ubfx	r3, r0, #8, #7
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	f47f ad6d 	bne.w	800091e <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8000e44:	6be2      	ldr	r2, [r4, #60]	; 0x3c
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000e46:	f400 1378 	and.w	r3, r0, #4063232	; 0x3e0000
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	f47f ad67 	bne.w	800091e <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000e50:	6c22      	ldr	r2, [r4, #64]	; 0x40
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000e52:	f000 6360 	and.w	r3, r0, #234881024	; 0xe000000
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000e56:	4293      	cmp	r3, r2
 8000e58:	f47f ad61 	bne.w	800091e <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000e5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8000e5e:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
    return HAL_ERROR;
 8000e62:	1ac0      	subs	r0, r0, r3
 8000e64:	bf18      	it	ne
 8000e66:	2001      	movne	r0, #1
 8000e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8000e6a:	f7ff fb59 	bl	8000520 <HAL_GetTick>
 8000e6e:	1b80      	subs	r0, r0, r6
 8000e70:	2803      	cmp	r0, #3
 8000e72:	f67f ae7d 	bls.w	8000b70 <HAL_RCC_OscConfig+0x258>
 8000e76:	e5c0      	b.n	80009fa <HAL_RCC_OscConfig+0xe2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000e78:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000e7c:	f023 0301 	bic.w	r3, r3, #1
 8000e80:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000e84:	f7ff fb4c 	bl	8000520 <HAL_GetTick>
 8000e88:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 8000e8a:	e6e7      	b.n	8000c5c <HAL_RCC_OscConfig+0x344>
 8000e8c:	58000400 	.word	0x58000400
 8000e90:	11c1808c 	.word	0x11c1808c

08000e94 <HAL_RCC_ClockConfig>:
{
 8000e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e98:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	b910      	cbnz	r0, 8000ea4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ea4:	4e79      	ldr	r6, [pc, #484]	; (800108c <HAL_RCC_ClockConfig+0x1f8>)
 8000ea6:	6833      	ldr	r3, [r6, #0]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d372      	bcc.n	8000f96 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	0799      	lsls	r1, r3, #30
 8000eb4:	d50e      	bpl.n	8000ed4 <HAL_RCC_ClockConfig+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000eb6:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8000eba:	68a2      	ldr	r2, [r4, #8]
 8000ebc:	68b3      	ldr	r3, [r6, #8]
 8000ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ec6:	f7ff fb2b 	bl	8000520 <HAL_GetTick>
 8000eca:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8000ecc:	68b3      	ldr	r3, [r6, #8]
 8000ece:	03db      	lsls	r3, r3, #15
 8000ed0:	f140 80b8 	bpl.w	8001044 <HAL_RCC_ClockConfig+0x1b0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8000ed4:	6823      	ldr	r3, [r4, #0]
 8000ed6:	069a      	lsls	r2, r3, #26
 8000ed8:	d511      	bpl.n	8000efe <HAL_RCC_ClockConfig+0x6a>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000eda:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8000ede:	6962      	ldr	r2, [r4, #20]
 8000ee0:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8000ee4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8000eee:	f7ff fb17 	bl	8000520 <HAL_GetTick>
 8000ef2:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8000ef4:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8000ef8:	0399      	lsls	r1, r3, #14
 8000efa:	f140 80aa 	bpl.w	8001052 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	0658      	lsls	r0, r3, #25
 8000f02:	d512      	bpl.n	8000f2a <HAL_RCC_ClockConfig+0x96>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000f04:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8000f08:	69a2      	ldr	r2, [r4, #24]
 8000f0a:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8000f0e:	f023 030f 	bic.w	r3, r3, #15
 8000f12:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8000f16:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8000f1a:	f7ff fb01 	bl	8000520 <HAL_GetTick>
 8000f1e:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8000f20:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8000f24:	03db      	lsls	r3, r3, #15
 8000f26:	f140 809b 	bpl.w	8001060 <HAL_RCC_ClockConfig+0x1cc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	075a      	lsls	r2, r3, #29
 8000f2e:	d50e      	bpl.n	8000f4e <HAL_RCC_ClockConfig+0xba>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000f30:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8000f34:	68e2      	ldr	r2, [r4, #12]
 8000f36:	68b3      	ldr	r3, [r6, #8]
 8000f38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000f40:	f7ff faee 	bl	8000520 <HAL_GetTick>
 8000f44:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8000f46:	68b3      	ldr	r3, [r6, #8]
 8000f48:	0399      	lsls	r1, r3, #14
 8000f4a:	f140 8090 	bpl.w	800106e <HAL_RCC_ClockConfig+0x1da>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	0718      	lsls	r0, r3, #28
 8000f52:	d50f      	bpl.n	8000f74 <HAL_RCC_ClockConfig+0xe0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000f54:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8000f58:	6922      	ldr	r2, [r4, #16]
 8000f5a:	68b3      	ldr	r3, [r6, #8]
 8000f5c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f60:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f64:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000f66:	f7ff fadb 	bl	8000520 <HAL_GetTick>
 8000f6a:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8000f6c:	68b3      	ldr	r3, [r6, #8]
 8000f6e:	035b      	lsls	r3, r3, #13
 8000f70:	f140 8084 	bpl.w	800107c <HAL_RCC_ClockConfig+0x1e8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	07da      	lsls	r2, r3, #31
 8000f78:	d423      	bmi.n	8000fc2 <HAL_RCC_ClockConfig+0x12e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f7a:	4c44      	ldr	r4, [pc, #272]	; (800108c <HAL_RCC_ClockConfig+0x1f8>)
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	429d      	cmp	r5, r3
 8000f84:	d34b      	bcc.n	800101e <HAL_RCC_ClockConfig+0x18a>
  SystemCoreClockUpdate();
 8000f86:	f002 fdfb 	bl	8003b80 <SystemCoreClockUpdate>
  return HAL_InitTick (HAL_GetTickPrio());
 8000f8a:	f7ff facf 	bl	800052c <HAL_GetTickPrio>
}
 8000f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick (HAL_GetTickPrio());
 8000f92:	f7ff ba7d 	b.w	8000490 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f96:	6833      	ldr	r3, [r6, #0]
 8000f98:	f023 0307 	bic.w	r3, r3, #7
 8000f9c:	430b      	orrs	r3, r1
 8000f9e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8000fa0:	f7ff fabe 	bl	8000520 <HAL_GetTick>
 8000fa4:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fa6:	6833      	ldr	r3, [r6, #0]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	429d      	cmp	r5, r3
 8000fae:	f43f af7f 	beq.w	8000eb0 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8000fb2:	f7ff fab5 	bl	8000520 <HAL_GetTick>
 8000fb6:	1bc0      	subs	r0, r0, r7
 8000fb8:	2802      	cmp	r0, #2
 8000fba:	d9f4      	bls.n	8000fa6 <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fc2:	6863      	ldr	r3, [r4, #4]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d11e      	bne.n	8001006 <HAL_RCC_ClockConfig+0x172>
      if (LL_RCC_HSE_IsReady() == 0U)
 8000fc8:	f7ff fbfc 	bl	80007c4 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	f43f af66 	beq.w	8000e9e <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000fd2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8000fd6:	6862      	ldr	r2, [r4, #4]
 8000fd8:	68b3      	ldr	r3, [r6, #8]
 8000fda:	f023 0303 	bic.w	r3, r3, #3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000fe2:	f7ff fa9d 	bl	8000520 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fe6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000fea:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000fec:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fee:	6862      	ldr	r2, [r4, #4]
 8000ff0:	f003 030c 	and.w	r3, r3, #12
 8000ff4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000ff8:	d0bf      	beq.n	8000f7a <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ffa:	f7ff fa91 	bl	8000520 <HAL_GetTick>
 8000ffe:	1bc0      	subs	r0, r0, r7
 8001000:	4540      	cmp	r0, r8
 8001002:	d9f3      	bls.n	8000fec <HAL_RCC_ClockConfig+0x158>
 8001004:	e7da      	b.n	8000fbc <HAL_RCC_ClockConfig+0x128>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001006:	2b03      	cmp	r3, #3
 8001008:	d102      	bne.n	8001010 <HAL_RCC_ClockConfig+0x17c>
      if (LL_RCC_PLL_IsReady() == 0U)
 800100a:	f7ff fc0e 	bl	800082a <LL_RCC_PLL_IsReady>
 800100e:	e7dd      	b.n	8000fcc <HAL_RCC_ClockConfig+0x138>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001010:	b913      	cbnz	r3, 8001018 <HAL_RCC_ClockConfig+0x184>
      if (LL_RCC_MSI_IsReady() == 0U)
 8001012:	f7ff fbea 	bl	80007ea <LL_RCC_MSI_IsReady>
 8001016:	e7d9      	b.n	8000fcc <HAL_RCC_ClockConfig+0x138>
      if (LL_RCC_HSI_IsReady() == 0U)
 8001018:	f7ff fbda 	bl	80007d0 <LL_RCC_HSI_IsReady>
 800101c:	e7d6      	b.n	8000fcc <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	f023 0307 	bic.w	r3, r3, #7
 8001024:	432b      	orrs	r3, r5
 8001026:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001028:	f7ff fa7a 	bl	8000520 <HAL_GetTick>
 800102c:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	429d      	cmp	r5, r3
 8001036:	d0a6      	beq.n	8000f86 <HAL_RCC_ClockConfig+0xf2>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001038:	f7ff fa72 	bl	8000520 <HAL_GetTick>
 800103c:	1b80      	subs	r0, r0, r6
 800103e:	2802      	cmp	r0, #2
 8001040:	d9f5      	bls.n	800102e <HAL_RCC_ClockConfig+0x19a>
 8001042:	e7bb      	b.n	8000fbc <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001044:	f7ff fa6c 	bl	8000520 <HAL_GetTick>
 8001048:	1bc0      	subs	r0, r0, r7
 800104a:	2802      	cmp	r0, #2
 800104c:	f67f af3e 	bls.w	8000ecc <HAL_RCC_ClockConfig+0x38>
 8001050:	e7b4      	b.n	8000fbc <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001052:	f7ff fa65 	bl	8000520 <HAL_GetTick>
 8001056:	1bc0      	subs	r0, r0, r7
 8001058:	2802      	cmp	r0, #2
 800105a:	f67f af4b 	bls.w	8000ef4 <HAL_RCC_ClockConfig+0x60>
 800105e:	e7ad      	b.n	8000fbc <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001060:	f7ff fa5e 	bl	8000520 <HAL_GetTick>
 8001064:	1bc0      	subs	r0, r0, r7
 8001066:	2802      	cmp	r0, #2
 8001068:	f67f af5a 	bls.w	8000f20 <HAL_RCC_ClockConfig+0x8c>
 800106c:	e7a6      	b.n	8000fbc <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800106e:	f7ff fa57 	bl	8000520 <HAL_GetTick>
 8001072:	1bc0      	subs	r0, r0, r7
 8001074:	2802      	cmp	r0, #2
 8001076:	f67f af66 	bls.w	8000f46 <HAL_RCC_ClockConfig+0xb2>
 800107a:	e79f      	b.n	8000fbc <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800107c:	f7ff fa50 	bl	8000520 <HAL_GetTick>
 8001080:	1bc0      	subs	r0, r0, r7
 8001082:	2802      	cmp	r0, #2
 8001084:	f67f af72 	bls.w	8000f6c <HAL_RCC_ClockConfig+0xd8>
 8001088:	e798      	b.n	8000fbc <HAL_RCC_ClockConfig+0x128>
 800108a:	bf00      	nop
 800108c:	58004000 	.word	0x58004000

08001090 <HAL_RCC_GetSysClockFreq>:
 8001090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8001094:	b508      	push	{r3, lr}
 8001096:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001098:	f013 030c 	ands.w	r3, r3, #12
 800109c:	d107      	bne.n	80010ae <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800109e:	f7ff fbb2 	bl	8000806 <LL_RCC_MSI_GetRange>
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <HAL_RCC_GetSysClockFreq+0x90>)
 80010a4:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80010a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80010ac:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d033      	beq.n	800111a <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d107      	bne.n	80010c6 <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80010b6:	6813      	ldr	r3, [r2, #0]
       sysclockfreq = HSE_VALUE;
 80010b8:	481a      	ldr	r0, [pc, #104]	; (8001124 <HAL_RCC_GetSysClockFreq+0x94>)
 80010ba:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_RCC_GetSysClockFreq+0x98>)
 80010c0:	bf08      	it	eq
 80010c2:	4618      	moveq	r0, r3
 80010c4:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80010c6:	68d3      	ldr	r3, [r2, #12]
 80010c8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d022      	beq.n	8001116 <HAL_RCC_GetSysClockFreq+0x86>
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d118      	bne.n	8001106 <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80010d4:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = HSE_VALUE;
 80010d6:	4814      	ldr	r0, [pc, #80]	; (8001128 <HAL_RCC_GetSysClockFreq+0x98>)
 80010d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_RCC_GetSysClockFreq+0x94>)
 80010de:	bf08      	it	eq
 80010e0:	4603      	moveq	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80010e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010e6:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80010e8:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80010ea:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80010ec:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80010f0:	4358      	muls	r0, r3
 80010f2:	f3c1 1302 	ubfx	r3, r1, #4, #3
 80010f6:	3301      	adds	r3, #1
 80010f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80010fc:	0f53      	lsrs	r3, r2, #29
 80010fe:	3301      	adds	r3, #1
 8001100:	fbb0 f0f3 	udiv	r0, r0, r3
 8001104:	bd08      	pop	{r3, pc}
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001106:	f7ff fb7e 	bl	8000806 <LL_RCC_MSI_GetRange>
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_RCC_GetSysClockFreq+0x90>)
 800110c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001110:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001114:	e7e5      	b.n	80010e2 <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 8001116:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_RCC_GetSysClockFreq+0x94>)
 8001118:	e7e3      	b.n	80010e2 <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 800111a:	4802      	ldr	r0, [pc, #8]	; (8001124 <HAL_RCC_GetSysClockFreq+0x94>)
}
 800111c:	bd08      	pop	{r3, pc}
 800111e:	bf00      	nop
 8001120:	08003df4 	.word	0x08003df4
 8001124:	00f42400 	.word	0x00f42400
 8001128:	01e84800 	.word	0x01e84800

0800112c <HAL_RCC_GetHCLKFreq>:
{
 800112c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800112e:	f7ff ffaf 	bl	8001090 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_RCC_GetHCLKFreq+0x1c>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001142:	fbb0 f0f3 	udiv	r0, r0, r3
 8001146:	bd08      	pop	{r3, pc}
 8001148:	08003d94 	.word	0x08003d94

0800114c <HAL_RCC_GetPCLK1Freq>:
{
 800114c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800114e:	f7ff ffed 	bl	800112c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	f003 031f 	and.w	r3, r3, #31
}
 8001166:	40d8      	lsrs	r0, r3
 8001168:	bd08      	pop	{r3, pc}
 800116a:	bf00      	nop
 800116c:	08003dd4 	.word	0x08003dd4

08001170 <HAL_RCC_GetPCLK2Freq>:
{
 8001170:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001172:	f7ff ffdb 	bl	800112c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	f003 031f 	and.w	r3, r3, #31
}
 800118a:	40d8      	lsrs	r0, r3
 800118c:	bd08      	pop	{r3, pc}
 800118e:	bf00      	nop
 8001190:	08003dd4 	.word	0x08003dd4

08001194 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001198:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 800119c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80011a0:	4770      	bx	lr

080011a2 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80011a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011a6:	0902      	lsrs	r2, r0, #4
 80011a8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80011ac:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 80011b0:	0100      	lsls	r0, r0, #4
 80011b2:	ea23 0302 	bic.w	r3, r3, r2
 80011b6:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 80011ba:	4318      	orrs	r0, r3
 80011bc:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
 80011c0:	4770      	bx	lr

080011c2 <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80011c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011c6:	6813      	ldr	r3, [r2, #0]
 80011c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	4770      	bx	lr

080011d0 <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80011d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011d4:	6813      	ldr	r3, [r2, #0]
 80011d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4770      	bx	lr

080011de <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80011de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e2:	6818      	ldr	r0, [r3, #0]
}
 80011e4:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 80011e8:	4770      	bx	lr

080011ea <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80011ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80011ec:	6805      	ldr	r5, [r0, #0]
 80011ee:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 80011f2:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80011f4:	d043      	beq.n	800127e <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80011f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80011f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011fc:	d015      	beq.n	800122a <HAL_RCCEx_PeriphCLKConfig+0x40>
 80011fe:	d802      	bhi.n	8001206 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001200:	b1d3      	cbz	r3, 8001238 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8001202:	2501      	movs	r5, #1
 8001204:	e03b      	b.n	800127e <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8001206:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800120a:	d002      	beq.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800120c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001210:	d1f7      	bne.n	8001202 <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8001212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001216:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001218:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800121c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001220:	430b      	orrs	r3, r1
 8001222:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001226:	2500      	movs	r5, #0
 8001228:	e029      	b.n	800127e <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800122a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800122e:	68d3      	ldr	r3, [r2, #12]
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	60d3      	str	r3, [r2, #12]
        break;
 8001236:	e7ec      	b.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8001238:	f7ff ffca 	bl	80011d0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800123c:	f7ff f970 	bl	8000520 <HAL_GetTick>
 8001240:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001242:	f7ff ffcc 	bl	80011de <LL_RCC_PLLSAI1_IsReady>
 8001246:	b9a0      	cbnz	r0, 8001272 <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8001248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800124c:	6861      	ldr	r1, [r4, #4]
 800124e:	6913      	ldr	r3, [r2, #16]
 8001250:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001254:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001258:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800125a:	6913      	ldr	r3, [r2, #16]
 800125c:	68a1      	ldr	r1, [r4, #8]
 800125e:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8001262:	430b      	orrs	r3, r1
 8001264:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8001266:	f7ff ffac 	bl	80011c2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800126a:	f7ff f959 	bl	8000520 <HAL_GetTick>
 800126e:	4605      	mov	r5, r0
 8001270:	e0ba      	b.n	80013e8 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001272:	f7ff f955 	bl	8000520 <HAL_GetTick>
 8001276:	1b40      	subs	r0, r0, r5
 8001278:	2802      	cmp	r0, #2
 800127a:	d9e2      	bls.n	8001242 <HAL_RCCEx_PeriphCLKConfig+0x58>
      status = HAL_TIMEOUT;
 800127c:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	051a      	lsls	r2, r3, #20
 8001282:	d515      	bpl.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001284:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if(rtcclocksource != PeriphClkInit->RTCClockSelection)
 8001288:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800128a:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 800128e:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8001292:	42bb      	cmp	r3, r7
 8001294:	d00c      	beq.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 8001296:	f7ff fa85 	bl	80007a4 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800129a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if(rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800129e:	2f00      	cmp	r7, #0
 80012a0:	f040 80ad 	bne.w	80013fe <HAL_RCCEx_PeriphCLKConfig+0x214>
 80012a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012aa:	4313      	orrs	r3, r2
 80012ac:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	07df      	lsls	r7, r3, #31
 80012b4:	d509      	bpl.n	80012ca <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80012b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ba:	69a0      	ldr	r0, [r4, #24]
 80012bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012c0:	f022 0203 	bic.w	r2, r2, #3
 80012c4:	4302      	orrs	r2, r0
 80012c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80012ca:	079e      	lsls	r6, r3, #30
 80012cc:	d509      	bpl.n	80012e2 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80012ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d2:	69e0      	ldr	r0, [r4, #28]
 80012d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80012dc:	4302      	orrs	r2, r0
 80012de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80012e2:	06d8      	lsls	r0, r3, #27
 80012e4:	d50c      	bpl.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80012e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80012e8:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80012ec:	0c31      	lsrs	r1, r6, #16
 80012ee:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80012f2:	0409      	lsls	r1, r1, #16
 80012f4:	ea22 0201 	bic.w	r2, r2, r1
 80012f8:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80012fc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001300:	0699      	lsls	r1, r3, #26
 8001302:	d50c      	bpl.n	800131e <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001306:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800130a:	0c31      	lsrs	r1, r6, #16
 800130c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001310:	0409      	lsls	r1, r1, #16
 8001312:	ea22 0201 	bic.w	r2, r2, r1
 8001316:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800131a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800131e:	075a      	lsls	r2, r3, #29
 8001320:	d502      	bpl.n	8001328 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001322:	6a20      	ldr	r0, [r4, #32]
 8001324:	f7ff ff3d 	bl	80011a2 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	071b      	lsls	r3, r3, #28
 800132c:	d502      	bpl.n	8001334 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800132e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001330:	f7ff ff37 	bl	80011a2 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	05df      	lsls	r7, r3, #23
 8001338:	d510      	bpl.n	800135c <HAL_RCCEx_PeriphCLKConfig+0x172>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800133a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800133e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001340:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001344:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001348:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800134a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800134e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001352:	d17d      	bne.n	8001450 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8001354:	68d3      	ldr	r3, [r2, #12]
 8001356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800135a:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800135c:	6822      	ldr	r2, [r4, #0]
 800135e:	0596      	lsls	r6, r2, #22
 8001360:	d509      	bpl.n	8001376 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001366:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001368:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800136c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001370:	4303      	orrs	r3, r0
 8001372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001376:	0550      	lsls	r0, r2, #21
 8001378:	d511      	bpl.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800137a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800137e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001380:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001384:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001388:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800138a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800138e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001392:	f040 8094 	bne.w	80014be <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001396:	68d3      	ldr	r3, [r2, #12]
 8001398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139c:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800139e:	6822      	ldr	r2, [r4, #0]
 80013a0:	04d1      	lsls	r1, r2, #19
 80013a2:	d509      	bpl.n	80013b8 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80013a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80013aa:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 80013ae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013b2:	4303      	orrs	r3, r0
 80013b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80013b8:	0493      	lsls	r3, r2, #18
 80013ba:	d50d      	bpl.n	80013d8 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80013bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013c0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80013c2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80013c4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80013c8:	430b      	orrs	r3, r1
 80013ca:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80013cc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80013ce:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80013d0:	f023 0303 	bic.w	r3, r3, #3
 80013d4:	430b      	orrs	r3, r1
 80013d6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80013d8:	4628      	mov	r0, r5
 80013da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80013dc:	f7ff f8a0 	bl	8000520 <HAL_GetTick>
 80013e0:	1b40      	subs	r0, r0, r5
 80013e2:	2802      	cmp	r0, #2
 80013e4:	f63f af4a 	bhi.w	800127c <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80013e8:	f7ff fef9 	bl	80011de <LL_RCC_PLLSAI1_IsReady>
 80013ec:	2801      	cmp	r0, #1
 80013ee:	d1f5      	bne.n	80013dc <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80013f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013f4:	6961      	ldr	r1, [r4, #20]
 80013f6:	6913      	ldr	r3, [r2, #16]
 80013f8:	430b      	orrs	r3, r1
 80013fa:	6113      	str	r3, [r2, #16]
 80013fc:	e709      	b.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80013fe:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001402:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001406:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800140a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800140e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001412:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8001416:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800141c:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 800141e:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8001422:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001426:	07db      	lsls	r3, r3, #31
 8001428:	f57f af42 	bpl.w	80012b0 <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 800142c:	f7ff f878 	bl	8000520 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001430:	f241 3688 	movw	r6, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8001434:	4607      	mov	r7, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 8001436:	e004      	b.n	8001442 <HAL_RCCEx_PeriphCLKConfig+0x258>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001438:	f7ff f872 	bl	8000520 <HAL_GetTick>
 800143c:	1bc0      	subs	r0, r0, r7
 800143e:	42b0      	cmp	r0, r6
 8001440:	d804      	bhi.n	800144c <HAL_RCCEx_PeriphCLKConfig+0x262>
          while (LL_RCC_LSE_IsReady() != 1U)
 8001442:	f7ff fea7 	bl	8001194 <LL_RCC_LSE_IsReady>
 8001446:	2801      	cmp	r0, #1
 8001448:	d1f6      	bne.n	8001438 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800144a:	e731      	b.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0xc6>
              ret = HAL_TIMEOUT;
 800144c:	2503      	movs	r5, #3
 800144e:	e72f      	b.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001450:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001454:	d182      	bne.n	800135c <HAL_RCCEx_PeriphCLKConfig+0x172>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8001456:	f7ff febb 	bl	80011d0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800145a:	f7ff f861 	bl	8000520 <HAL_GetTick>
 800145e:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001460:	f7ff febd 	bl	80011de <LL_RCC_PLLSAI1_IsReady>
 8001464:	b9a0      	cbnz	r0, 8001490 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8001466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800146a:	6861      	ldr	r1, [r4, #4]
 800146c:	6913      	ldr	r3, [r2, #16]
 800146e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001472:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001476:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8001478:	6913      	ldr	r3, [r2, #16]
 800147a:	68e1      	ldr	r1, [r4, #12]
 800147c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8001480:	430b      	orrs	r3, r1
 8001482:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8001484:	f7ff fe9d 	bl	80011c2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001488:	f7ff f84a 	bl	8000520 <HAL_GetTick>
 800148c:	4606      	mov	r6, r0
 800148e:	e00b      	b.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001490:	f7ff f846 	bl	8000520 <HAL_GetTick>
 8001494:	1b80      	subs	r0, r0, r6
 8001496:	2802      	cmp	r0, #2
 8001498:	d9e2      	bls.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x276>
              ret = HAL_TIMEOUT;
 800149a:	2503      	movs	r5, #3
 800149c:	e75e      	b.n	800135c <HAL_RCCEx_PeriphCLKConfig+0x172>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800149e:	f7ff f83f 	bl	8000520 <HAL_GetTick>
 80014a2:	1b80      	subs	r0, r0, r6
 80014a4:	2802      	cmp	r0, #2
 80014a6:	d8f8      	bhi.n	800149a <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80014a8:	f7ff fe99 	bl	80011de <LL_RCC_PLLSAI1_IsReady>
 80014ac:	2801      	cmp	r0, #1
 80014ae:	d1f6      	bne.n	800149e <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80014b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014b4:	6961      	ldr	r1, [r4, #20]
 80014b6:	6913      	ldr	r3, [r2, #16]
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6113      	str	r3, [r2, #16]
 80014bc:	e74e      	b.n	800135c <HAL_RCCEx_PeriphCLKConfig+0x172>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80014be:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80014c2:	f47f af6c 	bne.w	800139e <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80014c6:	f7ff fe83 	bl	80011d0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80014ca:	f7ff f829 	bl	8000520 <HAL_GetTick>
 80014ce:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80014d0:	f7ff fe85 	bl	80011de <LL_RCC_PLLSAI1_IsReady>
 80014d4:	b9a0      	cbnz	r0, 8001500 <HAL_RCCEx_PeriphCLKConfig+0x316>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80014d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014da:	6861      	ldr	r1, [r4, #4]
 80014dc:	6913      	ldr	r3, [r2, #16]
 80014de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80014e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80014e6:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80014e8:	6913      	ldr	r3, [r2, #16]
 80014ea:	6921      	ldr	r1, [r4, #16]
 80014ec:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80014f0:	430b      	orrs	r3, r1
 80014f2:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80014f4:	f7ff fe65 	bl	80011c2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014f8:	f7ff f812 	bl	8000520 <HAL_GetTick>
 80014fc:	4606      	mov	r6, r0
 80014fe:	e00b      	b.n	8001518 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001500:	f7ff f80e 	bl	8000520 <HAL_GetTick>
 8001504:	1b80      	subs	r0, r0, r6
 8001506:	2802      	cmp	r0, #2
 8001508:	d9e2      	bls.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
              ret = HAL_TIMEOUT;
 800150a:	2503      	movs	r5, #3
 800150c:	e747      	b.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800150e:	f7ff f807 	bl	8000520 <HAL_GetTick>
 8001512:	1b80      	subs	r0, r0, r6
 8001514:	2802      	cmp	r0, #2
 8001516:	d8f8      	bhi.n	800150a <HAL_RCCEx_PeriphCLKConfig+0x320>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8001518:	f7ff fe61 	bl	80011de <LL_RCC_PLLSAI1_IsReady>
 800151c:	2801      	cmp	r0, #1
 800151e:	d1f6      	bne.n	800150e <HAL_RCCEx_PeriphCLKConfig+0x324>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001524:	6961      	ldr	r1, [r4, #20]
 8001526:	6913      	ldr	r3, [r2, #16]
 8001528:	430b      	orrs	r3, r1
 800152a:	6113      	str	r3, [r2, #16]
 800152c:	e737      	b.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x1b4>

0800152e <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800152e:	6802      	ldr	r2, [r0, #0]
{
 8001530:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001532:	68d3      	ldr	r3, [r2, #12]
 8001534:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001538:	60d3      	str	r3, [r2, #12]
{
 800153a:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 800153c:	f7fe fff0 	bl	8000520 <HAL_GetTick>
 8001540:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	069b      	lsls	r3, r3, #26
 8001548:	d501      	bpl.n	800154e <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800154a:	2000      	movs	r0, #0
 800154c:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800154e:	f7fe ffe7 	bl	8000520 <HAL_GetTick>
 8001552:	1b40      	subs	r0, r0, r5
 8001554:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001558:	d9f3      	bls.n	8001542 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800155a:	2003      	movs	r0, #3
}
 800155c:	bd38      	pop	{r3, r4, r5, pc}

0800155e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800155e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001560:	6803      	ldr	r3, [r0, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	0652      	lsls	r2, r2, #25
{
 8001566:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001568:	d501      	bpl.n	800156e <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800156a:	2000      	movs	r0, #0
 800156c:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800156e:	f04f 32ff 	mov.w	r2, #4294967295
 8001572:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001574:	f7fe ffd4 	bl	8000520 <HAL_GetTick>
 8001578:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	065b      	lsls	r3, r3, #25
 8001580:	d4f3      	bmi.n	800156a <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001582:	f7fe ffcd 	bl	8000520 <HAL_GetTick>
 8001586:	1b40      	subs	r0, r0, r5
 8001588:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800158c:	d9f5      	bls.n	800157a <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800158e:	2003      	movs	r0, #3
}
 8001590:	bd38      	pop	{r3, r4, r5, pc}

08001592 <HAL_RTC_Init>:
{
 8001592:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001594:	4604      	mov	r4, r0
 8001596:	b1d8      	cbz	r0, 80015d0 <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001598:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800159c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015a0:	b91b      	cbnz	r3, 80015aa <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 80015a2:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 80015a6:	f002 fa3b 	bl	8003a20 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80015aa:	2302      	movs	r3, #2
 80015ac:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	22ca      	movs	r2, #202	; 0xca
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
 80015b6:	2253      	movs	r2, #83	; 0x53
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80015ba:	4620      	mov	r0, r4
 80015bc:	f7ff ffcf 	bl	800155e <RTC_EnterInitMode>
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	4605      	mov	r5, r0
 80015c4:	b130      	cbz	r0, 80015d4 <HAL_RTC_Init+0x42>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80015c6:	22ff      	movs	r2, #255	; 0xff
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80015ca:	2304      	movs	r3, #4
 80015cc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 80015d0:	2501      	movs	r5, #1
 80015d2:	e038      	b.n	8001646 <HAL_RTC_Init+0xb4>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80015d4:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80015d6:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80015d8:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80015dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015e0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80015e2:	6862      	ldr	r2, [r4, #4]
 80015e4:	6899      	ldr	r1, [r3, #8]
 80015e6:	4302      	orrs	r2, r0
 80015e8:	69a0      	ldr	r0, [r4, #24]
 80015ea:	4302      	orrs	r2, r0
 80015ec:	430a      	orrs	r2, r1
 80015ee:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80015f0:	68e2      	ldr	r2, [r4, #12]
 80015f2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80015f4:	691a      	ldr	r2, [r3, #16]
 80015f6:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80015f8:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80015fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80015fe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001606:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800160a:	f022 0203 	bic.w	r2, r2, #3
 800160e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001610:	69e2      	ldr	r2, [r4, #28]
 8001612:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001614:	4302      	orrs	r2, r0
 8001616:	430a      	orrs	r2, r1
 8001618:	64da      	str	r2, [r3, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	069b      	lsls	r3, r3, #26
 800161e:	d40c      	bmi.n	800163a <HAL_RTC_Init+0xa8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001620:	4620      	mov	r0, r4
 8001622:	f7ff ff84 	bl	800152e <HAL_RTC_WaitForSynchro>
 8001626:	b140      	cbz	r0, 800163a <HAL_RTC_Init+0xa8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	22ff      	movs	r2, #255	; 0xff
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800162e:	2304      	movs	r3, #4
 8001630:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8001634:	f884 5020 	strb.w	r5, [r4, #32]
 8001638:	e7ca      	b.n	80015d0 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800163a:	6823      	ldr	r3, [r4, #0]
 800163c:	22ff      	movs	r2, #255	; 0xff
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001640:	2301      	movs	r3, #1
 8001642:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8001646:	4628      	mov	r0, r5
 8001648:	bd38      	pop	{r3, r4, r5, pc}

0800164a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800164a:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800164c:	4604      	mov	r4, r0
 800164e:	2800      	cmp	r0, #0
 8001650:	d04a      	beq.n	80016e8 <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001656:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800165a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800165e:	b91b      	cbnz	r3, 8001668 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001660:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001664:	f002 f9ec 	bl	8003a40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001668:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800166a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800166c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001670:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001672:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001678:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800167c:	600b      	str	r3, [r1, #0]
 800167e:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001682:	d92e      	bls.n	80016e2 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001684:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001686:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800168a:	bf18      	it	ne
 800168c:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800168e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001690:	b92b      	cbnz	r3, 800169e <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001692:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001696:	bf8c      	ite	hi
 8001698:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800169a:	2301      	movls	r3, #1
 800169c:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800169e:	68a6      	ldr	r6, [r4, #8]
 80016a0:	6863      	ldr	r3, [r4, #4]
 80016a2:	69a5      	ldr	r5, [r4, #24]
 80016a4:	4333      	orrs	r3, r6
 80016a6:	6926      	ldr	r6, [r4, #16]
 80016a8:	4333      	orrs	r3, r6
 80016aa:	6966      	ldr	r6, [r4, #20]
 80016ac:	4333      	orrs	r3, r6
 80016ae:	69e6      	ldr	r6, [r4, #28]
 80016b0:	4333      	orrs	r3, r6
 80016b2:	6a26      	ldr	r6, [r4, #32]
 80016b4:	4333      	orrs	r3, r6
 80016b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80016b8:	4333      	orrs	r3, r6
 80016ba:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80016be:	4333      	orrs	r3, r6
 80016c0:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80016c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016c4:	431a      	orrs	r2, r3
 80016c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016c8:	0c2d      	lsrs	r5, r5, #16
 80016ca:	431a      	orrs	r2, r3
 80016cc:	f005 0504 	and.w	r5, r5, #4
 80016d0:	432a      	orrs	r2, r5
 80016d2:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 80016d4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016d6:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80016d8:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016da:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80016dc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 80016e0:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80016e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016e6:	e7d0      	b.n	800168a <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80016e8:	2001      	movs	r0, #1
}
 80016ea:	bd70      	pop	{r4, r5, r6, pc}
 80016ec:	0000      	movs	r0, r0
	...

080016f0 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80016f0:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80016f2:	69c1      	ldr	r1, [r0, #28]
 80016f4:	6883      	ldr	r3, [r0, #8]
{
 80016f6:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80016fa:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80016fc:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80016fe:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001700:	4303      	orrs	r3, r0
 8001702:	6960      	ldr	r0, [r4, #20]
 8001704:	4303      	orrs	r3, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 8001706:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001708:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 800170a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800170c:	48ac      	ldr	r0, [pc, #688]	; (80019c0 <UART_SetConfig+0x2d0>)
 800170e:	4028      	ands	r0, r5
 8001710:	4303      	orrs	r3, r0
 8001712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001714:	6853      	ldr	r3, [r2, #4]
 8001716:	68e0      	ldr	r0, [r4, #12]
 8001718:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800171c:	4303      	orrs	r3, r0
 800171e:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001720:	4ba8      	ldr	r3, [pc, #672]	; (80019c4 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001722:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001724:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001726:	bf1c      	itt	ne
 8001728:	6a23      	ldrne	r3, [r4, #32]
 800172a:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800172c:	6893      	ldr	r3, [r2, #8]
 800172e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8001732:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001736:	4303      	orrs	r3, r0
 8001738:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800173a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800173c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800173e:	f020 000f 	bic.w	r0, r0, #15
 8001742:	4318      	orrs	r0, r3
 8001744:	62d0      	str	r0, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001746:	48a0      	ldr	r0, [pc, #640]	; (80019c8 <UART_SetConfig+0x2d8>)
 8001748:	4282      	cmp	r2, r0
 800174a:	d11a      	bne.n	8001782 <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800174c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001750:	489e      	ldr	r0, [pc, #632]	; (80019cc <UART_SetConfig+0x2dc>)
 8001752:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8001756:	f002 0203 	and.w	r2, r2, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800175a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800175e:	5c82      	ldrb	r2, [r0, r2]
 8001760:	f102 32ff 	add.w	r2, r2, #4294967295
 8001764:	f000 8220 	beq.w	8001ba8 <UART_SetConfig+0x4b8>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001768:	2a07      	cmp	r2, #7
 800176a:	f200 83e7 	bhi.w	8001f3c <UART_SetConfig+0x84c>
 800176e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001772:	0327      	.short	0x0327
 8001774:	03e50349 	.word	0x03e50349
 8001778:	03e5038c 	.word	0x03e5038c
 800177c:	03e503e5 	.word	0x03e503e5
 8001780:	03a5      	.short	0x03a5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001782:	4890      	ldr	r0, [pc, #576]	; (80019c4 <UART_SetConfig+0x2d4>)
 8001784:	4282      	cmp	r2, r0
 8001786:	f040 83d5 	bne.w	8001f34 <UART_SetConfig+0x844>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800178a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800178e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8001792:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8001796:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800179a:	f000 8094 	beq.w	80018c6 <UART_SetConfig+0x1d6>
 800179e:	d80c      	bhi.n	80017ba <UART_SetConfig+0xca>
 80017a0:	b3ca      	cbz	r2, 8001816 <UART_SetConfig+0x126>
        ret = HAL_ERROR;
 80017a2:	2201      	movs	r2, #1
      ret = HAL_ERROR;
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80017aa:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 80017b2:	6723      	str	r3, [r4, #112]	; 0x70

  return ret;
}
 80017b4:	4610      	mov	r0, r2
 80017b6:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80017ba:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80017be:	d064      	beq.n	800188a <UART_SetConfig+0x19a>
 80017c0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80017c4:	d1ed      	bne.n	80017a2 <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80e1 	beq.w	800198e <UART_SetConfig+0x29e>
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	f000 80e1 	beq.w	8001994 <UART_SetConfig+0x2a4>
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	f000 80e1 	beq.w	800199a <UART_SetConfig+0x2aa>
 80017d8:	2b03      	cmp	r3, #3
 80017da:	f000 80e1 	beq.w	80019a0 <UART_SetConfig+0x2b0>
 80017de:	2b04      	cmp	r3, #4
 80017e0:	f000 80e1 	beq.w	80019a6 <UART_SetConfig+0x2b6>
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	f000 80e1 	beq.w	80019ac <UART_SetConfig+0x2bc>
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	f000 80e1 	beq.w	80019b2 <UART_SetConfig+0x2c2>
 80017f0:	2b07      	cmp	r3, #7
 80017f2:	f000 80e1 	beq.w	80019b8 <UART_SetConfig+0x2c8>
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	f000 8100 	beq.w	80019fc <UART_SetConfig+0x30c>
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	f000 8100 	beq.w	8001a02 <UART_SetConfig+0x312>
 8001802:	2b0a      	cmp	r3, #10
 8001804:	f000 8100 	beq.w	8001a08 <UART_SetConfig+0x318>
 8001808:	2b0b      	cmp	r3, #11
 800180a:	bf14      	ite	ne
 800180c:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8001810:	2080      	moveq	r0, #128	; 0x80
 8001812:	2308      	movs	r3, #8
 8001814:	e093      	b.n	800193e <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8001816:	f7ff fc99 	bl	800114c <HAL_RCC_GetPCLK1Freq>
 800181a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800181c:	b1fb      	cbz	r3, 800185e <UART_SetConfig+0x16e>
 800181e:	2b01      	cmp	r3, #1
 8001820:	d01f      	beq.n	8001862 <UART_SetConfig+0x172>
 8001822:	2b02      	cmp	r3, #2
 8001824:	d01f      	beq.n	8001866 <UART_SetConfig+0x176>
 8001826:	2b03      	cmp	r3, #3
 8001828:	d01f      	beq.n	800186a <UART_SetConfig+0x17a>
 800182a:	2b04      	cmp	r3, #4
 800182c:	d01f      	beq.n	800186e <UART_SetConfig+0x17e>
 800182e:	2b05      	cmp	r3, #5
 8001830:	d01f      	beq.n	8001872 <UART_SetConfig+0x182>
 8001832:	2b06      	cmp	r3, #6
 8001834:	d01f      	beq.n	8001876 <UART_SetConfig+0x186>
 8001836:	2b07      	cmp	r3, #7
 8001838:	d01f      	beq.n	800187a <UART_SetConfig+0x18a>
 800183a:	2b08      	cmp	r3, #8
 800183c:	d01f      	beq.n	800187e <UART_SetConfig+0x18e>
 800183e:	2b09      	cmp	r3, #9
 8001840:	d01f      	beq.n	8001882 <UART_SetConfig+0x192>
 8001842:	2b0a      	cmp	r3, #10
 8001844:	d01f      	beq.n	8001886 <UART_SetConfig+0x196>
 8001846:	2b0b      	cmp	r3, #11
 8001848:	bf14      	ite	ne
 800184a:	2301      	movne	r3, #1
 800184c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8001850:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8001854:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8001856:	2800      	cmp	r0, #0
 8001858:	d171      	bne.n	800193e <UART_SetConfig+0x24e>
 800185a:	4602      	mov	r2, r0
 800185c:	e7a2      	b.n	80017a4 <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800185e:	2301      	movs	r3, #1
 8001860:	e7f6      	b.n	8001850 <UART_SetConfig+0x160>
 8001862:	2302      	movs	r3, #2
 8001864:	e7f4      	b.n	8001850 <UART_SetConfig+0x160>
 8001866:	2304      	movs	r3, #4
 8001868:	e7f2      	b.n	8001850 <UART_SetConfig+0x160>
 800186a:	2306      	movs	r3, #6
 800186c:	e7f0      	b.n	8001850 <UART_SetConfig+0x160>
 800186e:	2308      	movs	r3, #8
 8001870:	e7ee      	b.n	8001850 <UART_SetConfig+0x160>
 8001872:	230a      	movs	r3, #10
 8001874:	e7ec      	b.n	8001850 <UART_SetConfig+0x160>
 8001876:	230c      	movs	r3, #12
 8001878:	e7ea      	b.n	8001850 <UART_SetConfig+0x160>
 800187a:	2310      	movs	r3, #16
 800187c:	e7e8      	b.n	8001850 <UART_SetConfig+0x160>
 800187e:	2320      	movs	r3, #32
 8001880:	e7e6      	b.n	8001850 <UART_SetConfig+0x160>
 8001882:	2340      	movs	r3, #64	; 0x40
 8001884:	e7e4      	b.n	8001850 <UART_SetConfig+0x160>
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	e7e2      	b.n	8001850 <UART_SetConfig+0x160>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800188a:	2b00      	cmp	r3, #0
 800188c:	d052      	beq.n	8001934 <UART_SetConfig+0x244>
 800188e:	2b01      	cmp	r3, #1
 8001890:	d052      	beq.n	8001938 <UART_SetConfig+0x248>
 8001892:	2b02      	cmp	r3, #2
 8001894:	d052      	beq.n	800193c <UART_SetConfig+0x24c>
 8001896:	2b03      	cmp	r3, #3
 8001898:	d069      	beq.n	800196e <UART_SetConfig+0x27e>
 800189a:	2b04      	cmp	r3, #4
 800189c:	d069      	beq.n	8001972 <UART_SetConfig+0x282>
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d069      	beq.n	8001976 <UART_SetConfig+0x286>
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d069      	beq.n	800197a <UART_SetConfig+0x28a>
 80018a6:	2b07      	cmp	r3, #7
 80018a8:	d069      	beq.n	800197e <UART_SetConfig+0x28e>
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d069      	beq.n	8001982 <UART_SetConfig+0x292>
 80018ae:	2b09      	cmp	r3, #9
 80018b0:	d069      	beq.n	8001986 <UART_SetConfig+0x296>
 80018b2:	2b0a      	cmp	r3, #10
 80018b4:	d069      	beq.n	800198a <UART_SetConfig+0x29a>
 80018b6:	4846      	ldr	r0, [pc, #280]	; (80019d0 <UART_SetConfig+0x2e0>)
 80018b8:	f24f 4224 	movw	r2, #62500	; 0xf424
 80018bc:	2b0b      	cmp	r3, #11
 80018be:	bf08      	it	eq
 80018c0:	4610      	moveq	r0, r2
 80018c2:	2302      	movs	r3, #2
 80018c4:	e03b      	b.n	800193e <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80018c6:	f7ff fbe3 	bl	8001090 <HAL_RCC_GetSysClockFreq>
 80018ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018cc:	b1e3      	cbz	r3, 8001908 <UART_SetConfig+0x218>
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d01c      	beq.n	800190c <UART_SetConfig+0x21c>
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d01c      	beq.n	8001910 <UART_SetConfig+0x220>
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d01c      	beq.n	8001914 <UART_SetConfig+0x224>
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d01c      	beq.n	8001918 <UART_SetConfig+0x228>
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d01c      	beq.n	800191c <UART_SetConfig+0x22c>
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d01c      	beq.n	8001920 <UART_SetConfig+0x230>
 80018e6:	2b07      	cmp	r3, #7
 80018e8:	d01c      	beq.n	8001924 <UART_SetConfig+0x234>
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d01c      	beq.n	8001928 <UART_SetConfig+0x238>
 80018ee:	2b09      	cmp	r3, #9
 80018f0:	d01c      	beq.n	800192c <UART_SetConfig+0x23c>
 80018f2:	2b0a      	cmp	r3, #10
 80018f4:	d01c      	beq.n	8001930 <UART_SetConfig+0x240>
 80018f6:	2b0b      	cmp	r3, #11
 80018f8:	bf14      	ite	ne
 80018fa:	2301      	movne	r3, #1
 80018fc:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8001900:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8001904:	2304      	movs	r3, #4
 8001906:	e7a6      	b.n	8001856 <UART_SetConfig+0x166>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8001908:	2301      	movs	r3, #1
 800190a:	e7f9      	b.n	8001900 <UART_SetConfig+0x210>
 800190c:	2302      	movs	r3, #2
 800190e:	e7f7      	b.n	8001900 <UART_SetConfig+0x210>
 8001910:	2304      	movs	r3, #4
 8001912:	e7f5      	b.n	8001900 <UART_SetConfig+0x210>
 8001914:	2306      	movs	r3, #6
 8001916:	e7f3      	b.n	8001900 <UART_SetConfig+0x210>
 8001918:	2308      	movs	r3, #8
 800191a:	e7f1      	b.n	8001900 <UART_SetConfig+0x210>
 800191c:	230a      	movs	r3, #10
 800191e:	e7ef      	b.n	8001900 <UART_SetConfig+0x210>
 8001920:	230c      	movs	r3, #12
 8001922:	e7ed      	b.n	8001900 <UART_SetConfig+0x210>
 8001924:	2310      	movs	r3, #16
 8001926:	e7eb      	b.n	8001900 <UART_SetConfig+0x210>
 8001928:	2320      	movs	r3, #32
 800192a:	e7e9      	b.n	8001900 <UART_SetConfig+0x210>
 800192c:	2340      	movs	r3, #64	; 0x40
 800192e:	e7e7      	b.n	8001900 <UART_SetConfig+0x210>
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	e7e5      	b.n	8001900 <UART_SetConfig+0x210>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8001934:	4826      	ldr	r0, [pc, #152]	; (80019d0 <UART_SetConfig+0x2e0>)
 8001936:	e7c4      	b.n	80018c2 <UART_SetConfig+0x1d2>
 8001938:	4826      	ldr	r0, [pc, #152]	; (80019d4 <UART_SetConfig+0x2e4>)
 800193a:	e7c2      	b.n	80018c2 <UART_SetConfig+0x1d2>
 800193c:	4826      	ldr	r0, [pc, #152]	; (80019d8 <UART_SetConfig+0x2e8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800193e:	6862      	ldr	r2, [r4, #4]
 8001940:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001944:	4281      	cmp	r1, r0
 8001946:	f63f af2c 	bhi.w	80017a2 <UART_SetConfig+0xb2>
 800194a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800194e:	f63f af28 	bhi.w	80017a2 <UART_SetConfig+0xb2>
        switch (clocksource)
 8001952:	2b08      	cmp	r3, #8
 8001954:	f200 8125 	bhi.w	8001ba2 <UART_SetConfig+0x4b2>
 8001958:	e8df f013 	tbh	[pc, r3, lsl #1]
 800195c:	01230059 	.word	0x01230059
 8001960:	01230095 	.word	0x01230095
 8001964:	012300d1 	.word	0x012300d1
 8001968:	01230123 	.word	0x01230123
 800196c:	00ea      	.short	0x00ea
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800196e:	481b      	ldr	r0, [pc, #108]	; (80019dc <UART_SetConfig+0x2ec>)
 8001970:	e7a7      	b.n	80018c2 <UART_SetConfig+0x1d2>
 8001972:	481b      	ldr	r0, [pc, #108]	; (80019e0 <UART_SetConfig+0x2f0>)
 8001974:	e7a5      	b.n	80018c2 <UART_SetConfig+0x1d2>
 8001976:	481b      	ldr	r0, [pc, #108]	; (80019e4 <UART_SetConfig+0x2f4>)
 8001978:	e7a3      	b.n	80018c2 <UART_SetConfig+0x1d2>
 800197a:	481b      	ldr	r0, [pc, #108]	; (80019e8 <UART_SetConfig+0x2f8>)
 800197c:	e7a1      	b.n	80018c2 <UART_SetConfig+0x1d2>
 800197e:	481b      	ldr	r0, [pc, #108]	; (80019ec <UART_SetConfig+0x2fc>)
 8001980:	e79f      	b.n	80018c2 <UART_SetConfig+0x1d2>
 8001982:	481b      	ldr	r0, [pc, #108]	; (80019f0 <UART_SetConfig+0x300>)
 8001984:	e79d      	b.n	80018c2 <UART_SetConfig+0x1d2>
 8001986:	481b      	ldr	r0, [pc, #108]	; (80019f4 <UART_SetConfig+0x304>)
 8001988:	e79b      	b.n	80018c2 <UART_SetConfig+0x1d2>
 800198a:	481b      	ldr	r0, [pc, #108]	; (80019f8 <UART_SetConfig+0x308>)
 800198c:	e799      	b.n	80018c2 <UART_SetConfig+0x1d2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800198e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001992:	e73e      	b.n	8001812 <UART_SetConfig+0x122>
 8001994:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001998:	e73b      	b.n	8001812 <UART_SetConfig+0x122>
 800199a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800199e:	e738      	b.n	8001812 <UART_SetConfig+0x122>
 80019a0:	f241 5055 	movw	r0, #5461	; 0x1555
 80019a4:	e735      	b.n	8001812 <UART_SetConfig+0x122>
 80019a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019aa:	e732      	b.n	8001812 <UART_SetConfig+0x122>
 80019ac:	f640 40cc 	movw	r0, #3276	; 0xccc
 80019b0:	e72f      	b.n	8001812 <UART_SetConfig+0x122>
 80019b2:	f640 20aa 	movw	r0, #2730	; 0xaaa
 80019b6:	e72c      	b.n	8001812 <UART_SetConfig+0x122>
 80019b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80019bc:	e729      	b.n	8001812 <UART_SetConfig+0x122>
 80019be:	bf00      	nop
 80019c0:	cfff69f3 	.word	0xcfff69f3
 80019c4:	40008000 	.word	0x40008000
 80019c8:	40013800 	.word	0x40013800
 80019cc:	08003d61 	.word	0x08003d61
 80019d0:	00f42400 	.word	0x00f42400
 80019d4:	007a1200 	.word	0x007a1200
 80019d8:	003d0900 	.word	0x003d0900
 80019dc:	0028b0aa 	.word	0x0028b0aa
 80019e0:	001e8480 	.word	0x001e8480
 80019e4:	00186a00 	.word	0x00186a00
 80019e8:	00145855 	.word	0x00145855
 80019ec:	000f4240 	.word	0x000f4240
 80019f0:	0007a120 	.word	0x0007a120
 80019f4:	0003d090 	.word	0x0003d090
 80019f8:	0001e848 	.word	0x0001e848
 80019fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a00:	e79d      	b.n	800193e <UART_SetConfig+0x24e>
 8001a02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a06:	e704      	b.n	8001812 <UART_SetConfig+0x122>
 8001a08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a0c:	e701      	b.n	8001812 <UART_SetConfig+0x122>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001a0e:	f7ff fb9d 	bl	800114c <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 8089 	beq.w	8001b2c <UART_SetConfig+0x43c>
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d072      	beq.n	8001b04 <UART_SetConfig+0x414>
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d072      	beq.n	8001b08 <UART_SetConfig+0x418>
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d072      	beq.n	8001b0c <UART_SetConfig+0x41c>
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d072      	beq.n	8001b10 <UART_SetConfig+0x420>
 8001a2a:	2b05      	cmp	r3, #5
 8001a2c:	d072      	beq.n	8001b14 <UART_SetConfig+0x424>
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d072      	beq.n	8001b18 <UART_SetConfig+0x428>
 8001a32:	2b07      	cmp	r3, #7
 8001a34:	d072      	beq.n	8001b1c <UART_SetConfig+0x42c>
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d072      	beq.n	8001b20 <UART_SetConfig+0x430>
 8001a3a:	2b09      	cmp	r3, #9
 8001a3c:	d072      	beq.n	8001b24 <UART_SetConfig+0x434>
 8001a3e:	2b0a      	cmp	r3, #10
 8001a40:	d072      	beq.n	8001b28 <UART_SetConfig+0x438>
 8001a42:	2b0b      	cmp	r3, #11
 8001a44:	d172      	bne.n	8001b2c <UART_SetConfig+0x43c>
 8001a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	f7fe fb97 	bl	8000180 <__aeabi_uldivmod>
 8001a52:	6865      	ldr	r5, [r4, #4]
 8001a54:	020f      	lsls	r7, r1, #8
 8001a56:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8001a5a:	0206      	lsls	r6, r0, #8
 8001a5c:	0868      	lsrs	r0, r5, #1
 8001a5e:	eb16 0b00 	adds.w	fp, r6, r0
 8001a62:	f147 0c00 	adc.w	ip, r7, #0
 8001a66:	462a      	mov	r2, r5
 8001a68:	2300      	movs	r3, #0
 8001a6a:	4658      	mov	r0, fp
 8001a6c:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001a6e:	f7fe fb87 	bl	8000180 <__aeabi_uldivmod>
            break;
 8001a72:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001a74:	4b9a      	ldr	r3, [pc, #616]	; (8001ce0 <UART_SetConfig+0x5f0>)
 8001a76:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001a7a:	4299      	cmp	r1, r3
 8001a7c:	f63f ae91 	bhi.w	80017a2 <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	60d8      	str	r0, [r3, #12]
 8001a84:	e68e      	b.n	80017a4 <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d036      	beq.n	8001afa <UART_SetConfig+0x40a>
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d016      	beq.n	8001abe <UART_SetConfig+0x3ce>
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d016      	beq.n	8001ac2 <UART_SetConfig+0x3d2>
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d016      	beq.n	8001ac6 <UART_SetConfig+0x3d6>
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d01e      	beq.n	8001ada <UART_SetConfig+0x3ea>
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d01e      	beq.n	8001ade <UART_SetConfig+0x3ee>
 8001aa0:	2b06      	cmp	r3, #6
 8001aa2:	d01e      	beq.n	8001ae2 <UART_SetConfig+0x3f2>
 8001aa4:	2b07      	cmp	r3, #7
 8001aa6:	d020      	beq.n	8001aea <UART_SetConfig+0x3fa>
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d020      	beq.n	8001aee <UART_SetConfig+0x3fe>
 8001aac:	2b09      	cmp	r3, #9
 8001aae:	d020      	beq.n	8001af2 <UART_SetConfig+0x402>
 8001ab0:	2b0a      	cmp	r3, #10
 8001ab2:	d020      	beq.n	8001af6 <UART_SetConfig+0x406>
 8001ab4:	2b0b      	cmp	r3, #11
 8001ab6:	d120      	bne.n	8001afa <UART_SetConfig+0x40a>
 8001ab8:	488a      	ldr	r0, [pc, #552]	; (8001ce4 <UART_SetConfig+0x5f4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001aba:	2100      	movs	r1, #0
 8001abc:	e006      	b.n	8001acc <UART_SetConfig+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001abe:	488a      	ldr	r0, [pc, #552]	; (8001ce8 <UART_SetConfig+0x5f8>)
 8001ac0:	e7fb      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001ac2:	488a      	ldr	r0, [pc, #552]	; (8001cec <UART_SetConfig+0x5fc>)
 8001ac4:	e7f9      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001ac6:	a182      	add	r1, pc, #520	; (adr r1, 8001cd0 <UART_SetConfig+0x5e0>)
 8001ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001acc:	0855      	lsrs	r5, r2, #1
 8001ace:	1940      	adds	r0, r0, r5
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	f141 0100 	adc.w	r1, r1, #0
 8001ad8:	e7c9      	b.n	8001a6e <UART_SetConfig+0x37e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001ada:	4885      	ldr	r0, [pc, #532]	; (8001cf0 <UART_SetConfig+0x600>)
 8001adc:	e7ed      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001ade:	4885      	ldr	r0, [pc, #532]	; (8001cf4 <UART_SetConfig+0x604>)
 8001ae0:	e7eb      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001ae2:	a17d      	add	r1, pc, #500	; (adr r1, 8001cd8 <UART_SetConfig+0x5e8>)
 8001ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ae8:	e7f0      	b.n	8001acc <UART_SetConfig+0x3dc>
 8001aea:	4883      	ldr	r0, [pc, #524]	; (8001cf8 <UART_SetConfig+0x608>)
 8001aec:	e7e5      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001aee:	4883      	ldr	r0, [pc, #524]	; (8001cfc <UART_SetConfig+0x60c>)
 8001af0:	e7e3      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001af2:	4883      	ldr	r0, [pc, #524]	; (8001d00 <UART_SetConfig+0x610>)
 8001af4:	e7e1      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001af6:	4883      	ldr	r0, [pc, #524]	; (8001d04 <UART_SetConfig+0x614>)
 8001af8:	e7df      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001afa:	4883      	ldr	r0, [pc, #524]	; (8001d08 <UART_SetConfig+0x618>)
 8001afc:	e7dd      	b.n	8001aba <UART_SetConfig+0x3ca>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001afe:	f7ff fac7 	bl	8001090 <HAL_RCC_GetSysClockFreq>
 8001b02:	e786      	b.n	8001a12 <UART_SetConfig+0x322>
 8001b04:	2202      	movs	r2, #2
 8001b06:	e7a0      	b.n	8001a4a <UART_SetConfig+0x35a>
 8001b08:	2204      	movs	r2, #4
 8001b0a:	e79e      	b.n	8001a4a <UART_SetConfig+0x35a>
 8001b0c:	2206      	movs	r2, #6
 8001b0e:	e79c      	b.n	8001a4a <UART_SetConfig+0x35a>
 8001b10:	2208      	movs	r2, #8
 8001b12:	e79a      	b.n	8001a4a <UART_SetConfig+0x35a>
 8001b14:	220a      	movs	r2, #10
 8001b16:	e798      	b.n	8001a4a <UART_SetConfig+0x35a>
 8001b18:	220c      	movs	r2, #12
 8001b1a:	e796      	b.n	8001a4a <UART_SetConfig+0x35a>
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	e794      	b.n	8001a4a <UART_SetConfig+0x35a>
 8001b20:	2220      	movs	r2, #32
 8001b22:	e792      	b.n	8001a4a <UART_SetConfig+0x35a>
 8001b24:	2240      	movs	r2, #64	; 0x40
 8001b26:	e790      	b.n	8001a4a <UART_SetConfig+0x35a>
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	e78e      	b.n	8001a4a <UART_SetConfig+0x35a>
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	e78c      	b.n	8001a4a <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b32:	b39b      	cbz	r3, 8001b9c <UART_SetConfig+0x4ac>
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d016      	beq.n	8001b66 <UART_SetConfig+0x476>
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d017      	beq.n	8001b6c <UART_SetConfig+0x47c>
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d018      	beq.n	8001b72 <UART_SetConfig+0x482>
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d018      	beq.n	8001b76 <UART_SetConfig+0x486>
 8001b44:	2b05      	cmp	r3, #5
 8001b46:	d019      	beq.n	8001b7c <UART_SetConfig+0x48c>
 8001b48:	2b06      	cmp	r3, #6
 8001b4a:	d019      	beq.n	8001b80 <UART_SetConfig+0x490>
 8001b4c:	2b07      	cmp	r3, #7
 8001b4e:	d019      	beq.n	8001b84 <UART_SetConfig+0x494>
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d01a      	beq.n	8001b8a <UART_SetConfig+0x49a>
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	d01b      	beq.n	8001b90 <UART_SetConfig+0x4a0>
 8001b58:	2b0a      	cmp	r3, #10
 8001b5a:	d01c      	beq.n	8001b96 <UART_SetConfig+0x4a6>
 8001b5c:	2b0b      	cmp	r3, #11
 8001b5e:	d11d      	bne.n	8001b9c <UART_SetConfig+0x4ac>
 8001b60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b64:	e7a9      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001b66:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001b6a:	e7a6      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001b6c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001b70:	e7a3      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001b72:	4866      	ldr	r0, [pc, #408]	; (8001d0c <UART_SetConfig+0x61c>)
 8001b74:	e7a1      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001b76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b7a:	e79e      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001b7c:	4864      	ldr	r0, [pc, #400]	; (8001d10 <UART_SetConfig+0x620>)
 8001b7e:	e79c      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001b80:	4864      	ldr	r0, [pc, #400]	; (8001d14 <UART_SetConfig+0x624>)
 8001b82:	e79a      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001b84:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b88:	e797      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001b8a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001b8e:	e794      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001b90:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b94:	e791      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001b96:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001b9a:	e78e      	b.n	8001aba <UART_SetConfig+0x3ca>
 8001b9c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001ba0:	e78b      	b.n	8001aba <UART_SetConfig+0x3ca>
            ret = HAL_ERROR;
 8001ba2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	e765      	b.n	8001a74 <UART_SetConfig+0x384>
    switch (clocksource)
 8001ba8:	2a07      	cmp	r2, #7
 8001baa:	f200 8106 	bhi.w	8001dba <UART_SetConfig+0x6ca>
 8001bae:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001bb2:	0008      	.short	0x0008
 8001bb4:	0104003f 	.word	0x0104003f
 8001bb8:	01040076 	.word	0x01040076
 8001bbc:	01040104 	.word	0x01040104
 8001bc0:	00c7      	.short	0x00c7
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001bc2:	f7ff fad5 	bl	8001170 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001bc6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001bc8:	2900      	cmp	r1, #0
 8001bca:	d06b      	beq.n	8001ca4 <UART_SetConfig+0x5b4>
 8001bcc:	2901      	cmp	r1, #1
 8001bce:	d06b      	beq.n	8001ca8 <UART_SetConfig+0x5b8>
 8001bd0:	2902      	cmp	r1, #2
 8001bd2:	d06b      	beq.n	8001cac <UART_SetConfig+0x5bc>
 8001bd4:	2903      	cmp	r1, #3
 8001bd6:	d06b      	beq.n	8001cb0 <UART_SetConfig+0x5c0>
 8001bd8:	2904      	cmp	r1, #4
 8001bda:	d06b      	beq.n	8001cb4 <UART_SetConfig+0x5c4>
 8001bdc:	2905      	cmp	r1, #5
 8001bde:	d06b      	beq.n	8001cb8 <UART_SetConfig+0x5c8>
 8001be0:	2906      	cmp	r1, #6
 8001be2:	d06b      	beq.n	8001cbc <UART_SetConfig+0x5cc>
 8001be4:	2907      	cmp	r1, #7
 8001be6:	d06b      	beq.n	8001cc0 <UART_SetConfig+0x5d0>
 8001be8:	2908      	cmp	r1, #8
 8001bea:	d06b      	beq.n	8001cc4 <UART_SetConfig+0x5d4>
 8001bec:	2909      	cmp	r1, #9
 8001bee:	d06b      	beq.n	8001cc8 <UART_SetConfig+0x5d8>
 8001bf0:	290a      	cmp	r1, #10
 8001bf2:	d06b      	beq.n	8001ccc <UART_SetConfig+0x5dc>
 8001bf4:	290b      	cmp	r1, #11
 8001bf6:	bf14      	ite	ne
 8001bf8:	2201      	movne	r2, #1
 8001bfa:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8001bfe:	6861      	ldr	r1, [r4, #4]
 8001c00:	fbb0 f2f2 	udiv	r2, r0, r2
 8001c04:	084b      	lsrs	r3, r1, #1
 8001c06:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c10:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c12:	f1a3 0010 	sub.w	r0, r3, #16
 8001c16:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001c1a:	4288      	cmp	r0, r1
 8001c1c:	f63f adc1 	bhi.w	80017a2 <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001c20:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001c24:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c26:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001c2a:	430b      	orrs	r3, r1
 8001c2c:	60c3      	str	r3, [r0, #12]
 8001c2e:	e5b9      	b.n	80017a4 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001c30:	b1fb      	cbz	r3, 8001c72 <UART_SetConfig+0x582>
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d01f      	beq.n	8001c76 <UART_SetConfig+0x586>
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d01f      	beq.n	8001c7a <UART_SetConfig+0x58a>
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d01f      	beq.n	8001c7e <UART_SetConfig+0x58e>
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d01f      	beq.n	8001c82 <UART_SetConfig+0x592>
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d01f      	beq.n	8001c86 <UART_SetConfig+0x596>
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d01f      	beq.n	8001c8a <UART_SetConfig+0x59a>
 8001c4a:	2b07      	cmp	r3, #7
 8001c4c:	d01f      	beq.n	8001c8e <UART_SetConfig+0x59e>
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d01f      	beq.n	8001c92 <UART_SetConfig+0x5a2>
 8001c52:	2b09      	cmp	r3, #9
 8001c54:	d01f      	beq.n	8001c96 <UART_SetConfig+0x5a6>
 8001c56:	2b0a      	cmp	r3, #10
 8001c58:	d01f      	beq.n	8001c9a <UART_SetConfig+0x5aa>
 8001c5a:	492f      	ldr	r1, [pc, #188]	; (8001d18 <UART_SetConfig+0x628>)
 8001c5c:	4a29      	ldr	r2, [pc, #164]	; (8001d04 <UART_SetConfig+0x614>)
 8001c5e:	2b0b      	cmp	r3, #11
 8001c60:	bf14      	ite	ne
 8001c62:	4613      	movne	r3, r2
 8001c64:	460b      	moveq	r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001c66:	6862      	ldr	r2, [r4, #4]
 8001c68:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c70:	e7cd      	b.n	8001c0e <UART_SetConfig+0x51e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <UART_SetConfig+0x614>)
 8001c74:	e7f7      	b.n	8001c66 <UART_SetConfig+0x576>
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <UART_SetConfig+0x5f4>)
 8001c78:	e7f5      	b.n	8001c66 <UART_SetConfig+0x576>
 8001c7a:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <UART_SetConfig+0x62c>)
 8001c7c:	e7f3      	b.n	8001c66 <UART_SetConfig+0x576>
 8001c7e:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <UART_SetConfig+0x630>)
 8001c80:	e7f1      	b.n	8001c66 <UART_SetConfig+0x576>
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <UART_SetConfig+0x634>)
 8001c84:	e7ef      	b.n	8001c66 <UART_SetConfig+0x576>
 8001c86:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <UART_SetConfig+0x638>)
 8001c88:	e7ed      	b.n	8001c66 <UART_SetConfig+0x576>
 8001c8a:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <UART_SetConfig+0x63c>)
 8001c8c:	e7eb      	b.n	8001c66 <UART_SetConfig+0x576>
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <UART_SetConfig+0x640>)
 8001c90:	e7e9      	b.n	8001c66 <UART_SetConfig+0x576>
 8001c92:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <UART_SetConfig+0x644>)
 8001c94:	e7e7      	b.n	8001c66 <UART_SetConfig+0x576>
 8001c96:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <UART_SetConfig+0x648>)
 8001c98:	e7e5      	b.n	8001c66 <UART_SetConfig+0x576>
 8001c9a:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <UART_SetConfig+0x64c>)
 8001c9c:	e7e3      	b.n	8001c66 <UART_SetConfig+0x576>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001c9e:	f7ff f9f7 	bl	8001090 <HAL_RCC_GetSysClockFreq>
 8001ca2:	e790      	b.n	8001bc6 <UART_SetConfig+0x4d6>
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	e7aa      	b.n	8001bfe <UART_SetConfig+0x50e>
 8001ca8:	2202      	movs	r2, #2
 8001caa:	e7a8      	b.n	8001bfe <UART_SetConfig+0x50e>
 8001cac:	2204      	movs	r2, #4
 8001cae:	e7a6      	b.n	8001bfe <UART_SetConfig+0x50e>
 8001cb0:	2206      	movs	r2, #6
 8001cb2:	e7a4      	b.n	8001bfe <UART_SetConfig+0x50e>
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	e7a2      	b.n	8001bfe <UART_SetConfig+0x50e>
 8001cb8:	220a      	movs	r2, #10
 8001cba:	e7a0      	b.n	8001bfe <UART_SetConfig+0x50e>
 8001cbc:	220c      	movs	r2, #12
 8001cbe:	e79e      	b.n	8001bfe <UART_SetConfig+0x50e>
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	e79c      	b.n	8001bfe <UART_SetConfig+0x50e>
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	e79a      	b.n	8001bfe <UART_SetConfig+0x50e>
 8001cc8:	2240      	movs	r2, #64	; 0x40
 8001cca:	e798      	b.n	8001bfe <UART_SetConfig+0x50e>
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	e796      	b.n	8001bfe <UART_SetConfig+0x50e>
 8001cd0:	28b0aa00 	.word	0x28b0aa00
 8001cd4:	00000000 	.word	0x00000000
 8001cd8:	14585500 	.word	0x14585500
 8001cdc:	00000000 	.word	0x00000000
 8001ce0:	000ffcff 	.word	0x000ffcff
 8001ce4:	00f42400 	.word	0x00f42400
 8001ce8:	7a120000 	.word	0x7a120000
 8001cec:	3d090000 	.word	0x3d090000
 8001cf0:	1e848000 	.word	0x1e848000
 8001cf4:	186a0000 	.word	0x186a0000
 8001cf8:	0f424000 	.word	0x0f424000
 8001cfc:	07a12000 	.word	0x07a12000
 8001d00:	03d09000 	.word	0x03d09000
 8001d04:	01e84800 	.word	0x01e84800
 8001d08:	f4240000 	.word	0xf4240000
 8001d0c:	00155500 	.word	0x00155500
 8001d10:	000ccc00 	.word	0x000ccc00
 8001d14:	000aaa00 	.word	0x000aaa00
 8001d18:	0001e848 	.word	0x0001e848
 8001d1c:	007a1200 	.word	0x007a1200
 8001d20:	00516154 	.word	0x00516154
 8001d24:	003d0900 	.word	0x003d0900
 8001d28:	0030d400 	.word	0x0030d400
 8001d2c:	0028b0aa 	.word	0x0028b0aa
 8001d30:	001e8480 	.word	0x001e8480
 8001d34:	000f4240 	.word	0x000f4240
 8001d38:	0007a120 	.word	0x0007a120
 8001d3c:	0003d090 	.word	0x0003d090
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001d40:	b1d3      	cbz	r3, 8001d78 <UART_SetConfig+0x688>
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d01b      	beq.n	8001d7e <UART_SetConfig+0x68e>
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d01c      	beq.n	8001d84 <UART_SetConfig+0x694>
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d01d      	beq.n	8001d8a <UART_SetConfig+0x69a>
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d01e      	beq.n	8001d90 <UART_SetConfig+0x6a0>
 8001d52:	2b05      	cmp	r3, #5
 8001d54:	d01f      	beq.n	8001d96 <UART_SetConfig+0x6a6>
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d020      	beq.n	8001d9c <UART_SetConfig+0x6ac>
 8001d5a:	2b07      	cmp	r3, #7
 8001d5c:	d021      	beq.n	8001da2 <UART_SetConfig+0x6b2>
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d022      	beq.n	8001da8 <UART_SetConfig+0x6b8>
 8001d62:	2b09      	cmp	r3, #9
 8001d64:	d023      	beq.n	8001dae <UART_SetConfig+0x6be>
 8001d66:	2b0a      	cmp	r3, #10
 8001d68:	d024      	beq.n	8001db4 <UART_SetConfig+0x6c4>
 8001d6a:	2b0b      	cmp	r3, #11
 8001d6c:	bf14      	ite	ne
 8001d6e:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8001d72:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8001d76:	e776      	b.n	8001c66 <UART_SetConfig+0x576>
 8001d78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d7c:	e773      	b.n	8001c66 <UART_SetConfig+0x576>
 8001d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d82:	e770      	b.n	8001c66 <UART_SetConfig+0x576>
 8001d84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d88:	e76d      	b.n	8001c66 <UART_SetConfig+0x576>
 8001d8a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8001d8e:	e76a      	b.n	8001c66 <UART_SetConfig+0x576>
 8001d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d94:	e767      	b.n	8001c66 <UART_SetConfig+0x576>
 8001d96:	f641 1398 	movw	r3, #6552	; 0x1998
 8001d9a:	e764      	b.n	8001c66 <UART_SetConfig+0x576>
 8001d9c:	f241 5354 	movw	r3, #5460	; 0x1554
 8001da0:	e761      	b.n	8001c66 <UART_SetConfig+0x576>
 8001da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da6:	e75e      	b.n	8001c66 <UART_SetConfig+0x576>
 8001da8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dac:	e75b      	b.n	8001c66 <UART_SetConfig+0x576>
 8001dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db2:	e758      	b.n	8001c66 <UART_SetConfig+0x576>
 8001db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db8:	e755      	b.n	8001c66 <UART_SetConfig+0x576>
        ret = HAL_ERROR;
 8001dba:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e728      	b.n	8001c12 <UART_SetConfig+0x522>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001dc0:	f7ff f9d6 	bl	8001170 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d062      	beq.n	8001e90 <UART_SetConfig+0x7a0>
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d062      	beq.n	8001e94 <UART_SetConfig+0x7a4>
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d062      	beq.n	8001e98 <UART_SetConfig+0x7a8>
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d062      	beq.n	8001e9c <UART_SetConfig+0x7ac>
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d062      	beq.n	8001ea0 <UART_SetConfig+0x7b0>
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d062      	beq.n	8001ea4 <UART_SetConfig+0x7b4>
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d062      	beq.n	8001ea8 <UART_SetConfig+0x7b8>
 8001de2:	2b07      	cmp	r3, #7
 8001de4:	d062      	beq.n	8001eac <UART_SetConfig+0x7bc>
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d062      	beq.n	8001eb0 <UART_SetConfig+0x7c0>
 8001dea:	2b09      	cmp	r3, #9
 8001dec:	d062      	beq.n	8001eb4 <UART_SetConfig+0x7c4>
 8001dee:	2b0a      	cmp	r3, #10
 8001df0:	d062      	beq.n	8001eb8 <UART_SetConfig+0x7c8>
 8001df2:	2b0b      	cmp	r3, #11
 8001df4:	bf14      	ite	ne
 8001df6:	2301      	movne	r3, #1
 8001df8:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8001dfc:	6862      	ldr	r2, [r4, #4]
 8001dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e02:	e01c      	b.n	8001e3e <UART_SetConfig+0x74e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e04:	b35b      	cbz	r3, 8001e5e <UART_SetConfig+0x76e>
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d02b      	beq.n	8001e62 <UART_SetConfig+0x772>
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d02b      	beq.n	8001e66 <UART_SetConfig+0x776>
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d02b      	beq.n	8001e6a <UART_SetConfig+0x77a>
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d02b      	beq.n	8001e6e <UART_SetConfig+0x77e>
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d02b      	beq.n	8001e72 <UART_SetConfig+0x782>
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d02b      	beq.n	8001e76 <UART_SetConfig+0x786>
 8001e1e:	2b07      	cmp	r3, #7
 8001e20:	d02b      	beq.n	8001e7a <UART_SetConfig+0x78a>
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d02b      	beq.n	8001e7e <UART_SetConfig+0x78e>
 8001e26:	2b09      	cmp	r3, #9
 8001e28:	d02b      	beq.n	8001e82 <UART_SetConfig+0x792>
 8001e2a:	2b0a      	cmp	r3, #10
 8001e2c:	d02b      	beq.n	8001e86 <UART_SetConfig+0x796>
 8001e2e:	4a45      	ldr	r2, [pc, #276]	; (8001f44 <UART_SetConfig+0x854>)
 8001e30:	f24f 4124 	movw	r1, #62500	; 0xf424
 8001e34:	2b0b      	cmp	r3, #11
 8001e36:	bf14      	ite	ne
 8001e38:	4613      	movne	r3, r2
 8001e3a:	460b      	moveq	r3, r1
 8001e3c:	6862      	ldr	r2, [r4, #4]
 8001e3e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001e42:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e46:	2200      	movs	r2, #0
 8001e48:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e4a:	f1a3 0010 	sub.w	r0, r3, #16
 8001e4e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001e52:	4288      	cmp	r0, r1
 8001e54:	f63f aca5 	bhi.w	80017a2 <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 8001e58:	6821      	ldr	r1, [r4, #0]
 8001e5a:	60cb      	str	r3, [r1, #12]
 8001e5c:	e4a2      	b.n	80017a4 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e5e:	4b39      	ldr	r3, [pc, #228]	; (8001f44 <UART_SetConfig+0x854>)
 8001e60:	e7ec      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001e62:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <UART_SetConfig+0x858>)
 8001e64:	e7ea      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001e66:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <UART_SetConfig+0x85c>)
 8001e68:	e7e8      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001e6a:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <UART_SetConfig+0x860>)
 8001e6c:	e7e6      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001e6e:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <UART_SetConfig+0x864>)
 8001e70:	e7e4      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001e72:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <UART_SetConfig+0x868>)
 8001e74:	e7e2      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001e76:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <UART_SetConfig+0x86c>)
 8001e78:	e7e0      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001e7a:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <UART_SetConfig+0x870>)
 8001e7c:	e7de      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001e7e:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <UART_SetConfig+0x874>)
 8001e80:	e7dc      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001e82:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <UART_SetConfig+0x878>)
 8001e84:	e7da      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001e86:	4b39      	ldr	r3, [pc, #228]	; (8001f6c <UART_SetConfig+0x87c>)
 8001e88:	e7d8      	b.n	8001e3c <UART_SetConfig+0x74c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e8a:	f7ff f901 	bl	8001090 <HAL_RCC_GetSysClockFreq>
 8001e8e:	e799      	b.n	8001dc4 <UART_SetConfig+0x6d4>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e7b3      	b.n	8001dfc <UART_SetConfig+0x70c>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e7b1      	b.n	8001dfc <UART_SetConfig+0x70c>
 8001e98:	2304      	movs	r3, #4
 8001e9a:	e7af      	b.n	8001dfc <UART_SetConfig+0x70c>
 8001e9c:	2306      	movs	r3, #6
 8001e9e:	e7ad      	b.n	8001dfc <UART_SetConfig+0x70c>
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	e7ab      	b.n	8001dfc <UART_SetConfig+0x70c>
 8001ea4:	230a      	movs	r3, #10
 8001ea6:	e7a9      	b.n	8001dfc <UART_SetConfig+0x70c>
 8001ea8:	230c      	movs	r3, #12
 8001eaa:	e7a7      	b.n	8001dfc <UART_SetConfig+0x70c>
 8001eac:	2310      	movs	r3, #16
 8001eae:	e7a5      	b.n	8001dfc <UART_SetConfig+0x70c>
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	e7a3      	b.n	8001dfc <UART_SetConfig+0x70c>
 8001eb4:	2340      	movs	r3, #64	; 0x40
 8001eb6:	e7a1      	b.n	8001dfc <UART_SetConfig+0x70c>
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	e79f      	b.n	8001dfc <UART_SetConfig+0x70c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001ebc:	b1cb      	cbz	r3, 8001ef2 <UART_SetConfig+0x802>
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d01a      	beq.n	8001ef8 <UART_SetConfig+0x808>
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d01b      	beq.n	8001efe <UART_SetConfig+0x80e>
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d01c      	beq.n	8001f04 <UART_SetConfig+0x814>
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d01d      	beq.n	8001f0a <UART_SetConfig+0x81a>
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d01e      	beq.n	8001f10 <UART_SetConfig+0x820>
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d01f      	beq.n	8001f16 <UART_SetConfig+0x826>
 8001ed6:	2b07      	cmp	r3, #7
 8001ed8:	d020      	beq.n	8001f1c <UART_SetConfig+0x82c>
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d021      	beq.n	8001f22 <UART_SetConfig+0x832>
 8001ede:	2b09      	cmp	r3, #9
 8001ee0:	d022      	beq.n	8001f28 <UART_SetConfig+0x838>
 8001ee2:	2b0a      	cmp	r3, #10
 8001ee4:	d023      	beq.n	8001f2e <UART_SetConfig+0x83e>
 8001ee6:	2b0b      	cmp	r3, #11
 8001ee8:	bf14      	ite	ne
 8001eea:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8001eee:	2380      	moveq	r3, #128	; 0x80
 8001ef0:	e7a4      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ef6:	e7a1      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001ef8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001efc:	e79e      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f02:	e79b      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001f04:	f241 5355 	movw	r3, #5461	; 0x1555
 8001f08:	e798      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0e:	e795      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001f10:	f640 43cc 	movw	r3, #3276	; 0xccc
 8001f14:	e792      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001f16:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8001f1a:	e78f      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001f1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f20:	e78c      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f26:	e789      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f2c:	e786      	b.n	8001e3c <UART_SetConfig+0x74c>
 8001f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f32:	e783      	b.n	8001e3c <UART_SetConfig+0x74c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f34:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001f38:	f43f af3f 	beq.w	8001dba <UART_SetConfig+0x6ca>
        ret = HAL_ERROR;
 8001f3c:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e783      	b.n	8001e4a <UART_SetConfig+0x75a>
 8001f42:	bf00      	nop
 8001f44:	00f42400 	.word	0x00f42400
 8001f48:	007a1200 	.word	0x007a1200
 8001f4c:	003d0900 	.word	0x003d0900
 8001f50:	0028b0aa 	.word	0x0028b0aa
 8001f54:	001e8480 	.word	0x001e8480
 8001f58:	00186a00 	.word	0x00186a00
 8001f5c:	00145855 	.word	0x00145855
 8001f60:	000f4240 	.word	0x000f4240
 8001f64:	0007a120 	.word	0x0007a120
 8001f68:	0003d090 	.word	0x0003d090
 8001f6c:	0001e848 	.word	0x0001e848

08001f70 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001f72:	07da      	lsls	r2, r3, #31
{
 8001f74:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f76:	d506      	bpl.n	8001f86 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f78:	6801      	ldr	r1, [r0, #0]
 8001f7a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001f7c:	684a      	ldr	r2, [r1, #4]
 8001f7e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001f82:	4322      	orrs	r2, r4
 8001f84:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f86:	079c      	lsls	r4, r3, #30
 8001f88:	d506      	bpl.n	8001f98 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f8a:	6801      	ldr	r1, [r0, #0]
 8001f8c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001f8e:	684a      	ldr	r2, [r1, #4]
 8001f90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f94:	4322      	orrs	r2, r4
 8001f96:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f98:	0759      	lsls	r1, r3, #29
 8001f9a:	d506      	bpl.n	8001faa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f9c:	6801      	ldr	r1, [r0, #0]
 8001f9e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001fa0:	684a      	ldr	r2, [r1, #4]
 8001fa2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fa6:	4322      	orrs	r2, r4
 8001fa8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001faa:	071a      	lsls	r2, r3, #28
 8001fac:	d506      	bpl.n	8001fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001fae:	6801      	ldr	r1, [r0, #0]
 8001fb0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001fb2:	684a      	ldr	r2, [r1, #4]
 8001fb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fb8:	4322      	orrs	r2, r4
 8001fba:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001fbc:	06dc      	lsls	r4, r3, #27
 8001fbe:	d506      	bpl.n	8001fce <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001fc0:	6801      	ldr	r1, [r0, #0]
 8001fc2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001fc4:	688a      	ldr	r2, [r1, #8]
 8001fc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fca:	4322      	orrs	r2, r4
 8001fcc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001fce:	0699      	lsls	r1, r3, #26
 8001fd0:	d506      	bpl.n	8001fe0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fd2:	6801      	ldr	r1, [r0, #0]
 8001fd4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001fd6:	688a      	ldr	r2, [r1, #8]
 8001fd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fdc:	4322      	orrs	r2, r4
 8001fde:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001fe0:	065a      	lsls	r2, r3, #25
 8001fe2:	d50f      	bpl.n	8002004 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fe4:	6801      	ldr	r1, [r0, #0]
 8001fe6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001fe8:	684a      	ldr	r2, [r1, #4]
 8001fea:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001fee:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001ff0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ff4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001ff6:	d105      	bne.n	8002004 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001ff8:	684a      	ldr	r2, [r1, #4]
 8001ffa:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001ffc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002000:	4322      	orrs	r2, r4
 8002002:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002004:	061b      	lsls	r3, r3, #24
 8002006:	d506      	bpl.n	8002016 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002008:	6802      	ldr	r2, [r0, #0]
 800200a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800200c:	6853      	ldr	r3, [r2, #4]
 800200e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002012:	430b      	orrs	r3, r1
 8002014:	6053      	str	r3, [r2, #4]
 8002016:	bd10      	pop	{r4, pc}

08002018 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800201c:	9d06      	ldr	r5, [sp, #24]
 800201e:	4604      	mov	r4, r0
 8002020:	460f      	mov	r7, r1
 8002022:	4616      	mov	r6, r2
 8002024:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002026:	6821      	ldr	r1, [r4, #0]
 8002028:	69ca      	ldr	r2, [r1, #28]
 800202a:	ea37 0302 	bics.w	r3, r7, r2
 800202e:	bf0c      	ite	eq
 8002030:	2201      	moveq	r2, #1
 8002032:	2200      	movne	r2, #0
 8002034:	42b2      	cmp	r2, r6
 8002036:	d002      	beq.n	800203e <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002038:	2000      	movs	r0, #0
}
 800203a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800203e:	1c6b      	adds	r3, r5, #1
 8002040:	d0f2      	beq.n	8002028 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002042:	f7fe fa6d 	bl	8000520 <HAL_GetTick>
 8002046:	eba0 0008 	sub.w	r0, r0, r8
 800204a:	4285      	cmp	r5, r0
 800204c:	d301      	bcc.n	8002052 <UART_WaitOnFlagUntilTimeout+0x3a>
 800204e:	2d00      	cmp	r5, #0
 8002050:	d1e9      	bne.n	8002026 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800205a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002064:	2320      	movs	r3, #32
 8002066:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800206a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800206e:	2300      	movs	r3, #0
 8002070:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
 8002074:	2003      	movs	r0, #3
 8002076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800207a <UART_CheckIdleState>:
{
 800207a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800207c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800207e:	2600      	movs	r6, #0
 8002080:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8002084:	f7fe fa4c 	bl	8000520 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800208e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002090:	d417      	bmi.n	80020c2 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	075b      	lsls	r3, r3, #29
 8002098:	d50a      	bpl.n	80020b0 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800209a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	462b      	mov	r3, r5
 80020a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80020a8:	4620      	mov	r0, r4
 80020aa:	f7ff ffb5 	bl	8002018 <UART_WaitOnFlagUntilTimeout>
 80020ae:	b9a0      	cbnz	r0, 80020da <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 80020b0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80020b2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80020b4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80020b8:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80020bc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 80020c0:	e00c      	b.n	80020dc <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	4632      	mov	r2, r6
 80020ca:	4603      	mov	r3, r0
 80020cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80020d0:	4620      	mov	r0, r4
 80020d2:	f7ff ffa1 	bl	8002018 <UART_WaitOnFlagUntilTimeout>
 80020d6:	2800      	cmp	r0, #0
 80020d8:	d0db      	beq.n	8002092 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80020da:	2003      	movs	r0, #3
}
 80020dc:	b002      	add	sp, #8
 80020de:	bd70      	pop	{r4, r5, r6, pc}

080020e0 <HAL_UART_Init>:
{
 80020e0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80020e2:	4604      	mov	r4, r0
 80020e4:	b350      	cbz	r0, 800213c <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80020e6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80020ea:	b91b      	cbnz	r3, 80020f4 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80020ec:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80020f0:	f001 fcd6 	bl	8003aa0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80020f4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020f6:	2324      	movs	r3, #36	; 0x24
 80020f8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80020fc:	6813      	ldr	r3, [r2, #0]
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002104:	4620      	mov	r0, r4
 8002106:	f7ff faf3 	bl	80016f0 <UART_SetConfig>
 800210a:	2801      	cmp	r0, #1
 800210c:	d016      	beq.n	800213c <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800210e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002110:	b113      	cbz	r3, 8002118 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8002112:	4620      	mov	r0, r4
 8002114:	f7ff ff2c 	bl	8001f70 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002120:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002128:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002130:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002132:	601a      	str	r2, [r3, #0]
}
 8002134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002138:	f7ff bf9f 	b.w	800207a <UART_CheckIdleState>
}
 800213c:	2001      	movs	r0, #1
 800213e:	bd10      	pop	{r4, pc}

08002140 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002142:	2203      	movs	r2, #3
 8002144:	f88d 2003 	strb.w	r2, [sp, #3]
 8002148:	2207      	movs	r2, #7
 800214a:	f88d 2004 	strb.w	r2, [sp, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f88d 2006 	strb.w	r2, [sp, #6]
 8002154:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002158:	2208      	movs	r2, #8
 800215a:	f88d 2008 	strb.w	r2, [sp, #8]
 800215e:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002162:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002164:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002166:	2104      	movs	r1, #4
 8002168:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800216a:	f88d 3000 	strb.w	r3, [sp]
 800216e:	f88d 3001 	strb.w	r3, [sp, #1]
 8002172:	f88d 3002 	strb.w	r3, [sp, #2]
 8002176:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800217a:	f88d 1009 	strb.w	r1, [sp, #9]
 800217e:	f88d 400a 	strb.w	r4, [sp, #10]
 8002182:	f88d 100b 	strb.w	r1, [sp, #11]
 8002186:	f88d 300d 	strb.w	r3, [sp, #13]
 800218a:	f88d 300e 	strb.w	r3, [sp, #14]
 800218e:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002192:	b92a      	cbnz	r2, 80021a0 <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 8002194:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002198:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800219c:	b004      	add	sp, #16
 800219e:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80021a0:	6802      	ldr	r2, [r0, #0]
 80021a2:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80021a4:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80021a6:	aa04      	add	r2, sp, #16
 80021a8:	eb02 7151 	add.w	r1, r2, r1, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80021ac:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80021b0:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 80021b4:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 80021b8:	00d2      	lsls	r2, r2, #3
 80021ba:	fb92 f2f1 	sdiv	r2, r2, r1
 80021be:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80021c2:	aa04      	add	r2, sp, #16
 80021c4:	4413      	add	r3, r2
 80021c6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80021ca:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80021ce:	00d2      	lsls	r2, r2, #3
 80021d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80021d4:	e7e0      	b.n	8002198 <UARTEx_SetNbDataToProcess+0x58>

080021d6 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80021d6:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d014      	beq.n	8002208 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80021de:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021e0:	2324      	movs	r3, #36	; 0x24
 80021e2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80021e6:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80021e8:	6813      	ldr	r3, [r2, #0]
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80021f0:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80021f8:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80021fa:	2220      	movs	r2, #32
 80021fc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002200:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8002204:	4618      	mov	r0, r3
 8002206:	4770      	bx	lr
  __HAL_LOCK(huart);
 8002208:	2002      	movs	r0, #2
}
 800220a:	4770      	bx	lr

0800220c <HAL_UARTEx_SetTxFifoThreshold>:
{
 800220c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800220e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8002212:	2b01      	cmp	r3, #1
{
 8002214:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8002216:	d01b      	beq.n	8002250 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8002218:	2301      	movs	r3, #1
 800221a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800221e:	2324      	movs	r3, #36	; 0x24
 8002220:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002224:	6803      	ldr	r3, [r0, #0]
 8002226:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8002236:	4311      	orrs	r1, r2
 8002238:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800223a:	f7ff ff81 	bl	8002140 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800223e:	6803      	ldr	r3, [r0, #0]
 8002240:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002242:	2320      	movs	r3, #32
 8002244:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002248:	2000      	movs	r0, #0
 800224a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 800224e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8002250:	2002      	movs	r0, #2
}
 8002252:	bd38      	pop	{r3, r4, r5, pc}

08002254 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8002254:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8002256:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800225a:	2b01      	cmp	r3, #1
{
 800225c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800225e:	d01b      	beq.n	8002298 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8002260:	2301      	movs	r3, #1
 8002262:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8002266:	2324      	movs	r3, #36	; 0x24
 8002268:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800226c:	6803      	ldr	r3, [r0, #0]
 800226e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800227e:	4311      	orrs	r1, r2
 8002280:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002282:	f7ff ff5d 	bl	8002140 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002286:	6803      	ldr	r3, [r0, #0]
 8002288:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800228a:	2320      	movs	r3, #32
 800228c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002290:	2000      	movs	r0, #0
 8002292:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8002296:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8002298:	2002      	movs	r0, #2
}
 800229a:	bd38      	pop	{r3, r4, r5, pc}

0800229c <BLS_Init>:
 800229c:	4770      	bx	lr

0800229e <CRS_STM_Init>:
 800229e:	4770      	bx	lr

080022a0 <DIS_Init>:
 80022a0:	4770      	bx	lr

080022a2 <EDS_STM_Init>:
 80022a2:	4770      	bx	lr

080022a4 <HIDS_Init>:
 80022a4:	4770      	bx	lr

080022a6 <HRS_Init>:
 80022a6:	4770      	bx	lr

080022a8 <HTS_Init>:
 80022a8:	4770      	bx	lr

080022aa <IAS_Init>:
 80022aa:	4770      	bx	lr

080022ac <LLS_Init>:
 80022ac:	4770      	bx	lr

080022ae <TPS_Init>:
 80022ae:	4770      	bx	lr

080022b0 <P2PS_STM_Init>:
 80022b0:	4770      	bx	lr

080022b2 <OTAS_STM_Init>:
 80022b2:	4770      	bx	lr

080022b4 <MESH_Init>:
 80022b4:	4770      	bx	lr

080022b6 <SVCCTL_InitCustomSvc>:
__weak void MESH_Init( void )
{
  return;
}
__weak void SVCCTL_InitCustomSvc( void )
{
 80022b6:	4770      	bx	lr

080022b8 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80022b8:	b508      	push	{r3, lr}
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <SVCCTL_Init+0x48>)
 80022bc:	2200      	movs	r2, #0
 80022be:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80022c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /**
   * Add and Initialize requested services
   */

  BLS_Init();
 80022c4:	f7ff ffea 	bl	800229c <BLS_Init>

  CRS_STM_Init();
 80022c8:	f7ff ffe9 	bl	800229e <CRS_STM_Init>

  DIS_Init();
 80022cc:	f7ff ffe8 	bl	80022a0 <DIS_Init>

  EDS_STM_Init();
 80022d0:	f7ff ffe7 	bl	80022a2 <EDS_STM_Init>

  HIDS_Init();
 80022d4:	f7ff ffe6 	bl	80022a4 <HIDS_Init>

  HRS_Init();
 80022d8:	f7ff ffe5 	bl	80022a6 <HRS_Init>

  HTS_Init();
 80022dc:	f7ff ffe4 	bl	80022a8 <HTS_Init>

  IAS_Init();
 80022e0:	f7ff ffe3 	bl	80022aa <IAS_Init>

  LLS_Init();
 80022e4:	f7ff ffe2 	bl	80022ac <LLS_Init>

  TPS_Init();
 80022e8:	f7ff ffe1 	bl	80022ae <TPS_Init>

  P2PS_STM_Init();
 80022ec:	f7ff ffe0 	bl	80022b0 <P2PS_STM_Init>

  OTAS_STM_Init();
 80022f0:	f7ff ffdf 	bl	80022b2 <OTAS_STM_Init>

  SVCCTL_InitCustomSvc();
 80022f4:	f7ff ffdf 	bl	80022b6 <SVCCTL_InitCustomSvc>
  
  MESH_Init();
 80022f8:	f7ff ffdc 	bl	80022b4 <MESH_Init>
 80022fc:	bd08      	pop	{r3, pc}
 80022fe:	bf00      	nop
 8002300:	20000018 	.word	0x20000018

08002304 <SVCCTL_RegisterCltHandler>:
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <SVCCTL_RegisterCltHandler+0x14>)
 8002306:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800230a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
#endif
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 800230e:	3301      	adds	r3, #1
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 8002310:	6208      	str	r0, [r1, #32]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 8002312:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8002316:	4770      	bx	lr
 8002318:	20000018 	.word	0x20000018

0800231c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800231c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch (event_pckt->evt)
 800231e:	7843      	ldrb	r3, [r0, #1]
 8002320:	2bff      	cmp	r3, #255	; 0xff
{
 8002322:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 8002324:	d106      	bne.n	8002334 <SVCCTL_UserEvtRx+0x18>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*) event_pckt->data;

      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8002326:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 800232a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800232e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002332:	d004      	beq.n	800233e <SVCCTL_UserEvtRx+0x22>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8002334:	4620      	mov	r0, r4
      return_status = SVCCTL_UserEvtFlowEnable;
      break;
  }

  return (return_status);
}
 8002336:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      return_status = SVCCTL_App_Notification(pckt);
 800233a:	f000 bf81 	b.w	8003240 <SVCCTL_App_Notification>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800233e:	4e10      	ldr	r6, [pc, #64]	; (8002380 <SVCCTL_UserEvtRx+0x64>)
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8002340:	2500      	movs	r5, #0
 8002342:	4637      	mov	r7, r6
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8002344:	7f32      	ldrb	r2, [r6, #28]
 8002346:	b2eb      	uxtb	r3, r5
 8002348:	429a      	cmp	r2, r3
 800234a:	d906      	bls.n	800235a <SVCCTL_UserEvtRx+0x3e>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800234c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8002350:	4620      	mov	r0, r4
 8002352:	4798      	blx	r3
 8002354:	3501      	adds	r5, #1
            if (event_notification_status != SVCCTL_EvtNotAck)
 8002356:	2800      	cmp	r0, #0
 8002358:	d0f4      	beq.n	8002344 <SVCCTL_UserEvtRx+0x28>
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800235a:	2500      	movs	r5, #0
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800235c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002360:	b2eb      	uxtb	r3, r5
 8002362:	429a      	cmp	r2, r3
 8002364:	d9e6      	bls.n	8002334 <SVCCTL_UserEvtRx+0x18>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 8002366:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800236a:	4620      	mov	r0, r4
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4798      	blx	r3
 8002370:	3501      	adds	r5, #1
            if (event_notification_status != SVCCTL_EvtNotAck)
 8002372:	2800      	cmp	r0, #0
 8002374:	d0f2      	beq.n	800235c <SVCCTL_UserEvtRx+0x40>
      return_status = SVCCTL_UserEvtFlowEnable;
 8002376:	3802      	subs	r0, #2
 8002378:	bf18      	it	ne
 800237a:	2001      	movne	r0, #1
}
 800237c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800237e:	bf00      	nop
 8002380:	20000018 	.word	0x20000018

08002384 <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8002388:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->IO_Capability = htob(IO_Capability, 1);
 800238a:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800238e:	2218      	movs	r2, #24
 8002390:	4629      	mov	r1, r5
 8002392:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8002394:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002398:	f000 fa84 	bl	80028a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800239c:	233f      	movs	r3, #63	; 0x3f
 800239e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x085;
 80023a2:	2385      	movs	r3, #133	; 0x85
  tBleStatus status = 0;
 80023a4:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x085;
 80023a8:	f8ad 300a 	strh.w	r3, [sp, #10]
  cp0->IO_Capability = htob(IO_Capability, 1);
 80023ac:	ae08      	add	r6, sp, #32
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 80023ae:	2301      	movs	r3, #1
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 80023b0:	4629      	mov	r1, r5
 80023b2:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 80023b4:	9604      	str	r6, [sp, #16]
  rq.clen = index_input;
 80023b6:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 80023b8:	9406      	str	r4, [sp, #24]
  rq.rlen = 1;
 80023ba:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80023bc:	f000 fb00 	bl	80029c0 <hci_send_req>
 80023c0:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80023c2:	bfac      	ite	ge
 80023c4:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 80023c6:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80023c8:	b048      	add	sp, #288	; 0x120
 80023ca:	bd70      	pop	{r4, r5, r6, pc}

080023cc <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 80023cc:	b570      	push	{r4, r5, r6, lr}
 80023ce:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80023d0:	2600      	movs	r6, #0
  index_input += 1;
  cp0->MITM_Mode = htob(MITM_Mode, 1);
  index_input += 1;
  cp0->SC_Support = htob(SC_Support, 1);
  index_input += 1;
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 80023d2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  index_input += 1;
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 80023d6:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
 80023da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 80023de:	f89d 3134 	ldrb.w	r3, [sp, #308]	; 0x134
 80023e2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  index_input += 1;
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 80023e6:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 80023ea:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  index_input += 1;
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 80023ee:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 80023f0:	f88d 0020 	strb.w	r0, [sp, #32]
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 80023f4:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  cp0->SC_Support = htob(SC_Support, 1);
 80023f8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 80023fc:	f8cd 3027 	str.w	r3, [sp, #39]	; 0x27
  index_input += 4;
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002400:	2218      	movs	r2, #24
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8002402:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
 8002406:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  Osal_MemSet(&rq, 0, sizeof(rq));
 800240a:	4631      	mov	r1, r6
 800240c:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 800240e:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002412:	f000 fa47 	bl	80028a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8002416:	233f      	movs	r3, #63	; 0x3f
 8002418:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x086;
 800241c:	2386      	movs	r3, #134	; 0x86
 800241e:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8002422:	230c      	movs	r3, #12
  tBleStatus status = 0;
 8002424:	f10d 0507 	add.w	r5, sp, #7
  rq.clen = index_input;
 8002428:	9305      	str	r3, [sp, #20]
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800242a:	ac08      	add	r4, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
 800242c:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800242e:	4631      	mov	r1, r6
 8002430:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8002432:	9404      	str	r4, [sp, #16]
  rq.rparam = &status;
 8002434:	9506      	str	r5, [sp, #24]
  rq.rlen = 1;
 8002436:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002438:	f000 fac2 	bl	80029c0 <hci_send_req>
 800243c:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800243e:	bfac      	ite	ge
 8002440:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8002442:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8002444:	b048      	add	sp, #288	; 0x120
 8002446:	bd70      	pop	{r4, r5, r6, pc}

08002448 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8002448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800244c:	b0c8      	sub	sp, #288	; 0x120
 800244e:	4680      	mov	r8, r0
 8002450:	460f      	mov	r7, r1
 8002452:	4616      	mov	r6, r2
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8002454:	2100      	movs	r1, #0
 8002456:	2207      	movs	r2, #7
 8002458:	4668      	mov	r0, sp
{
 800245a:	461d      	mov	r5, r3
  Osal_MemSet(&resp, 0, sizeof(resp));
 800245c:	f000 fa22 	bl	80028a4 <Osal_MemSet>
  index_input += 1;
  cp0->privacy_enabled = htob(privacy_enabled, 1);
  index_input += 1;
  cp0->device_name_char_len = htob(device_name_char_len, 1);
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002460:	2218      	movs	r2, #24
 8002462:	2100      	movs	r1, #0
 8002464:	a802      	add	r0, sp, #8
  cp0->Role = htob(Role, 1);
 8002466:	f88d 8020 	strb.w	r8, [sp, #32]
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800246a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800246e:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002472:	f000 fa17 	bl	80028a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8002476:	233f      	movs	r3, #63	; 0x3f
 8002478:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x08a;
 800247c:	238a      	movs	r3, #138	; 0x8a
 800247e:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8002482:	2303      	movs	r3, #3
 8002484:	9305      	str	r3, [sp, #20]
  cp0->Role = htob(Role, 1);
 8002486:	ac08      	add	r4, sp, #32
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8002488:	2307      	movs	r3, #7
  if (hci_send_req(&rq, FALSE) < 0)
 800248a:	2100      	movs	r1, #0
 800248c:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 800248e:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 8002490:	f8cd d018 	str.w	sp, [sp, #24]
  rq.rlen = sizeof(resp);
 8002494:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002496:	f000 fa93 	bl	80029c0 <hci_send_req>
 800249a:	2800      	cmp	r0, #0
 800249c:	db16      	blt.n	80024cc <aci_gap_init+0x84>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) 
 800249e:	f89d 0000 	ldrb.w	r0, [sp]
 80024a2:	b980      	cbnz	r0, 80024c6 <aci_gap_init+0x7e>
  {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80024a4:	9a00      	ldr	r2, [sp, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 80024a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80024aa:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80024ae:	802a      	strh	r2, [r5, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 80024b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80024b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024b8:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 80024ba:	8013      	strh	r3, [r2, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 80024bc:	9b01      	ldr	r3, [sp, #4]
 80024be:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 80024c0:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80024c4:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 80024c6:	b048      	add	sp, #288	; 0x120
 80024c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 80024cc:	20ff      	movs	r0, #255	; 0xff
 80024ce:	e7fa      	b.n	80024c6 <aci_gap_init+0x7e>

080024d0 <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 80024d0:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 80024d2:	2400      	movs	r4, #0
{
 80024d4:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 80024d6:	2218      	movs	r2, #24
 80024d8:	4621      	mov	r1, r4
 80024da:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 80024dc:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80024e0:	f000 f9e0 	bl	80028a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80024e4:	233f      	movs	r3, #63	; 0x3f
 80024e6:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x092;
 80024ea:	2392      	movs	r3, #146	; 0x92
 80024ec:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 80024f0:	f10d 0307 	add.w	r3, sp, #7
 80024f4:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 80024f6:	4621      	mov	r1, r4
  rq.rlen = 1;
 80024f8:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80024fa:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80024fc:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80024fe:	f000 fa5f 	bl	80029c0 <hci_send_req>
 8002502:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8002504:	bfac      	ite	ge
 8002506:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800250a:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800250c:	b008      	add	sp, #32
 800250e:	bd10      	pop	{r4, pc}

08002510 <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8002514:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8002516:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800251a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800251e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002522:	4631      	mov	r1, r6
 8002524:	2218      	movs	r2, #24
 8002526:	a802      	add	r0, sp, #8
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 8002528:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  tBleStatus status = 0;
 800252c:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002530:	f000 f9b8 	bl	80028a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8002534:	233f      	movs	r3, #63	; 0x3f
 8002536:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x097;
 800253a:	2397      	movs	r3, #151	; 0x97
 800253c:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.event = 0x0F;
 8002540:	230f      	movs	r3, #15
 8002542:	9303      	str	r3, [sp, #12]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8002544:	2306      	movs	r3, #6
  tBleStatus status = 0;
 8002546:	f10d 0507 	add.w	r5, sp, #7
  rq.clen = index_input;
 800254a:	9305      	str	r3, [sp, #20]
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800254c:	ac08      	add	r4, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
 800254e:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8002550:	4631      	mov	r1, r6
 8002552:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8002554:	9404      	str	r4, [sp, #16]
  rq.rparam = &status;
 8002556:	9506      	str	r5, [sp, #24]
  rq.rlen = 1;
 8002558:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800255a:	f000 fa31 	bl	80029c0 <hci_send_req>
 800255e:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8002560:	bfac      	ite	ge
 8002562:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8002564:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8002566:	b048      	add	sp, #288	; 0x120
 8002568:	bd70      	pop	{r4, r5, r6, pc}

0800256a <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 800256a:	b570      	push	{r4, r5, r6, lr}
 800256c:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  int index_input = 0;
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800256e:	ac08      	add	r4, sp, #32
  tBleStatus status = 0;
 8002570:	2600      	movs	r6, #0
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8002572:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8002576:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 800257a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 800257e:	4619      	mov	r1, r3
 8002580:	2206      	movs	r2, #6
 8002582:	f10d 0025 	add.w	r0, sp, #37	; 0x25
  tBleStatus status = 0;
 8002586:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 800258a:	f000 f989 	bl	80028a0 <Osal_MemCpy>
  index_input += 6;
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800258e:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
 8002592:	72e3      	strb	r3, [r4, #11]
  index_input += 1;
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 8002594:	f8bd 3134 	ldrh.w	r3, [sp, #308]	; 0x134
 8002598:	81a3      	strh	r3, [r4, #12]
  index_input += 2;
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 800259a:	f8bd 3138 	ldrh.w	r3, [sp, #312]	; 0x138
 800259e:	81e3      	strh	r3, [r4, #14]
  index_input += 2;
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 80025a0:	f8bd 313c 	ldrh.w	r3, [sp, #316]	; 0x13c
 80025a4:	8223      	strh	r3, [r4, #16]
  index_input += 2;
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 80025a6:	f8bd 3140 	ldrh.w	r3, [sp, #320]	; 0x140
 80025aa:	8263      	strh	r3, [r4, #18]
  index_input += 2;
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 80025ac:	f8bd 3144 	ldrh.w	r3, [sp, #324]	; 0x144
 80025b0:	82a3      	strh	r3, [r4, #20]
  index_input += 2;
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 80025b2:	2218      	movs	r2, #24
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 80025b4:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
 80025b8:	82e3      	strh	r3, [r4, #22]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80025ba:	4631      	mov	r1, r6
 80025bc:	a802      	add	r0, sp, #8
 80025be:	f000 f971 	bl	80028a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80025c2:	233f      	movs	r3, #63	; 0x3f
 80025c4:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x09c;
 80025c8:	239c      	movs	r3, #156	; 0x9c
 80025ca:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.event = 0x0F;
 80025ce:	230f      	movs	r3, #15
 80025d0:	9303      	str	r3, [sp, #12]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 80025d2:	2318      	movs	r3, #24
  tBleStatus status = 0;
 80025d4:	f10d 0507 	add.w	r5, sp, #7
  rq.clen = index_input;
 80025d8:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 80025da:	4631      	mov	r1, r6
  rq.rlen = 1;
 80025dc:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80025de:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 80025e0:	9404      	str	r4, [sp, #16]
  rq.rparam = &status;
 80025e2:	9506      	str	r5, [sp, #24]
  rq.rlen = 1;
 80025e4:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80025e6:	f000 f9eb 	bl	80029c0 <hci_send_req>
 80025ea:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80025ec:	bfac      	ite	ge
 80025ee:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 80025f0:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80025f2:	b048      	add	sp, #288	; 0x120
 80025f4:	bd70      	pop	{r4, r5, r6, pc}

080025f6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 80025f6:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 80025f8:	2400      	movs	r4, #0
{
 80025fa:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 80025fc:	2218      	movs	r2, #24
 80025fe:	4621      	mov	r1, r4
 8002600:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8002602:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002606:	f000 f94d 	bl	80028a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800260a:	233f      	movs	r3, #63	; 0x3f
 800260c:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x101;
 8002610:	f240 1301 	movw	r3, #257	; 0x101
 8002614:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8002618:	f10d 0307 	add.w	r3, sp, #7
 800261c:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800261e:	4621      	mov	r1, r4
  rq.rlen = 1;
 8002620:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8002622:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8002624:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002626:	f000 f9cb 	bl	80029c0 <hci_send_req>
 800262a:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800262c:	bfac      	ite	ge
 800262e:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8002632:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8002634:	b008      	add	sp, #32
 8002636:	bd10      	pop	{r4, pc}

08002638 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8002638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263a:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800263c:	2700      	movs	r7, #0
  int index_input = 0;
  cp0->Service_Handle = htob(Service_Handle, 2);
 800263e:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Char_Handle = htob(Char_Handle, 2);
 8002642:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Val_Offset = htob(Val_Offset, 1);
 8002646:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800264a:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800264c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8002650:	461a      	mov	r2, r3
 8002652:	f10d 0026 	add.w	r0, sp, #38	; 0x26
{
 8002656:	461c      	mov	r4, r3
  tBleStatus status = 0;
 8002658:	f88d 7007 	strb.w	r7, [sp, #7]
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800265c:	f000 f920 	bl	80028a0 <Osal_MemCpy>
  index_input += Char_Value_Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002660:	2218      	movs	r2, #24
 8002662:	4639      	mov	r1, r7
 8002664:	a802      	add	r0, sp, #8
 8002666:	f000 f91d 	bl	80028a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800266a:	233f      	movs	r3, #63	; 0x3f
 800266c:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x106;
 8002670:	f44f 7383 	mov.w	r3, #262	; 0x106
  tBleStatus status = 0;
 8002674:	f10d 0607 	add.w	r6, sp, #7
  rq.ocf = 0x106;
 8002678:	f8ad 300a 	strh.w	r3, [sp, #10]
  cp0->Service_Handle = htob(Service_Handle, 2);
 800267c:	ad08      	add	r5, sp, #32
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800267e:	2301      	movs	r3, #1
  index_input += Char_Value_Length;
 8002680:	3406      	adds	r4, #6
  if (hci_send_req(&rq, FALSE) < 0)
 8002682:	4639      	mov	r1, r7
 8002684:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8002686:	9504      	str	r5, [sp, #16]
  rq.clen = index_input;
 8002688:	9405      	str	r4, [sp, #20]
  rq.rparam = &status;
 800268a:	9606      	str	r6, [sp, #24]
  rq.rlen = 1;
 800268c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800268e:	f000 f997 	bl	80029c0 <hci_send_req>
 8002692:	42b8      	cmp	r0, r7
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8002694:	bfac      	ite	ge
 8002696:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 8002698:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800269a:	b049      	add	sp, #292	; 0x124
 800269c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800269e <aci_gatt_disc_all_primary_services>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gatt_disc_all_primary_services(uint16_t Connection_Handle)
{
 800269e:	b570      	push	{r4, r5, r6, lr}
 80026a0:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80026a2:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80026a4:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 80026a8:	2218      	movs	r2, #24
 80026aa:	4629      	mov	r1, r5
 80026ac:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 80026ae:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80026b2:	f000 f8f7 	bl	80028a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80026b6:	233f      	movs	r3, #63	; 0x3f
 80026b8:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x112;
 80026bc:	f44f 7389 	mov.w	r3, #274	; 0x112
 80026c0:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.event = 0x0F;
 80026c4:	230f      	movs	r3, #15
 80026c6:	9303      	str	r3, [sp, #12]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 80026c8:	2302      	movs	r3, #2
  tBleStatus status = 0;
 80026ca:	f10d 0407 	add.w	r4, sp, #7
  rq.clen = index_input;
 80026ce:	9305      	str	r3, [sp, #20]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80026d0:	ae08      	add	r6, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
 80026d2:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80026d4:	4629      	mov	r1, r5
 80026d6:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 80026d8:	9604      	str	r6, [sp, #16]
  rq.rparam = &status;
 80026da:	9406      	str	r4, [sp, #24]
  rq.rlen = 1;
 80026dc:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80026de:	f000 f96f 	bl	80029c0 <hci_send_req>
 80026e2:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80026e4:	bfac      	ite	ge
 80026e6:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 80026e8:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80026ea:	b048      	add	sp, #288	; 0x120
 80026ec:	bd70      	pop	{r4, r5, r6, pc}

080026ee <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 80026ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f0:	b0c9      	sub	sp, #292	; 0x124
 80026f2:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80026f4:	2600      	movs	r6, #0
{
 80026f6:	4611      	mov	r1, r2
  int index_input = 0;
  cp0->Offset = htob(Offset, 1);
 80026f8:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->Length = htob(Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 80026fc:	4622      	mov	r2, r4
 80026fe:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  cp0->Length = htob(Length, 1);
 8002702:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  tBleStatus status = 0;
 8002706:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800270a:	f000 f8c9 	bl	80028a0 <Osal_MemCpy>
  index_input += Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800270e:	2218      	movs	r2, #24
 8002710:	4631      	mov	r1, r6
 8002712:	a802      	add	r0, sp, #8
 8002714:	f000 f8c6 	bl	80028a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8002718:	233f      	movs	r3, #63	; 0x3f
 800271a:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x00c;
 800271e:	230c      	movs	r3, #12
  tBleStatus status = 0;
 8002720:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x00c;
 8002724:	f8ad 300a 	strh.w	r3, [sp, #10]
  cp0->Offset = htob(Offset, 1);
 8002728:	af08      	add	r7, sp, #32
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800272a:	2301      	movs	r3, #1
  index_input += Length;
 800272c:	3402      	adds	r4, #2
  if (hci_send_req(&rq, FALSE) < 0)
 800272e:	4631      	mov	r1, r6
 8002730:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8002732:	9704      	str	r7, [sp, #16]
  rq.clen = index_input;
 8002734:	9405      	str	r4, [sp, #20]
  rq.rparam = &status;
 8002736:	9506      	str	r5, [sp, #24]
  rq.rlen = 1;
 8002738:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800273a:	f000 f941 	bl	80029c0 <hci_send_req>
 800273e:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8002740:	bfac      	ite	ge
 8002742:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8002744:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8002746:	b049      	add	sp, #292	; 0x124
 8002748:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800274a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800274a:	b570      	push	{r4, r5, r6, lr}
 800274c:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800274e:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->En_High_Power = htob(En_High_Power, 1);
 8002750:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->PA_Level = htob(PA_Level, 1);
 8002754:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002758:	2218      	movs	r2, #24
 800275a:	4629      	mov	r1, r5
 800275c:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 800275e:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002762:	f000 f89f 	bl	80028a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8002766:	233f      	movs	r3, #63	; 0x3f
 8002768:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x00f;
 800276c:	230f      	movs	r3, #15
 800276e:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8002772:	2302      	movs	r3, #2
  tBleStatus status = 0;
 8002774:	f10d 0407 	add.w	r4, sp, #7
  rq.clen = index_input;
 8002778:	9305      	str	r3, [sp, #20]
  cp0->En_High_Power = htob(En_High_Power, 1);
 800277a:	ae08      	add	r6, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
 800277c:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800277e:	4629      	mov	r1, r5
 8002780:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8002782:	9604      	str	r6, [sp, #16]
  rq.rparam = &status;
 8002784:	9406      	str	r4, [sp, #24]
  rq.rlen = 1;
 8002786:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002788:	f000 f91a 	bl	80029c0 <hci_send_req>
 800278c:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800278e:	bfac      	ite	ge
 8002790:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8002792:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8002794:	b048      	add	sp, #288	; 0x120
 8002796:	bd70      	pop	{r4, r5, r6, pc}

08002798 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 8002798:	b570      	push	{r4, r5, r6, lr}
 800279a:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800279c:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800279e:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 80027a2:	2218      	movs	r2, #24
 80027a4:	4629      	mov	r1, r5
 80027a6:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 80027a8:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80027ac:	f000 f87a 	bl	80028a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80027b0:	233f      	movs	r3, #63	; 0x3f
 80027b2:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x018;
 80027b6:	2318      	movs	r3, #24
 80027b8:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 80027bc:	2302      	movs	r3, #2
  tBleStatus status = 0;
 80027be:	f10d 0407 	add.w	r4, sp, #7
  rq.clen = index_input;
 80027c2:	9305      	str	r3, [sp, #20]
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 80027c4:	ae08      	add	r6, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
 80027c6:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80027c8:	4629      	mov	r1, r5
 80027ca:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 80027cc:	9604      	str	r6, [sp, #16]
  rq.rparam = &status;
 80027ce:	9406      	str	r4, [sp, #24]
  rq.rlen = 1;
 80027d0:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80027d2:	f000 f8f5 	bl	80029c0 <hci_send_req>
 80027d6:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80027d8:	bfac      	ite	ge
 80027da:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 80027dc:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80027de:	b048      	add	sp, #288	; 0x120
 80027e0:	bd70      	pop	{r4, r5, r6, pc}

080027e2 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 80027e2:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 80027e4:	2400      	movs	r4, #0
{
 80027e6:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 80027e8:	2218      	movs	r2, #24
 80027ea:	4621      	mov	r1, r4
 80027ec:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 80027ee:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80027f2:	f000 f857 	bl	80028a4 <Osal_MemSet>
  rq.ogf = 0x03;
 80027f6:	2303      	movs	r3, #3
 80027f8:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x003;
 80027fc:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8002800:	f10d 0307 	add.w	r3, sp, #7
 8002804:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8002806:	4621      	mov	r1, r4
  rq.rlen = 1;
 8002808:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800280a:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800280c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800280e:	f000 f8d7 	bl	80029c0 <hci_send_req>
 8002812:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8002814:	bfac      	ite	ge
 8002816:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800281a:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800281c:	b008      	add	sp, #32
 800281e:	bd10      	pop	{r4, pc}

08002820 <aci_l2cap_connection_parameter_update_resp>:
                                                      uint16_t Timeout_Multiplier,
                                                      uint16_t Minimum_CE_Length,
                                                      uint16_t Maximum_CE_Length,
                                                      uint8_t Identifier,
                                                      uint8_t Accept)
{
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8002824:	2600      	movs	r6, #0
  index_input += 2;
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
  index_input += 2;
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
  index_input += 2;
  cp0->Slave_latency = htob(Slave_latency, 2);
 8002826:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  index_input += 2;
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
 800282a:	f8bd 3130 	ldrh.w	r3, [sp, #304]	; 0x130
 800282e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  index_input += 2;
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 8002832:	f8bd 3134 	ldrh.w	r3, [sp, #308]	; 0x134
 8002836:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  index_input += 2;
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 800283a:	f8bd 3138 	ldrh.w	r3, [sp, #312]	; 0x138
 800283e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  index_input += 2;
  cp0->Identifier = htob(Identifier, 1);
 8002842:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8002846:	f8ad 0020 	strh.w	r0, [sp, #32]
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800284a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 800284e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
  cp0->Identifier = htob(Identifier, 1);
 8002852:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  index_input += 1;
  cp0->Accept = htob(Accept, 1);
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002856:	2218      	movs	r2, #24
  cp0->Accept = htob(Accept, 1);
 8002858:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
 800285c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002860:	4631      	mov	r1, r6
 8002862:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8002864:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002868:	f000 f81c 	bl	80028a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800286c:	233f      	movs	r3, #63	; 0x3f
 800286e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x182;
 8002872:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8002876:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800287a:	2310      	movs	r3, #16
  tBleStatus status = 0;
 800287c:	f10d 0507 	add.w	r5, sp, #7
  rq.clen = index_input;
 8002880:	9305      	str	r3, [sp, #20]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8002882:	ac08      	add	r4, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
 8002884:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8002886:	4631      	mov	r1, r6
 8002888:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 800288a:	9404      	str	r4, [sp, #16]
  rq.rparam = &status;
 800288c:	9506      	str	r5, [sp, #24]
  rq.rlen = 1;
 800288e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002890:	f000 f896 	bl	80029c0 <hci_send_req>
 8002894:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8002896:	bfac      	ite	ge
 8002898:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 800289a:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800289c:	b048      	add	sp, #288	; 0x120
 800289e:	bd70      	pop	{r4, r5, r6, pc}

080028a0 <Osal_MemCpy>:
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
  return memcpy( dest, src, size ); 
 80028a0:	f001 ba12 	b.w	8003cc8 <memcpy>

080028a4 <Osal_MemSet>:
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
  return memset( ptr, value, size );
 80028a4:	f001 ba1b 	b.w	8003cde <memset>

080028a8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80028a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

 ((TL_CmdPacket_t *)pCmdPacket)->cmdserial.cmd.cmdcode = SHCI_OPCODE_C2_BLE_INIT;
 80028aa:	2266      	movs	r2, #102	; 0x66
 80028ac:	7242      	strb	r2, [r0, #9]
 80028ae:	f06f 0203 	mvn.w	r2, #3
 80028b2:	7282      	strb	r2, [r0, #10]

 ((TL_CmdPacket_t *)pCmdPacket)->cmdserial.cmd.plen = sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ) ;
 80028b4:	2221      	movs	r2, #33	; 0x21
 80028b6:	72c2      	strb	r2, [r0, #11]

  shci_send( (TL_CmdPacket_t *)pCmdPacket, p_rsp );
 80028b8:	4669      	mov	r1, sp
 80028ba:	f000 f955 	bl	8002b68 <shci_send>

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 80028be:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80028c2:	b005      	add	sp, #20
 80028c4:	f85d fb04 	ldr.w	pc, [sp], #4

080028c8 <TlEvtReceived>:

  return;
}

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80028c8:	b508      	push	{r3, lr}
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80028ca:	7a43      	ldrb	r3, [r0, #9]
 80028cc:	3b0e      	subs	r3, #14
 80028ce:	2b01      	cmp	r3, #1
{
 80028d0:	4601      	mov	r1, r0
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80028d2:	d807      	bhi.n	80028e4 <TlEvtReceived+0x1c>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80028d4:	4807      	ldr	r0, [pc, #28]	; (80028f4 <TlEvtReceived+0x2c>)
 80028d6:	f000 fb58 	bl	8002f8a <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80028da:	2000      	movs	r0, #0
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
  }

  return;
}
 80028dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80028e0:	f000 bd40 	b.w	8003364 <hci_cmd_resp_release>
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80028e4:	4804      	ldr	r0, [pc, #16]	; (80028f8 <TlEvtReceived+0x30>)
 80028e6:	f000 fb50 	bl	8002f8a <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80028ea:	4803      	ldr	r0, [pc, #12]	; (80028f8 <TlEvtReceived+0x30>)
}
 80028ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80028f0:	f000 bd34 	b.w	800335c <hci_notify_asynch_evt>
 80028f4:	200001c4 	.word	0x200001c4
 80028f8:	20000040 	.word	0x20000040

080028fc <Cmd_SetStatus.constprop.2>:
    HCICmdStatus = HCI_TL_CmdAvailable;
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <Cmd_SetStatus.constprop.2+0x10>)
 80028fe:	2001      	movs	r0, #1
 8002900:	7218      	strb	r0, [r3, #8]
    if(StatusNotCallBackFunction != 0)
 8002902:	4b03      	ldr	r3, [pc, #12]	; (8002910 <Cmd_SetStatus.constprop.2+0x14>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	b103      	cbz	r3, 800290a <Cmd_SetStatus.constprop.2+0xe>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8002908:	4718      	bx	r3
 800290a:	4770      	bx	lr
 800290c:	20000040 	.word	0x20000040
 8002910:	200001cc 	.word	0x200001cc

08002914 <hci_init>:
{
 8002914:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  hciContext.UserEvtRx = UserEvtRx;
 8002916:	4c10      	ldr	r4, [pc, #64]	; (8002958 <hci_init+0x44>)
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <hci_init+0x48>)
 800291a:	684a      	ldr	r2, [r1, #4]
  hciContext.UserEvtRx = UserEvtRx;
 800291c:	61e0      	str	r0, [r4, #28]
{
 800291e:	460d      	mov	r5, r1
  hci_register_io_bus (&hciContext.io);
 8002920:	4620      	mov	r0, r4
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8002922:	601a      	str	r2, [r3, #0]
  hci_register_io_bus (&hciContext.io);
 8002924:	f000 f94e 	bl	8002bc4 <hci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8002928:	682e      	ldr	r6, [r5, #0]
  pCmdBuffer = p_cmdbuffer;
 800292a:	4d0d      	ldr	r5, [pc, #52]	; (8002960 <hci_init+0x4c>)
  LST_init_head (&HciCmdEventQueue);
 800292c:	480d      	ldr	r0, [pc, #52]	; (8002964 <hci_init+0x50>)
 800292e:	f000 fb13 	bl	8002f58 <LST_init_head>
  LST_init_head (&HciAsynchEventQueue);
 8002932:	4628      	mov	r0, r5
  pCmdBuffer = p_cmdbuffer;
 8002934:	60ee      	str	r6, [r5, #12]
  LST_init_head (&HciAsynchEventQueue);
 8002936:	f000 fb0f 	bl	8002f58 <LST_init_head>
  Cmd_SetStatus(HCI_TL_CmdAvailable);
 800293a:	f7ff ffdf 	bl	80028fc <Cmd_SetStatus.constprop.2>
  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800293e:	2301      	movs	r3, #1
 8002940:	742b      	strb	r3, [r5, #16]
  if (hciContext.io.Init)
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	b12b      	cbz	r3, 8002952 <hci_init+0x3e>
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8002946:	a804      	add	r0, sp, #16
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <hci_init+0x54>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800294a:	9602      	str	r6, [sp, #8]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800294c:	f840 2d10 	str.w	r2, [r0, #-16]!
    hciContext.io.Init(&Conf);
 8002950:	4798      	blx	r3
}
 8002952:	b004      	add	sp, #16
 8002954:	bd70      	pop	{r4, r5, r6, pc}
 8002956:	bf00      	nop
 8002958:	200001d0 	.word	0x200001d0
 800295c:	200001cc 	.word	0x200001cc
 8002960:	20000040 	.word	0x20000040
 8002964:	200001c4 	.word	0x200001c4
 8002968:	080028c9 	.word	0x080028c9

0800296c <hci_user_evt_proc>:
{
 800296c:	b530      	push	{r4, r5, lr}
  while((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800296e:	4c12      	ldr	r4, [pc, #72]	; (80029b8 <hci_user_evt_proc+0x4c>)
    if (hciContext.UserEvtRx != NULL)
 8002970:	4d12      	ldr	r5, [pc, #72]	; (80029bc <hci_user_evt_proc+0x50>)
{
 8002972:	b085      	sub	sp, #20
  while((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8002974:	4810      	ldr	r0, [pc, #64]	; (80029b8 <hci_user_evt_proc+0x4c>)
 8002976:	f000 faf2 	bl	8002f5e <LST_is_empty>
 800297a:	b908      	cbnz	r0, 8002980 <hci_user_evt_proc+0x14>
 800297c:	7c23      	ldrb	r3, [r4, #16]
 800297e:	b90b      	cbnz	r3, 8002984 <hci_user_evt_proc+0x18>
}
 8002980:	b005      	add	sp, #20
 8002982:	bd30      	pop	{r4, r5, pc}
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8002984:	a901      	add	r1, sp, #4
 8002986:	4620      	mov	r0, r4
 8002988:	f000 fb16 	bl	8002fb8 <LST_remove_head>
    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800298c:	2301      	movs	r3, #1
 800298e:	7423      	strb	r3, [r4, #16]
    if (hciContext.UserEvtRx != NULL)
 8002990:	69eb      	ldr	r3, [r5, #28]
 8002992:	b133      	cbz	r3, 80029a2 <hci_user_evt_proc+0x36>
      UserEvtRxParam.pckt = phcievtbuffer;
 8002994:	9a01      	ldr	r2, [sp, #4]
 8002996:	9203      	str	r2, [sp, #12]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8002998:	a802      	add	r0, sp, #8
 800299a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800299c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80029a0:	7423      	strb	r3, [r4, #16]
    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80029a2:	7c23      	ldrb	r3, [r4, #16]
 80029a4:	b11b      	cbz	r3, 80029ae <hci_user_evt_proc+0x42>
      TL_MM_EvtDone( phcievtbuffer );
 80029a6:	9801      	ldr	r0, [sp, #4]
 80029a8:	f000 f9cc 	bl	8002d44 <TL_MM_EvtDone>
 80029ac:	e7e2      	b.n	8002974 <hci_user_evt_proc+0x8>
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80029ae:	9901      	ldr	r1, [sp, #4]
 80029b0:	4620      	mov	r0, r4
 80029b2:	f000 fade 	bl	8002f72 <LST_insert_head>
 80029b6:	e7dd      	b.n	8002974 <hci_user_evt_proc+0x8>
 80029b8:	20000040 	.word	0x20000040
 80029bc:	200001d0 	.word	0x200001d0

080029c0 <hci_send_req>:
    if(StatusNotCallBackFunction != 0)
 80029c0:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <hci_send_req+0xb4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
{
 80029c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80029c8:	4605      	mov	r5, r0
    if(StatusNotCallBackFunction != 0)
 80029ca:	b10b      	cbz	r3, 80029d0 <hci_send_req+0x10>
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80029cc:	2000      	movs	r0, #0
 80029ce:	4798      	blx	r3
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80029d0:	886c      	ldrh	r4, [r5, #2]
 80029d2:	882b      	ldrh	r3, [r5, #0]
    HCICmdStatus = HCI_TL_CmdBusy;
 80029d4:	4f28      	ldr	r7, [pc, #160]	; (8002a78 <hci_send_req+0xb8>)
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80029d6:	68ea      	ldr	r2, [r5, #12]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80029d8:	68f8      	ldr	r0, [r7, #12]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80029da:	68a9      	ldr	r1, [r5, #8]
 80029dc:	72c2      	strb	r2, [r0, #11]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80029de:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80029e2:	ea44 2483 	orr.w	r4, r4, r3, lsl #10
 80029e6:	b2a4      	uxth	r4, r4
    HCICmdStatus = HCI_TL_CmdBusy;
 80029e8:	2600      	movs	r6, #0
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80029ea:	f8a0 4009 	strh.w	r4, [r0, #9]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	300c      	adds	r0, #12
    HCICmdStatus = HCI_TL_CmdBusy;
 80029f2:	723e      	strb	r6, [r7, #8]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80029f4:	f001 f968 	bl	8003cc8 <memcpy>
  hciContext.io.Send(0,0);
 80029f8:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <hci_send_req+0xbc>)
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80029fa:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8002a80 <hci_send_req+0xc0>
  hciContext.io.Send(0,0);
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	4631      	mov	r1, r6
 8002a02:	4630      	mov	r0, r6
 8002a04:	4798      	blx	r3
  return HCICmdStatus;
 8002a06:	7a3b      	ldrb	r3, [r7, #8]
  while(CmdGetStatus() == HCI_TL_CmdBusy)
 8002a08:	b11b      	cbz	r3, 8002a12 <hci_send_req+0x52>
}
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	b002      	add	sp, #8
 8002a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8002a12:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8002a16:	f000 fca8 	bl	800336a <hci_cmd_resp_wait>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8002a1a:	4640      	mov	r0, r8
 8002a1c:	f000 fa9f 	bl	8002f5e <LST_is_empty>
 8002a20:	2800      	cmp	r0, #0
 8002a22:	d1f0      	bne.n	8002a06 <hci_send_req+0x46>
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8002a24:	a901      	add	r1, sp, #4
 8002a26:	4640      	mov	r0, r8
 8002a28:	f000 fac6 	bl	8002fb8 <LST_remove_head>
      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8002a2c:	9e01      	ldr	r6, [sp, #4]
 8002a2e:	7a73      	ldrb	r3, [r6, #9]
 8002a30:	2b0f      	cmp	r3, #15
 8002a32:	d10c      	bne.n	8002a4e <hci_send_req+0x8e>
        if(pcommand_status_event->cmdcode == opcode)
 8002a34:	f8b6 300d 	ldrh.w	r3, [r6, #13]
 8002a38:	42a3      	cmp	r3, r4
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8002a3a:	bf02      	ittt	eq
 8002a3c:	692b      	ldreq	r3, [r5, #16]
 8002a3e:	7af2      	ldrbeq	r2, [r6, #11]
 8002a40:	701a      	strbeq	r2, [r3, #0]
        if(pcommand_status_event->numcmd != 0)
 8002a42:	7b33      	ldrb	r3, [r6, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0e8      	beq.n	8002a1a <hci_send_req+0x5a>
          Cmd_SetStatus(HCI_TL_CmdAvailable);
 8002a48:	f7ff ff58 	bl	80028fc <Cmd_SetStatus.constprop.2>
 8002a4c:	e7e5      	b.n	8002a1a <hci_send_req+0x5a>
        if(pcommand_complete_event->cmdcode == opcode)
 8002a4e:	89b3      	ldrh	r3, [r6, #12]
 8002a50:	42a3      	cmp	r3, r4
 8002a52:	d10c      	bne.n	8002a6e <hci_send_req+0xae>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8002a54:	7ab2      	ldrb	r2, [r6, #10]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8002a56:	696b      	ldr	r3, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8002a58:	6928      	ldr	r0, [r5, #16]
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8002a5a:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	bfa8      	it	ge
 8002a62:	461a      	movge	r2, r3
 8002a64:	616a      	str	r2, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8002a66:	f106 010e 	add.w	r1, r6, #14
 8002a6a:	f001 f92d 	bl	8003cc8 <memcpy>
        if(pcommand_complete_event->numcmd != 0)
 8002a6e:	7af3      	ldrb	r3, [r6, #11]
 8002a70:	e7e8      	b.n	8002a44 <hci_send_req+0x84>
 8002a72:	bf00      	nop
 8002a74:	200001cc 	.word	0x200001cc
 8002a78:	20000040 	.word	0x20000040
 8002a7c:	200001d0 	.word	0x200001d0
 8002a80:	200001c4 	.word	0x200001c4

08002a84 <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8002a84:	b510      	push	{r4, lr}
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8002a86:	4c05      	ldr	r4, [pc, #20]	; (8002a9c <TlUserEvtReceived+0x18>)
 8002a88:	4601      	mov	r1, r0
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f000 fa7d 	bl	8002f8a <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8002a90:	4620      	mov	r0, r4

  return;
}
 8002a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8002a96:	f000 bcbc 	b.w	8003412 <shci_notify_asynch_evt>
 8002a9a:	bf00      	nop
 8002a9c:	20000054 	.word	0x20000054

08002aa0 <TlCmdEvtReceived>:
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f000 bcba 	b.w	800341a <shci_cmd_resp_release>
	...

08002aa8 <Cmd_SetStatus.constprop.1>:
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <Cmd_SetStatus.constprop.1+0x10>)
 8002aaa:	2001      	movs	r0, #1
 8002aac:	7218      	strb	r0, [r3, #8]
    if(StatusNotCallBackFunction != 0)
 8002aae:	4b03      	ldr	r3, [pc, #12]	; (8002abc <Cmd_SetStatus.constprop.1+0x14>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	b103      	cbz	r3, 8002ab6 <Cmd_SetStatus.constprop.1+0xe>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8002ab4:	4718      	bx	r3
 8002ab6:	4770      	bx	lr
 8002ab8:	20000054 	.word	0x20000054
 8002abc:	200001f0 	.word	0x200001f0

08002ac0 <shci_init>:
{
 8002ac0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  shciContext.UserEvtRx = UserEvtRx;
 8002ac2:	4c0f      	ldr	r4, [pc, #60]	; (8002b00 <shci_init+0x40>)
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <shci_init+0x44>)
 8002ac6:	684a      	ldr	r2, [r1, #4]
  shciContext.UserEvtRx = UserEvtRx;
 8002ac8:	61e0      	str	r0, [r4, #28]
{
 8002aca:	460d      	mov	r5, r1
  shci_register_io_bus (&shciContext.io);
 8002acc:	4620      	mov	r0, r4
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8002ace:	601a      	str	r2, [r3, #0]
  shci_register_io_bus (&shciContext.io);
 8002ad0:	f000 f882 	bl	8002bd8 <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8002ad4:	682e      	ldr	r6, [r5, #0]
  pCmdBuffer = p_cmdbuffer;
 8002ad6:	4d0c      	ldr	r5, [pc, #48]	; (8002b08 <shci_init+0x48>)
  LST_init_head (&SHciAsynchEventQueue);
 8002ad8:	4628      	mov	r0, r5
  pCmdBuffer = p_cmdbuffer;
 8002ada:	60ee      	str	r6, [r5, #12]
  LST_init_head (&SHciAsynchEventQueue);
 8002adc:	f000 fa3c 	bl	8002f58 <LST_init_head>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8002ae0:	f7ff ffe2 	bl	8002aa8 <Cmd_SetStatus.constprop.1>
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	742b      	strb	r3, [r5, #16]
  if (shciContext.io.Init)
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	b133      	cbz	r3, 8002afa <shci_init+0x3a>
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8002aec:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <shci_init+0x4c>)
 8002aee:	9201      	str	r2, [sp, #4]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8002af0:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <shci_init+0x50>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8002af2:	9603      	str	r6, [sp, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8002af4:	9202      	str	r2, [sp, #8]
    shciContext.io.Init(&Conf);
 8002af6:	a801      	add	r0, sp, #4
 8002af8:	4798      	blx	r3
}
 8002afa:	b004      	add	sp, #16
 8002afc:	bd70      	pop	{r4, r5, r6, pc}
 8002afe:	bf00      	nop
 8002b00:	200001f4 	.word	0x200001f4
 8002b04:	200001f0 	.word	0x200001f0
 8002b08:	20000054 	.word	0x20000054
 8002b0c:	08002aa1 	.word	0x08002aa1
 8002b10:	08002a85 	.word	0x08002a85

08002b14 <shci_user_evt_proc>:
{
 8002b14:	b530      	push	{r4, r5, lr}
  while((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8002b16:	4c12      	ldr	r4, [pc, #72]	; (8002b60 <shci_user_evt_proc+0x4c>)
    if (shciContext.UserEvtRx != NULL)
 8002b18:	4d12      	ldr	r5, [pc, #72]	; (8002b64 <shci_user_evt_proc+0x50>)
{
 8002b1a:	b085      	sub	sp, #20
  while((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8002b1c:	4810      	ldr	r0, [pc, #64]	; (8002b60 <shci_user_evt_proc+0x4c>)
 8002b1e:	f000 fa1e 	bl	8002f5e <LST_is_empty>
 8002b22:	b908      	cbnz	r0, 8002b28 <shci_user_evt_proc+0x14>
 8002b24:	7c23      	ldrb	r3, [r4, #16]
 8002b26:	b90b      	cbnz	r3, 8002b2c <shci_user_evt_proc+0x18>
}
 8002b28:	b005      	add	sp, #20
 8002b2a:	bd30      	pop	{r4, r5, pc}
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8002b2c:	a901      	add	r1, sp, #4
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f000 fa42 	bl	8002fb8 <LST_remove_head>
    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8002b34:	2301      	movs	r3, #1
 8002b36:	7423      	strb	r3, [r4, #16]
    if (shciContext.UserEvtRx != NULL)
 8002b38:	69eb      	ldr	r3, [r5, #28]
 8002b3a:	b133      	cbz	r3, 8002b4a <shci_user_evt_proc+0x36>
      UserEvtRxParam.pckt = phcievtbuffer;
 8002b3c:	9a01      	ldr	r2, [sp, #4]
 8002b3e:	9203      	str	r2, [sp, #12]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8002b40:	a802      	add	r0, sp, #8
 8002b42:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8002b44:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002b48:	7423      	strb	r3, [r4, #16]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8002b4a:	7c23      	ldrb	r3, [r4, #16]
 8002b4c:	b11b      	cbz	r3, 8002b56 <shci_user_evt_proc+0x42>
      TL_MM_EvtDone( phcievtbuffer );
 8002b4e:	9801      	ldr	r0, [sp, #4]
 8002b50:	f000 f8f8 	bl	8002d44 <TL_MM_EvtDone>
 8002b54:	e7e2      	b.n	8002b1c <shci_user_evt_proc+0x8>
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8002b56:	9901      	ldr	r1, [sp, #4]
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f000 fa0a 	bl	8002f72 <LST_insert_head>
 8002b5e:	e7dd      	b.n	8002b1c <shci_user_evt_proc+0x8>
 8002b60:	20000054 	.word	0x20000054
 8002b64:	200001f4 	.word	0x200001f4

08002b68 <shci_send>:
{
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(StatusNotCallBackFunction != 0)
 8002b6a:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <shci_send+0x50>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
{
 8002b6e:	4606      	mov	r6, r0
 8002b70:	460f      	mov	r7, r1
    if(StatusNotCallBackFunction != 0)
 8002b72:	b10b      	cbz	r3, 8002b78 <shci_send+0x10>
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8002b74:	2000      	movs	r0, #0
 8002b76:	4798      	blx	r3
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8002b78:	4c10      	ldr	r4, [pc, #64]	; (8002bbc <shci_send+0x54>)
  memcpy(&(pCmdBuffer->cmdserial), &(p_cmd->cmdserial), p_cmd->cmdserial.cmd.plen + TL_CMD_HDR_SIZE );
 8002b7a:	7af2      	ldrb	r2, [r6, #11]
 8002b7c:	68e0      	ldr	r0, [r4, #12]
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8002b7e:	2500      	movs	r5, #0
  memcpy(&(pCmdBuffer->cmdserial), &(p_cmd->cmdserial), p_cmd->cmdserial.cmd.plen + TL_CMD_HDR_SIZE );
 8002b80:	3204      	adds	r2, #4
 8002b82:	f106 0108 	add.w	r1, r6, #8
 8002b86:	3008      	adds	r0, #8
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8002b88:	7225      	strb	r5, [r4, #8]
  memcpy(&(pCmdBuffer->cmdserial), &(p_cmd->cmdserial), p_cmd->cmdserial.cmd.plen + TL_CMD_HDR_SIZE );
 8002b8a:	f001 f89d 	bl	8003cc8 <memcpy>
  shciContext.io.Send(0,0);
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <shci_send+0x58>)
 8002b90:	4629      	mov	r1, r5
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	4628      	mov	r0, r5
 8002b96:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8002b98:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8002b9c:	f000 fc40 	bl	8003420 <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8002ba0:	68e1      	ldr	r1, [r4, #12]
 8002ba2:	788a      	ldrb	r2, [r1, #2]
 8002ba4:	f107 0008 	add.w	r0, r7, #8
 8002ba8:	3203      	adds	r2, #3
 8002baa:	f001 f88d 	bl	8003cc8 <memcpy>
}
 8002bae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8002bb2:	f7ff bf79 	b.w	8002aa8 <Cmd_SetStatus.constprop.1>
 8002bb6:	bf00      	nop
 8002bb8:	200001f0 	.word	0x200001f0
 8002bbc:	20000054 	.word	0x20000054
 8002bc0:	200001f4 	.word	0x200001f4

08002bc4 <hci_register_io_bus>:


void hci_register_io_bus(tHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8002bc4:	4b02      	ldr	r3, [pc, #8]	; (8002bd0 <hci_register_io_bus+0xc>)
 8002bc6:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_BLE_SendCmd;
 8002bc8:	4b02      	ldr	r3, [pc, #8]	; (8002bd4 <hci_register_io_bus+0x10>)
 8002bca:	6103      	str	r3, [r0, #16]
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	08002c55 	.word	0x08002c55
 8002bd4:	08002c99 	.word	0x08002c99

08002bd8 <shci_register_io_bus>:
}

void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8002bd8:	4b02      	ldr	r3, [pc, #8]	; (8002be4 <shci_register_io_bus+0xc>)
 8002bda:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 8002bdc:	4b02      	ldr	r3, [pc, #8]	; (8002be8 <shci_register_io_bus+0x10>)
 8002bde:	6103      	str	r3, [r0, #16]
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	08002cb1 	.word	0x08002cb1
 8002be8:	08002ced 	.word	0x08002ced

08002bec <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 8002bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8002bee:	4c09      	ldr	r4, [pc, #36]	; (8002c14 <SendFreeBuf+0x28>)
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8002bf0:	4d09      	ldr	r5, [pc, #36]	; (8002c18 <SendFreeBuf+0x2c>)
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8002bf2:	4808      	ldr	r0, [pc, #32]	; (8002c14 <SendFreeBuf+0x28>)
 8002bf4:	f000 f9b3 	bl	8002f5e <LST_is_empty>
 8002bf8:	b108      	cbz	r0, 8002bfe <SendFreeBuf+0x12>
  }

  return;
}
 8002bfa:	b003      	add	sp, #12
 8002bfc:	bd30      	pop	{r4, r5, pc}
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8002bfe:	a901      	add	r1, sp, #4
 8002c00:	4620      	mov	r0, r4
 8002c02:	f000 f9d9 	bl	8002fb8 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8002c06:	692b      	ldr	r3, [r5, #16]
 8002c08:	9901      	ldr	r1, [sp, #4]
 8002c0a:	6918      	ldr	r0, [r3, #16]
 8002c0c:	f000 f9bd 	bl	8002f8a <LST_insert_tail>
 8002c10:	e7ef      	b.n	8002bf2 <SendFreeBuf+0x6>
 8002c12:	bf00      	nop
 8002c14:	2000021c 	.word	0x2000021c
 8002c18:	20030000 	.word	0x20030000

08002c1c <TL_Enable>:
  HW_IPCC_Enable();
 8002c1c:	f000 bc04 	b.w	8003428 <HW_IPCC_Enable>

08002c20 <TL_Init>:
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <TL_Init+0x2c>)
 8002c22:	4a0b      	ldr	r2, [pc, #44]	; (8002c50 <TL_Init+0x30>)
  TL_RefTable.p_ble_table = &TL_BleTable;
 8002c24:	f103 0120 	add.w	r1, r3, #32
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8002c28:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8002c2a:	6051      	str	r1, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8002c2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002c30:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_sys_table = &TL_SysTable;
 8002c32:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8002c36:	60d1      	str	r1, [r2, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8002c38:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002c3c:	6111      	str	r1, [r2, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8002c3e:	f103 0160 	add.w	r1, r3, #96	; 0x60
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8002c42:	3364      	adds	r3, #100	; 0x64
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8002c44:	6151      	str	r1, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8002c46:	6193      	str	r3, [r2, #24]
  HW_IPCC_Init();
 8002c48:	f000 bbf6 	b.w	8003438 <HW_IPCC_Init>
 8002c4c:	2003001c 	.word	0x2003001c
 8002c50:	20030000 	.word	0x20030000

08002c54 <TL_BLE_Init>:
{
 8002c54:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&EvtQueue);
 8002c56:	4d0c      	ldr	r5, [pc, #48]	; (8002c88 <TL_BLE_Init+0x34>)
{
 8002c58:	4604      	mov	r4, r0
  LST_init_head (&EvtQueue);
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	f000 f97c 	bl	8002f58 <LST_init_head>
  p_bletable = TL_RefTable.p_ble_table;
 8002c60:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <TL_BLE_Init+0x38>)
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8002c62:	68a2      	ldr	r2, [r4, #8]
  p_bletable = TL_RefTable.p_ble_table;
 8002c64:	685b      	ldr	r3, [r3, #4]
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8002c66:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8002c68:	68e2      	ldr	r2, [r4, #12]
 8002c6a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8002c6c:	f105 0208 	add.w	r2, r5, #8
 8002c70:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8002c72:	609d      	str	r5, [r3, #8]
  HW_IPCC_BLE_Init();
 8002c74:	f000 fc00 	bl	8003478 <HW_IPCC_BLE_Init>
  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <TL_BLE_Init+0x3c>)
 8002c7a:	6822      	ldr	r2, [r4, #0]
 8002c7c:	601a      	str	r2, [r3, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <TL_BLE_Init+0x40>)
 8002c80:	6862      	ldr	r2, [r4, #4]
 8002c82:	601a      	str	r2, [r3, #0]
}
 8002c84:	2000      	movs	r0, #0
 8002c86:	bd38      	pop	{r3, r4, r5, pc}
 8002c88:	200301a8 	.word	0x200301a8
 8002c8c:	20030000 	.word	0x20030000
 8002c90:	20000218 	.word	0x20000218
 8002c94:	20000214 	.word	0x20000214

08002c98 <TL_BLE_SendCmd>:
{
 8002c98:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <TL_BLE_SendCmd+0x14>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	721a      	strb	r2, [r3, #8]
  HW_IPCC_BLE_SendCmd();
 8002ca4:	f000 fbf0 	bl	8003488 <HW_IPCC_BLE_SendCmd>
}
 8002ca8:	2000      	movs	r0, #0
 8002caa:	bd08      	pop	{r3, pc}
 8002cac:	20030000 	.word	0x20030000

08002cb0 <TL_SYS_Init>:
{
 8002cb0:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&SystemEvtQueue);
 8002cb2:	4d0a      	ldr	r5, [pc, #40]	; (8002cdc <TL_SYS_Init+0x2c>)
{
 8002cb4:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	f000 f94e 	bl	8002f58 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <TL_SYS_Init+0x30>)
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8002cbe:	68a2      	ldr	r2, [r4, #8]
  p_systable = TL_RefTable.p_sys_table;
 8002cc0:	68db      	ldr	r3, [r3, #12]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8002cc2:	e883 0024 	stmia.w	r3, {r2, r5}
  HW_IPCC_SYS_Init();
 8002cc6:	f000 fbe7 	bl	8003498 <HW_IPCC_SYS_Init>
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <TL_SYS_Init+0x34>)
 8002ccc:	6822      	ldr	r2, [r4, #0]
 8002cce:	601a      	str	r2, [r3, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <TL_SYS_Init+0x38>)
 8002cd2:	6862      	ldr	r2, [r4, #4]
 8002cd4:	601a      	str	r2, [r3, #0]
}
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	bd38      	pop	{r3, r4, r5, pc}
 8002cda:	bf00      	nop
 8002cdc:	200301c0 	.word	0x200301c0
 8002ce0:	20030000 	.word	0x20030000
 8002ce4:	20000224 	.word	0x20000224
 8002ce8:	20000228 	.word	0x20000228

08002cec <TL_SYS_SendCmd>:
{
 8002cec:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <TL_SYS_SendCmd+0x14>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	721a      	strb	r2, [r3, #8]
  HW_IPCC_SYS_SendCmd();
 8002cf8:	f000 fbd6 	bl	80034a8 <HW_IPCC_SYS_SendCmd>
}
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	bd08      	pop	{r3, pc}
 8002d00:	20030000 	.word	0x20030000

08002d04 <TL_MM_Init>:
{
 8002d04:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&FreeBufQueue);
 8002d06:	4d0c      	ldr	r5, [pc, #48]	; (8002d38 <TL_MM_Init+0x34>)
{
 8002d08:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 8002d0a:	4628      	mov	r0, r5
 8002d0c:	f000 f924 	bl	8002f58 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8002d10:	480a      	ldr	r0, [pc, #40]	; (8002d3c <TL_MM_Init+0x38>)
 8002d12:	f000 f921 	bl	8002f58 <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <TL_MM_Init+0x3c>)
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8002d18:	68a2      	ldr	r2, [r4, #8]
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8002d1a:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8002d1c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8002d1e:	68e2      	ldr	r2, [r4, #12]
 8002d20:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8002d22:	6822      	ldr	r2, [r4, #0]
 8002d24:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8002d26:	6862      	ldr	r2, [r4, #4]
 8002d28:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8002d2a:	6922      	ldr	r2, [r4, #16]
 8002d2c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8002d2e:	6962      	ldr	r2, [r4, #20]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8002d30:	611d      	str	r5, [r3, #16]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8002d32:	619a      	str	r2, [r3, #24]
 8002d34:	bd38      	pop	{r3, r4, r5, pc}
 8002d36:	bf00      	nop
 8002d38:	2003008c 	.word	0x2003008c
 8002d3c:	2000021c 	.word	0x2000021c
 8002d40:	20030000 	.word	0x20030000

08002d44 <TL_MM_EvtDone>:
{
 8002d44:	b508      	push	{r3, lr}
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8002d46:	4601      	mov	r1, r0
 8002d48:	4803      	ldr	r0, [pc, #12]	; (8002d58 <TL_MM_EvtDone+0x14>)
 8002d4a:	f000 f91e 	bl	8002f8a <LST_insert_tail>
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8002d4e:	4803      	ldr	r0, [pc, #12]	; (8002d5c <TL_MM_EvtDone+0x18>)
}
 8002d50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8002d54:	f000 bbb4 	b.w	80034c0 <HW_IPCC_MM_SendFreeBuf>
 8002d58:	2000021c 	.word	0x2000021c
 8002d5c:	08002bed 	.word	0x08002bed

08002d60 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8002d60:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 8002d62:	4c05      	ldr	r4, [pc, #20]	; (8002d78 <TL_TRACES_Init+0x18>)
 8002d64:	4620      	mov	r0, r4
 8002d66:	f000 f8f7 	bl	8002f58 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <TL_TRACES_Init+0x1c>)
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();

  return;
}
 8002d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_IPCC_TRACES_Init();
 8002d74:	f000 bbba 	b.w	80034ec <HW_IPCC_TRACES_Init>
 8002d78:	20030094 	.word	0x20030094
 8002d7c:	20030000 	.word	0x20030000

08002d80 <LPM_SetConf>:
__weak void LPM_ExitOffMode(void);

/* Functions Definition ------------------------------------------------------*/
void LPM_SetConf(LPM_Conf_t *p_conf)
{
  LowPowerModeConfiguration.Stop_Mode_Config = p_conf->Stop_Mode_Config;
 8002d80:	4b02      	ldr	r3, [pc, #8]	; (8002d8c <LPM_SetConf+0xc>)
 8002d82:	7802      	ldrb	r2, [r0, #0]
 8002d84:	701a      	strb	r2, [r3, #0]
  LowPowerModeConfiguration.OFF_Mode_Config = p_conf->OFF_Mode_Config;
 8002d86:	7842      	ldrb	r2, [r0, #1]
 8002d88:	705a      	strb	r2, [r3, #1]
 8002d8a:	4770      	bx	lr
 8002d8c:	2000022c 	.word	0x2000022c

08002d90 <LPM_SetOffMode>:

  return;
}

void LPM_SetOffMode(uint32_t id, LPM_OffModeSel_t mode)
{
 8002d90:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d92:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002d96:	b672      	cpsid	i
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <LPM_SetOffMode+0x24>)
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if(mode == LPM_OffMode_En)
 8002d9a:	2901      	cmp	r1, #1
  {
    LowPowerModeSel &= (~id);
 8002d9c:	bf0b      	itete	eq
 8002d9e:	6819      	ldreq	r1, [r3, #0]
  }
  else
  {
    LowPowerModeSel |= id;
 8002da0:	681a      	ldrne	r2, [r3, #0]
    LowPowerModeSel &= (~id);
 8002da2:	4381      	biceq	r1, r0
    LowPowerModeSel |= id;
 8002da4:	4302      	orrne	r2, r0
    LowPowerModeSel &= (~id);
 8002da6:	bf0c      	ite	eq
 8002da8:	6019      	streq	r1, [r3, #0]
    LowPowerModeSel |= id;
 8002daa:	601a      	strne	r2, [r3, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dac:	f384 8810 	msr	PRIMASK, r4
 8002db0:	bd10      	pop	{r4, pc}
 8002db2:	bf00      	nop
 8002db4:	20000230 	.word	0x20000230

08002db8 <OTP_Read>:

uint8_t * OTP_Read( uint8_t id )
{
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <OTP_Read+0x18>)

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8002dba:	4a06      	ldr	r2, [pc, #24]	; (8002dd4 <OTP_Read+0x1c>)
 8002dbc:	79d9      	ldrb	r1, [r3, #7]
 8002dbe:	4281      	cmp	r1, r0
 8002dc0:	d002      	beq.n	8002dc8 <OTP_Read+0x10>
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d102      	bne.n	8002dcc <OTP_Read+0x14>
    p_id -= 8 ;
  }

  if((*( p_id + 7 )) != id)
  {
    p_id = 0 ;
 8002dc6:	2300      	movs	r3, #0
  }

  return p_id ;
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	4770      	bx	lr
    p_id -= 8 ;
 8002dcc:	3b08      	subs	r3, #8
 8002dce:	e7f5      	b.n	8002dbc <OTP_Read+0x4>
 8002dd0:	1fff73f8 	.word	0x1fff73f8
 8002dd4:	1fff7000 	.word	0x1fff7000

08002dd8 <SCH_RegTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002dd8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002ddc:	b672      	cpsid	i
{
  BACKUP_PRIMASK();

  DISABLE_IRQ();

  TaskCb[task_id] = task;
 8002dde:	4a03      	ldr	r2, [pc, #12]	; (8002dec <SCH_RegTask+0x14>)
 8002de0:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de4:	f383 8810 	msr	PRIMASK, r3
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	2000023c 	.word	0x2000023c

08002df0 <SCH_SetTask>:

/**
 *  this function can be nested
 */
void SCH_SetTask( uint32_t task_id_bm , uint32_t task_prio )
{
 8002df0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002df2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002df6:	b672      	cpsid	i
  BACKUP_PRIMASK();

  DISABLE_IRQ();

  TaskSet |= task_id_bm;
 8002df8:	4a06      	ldr	r2, [pc, #24]	; (8002e14 <SCH_SetTask+0x24>)
 8002dfa:	6814      	ldr	r4, [r2, #0]
 8002dfc:	4304      	orrs	r4, r0
 8002dfe:	6014      	str	r4, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 8002e00:	4c05      	ldr	r4, [pc, #20]	; (8002e18 <SCH_SetTask+0x28>)
 8002e02:	f854 2031 	ldr.w	r2, [r4, r1, lsl #3]
 8002e06:	4302      	orrs	r2, r0
 8002e08:	f844 2031 	str.w	r2, [r4, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0c:	f383 8810 	msr	PRIMASK, r3
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	bf00      	nop
 8002e14:	20000260 	.word	0x20000260
 8002e18:	20000258 	.word	0x20000258

08002e1c <SCH_PauseTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e1c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002e20:	b672      	cpsid	i
{
  BACKUP_PRIMASK();

  DISABLE_IRQ();

  TaskMask &= (~task_id_bm);
 8002e22:	4904      	ldr	r1, [pc, #16]	; (8002e34 <SCH_PauseTask+0x18>)
 8002e24:	680a      	ldr	r2, [r1, #0]
 8002e26:	ea22 0200 	bic.w	r2, r2, r0
 8002e2a:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2c:	f383 8810 	msr	PRIMASK, r3
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000010 	.word	0x20000010

08002e38 <SCH_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e38:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002e3c:	b672      	cpsid	i
{
  BACKUP_PRIMASK();

  DISABLE_IRQ();

  TaskMask |= task_id_bm;
 8002e3e:	4903      	ldr	r1, [pc, #12]	; (8002e4c <SCH_ResumeTask+0x14>)
 8002e40:	680a      	ldr	r2, [r1, #0]
 8002e42:	4302      	orrs	r2, r0
 8002e44:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e46:	f383 8810 	msr	PRIMASK, r3
 8002e4a:	4770      	bx	lr
 8002e4c:	20000010 	.word	0x20000010

08002e50 <SCH_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e50:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002e54:	b672      	cpsid	i
{
  BACKUP_PRIMASK();

  DISABLE_IRQ();

  EvtSet |= evt_id_bm;
 8002e56:	4903      	ldr	r1, [pc, #12]	; (8002e64 <SCH_SetEvt+0x14>)
 8002e58:	680a      	ldr	r2, [r1, #0]
 8002e5a:	4302      	orrs	r2, r0
 8002e5c:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5e:	f383 8810 	msr	PRIMASK, r3
 8002e62:	4770      	bx	lr
 8002e64:	20000234 	.word	0x20000234

08002e68 <SCH_Run>:
{
 8002e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e6c:	f3ef 8710 	mrs	r7, PRIMASK
  super_mask_backup = SuperMask;
 8002e70:	4c27      	ldr	r4, [pc, #156]	; (8002f10 <SCH_Run+0xa8>)
  while(TaskSet & TaskMask & SuperMask)
 8002e72:	4d28      	ldr	r5, [pc, #160]	; (8002f14 <SCH_Run+0xac>)
  super_mask_backup = SuperMask;
 8002e74:	6826      	ldr	r6, [r4, #0]
  while(TaskSet & TaskMask & SuperMask)
 8002e76:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8002f28 <SCH_Run+0xc0>
  SuperMask &= mask_bm;
 8002e7a:	4030      	ands	r0, r6
 8002e7c:	6020      	str	r0, [r4, #0]
 8002e7e:	46a9      	mov	r9, r5
  while(TaskSet & TaskMask & SuperMask)
 8002e80:	f8d8 3000 	ldr.w	r3, [r8]
 8002e84:	682a      	ldr	r2, [r5, #0]
 8002e86:	6821      	ldr	r1, [r4, #0]
 8002e88:	401a      	ands	r2, r3
 8002e8a:	420a      	tst	r2, r1
 8002e8c:	d114      	bne.n	8002eb8 <SCH_Run+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e8e:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 8002e90:	f8d8 2000 	ldr.w	r2, [r8]
 8002e94:	682b      	ldr	r3, [r5, #0]
 8002e96:	4013      	ands	r3, r2
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	4213      	tst	r3, r2
 8002e9c:	d107      	bne.n	8002eae <SCH_Run+0x46>
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <SCH_Run+0xb0>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <SCH_Run+0xb4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	421a      	tst	r2, r3
 8002ea8:	d101      	bne.n	8002eae <SCH_Run+0x46>
    SCH_Idle();
 8002eaa:	f000 faad 	bl	8003408 <SCH_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eae:	f387 8810 	msr	PRIMASK, r7
  SuperMask = super_mask_backup;
 8002eb2:	6026      	str	r6, [r4, #0]
 8002eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8002eb8:	4819      	ldr	r0, [pc, #100]	; (8002f20 <SCH_Run+0xb8>)
 8002eba:	6802      	ldr	r2, [r0, #0]
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	4013      	ands	r3, r2
    if (!(TaskPrio[counter].round_robin & current_task_set))
 8002ec0:	6842      	ldr	r2, [r0, #4]
 8002ec2:	4213      	tst	r3, r2
      TaskPrio[counter].round_robin = (~0);
 8002ec4:	bf04      	itt	eq
 8002ec6:	f04f 32ff 	moveq.w	r2, #4294967295
 8002eca:	6042      	streq	r2, [r0, #4]
    bit_nbr = COUNT_LEAD_ZERO(current_task_set & TaskPrio[counter].round_robin);
 8002ecc:	6841      	ldr	r1, [r0, #4]
 8002ece:	400b      	ands	r3, r1
 8002ed0:	fab3 f383 	clz	r3, r3
    TaskPrio[counter].round_robin &= ~(1 << (31 - bit_nbr));
 8002ed4:	f1c3 031f 	rsb	r3, r3, #31
 8002ed8:	f04f 0e01 	mov.w	lr, #1
 8002edc:	fa0e fe03 	lsl.w	lr, lr, r3
 8002ee0:	ea6f 0e0e 	mvn.w	lr, lr
 8002ee4:	ea01 010e 	and.w	r1, r1, lr
 8002ee8:	6041      	str	r1, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eea:	b672      	cpsid	i
    TaskSet &= ~(1 << (31 - bit_nbr));
 8002eec:	f8d9 1000 	ldr.w	r1, [r9]
      TaskPrio[counter - 1].priority &= ~(1 << (31 - bit_nbr));
 8002ef0:	6802      	ldr	r2, [r0, #0]
    TaskSet &= ~(1 << (31 - bit_nbr));
 8002ef2:	ea01 010e 	and.w	r1, r1, lr
      TaskPrio[counter - 1].priority &= ~(1 << (31 - bit_nbr));
 8002ef6:	ea02 020e 	and.w	r2, r2, lr
    TaskSet &= ~(1 << (31 - bit_nbr));
 8002efa:	f8c9 1000 	str.w	r1, [r9]
      TaskPrio[counter - 1].priority &= ~(1 << (31 - bit_nbr));
 8002efe:	6002      	str	r2, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f00:	f387 8810 	msr	PRIMASK, r7
    TaskCb[31 - bit_nbr]();
 8002f04:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <SCH_Run+0xbc>)
 8002f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0a:	4798      	blx	r3
 8002f0c:	e7b8      	b.n	8002e80 <SCH_Run+0x18>
 8002f0e:	bf00      	nop
 8002f10:	2000000c 	.word	0x2000000c
 8002f14:	20000260 	.word	0x20000260
 8002f18:	20000234 	.word	0x20000234
 8002f1c:	20000238 	.word	0x20000238
 8002f20:	20000258 	.word	0x20000258
 8002f24:	2000023c 	.word	0x2000023c
 8002f28:	20000010 	.word	0x20000010

08002f2c <SCH_WaitEvt>:

/**
 *  this function can be nested
 */
void SCH_WaitEvt( uint32_t evt_id_bm )
{
 8002f2c:	b570      	push	{r4, r5, r6, lr}
  uint32_t event_waited_id_backup;

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8002f2e:	4c08      	ldr	r4, [pc, #32]	; (8002f50 <SCH_WaitEvt+0x24>)
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 8002f30:	4d08      	ldr	r5, [pc, #32]	; (8002f54 <SCH_WaitEvt+0x28>)
  event_waited_id_backup = EvtWaited;
 8002f32:	6826      	ldr	r6, [r4, #0]
  EvtWaited = evt_id_bm;
 8002f34:	6020      	str	r0, [r4, #0]
  while((EvtSet & EvtWaited) == 0)
 8002f36:	682b      	ldr	r3, [r5, #0]
 8002f38:	6820      	ldr	r0, [r4, #0]
 8002f3a:	4203      	tst	r3, r0
 8002f3c:	d004      	beq.n	8002f48 <SCH_WaitEvt+0x1c>
  {
    SCH_EvtIdle(EvtWaited);
  }
  EvtSet &= (~EvtWaited);
 8002f3e:	ea23 0300 	bic.w	r3, r3, r0
 8002f42:	602b      	str	r3, [r5, #0]
  EvtWaited = event_waited_id_backup;
 8002f44:	6026      	str	r6, [r4, #0]
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
    SCH_EvtIdle(EvtWaited);
 8002f48:	f000 fa5f 	bl	800340a <SCH_EvtIdle>
 8002f4c:	e7f3      	b.n	8002f36 <SCH_WaitEvt+0xa>
 8002f4e:	bf00      	nop
 8002f50:	20000238 	.word	0x20000238
 8002f54:	20000234 	.word	0x20000234

08002f58 <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8002f58:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 8002f5a:	6040      	str	r0, [r0, #4]
 8002f5c:	4770      	bx	lr

08002f5e <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f5e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002f62:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8002f64:	6803      	ldr	r3, [r0, #0]
  {
    return_value = TRUE;
 8002f66:	1a1b      	subs	r3, r3, r0
 8002f68:	4258      	negs	r0, r3
 8002f6a:	4158      	adcs	r0, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6c:	f382 8810 	msr	PRIMASK, r2
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8002f70:	4770      	bx	lr

08002f72 <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f72:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002f76:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8002f78:	6802      	ldr	r2, [r0, #0]
 8002f7a:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8002f7c:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8002f7e:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8002f80:	680a      	ldr	r2, [r1, #0]
 8002f82:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f84:	f383 8810 	msr	PRIMASK, r3
 8002f88:	4770      	bx	lr

08002f8a <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f8a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002f8e:	b672      	cpsid	i

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
  node->prev = listHead->prev;
 8002f90:	6842      	ldr	r2, [r0, #4]
 8002f92:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 8002f94:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 8002f96:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8002f98:	684a      	ldr	r2, [r1, #4]
 8002f9a:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9c:	f383 8810 	msr	PRIMASK, r3
 8002fa0:	4770      	bx	lr

08002fa2 <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fa2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa6:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8002fa8:	e890 0006 	ldmia.w	r0, {r1, r2}
 8002fac:	6011      	str	r1, [r2, #0]
  (node->next)->prev = node->prev;
 8002fae:	6801      	ldr	r1, [r0, #0]
 8002fb0:	604a      	str	r2, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb2:	f383 8810 	msr	PRIMASK, r3
 8002fb6:	4770      	bx	lr

08002fb8 <LST_remove_head>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8002fb8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002fbe:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8002fc0:	6803      	ldr	r3, [r0, #0]
 8002fc2:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 8002fc4:	6800      	ldr	r0, [r0, #0]
 8002fc6:	f7ff ffec 	bl	8002fa2 <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fca:	f384 8810 	msr	PRIMASK, r4
 8002fce:	bd10      	pop	{r4, pc}

08002fd0 <Switch_OFF_GPIO>:

  /* USER CODE END Connect_Request_2 */
  return;
}

static void Switch_OFF_GPIO(){
 8002fd0:	4770      	bx	lr

08002fd2 <BLE_UserEvtRx>:
  SCH_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
  return;
}

static void BLE_UserEvtRx( void * pPayload )
{
 8002fd2:	b510      	push	{r4, lr}
 8002fd4:	4604      	mov	r4, r0
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
  
  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8002fd6:	6840      	ldr	r0, [r0, #4]
 8002fd8:	3008      	adds	r0, #8
 8002fda:	f7ff f99f 	bl	800231c <SVCCTL_UserEvtRx>
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002fde:	b110      	cbz	r0, 8002fe6 <BLE_UserEvtRx+0x14>
{
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	7023      	strb	r3, [r4, #0]
 8002fe4:	bd10      	pop	{r4, pc}
}
  else
{
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8002fe6:	7020      	strb	r0, [r4, #0]
 8002fe8:	bd10      	pop	{r4, pc}

08002fea <BLE_StatusNot>:
}

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
  uint32_t task_id_list;
  switch (status)
 8002fea:	b110      	cbz	r0, 8002ff2 <BLE_StatusNot+0x8>
 8002fec:	2801      	cmp	r0, #1
 8002fee:	d003      	beq.n	8002ff8 <BLE_StatusNot+0xe>
 8002ff0:	4770      	bx	lr
      /**
       * All tasks that may send an aci/hci commands shall be listed here
       * This is to prevent a new command is sent while one is already pending
       */
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      SCH_PauseTask(task_id_list);
 8002ff2:	203f      	movs	r0, #63	; 0x3f
 8002ff4:	f7ff bf12 	b.w	8002e1c <SCH_PauseTask>
      /**
       * All tasks that may send an aci/hci commands shall be listed here
       * This is to prevent a new command is sent while one is already pending
       */
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      SCH_ResumeTask(task_id_list);
 8002ff8:	203f      	movs	r0, #63	; 0x3f
 8002ffa:	f7ff bf1d 	b.w	8002e38 <SCH_ResumeTask>
	...

08003000 <Connect_Request>:
{
 8003000:	b530      	push	{r4, r5, lr}
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8003002:	4d11      	ldr	r5, [pc, #68]	; (8003048 <Connect_Request+0x48>)
 8003004:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 8003008:	2b06      	cmp	r3, #6
{
 800300a:	b089      	sub	sp, #36	; 0x24
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800300c:	d017      	beq.n	800303e <Connect_Request+0x3e>
    result = aci_gap_create_connection(SCAN_P,
 800300e:	2310      	movs	r3, #16
 8003010:	9306      	str	r3, [sp, #24]
 8003012:	9305      	str	r3, [sp, #20]
 8003014:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003018:	9304      	str	r3, [sp, #16]
 800301a:	2350      	movs	r3, #80	; 0x50
 800301c:	2400      	movs	r4, #0
 800301e:	9302      	str	r3, [sp, #8]
 8003020:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003024:	2328      	movs	r3, #40	; 0x28
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	9403      	str	r4, [sp, #12]
 800302a:	9400      	str	r4, [sp, #0]
 800302c:	4b07      	ldr	r3, [pc, #28]	; (800304c <Connect_Request+0x4c>)
 800302e:	4622      	mov	r2, r4
 8003030:	4608      	mov	r0, r1
 8003032:	f7ff fa9a 	bl	800256a <aci_gap_create_connection>
    if (result == BLE_STATUS_SUCCESS)
 8003036:	b920      	cbnz	r0, 8003042 <Connect_Request+0x42>
    BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 8003038:	2304      	movs	r3, #4
 800303a:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
}
 800303e:	b009      	add	sp, #36	; 0x24
 8003040:	bd30      	pop	{r4, r5, pc}
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003042:	f885 4090 	strb.w	r4, [r5, #144]	; 0x90
  return;
 8003046:	e7fa      	b.n	800303e <Connect_Request+0x3e>
 8003048:	20000068 	.word	0x20000068
 800304c:	20000284 	.word	0x20000284

08003050 <Scan_Request>:
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <Scan_Request+0x1c>)
 8003052:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003056:	2b06      	cmp	r3, #6
 8003058:	d006      	beq.n	8003068 <Scan_Request+0x18>
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 1);
 800305a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800305e:	2301      	movs	r3, #1
 8003060:	2200      	movs	r2, #0
 8003062:	4608      	mov	r0, r1
 8003064:	f7ff ba54 	b.w	8002510 <aci_gap_start_general_discovery_proc>
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000068 	.word	0x20000068

08003070 <APP_BLE_Init>:
{
 8003070:	b570      	push	{r4, r5, r6, lr}
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8003072:	4b61      	ldr	r3, [pc, #388]	; (80031f8 <APP_BLE_Init+0x188>)
{
 8003074:	b096      	sub	sp, #88	; 0x58
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8003076:	aa0a      	add	r2, sp, #40	; 0x28
 8003078:	f103 0628 	add.w	r6, r3, #40	; 0x28
 800307c:	4615      	mov	r5, r2
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	6859      	ldr	r1, [r3, #4]
 8003082:	4614      	mov	r4, r2
 8003084:	c403      	stmia	r4!, {r0, r1}
 8003086:	3308      	adds	r3, #8
 8003088:	42b3      	cmp	r3, r6
 800308a:	4622      	mov	r2, r4
 800308c:	d1f7      	bne.n	800307e <APP_BLE_Init+0xe>
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	791b      	ldrb	r3, [r3, #4]
 8003092:	7123      	strb	r3, [r4, #4]
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8003094:	4b59      	ldr	r3, [pc, #356]	; (80031fc <APP_BLE_Init+0x18c>)
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8003096:	6020      	str	r0, [r4, #0]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8003098:	a908      	add	r1, sp, #32
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800309a:	9308      	str	r3, [sp, #32]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800309c:	4858      	ldr	r0, [pc, #352]	; (8003200 <APP_BLE_Init+0x190>)
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800309e:	4b59      	ldr	r3, [pc, #356]	; (8003204 <APP_BLE_Init+0x194>)
 80030a0:	9309      	str	r3, [sp, #36]	; 0x24
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80030a2:	f7ff fc37 	bl	8002914 <hci_init>
  LPM_SetOffMode(1 << CFG_LPM_APP_BLE, LPM_OffMode_Dis);
 80030a6:	2100      	movs	r1, #0
 80030a8:	2002      	movs	r0, #2
 80030aa:	f7ff fe71 	bl	8002d90 <LPM_SetOffMode>
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80030ae:	4c56      	ldr	r4, [pc, #344]	; (8003208 <APP_BLE_Init+0x198>)
  SCH_RegTask(CFG_TASK_HCI_ASYNCH_EVT_ID, hci_user_evt_proc);
 80030b0:	4956      	ldr	r1, [pc, #344]	; (800320c <APP_BLE_Init+0x19c>)
 80030b2:	2005      	movs	r0, #5
 80030b4:	f7ff fe90 	bl	8002dd8 <SCH_RegTask>
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 80030b8:	4628      	mov	r0, r5
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 80030ba:	2500      	movs	r5, #0
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 80030bc:	f7ff fbf4 	bl	80028a8 <SHCI_C2_BLE_Init>
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 80030c0:	f8ad 5018 	strh.w	r5, [sp, #24]
   hci_reset();
 80030c4:	f7ff fb8d 	bl	80027e2 <hci_reset>
 80030c8:	6823      	ldr	r3, [r4, #0]
  if(udn != 0xFFFFFFFF)
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	f000 808c 	beq.w	80031e8 <APP_BLE_Init+0x178>
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80030d0:	4a4f      	ldr	r2, [pc, #316]	; (8003210 <APP_BLE_Init+0x1a0>)
 80030d2:	6811      	ldr	r1, [r2, #0]
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80030d4:	4a4f      	ldr	r2, [pc, #316]	; (8003214 <APP_BLE_Init+0x1a4>)
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80030d6:	0a18      	lsrs	r0, r3, #8
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80030d8:	7013      	strb	r3, [r2, #0]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 80030da:	0c1b      	lsrs	r3, r3, #16
 80030dc:	7093      	strb	r3, [r2, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 80030de:	70d1      	strb	r1, [r2, #3]
 80030e0:	0a0b      	lsrs	r3, r1, #8
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80030e2:	0c09      	lsrs	r1, r1, #16
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80030e4:	7050      	strb	r0, [r2, #1]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 80030e6:	7113      	strb	r3, [r2, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80030e8:	7151      	strb	r1, [r2, #5]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80030ea:	2106      	movs	r1, #6
 80030ec:	2000      	movs	r0, #0
 80030ee:	f7ff fafe 	bl	80026ee <aci_hal_write_config_data>
  srd_bd_addr[1] =  0x0000ED6E;
 80030f2:	f64e 536e 	movw	r3, #60782	; 0xed6e
 80030f6:	9309      	str	r3, [sp, #36]	; 0x24
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80030f8:	6823      	ldr	r3, [r4, #0]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 80030fa:	9308      	str	r3, [sp, #32]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 80030fc:	aa08      	add	r2, sp, #32
 80030fe:	2106      	movs	r1, #6
 8003100:	202e      	movs	r0, #46	; 0x2e
 8003102:	f7ff faf4 	bl	80026ee <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8003106:	4a44      	ldr	r2, [pc, #272]	; (8003218 <APP_BLE_Init+0x1a8>)
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8003108:	4c44      	ldr	r4, [pc, #272]	; (800321c <APP_BLE_Init+0x1ac>)
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800310a:	2110      	movs	r1, #16
 800310c:	2018      	movs	r0, #24
 800310e:	f7ff faee 	bl	80026ee <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8003112:	4a43      	ldr	r2, [pc, #268]	; (8003220 <APP_BLE_Init+0x1b0>)
 8003114:	2110      	movs	r1, #16
 8003116:	2008      	movs	r0, #8
 8003118:	f7ff fae9 	bl	80026ee <aci_hal_write_config_data>
    aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800311c:	2118      	movs	r1, #24
 800311e:	2001      	movs	r0, #1
 8003120:	f7ff fb13 	bl	800274a <aci_hal_set_tx_power_level>
  aci_gatt_init();
 8003124:	f7ff fa67 	bl	80025f6 <aci_gatt_init>
    aci_gap_init(role, 0,
 8003128:	f10d 031e 	add.w	r3, sp, #30
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	ab07      	add	r3, sp, #28
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	2207      	movs	r2, #7
 8003134:	f10d 031a 	add.w	r3, sp, #26
 8003138:	2100      	movs	r1, #0
 800313a:	2004      	movs	r0, #4
 800313c:	f7ff f984 	bl	8002448 <aci_gap_init>
    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8003140:	4b38      	ldr	r3, [pc, #224]	; (8003224 <APP_BLE_Init+0x1b4>)
 8003142:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	2200      	movs	r2, #0
 800314a:	2307      	movs	r3, #7
 800314c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8003150:	f7ff fa72 	bl	8002638 <aci_gatt_update_char_value>
    if(aci_gatt_update_char_value(gap_service_handle,
 8003154:	ab06      	add	r3, sp, #24
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8003156:	2500      	movs	r5, #0
    if(aci_gatt_update_char_value(gap_service_handle,
 8003158:	2200      	movs	r2, #0
 800315a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8003164:	2302      	movs	r3, #2
 8003166:	f7ff fa67 	bl	8002638 <aci_gatt_update_char_value>
    aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800316a:	4628      	mov	r0, r5
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800316c:	7025      	strb	r5, [r4, #0]
    aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800316e:	f7ff f909 	bl	8002384 <aci_gap_set_io_capability>
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 8003172:	2208      	movs	r2, #8
 8003174:	7562      	strb	r2, [r4, #21]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 8003176:	2210      	movs	r2, #16
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8003178:	2301      	movs	r3, #1
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800317a:	75a2      	strb	r2, [r4, #22]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800317c:	4a2a      	ldr	r2, [pc, #168]	; (8003228 <APP_BLE_Init+0x1b8>)
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800317e:	7063      	strb	r3, [r4, #1]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 8003180:	70e5      	strb	r5, [r4, #3]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 0;
 8003182:	7525      	strb	r5, [r4, #20]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 8003184:	61a2      	str	r2, [r4, #24]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 8003186:	70a3      	strb	r3, [r4, #2]
      BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8003188:	1963      	adds	r3, r4, r5
 800318a:	711d      	strb	r5, [r3, #4]
 800318c:	3501      	adds	r5, #1
    for (index = 0; index < 16; index++)
 800318e:	2d10      	cmp	r5, #16
 8003190:	d1fa      	bne.n	8003188 <APP_BLE_Init+0x118>
    aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8003192:	4a25      	ldr	r2, [pc, #148]	; (8003228 <APP_BLE_Init+0x1b8>)
 8003194:	9203      	str	r2, [sp, #12]
 8003196:	2300      	movs	r3, #0
 8003198:	2208      	movs	r2, #8
 800319a:	2101      	movs	r1, #1
 800319c:	9304      	str	r3, [sp, #16]
 800319e:	9302      	str	r3, [sp, #8]
 80031a0:	9200      	str	r2, [sp, #0]
 80031a2:	9501      	str	r5, [sp, #4]
 80031a4:	461a      	mov	r2, r3
 80031a6:	4608      	mov	r0, r1
 80031a8:	f7ff f910 	bl	80023cc <aci_gap_set_authentication_requirement>
    if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80031ac:	78a3      	ldrb	r3, [r4, #2]
 80031ae:	b10b      	cbz	r3, 80031b4 <APP_BLE_Init+0x144>
      aci_gap_configure_whitelist();
 80031b0:	f7ff f98e 	bl	80024d0 <aci_gap_configure_whitelist>
  SVCCTL_Init();
 80031b4:	f7ff f880 	bl	80022b8 <SVCCTL_Init>
  SCH_RegTask(CFG_TASK_START_SCAN_ID, Scan_Request);
 80031b8:	491c      	ldr	r1, [pc, #112]	; (800322c <APP_BLE_Init+0x1bc>)
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7ff fe0c 	bl	8002dd8 <SCH_RegTask>
  SCH_RegTask(CFG_TASK_CONN_DEV_1_ID, Connect_Request);
 80031c0:	491b      	ldr	r1, [pc, #108]	; (8003230 <APP_BLE_Init+0x1c0>)
 80031c2:	2001      	movs	r0, #1
 80031c4:	f7ff fe08 	bl	8002dd8 <SCH_RegTask>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80031c8:	2500      	movs	r5, #0
  aci_hal_set_radio_activity_mask(0x0020);
 80031ca:	2020      	movs	r0, #32
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80031cc:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
  aci_hal_set_radio_activity_mask(0x0020);
 80031d0:	f7ff fae2 	bl	8002798 <aci_hal_set_radio_activity_mask>
  P2PC_APP_Init();
 80031d4:	f000 fc0a 	bl	80039ec <P2PC_APP_Init>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 80031d8:	4b16      	ldr	r3, [pc, #88]	; (8003234 <APP_BLE_Init+0x1c4>)
 80031da:	4917      	ldr	r1, [pc, #92]	; (8003238 <APP_BLE_Init+0x1c8>)
 80031dc:	462a      	mov	r2, r5
 80031de:	4628      	mov	r0, r5
 80031e0:	f000 fa20 	bl	8003624 <HW_TS_Create>
}
 80031e4:	b016      	add	sp, #88	; 0x58
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
    otp_addr = OTP_Read(0);
 80031e8:	4628      	mov	r0, r5
 80031ea:	f7ff fde5 	bl	8002db8 <OTP_Read>
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 80031ee:	4a13      	ldr	r2, [pc, #76]	; (800323c <APP_BLE_Init+0x1cc>)
 80031f0:	2800      	cmp	r0, #0
 80031f2:	bf18      	it	ne
 80031f4:	4602      	movne	r2, r0
 80031f6:	e778      	b.n	80030ea <APP_BLE_Init+0x7a>
 80031f8:	08003d34 	.word	0x08003d34
 80031fc:	2003009c 	.word	0x2003009c
 8003200:	08002fd3 	.word	0x08002fd3
 8003204:	08002feb 	.word	0x08002feb
 8003208:	1fff7580 	.word	0x1fff7580
 800320c:	0800296d 	.word	0x0800296d
 8003210:	1fff7584 	.word	0x1fff7584
 8003214:	20000264 	.word	0x20000264
 8003218:	08003d7d 	.word	0x08003d7d
 800321c:	20000068 	.word	0x20000068
 8003220:	08003d6d 	.word	0x08003d6d
 8003224:	08003d65 	.word	0x08003d65
 8003228:	0001b207 	.word	0x0001b207
 800322c:	08003051 	.word	0x08003051
 8003230:	08003001 	.word	0x08003001
 8003234:	08002fd1 	.word	0x08002fd1
 8003238:	200000f9 	.word	0x200000f9
 800323c:	08003d8d 	.word	0x08003d8d

08003240 <SVCCTL_App_Notification>:
{
 8003240:	b570      	push	{r4, r5, r6, lr}
  switch (event_pckt->evt)
 8003242:	7843      	ldrb	r3, [r0, #1]
 8003244:	2b3e      	cmp	r3, #62	; 0x3e
{
 8003246:	b086      	sub	sp, #24
 8003248:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 800324a:	d056      	beq.n	80032fa <SVCCTL_App_Notification+0xba>
 800324c:	2bff      	cmp	r3, #255	; 0xff
 800324e:	d011      	beq.n	8003274 <SVCCTL_App_Notification+0x34>
 8003250:	2b05      	cmp	r3, #5
 8003252:	d11c      	bne.n	800328e <SVCCTL_App_Notification+0x4e>
      if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8003254:	4a39      	ldr	r2, [pc, #228]	; (800333c <SVCCTL_App_Notification+0xfc>)
 8003256:	8881      	ldrh	r1, [r0, #4]
 8003258:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800325a:	4299      	cmp	r1, r3
 800325c:	d117      	bne.n	800328e <SVCCTL_App_Notification+0x4e>
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800325e:	2300      	movs	r3, #0
            handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8003260:	4837      	ldr	r0, [pc, #220]	; (8003340 <SVCCTL_App_Notification+0x100>)
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8003262:	84d3      	strh	r3, [r2, #38]	; 0x26
            BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003264:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8003268:	2201      	movs	r2, #1
 800326a:	7002      	strb	r2, [r0, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800326c:	8043      	strh	r3, [r0, #2]
            P2PC_APP_Notification(&handleNotification);
 800326e:	f000 fbc7 	bl	8003a00 <P2PC_APP_Notification>
 8003272:	e00c      	b.n	800328e <SVCCTL_App_Notification+0x4e>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8003274:	4b32      	ldr	r3, [pc, #200]	; (8003340 <SVCCTL_App_Notification+0x100>)
 8003276:	2601      	movs	r6, #1
 8003278:	701e      	strb	r6, [r3, #0]
      switch (blue_evt->ecode)
 800327a:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 800327e:	f240 4207 	movw	r2, #1031	; 0x407
 8003282:	4293      	cmp	r3, r2
 8003284:	d006      	beq.n	8003294 <SVCCTL_App_Notification+0x54>
 8003286:	f640 0202 	movw	r2, #2050	; 0x802
 800328a:	4293      	cmp	r3, r2
 800328c:	d014      	beq.n	80032b8 <SVCCTL_App_Notification+0x78>
}
 800328e:	2001      	movs	r0, #1
 8003290:	b006      	add	sp, #24
 8003292:	bd70      	pop	{r4, r5, r6, pc}
          if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 8003294:	7940      	ldrb	r0, [r0, #5]
 8003296:	2802      	cmp	r0, #2
 8003298:	d1f9      	bne.n	800328e <SVCCTL_App_Notification+0x4e>
              && gap_evt_proc_complete->Status == 0x00)
 800329a:	79a1      	ldrb	r1, [r4, #6]
 800329c:	2900      	cmp	r1, #0
 800329e:	d1f6      	bne.n	800328e <SVCCTL_App_Notification+0x4e>
            if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 80032a0:	4b26      	ldr	r3, [pc, #152]	; (800333c <SVCCTL_App_Notification+0xfc>)
 80032a2:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80032a6:	2a01      	cmp	r2, #1
 80032a8:	d1f1      	bne.n	800328e <SVCCTL_App_Notification+0x4e>
 80032aa:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d0ed      	beq.n	800328e <SVCCTL_App_Notification+0x4e>
              SCH_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 80032b2:	f7ff fd9d 	bl	8002df0 <SCH_SetTask>
 80032b6:	e7ea      	b.n	800328e <SVCCTL_App_Notification+0x4e>
          aci_hal_set_radio_activity_mask(0x0000);
 80032b8:	2000      	movs	r0, #0
 80032ba:	f7ff fa6d 	bl	8002798 <aci_hal_set_radio_activity_mask>
          APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 80032be:	4821      	ldr	r0, [pc, #132]	; (8003344 <SVCCTL_App_Notification+0x104>)
 80032c0:	79e5      	ldrb	r5, [r4, #7]
 80032c2:	7005      	strb	r5, [r0, #0]
          APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 80032c4:	7a62      	ldrb	r2, [r4, #9]
 80032c6:	7a23      	ldrb	r3, [r4, #8]
 80032c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032cc:	8043      	strh	r3, [r0, #2]
          APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 80032ce:	8961      	ldrh	r1, [r4, #10]
 80032d0:	8081      	strh	r1, [r0, #4]
          APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 80032d2:	89a2      	ldrh	r2, [r4, #12]
 80032d4:	80c2      	strh	r2, [r0, #6]
          APP_BLE_p2p_Conn_Update_req.Slave_Latency = pr->Slave_Latency;
 80032d6:	89e3      	ldrh	r3, [r4, #14]
 80032d8:	8103      	strh	r3, [r0, #8]
          APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 80032da:	8a24      	ldrh	r4, [r4, #16]
 80032dc:	8144      	strh	r4, [r0, #10]
          result = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 80032de:	4817      	ldr	r0, [pc, #92]	; (800333c <SVCCTL_App_Notification+0xfc>)
 80032e0:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 80032e2:	9503      	str	r5, [sp, #12]
 80032e4:	2510      	movs	r5, #16
 80032e6:	9604      	str	r6, [sp, #16]
 80032e8:	9502      	str	r5, [sp, #8]
 80032ea:	e88d 0030 	stmia.w	sp, {r4, r5}
 80032ee:	f7ff fa97 	bl	8002820 <aci_l2cap_connection_parameter_update_resp>
          aci_hal_set_radio_activity_mask(0x0020);
 80032f2:	2020      	movs	r0, #32
 80032f4:	f7ff fa50 	bl	8002798 <aci_hal_set_radio_activity_mask>
        break;
 80032f8:	e7c9      	b.n	800328e <SVCCTL_App_Notification+0x4e>
      switch (meta_evt->subevent)
 80032fa:	78c3      	ldrb	r3, [r0, #3]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d00c      	beq.n	800331a <SVCCTL_App_Notification+0xda>
 8003300:	2b02      	cmp	r3, #2
 8003302:	d1c4      	bne.n	800328e <SVCCTL_App_Notification+0x4e>
          if (event_type == ADV_IND)
 8003304:	7943      	ldrb	r3, [r0, #5]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1c1      	bne.n	800328e <SVCCTL_App_Notification+0x4e>
          event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 800330a:	7b41      	ldrb	r1, [r0, #13]
            while(k < event_data_size)
 800330c:	428b      	cmp	r3, r1
 800330e:	dabe      	bge.n	800328e <SVCCTL_App_Notification+0x4e>
              adlength = le_advertising_event->Advertising_Report[0].Data[k];
 8003310:	18e2      	adds	r2, r4, r3
              k += adlength + 1;
 8003312:	7b92      	ldrb	r2, [r2, #14]
 8003314:	3201      	adds	r2, #1
 8003316:	4413      	add	r3, r2
 8003318:	e7f8      	b.n	800330c <SVCCTL_App_Notification+0xcc>
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800331a:	4c08      	ldr	r4, [pc, #32]	; (800333c <SVCCTL_App_Notification+0xfc>)
 800331c:	f8b0 3005 	ldrh.w	r3, [r0, #5]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8003320:	4807      	ldr	r0, [pc, #28]	; (8003340 <SVCCTL_App_Notification+0x100>)
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8003322:	84e3      	strh	r3, [r4, #38]	; 0x26
          BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8003324:	2206      	movs	r2, #6
 8003326:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800332a:	2200      	movs	r2, #0
 800332c:	7002      	strb	r2, [r0, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800332e:	8043      	strh	r3, [r0, #2]
          P2PC_APP_Notification(&handleNotification);
 8003330:	f000 fb66 	bl	8003a00 <P2PC_APP_Notification>
          result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8003334:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8003336:	f7ff f9b2 	bl	800269e <aci_gatt_disc_all_primary_services>
 800333a:	e7a8      	b.n	800328e <SVCCTL_App_Notification+0x4e>
 800333c:	20000068 	.word	0x20000068
 8003340:	20000280 	.word	0x20000280
 8003344:	2000028a 	.word	0x2000028a

08003348 <APP_BLE_Get_Client_Connection_Status>:
  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <APP_BLE_Get_Client_Connection_Status+0x10>)
 800334a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800334c:	4282      	cmp	r2, r0
    return BleApplicationContext.Device_Connection_Status;
 800334e:	bf0c      	ite	eq
 8003350:	f893 0090 	ldrbeq.w	r0, [r3, #144]	; 0x90
  return APP_BLE_IDLE;
 8003354:	2000      	movne	r0, #0
}
 8003356:	4770      	bx	lr
 8003358:	20000068 	.word	0x20000068

0800335c <hci_notify_asynch_evt>:
  SCH_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800335c:	2100      	movs	r1, #0
 800335e:	2020      	movs	r0, #32
 8003360:	f7ff bd46 	b.w	8002df0 <SCH_SetTask>

08003364 <hci_cmd_resp_release>:
  SCH_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003364:	2001      	movs	r0, #1
 8003366:	f7ff bd73 	b.w	8002e50 <SCH_SetEvt>

0800336a <hci_cmd_resp_wait>:
  SCH_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800336a:	2001      	movs	r0, #1
 800336c:	f7ff bdde 	b.w	8002f2c <SCH_WaitEvt>

08003370 <APPE_SysStatusNot>:

  return;
}

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8003370:	4770      	bx	lr

08003372 <APPE_SysUserEvtRx>:
  UNUSED(status);
  return;
}

static void APPE_SysUserEvtRx( void * pPayload )
{
 8003372:	b508      	push	{r3, lr}
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8003374:	f7ff fcf4 	bl	8002d60 <TL_TRACES_Init>

  APP_BLE_Init( );
 8003378:	f7ff fe7a 	bl	8003070 <APP_BLE_Init>
  LPM_SetOffMode(1U << CFG_LPM_APP, LPM_OffMode_En);
 800337c:	2101      	movs	r1, #1
 800337e:	4608      	mov	r0, r1
  return;
}
 8003380:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LPM_SetOffMode(1U << CFG_LPM_APP, LPM_OffMode_En);
 8003384:	f7ff bd04 	b.w	8002d90 <LPM_SetOffMode>

08003388 <APPE_Init>:
{
 8003388:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800338a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800338e:	b088      	sub	sp, #32
 8003390:	6893      	ldr	r3, [r2, #8]
 8003392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003396:	6093      	str	r3, [r2, #8]
  LowPowerModeConfiguration.OFF_Mode_Config = LPM_Standby;
 8003398:	2400      	movs	r4, #0
  LowPowerModeConfiguration.Stop_Mode_Config = LPM_StopMode2;
 800339a:	2302      	movs	r3, #2
  LPM_SetConf(&LowPowerModeConfiguration);
 800339c:	a802      	add	r0, sp, #8
  LowPowerModeConfiguration.Stop_Mode_Config = LPM_StopMode2;
 800339e:	f88d 3008 	strb.w	r3, [sp, #8]
  LowPowerModeConfiguration.OFF_Mode_Config = LPM_Standby;
 80033a2:	f88d 4009 	strb.w	r4, [sp, #9]
  LPM_SetConf(&LowPowerModeConfiguration);
 80033a6:	f7ff fceb 	bl	8002d80 <LPM_SetConf>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80033aa:	4620      	mov	r0, r4
 80033ac:	4911      	ldr	r1, [pc, #68]	; (80033f4 <APPE_Init+0x6c>)
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80033ae:	4c12      	ldr	r4, [pc, #72]	; (80033f8 <APPE_Init+0x70>)
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80033b0:	f000 f8a4 	bl	80034fc <HW_TS_Init>
  TL_Init();
 80033b4:	f7ff fc34 	bl	8002c20 <TL_Init>
  SCH_RegTask( CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, shci_user_evt_proc );
 80033b8:	4910      	ldr	r1, [pc, #64]	; (80033fc <APPE_Init+0x74>)
 80033ba:	2006      	movs	r0, #6
 80033bc:	f7ff fd0c 	bl	8002dd8 <SCH_RegTask>
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80033c0:	4669      	mov	r1, sp
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80033c2:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <APPE_Init+0x78>)
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80033c4:	480f      	ldr	r0, [pc, #60]	; (8003404 <APPE_Init+0x7c>)
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80033c6:	9400      	str	r4, [sp, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80033c8:	9301      	str	r3, [sp, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80033ca:	f7ff fb79 	bl	8002ac0 <shci_init>
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80033ce:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 80033d2:	9302      	str	r3, [sp, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80033d4:	f504 7306 	add.w	r3, r4, #536	; 0x218
 80033d8:	9303      	str	r3, [sp, #12]
  TL_MM_Init( &tl_mm_config );
 80033da:	a802      	add	r0, sp, #8
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80033dc:	f240 533c 	movw	r3, #1340	; 0x53c
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80033e0:	f504 7449 	add.w	r4, r4, #804	; 0x324
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80033e4:	9305      	str	r3, [sp, #20]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80033e6:	9404      	str	r4, [sp, #16]
  TL_MM_Init( &tl_mm_config );
 80033e8:	f7ff fc8c 	bl	8002d04 <TL_MM_Init>
  TL_Enable();
 80033ec:	f7ff fc16 	bl	8002c1c <TL_Enable>
}
 80033f0:	b008      	add	sp, #32
 80033f2:	bd10      	pop	{r4, pc}
 80033f4:	20000324 	.word	0x20000324
 80033f8:	200301c8 	.word	0x200301c8
 80033fc:	08002b15 	.word	0x08002b15
 8003400:	08003371 	.word	0x08003371
 8003404:	08003373 	.word	0x08003373

08003408 <SCH_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void SCH_Idle( void )
{
 8003408:	4770      	bx	lr

0800340a <SCH_EvtIdle>:
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void SCH_EvtIdle( uint32_t evt_waited_bm )
{
  SCH_Run(~0);
 800340a:	f04f 30ff 	mov.w	r0, #4294967295
 800340e:	f7ff bd2b 	b.w	8002e68 <SCH_Run>

08003412 <shci_notify_asynch_evt>:
}

void shci_notify_asynch_evt(void* pdata)
{
  SCH_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8003412:	2100      	movs	r1, #0
 8003414:	2040      	movs	r0, #64	; 0x40
 8003416:	f7ff bceb 	b.w	8002df0 <SCH_SetTask>

0800341a <shci_cmd_resp_release>:
  return;
}

void shci_cmd_resp_release(uint32_t flag)
{
  SCH_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800341a:	2002      	movs	r0, #2
 800341c:	f7ff bd18 	b.w	8002e50 <SCH_SetEvt>

08003420 <shci_cmd_resp_wait>:
  return;
}

void shci_cmd_resp_wait(uint32_t timeout)
{
  SCH_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8003420:	2002      	movs	r0, #2
 8003422:	f7ff bd83 	b.w	8002f2c <SCH_WaitEvt>
	...

08003428 <HW_IPCC_Enable>:
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003428:	4a02      	ldr	r2, [pc, #8]	; (8003434 <HW_IPCC_Enable+0xc>)
 800342a:	68d3      	ldr	r3, [r2, #12]
 800342c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003430:	60d3      	str	r3, [r2, #12]
 8003432:	4770      	bx	lr
 8003434:	58000400 	.word	0x58000400

08003438 <HW_IPCC_Init>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

	return;
}

void HW_IPCC_Init( void )
{
 800343c:	b507      	push	{r0, r1, r2, lr}
 800343e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003440:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003444:	651a      	str	r2, [r3, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800344c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800344e:	9b01      	ldr	r3, [sp, #4]
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8003450:	4b08      	ldr	r3, [pc, #32]	; (8003474 <HW_IPCC_Init+0x3c>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003460:	601a      	str	r2, [r3, #0]
	LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );

	LL_C1_IPCC_EnableIT_RXO( IPCC );
	LL_C1_IPCC_EnableIT_TXF( IPCC );

	HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003462:	202c      	movs	r0, #44	; 0x2c
 8003464:	f7fd f8ae 	bl	80005c4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003468:	202d      	movs	r0, #45	; 0x2d
 800346a:	f7fd f8ab 	bl	80005c4 <HAL_NVIC_EnableIRQ>

	return;
}
 800346e:	b003      	add	sp, #12
 8003470:	f85d fb04 	ldr.w	pc, [sp], #4
 8003474:	58000c00 	.word	0x58000c00

08003478 <HW_IPCC_BLE_Init>:
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8003478:	4a02      	ldr	r2, [pc, #8]	; (8003484 <HW_IPCC_BLE_Init+0xc>)
 800347a:	6853      	ldr	r3, [r2, #4]
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	6053      	str	r3, [r2, #4]
 8003482:	4770      	bx	lr
 8003484:	58000c00 	.word	0x58000c00

08003488 <HW_IPCC_BLE_SendCmd>:
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8003488:	4b02      	ldr	r3, [pc, #8]	; (8003494 <HW_IPCC_BLE_SendCmd+0xc>)
 800348a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	58000c00 	.word	0x58000c00

08003498 <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8003498:	4a02      	ldr	r2, [pc, #8]	; (80034a4 <HW_IPCC_SYS_Init+0xc>)
 800349a:	6853      	ldr	r3, [r2, #4]
 800349c:	f023 0302 	bic.w	r3, r3, #2
 80034a0:	6053      	str	r3, [r2, #4]
 80034a2:	4770      	bx	lr
 80034a4:	58000c00 	.word	0x58000c00

080034a8 <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <HW_IPCC_SYS_SendCmd+0x14>)
 80034aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034ae:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	58000c00 	.word	0x58000c00

080034c0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80034c0:	b510      	push	{r4, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80034c2:	4c08      	ldr	r4, [pc, #32]	; (80034e4 <HW_IPCC_MM_SendFreeBuf+0x24>)
 80034c4:	68e3      	ldr	r3, [r4, #12]
 80034c6:	071b      	lsls	r3, r3, #28
 80034c8:	d506      	bpl.n	80034d8 <HW_IPCC_MM_SendFreeBuf+0x18>
	if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
	{
		FreeBufCb = cb;
 80034ca:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <HW_IPCC_MM_SendFreeBuf+0x28>)
 80034cc:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80034ce:	6863      	ldr	r3, [r4, #4]
 80034d0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80034d4:	6063      	str	r3, [r4, #4]
 80034d6:	bd10      	pop	{r4, pc}
		LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
	}
	else
	{
		cb();
 80034d8:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80034da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034de:	60a3      	str	r3, [r4, #8]
 80034e0:	bd10      	pop	{r4, pc}
 80034e2:	bf00      	nop
 80034e4:	58000c00 	.word	0x58000c00
 80034e8:	2000026c 	.word	0x2000026c

080034ec <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80034ec:	4a02      	ldr	r2, [pc, #8]	; (80034f8 <HW_IPCC_TRACES_Init+0xc>)
 80034ee:	6853      	ldr	r3, [r2, #4]
 80034f0:	f023 0308 	bic.w	r3, r3, #8
 80034f4:	6053      	str	r3, [r2, #4]
 80034f6:	4770      	bx	lr
 80034f8:	58000c00 	.word	0x58000c00

080034fc <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80034fc:	b570      	push	{r4, r5, r6, lr}
   * Get RTC handler
   */
  phrtc = hrtc;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80034fe:	680c      	ldr	r4, [r1, #0]

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003500:	4e40      	ldr	r6, [pc, #256]	; (8003604 <HW_TS_Init+0x108>)
  phrtc = hrtc;
 8003502:	4d41      	ldr	r5, [pc, #260]	; (8003608 <HW_TS_Init+0x10c>)
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003504:	23ca      	movs	r3, #202	; 0xca
 8003506:	6263      	str	r3, [r4, #36]	; 0x24
 8003508:	2353      	movs	r3, #83	; 0x53
 800350a:	6263      	str	r3, [r4, #36]	; 0x24
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800350c:	68b3      	ldr	r3, [r6, #8]
  phrtc = hrtc;
 800350e:	6029      	str	r1, [r5, #0]
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003510:	f043 0320 	orr.w	r3, r3, #32
 8003514:	60b3      	str	r3, [r6, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003516:	68b3      	ldr	r3, [r6, #8]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	f1c3 0304 	rsb	r3, r3, #4
 8003520:	b2d9      	uxtb	r1, r3
 8003522:	4b3a      	ldr	r3, [pc, #232]	; (800360c <HW_TS_Init+0x110>)
 8003524:	7019      	strb	r1, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003526:	6932      	ldr	r2, [r6, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	fab3 f383 	clz	r3, r3
 8003534:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003538:	40da      	lsrs	r2, r3
 800353a:	3201      	adds	r2, #1
 800353c:	4b34      	ldr	r3, [pc, #208]	; (8003610 <HW_TS_Init+0x114>)
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003542:	6933      	ldr	r3, [r6, #16]
 8003544:	4e33      	ldr	r6, [pc, #204]	; (8003614 <HW_TS_Init+0x118>)
 8003546:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800354a:	3301      	adds	r3, #1
 800354c:	8033      	strh	r3, [r6, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800354e:	3b01      	subs	r3, #1
 8003550:	4353      	muls	r3, r2
 8003552:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003556:	40cb      	lsrs	r3, r1

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003558:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800355c:	4293      	cmp	r3, r2
 800355e:	4a2e      	ldr	r2, [pc, #184]	; (8003618 <HW_TS_Init+0x11c>)
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003560:	bf8c      	ite	hi
 8003562:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003566:	b29b      	uxthls	r3, r3
 8003568:	8013      	strh	r3, [r2, #0]
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800356a:	4a2c      	ldr	r2, [pc, #176]	; (800361c <HW_TS_Init+0x120>)
 800356c:	6813      	ldr	r3, [r2, #0]
 800356e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003572:	6013      	str	r3, [r2, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003574:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800357c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 8003580:	2800      	cmp	r0, #0
 8003582:	d137      	bne.n	80035f4 <HW_TS_Init+0xf8>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003584:	4b26      	ldr	r3, [pc, #152]	; (8003620 <HW_TS_Init+0x124>)
 8003586:	2101      	movs	r1, #1
 8003588:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800358c:	f04f 31ff 	mov.w	r1, #4294967295
 8003590:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003594:	2106      	movs	r1, #6
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003596:	7418      	strb	r0, [r3, #16]
 8003598:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 800359c:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
 80035a0:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 80035a4:	f883 0070 	strb.w	r0, [r3, #112]	; 0x70
 80035a8:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80035ac:	7019      	strb	r1, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80035ae:	68a3      	ldr	r3, [r4, #8]
 80035b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035b4:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80035b6:	68e3      	ldr	r3, [r4, #12]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f463 6390 	orn	r3, r3, #1152	; 0x480
 80035be:	60e3      	str	r3, [r4, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80035c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035c4:	60d3      	str	r3, [r2, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80035c6:	2003      	movs	r0, #3
 80035c8:	f7fd f82c 	bl	8000624 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80035cc:	682b      	ldr	r3, [r5, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	6893      	ldr	r3, [r2, #8]
 80035d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d6:	6093      	str	r3, [r2, #8]
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80035d8:	682b      	ldr	r3, [r5, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	22ff      	movs	r2, #255	; 0xff

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80035de:	2103      	movs	r1, #3
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80035e2:	4608      	mov	r0, r1
 80035e4:	2200      	movs	r2, #0
 80035e6:	f7fc ffb9 	bl	800055c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80035ea:	2003      	movs	r0, #3

  return;
}
 80035ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80035f0:	f7fc bfe8 	b.w	80005c4 <HAL_NVIC_EnableIRQ>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80035f4:	68e3      	ldr	r3, [r4, #12]
 80035f6:	055b      	lsls	r3, r3, #21
 80035f8:	d5ee      	bpl.n	80035d8 <HW_TS_Init+0xdc>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80035fa:	2003      	movs	r0, #3
 80035fc:	f7fd f804 	bl	8000608 <HAL_NVIC_SetPendingIRQ>
 8003600:	e7ea      	b.n	80035d8 <HW_TS_Init+0xdc>
 8003602:	bf00      	nop
 8003604:	40002800 	.word	0x40002800
 8003608:	20000278 	.word	0x20000278
 800360c:	20000276 	.word	0x20000276
 8003610:	20000270 	.word	0x20000270
 8003614:	20000274 	.word	0x20000274
 8003618:	20000272 	.word	0x20000272
 800361c:	58000800 	.word	0x58000800
 8003620:	2000010c 	.word	0x2000010c

08003624 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003628:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800362c:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800362e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003678 <HW_TS_Create+0x54>
 8003632:	2500      	movs	r5, #0
 8003634:	f04f 0a18 	mov.w	sl, #24
 8003638:	fb0a 9405 	mla	r4, sl, r5, r9
 800363c:	fa5f fc85 	uxtb.w	ip, r5
 8003640:	f894 e010 	ldrb.w	lr, [r4, #16]
 8003644:	f00e 06ff 	and.w	r6, lr, #255	; 0xff
 8003648:	f1be 0f00 	cmp.w	lr, #0
 800364c:	d10b      	bne.n	8003666 <HW_TS_Create+0x42>
    loop++;
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800364e:	2501      	movs	r5, #1
 8003650:	7425      	strb	r5, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003652:	f387 8810 	msr	PRIMASK, r7

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003656:	6160      	str	r0, [r4, #20]
    aTimerContext[loop].TimerMode = TimerMode;
 8003658:	7462      	strb	r2, [r4, #17]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
    *pTimerId = loop;

    localreturnstatus = hw_ts_Successful;
 800365a:	4630      	mov	r0, r6
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800365c:	6063      	str	r3, [r4, #4]
    *pTimerId = loop;
 800365e:	f881 c000 	strb.w	ip, [r1]
 8003662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003666:	3501      	adds	r5, #1
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003668:	2d06      	cmp	r5, #6
 800366a:	d1e5      	bne.n	8003638 <HW_TS_Create+0x14>
 800366c:	f387 8810 	msr	PRIMASK, r7
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8003670:	2001      	movs	r0, #1
  }

  return(localreturnstatus);
}
 8003672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003676:	bf00      	nop
 8003678:	2000010c 	.word	0x2000010c

0800367c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800367c:	b530      	push	{r4, r5, lr}
 800367e:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003680:	2248      	movs	r2, #72	; 0x48
 8003682:	2100      	movs	r1, #0
 8003684:	a808      	add	r0, sp, #32
 8003686:	f000 fb2a 	bl	8003cde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800368a:	221c      	movs	r2, #28
 800368c:	2100      	movs	r1, #0
 800368e:	a801      	add	r0, sp, #4
 8003690:	f000 fb25 	bl	8003cde <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003694:	2100      	movs	r1, #0
 8003696:	2250      	movs	r2, #80	; 0x50
 8003698:	a81a      	add	r0, sp, #104	; 0x68
 800369a:	f000 fb20 	bl	8003cde <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800369e:	4a1f      	ldr	r2, [pc, #124]	; (800371c <SystemClock_Config+0xa0>)
 80036a0:	6813      	ldr	r3, [r2, #0]
 80036a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	6813      	ldr	r3, [r2, #0]
 80036ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	9b00      	ldr	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80036b6:	232b      	movs	r3, #43	; 0x2b
 80036b8:	9308      	str	r3, [sp, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036be:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036c4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036c6:	2340      	movs	r3, #64	; 0x40
 80036c8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80036ca:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80036cc:	2501      	movs	r5, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80036ce:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036d0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80036d2:	2305      	movs	r3, #5
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80036d4:	2400      	movs	r4, #0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80036d6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80036d8:	950f      	str	r5, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036da:	f7fd f91d 	bl	8000918 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80036de:	236f      	movs	r3, #111	; 0x6f
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80036e0:	4629      	mov	r1, r5
 80036e2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80036e4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80036e6:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036e8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036ea:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036ec:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80036ee:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80036f0:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80036f2:	f7fd fbcf 	bl	8000e94 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80036f6:	f643 0301 	movw	r3, #14337	; 0x3801
 80036fa:	931a      	str	r3, [sp, #104]	; 0x68
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80036fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003700:	932a      	str	r3, [sp, #168]	; 0xa8
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8003702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003706:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003708:	2302      	movs	r3, #2
 800370a:	932c      	str	r3, [sp, #176]	; 0xb0
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800370c:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800370e:	2310      	movs	r3, #16
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003710:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003712:	932d      	str	r3, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003714:	f7fd fd69 	bl	80011ea <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003718:	b02f      	add	sp, #188	; 0xbc
 800371a:	bd30      	pop	{r4, r5, pc}
 800371c:	58000400 	.word	0x58000400

08003720 <main>:
{
 8003720:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8003722:	f7fc fedb 	bl	80004dc <HAL_Init>
  SystemClock_Config();
 8003726:	f7ff ffa9 	bl	800367c <SystemClock_Config>
  SET_BIT(RCC->AHB2ENR, Periphs);
 800372a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800372e:	4829      	ldr	r0, [pc, #164]	; (80037d4 <main+0xb4>)
 8003730:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003740:	9b01      	ldr	r3, [sp, #4]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8003742:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <main+0xb8>)
 8003744:	2400      	movs	r4, #0
 8003746:	257f      	movs	r5, #127	; 0x7f
 8003748:	e880 0038 	stmia.w	r0, {r3, r4, r5}
  hrtc.Init.SynchPrediv = 255;
 800374c:	23ff      	movs	r3, #255	; 0xff
 800374e:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003750:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003752:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003754:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003756:	61c4      	str	r4, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003758:	f7fd ff1b 	bl	8001592 <HAL_RTC_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800375c:	481f      	ldr	r0, [pc, #124]	; (80037dc <main+0xbc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <main+0xc0>)
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003760:	4d20      	ldr	r5, [pc, #128]	; (80037e4 <main+0xc4>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003762:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003764:	f44f 7e82 	mov.w	lr, #260	; 0x104
 8003768:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800376c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003770:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003776:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003778:	2310      	movs	r3, #16
 800377a:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 800377c:	2307      	movs	r3, #7
 800377e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003780:	2308      	movs	r3, #8
 8003782:	6343      	str	r3, [r0, #52]	; 0x34
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003784:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003786:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003788:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800378a:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800378c:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800378e:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003790:	f7fd ff5b 	bl	800164a <HAL_SPI_Init>
  huart1.Init.BaudRate = 9600;
 8003794:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <main+0xc8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003796:	60ac      	str	r4, [r5, #8]
  huart1.Init.BaudRate = 9600;
 8003798:	f44f 5c16 	mov.w	ip, #9600	; 0x2580
 800379c:	e885 1008 	stmia.w	r5, {r3, ip}
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037a0:	4628      	mov	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037a2:	230c      	movs	r3, #12
 80037a4:	616b      	str	r3, [r5, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037a6:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037a8:	612c      	str	r4, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037aa:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037ac:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037ae:	622c      	str	r4, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80037b0:	626c      	str	r4, [r5, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037b2:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037b4:	f7fe fc94 	bl	80020e0 <HAL_UART_Init>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037b8:	4621      	mov	r1, r4
 80037ba:	4628      	mov	r0, r5
 80037bc:	f7fe fd26 	bl	800220c <HAL_UARTEx_SetTxFifoThreshold>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037c0:	4621      	mov	r1, r4
 80037c2:	4628      	mov	r0, r5
 80037c4:	f7fe fd46 	bl	8002254 <HAL_UARTEx_SetRxFifoThreshold>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80037c8:	4628      	mov	r0, r5
 80037ca:	f7fe fd04 	bl	80021d6 <HAL_UARTEx_DisableFifoMode>
  APPE_Init();
 80037ce:	f7ff fddb 	bl	8003388 <APPE_Init>
 80037d2:	e7fe      	b.n	80037d2 <main+0xb2>
 80037d4:	20000324 	.word	0x20000324
 80037d8:	40002800 	.word	0x40002800
 80037dc:	20000348 	.word	0x20000348
 80037e0:	40013000 	.word	0x40013000
 80037e4:	20000298 	.word	0x20000298
 80037e8:	40013800 	.word	0x40013800

080037ec <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 80037ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);

  switch(event_pckt->evt)
 80037f0:	7843      	ldrb	r3, [r0, #1]
 80037f2:	2bff      	cmp	r3, #255	; 0xff
{
 80037f4:	4604      	mov	r4, r0
  switch(event_pckt->evt)
 80037f6:	d16a      	bne.n	80038ce <Event_Handler+0xe2>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*)event_pckt->data;
      switch(blue_evt->ecode)
 80037f8:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 80037fc:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 8003800:	2b0c      	cmp	r3, #12
 8003802:	d864      	bhi.n	80038ce <Event_Handler+0xe2>
 8003804:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003808:	006300b6 	.word	0x006300b6
 800380c:	00630066 	.word	0x00630066
 8003810:	00630063 	.word	0x00630063
 8003814:	0063000d 	.word	0x0063000d
 8003818:	00630063 	.word	0x00630063
 800381c:	00630063 	.word	0x00630063
 8003820:	00e3      	.short	0x00e3

          uint8_t index;
          handle = pr->Connection_Handle;
          index = 0;
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 8003822:	4d71      	ldr	r5, [pc, #452]	; (80039e8 <Event_Handler+0x1fc>)
          handle = pr->Connection_Handle;
 8003824:	f8b0 6005 	ldrh.w	r6, [r0, #5]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003828:	782b      	ldrb	r3, [r5, #0]
 800382a:	b143      	cbz	r3, 800383e <Event_Handler+0x52>
          {
            APP_BLE_ConnStatus_t status;

            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 800382c:	8868      	ldrh	r0, [r5, #2]
 800382e:	f7ff fd8b 	bl	8003348 <APP_BLE_Get_Client_Connection_Status>

            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 8003832:	782b      	ldrb	r3, [r5, #0]
 8003834:	2b06      	cmp	r3, #6
 8003836:	d14a      	bne.n	80038ce <Event_Handler+0xe2>
 8003838:	2800      	cmp	r0, #0
 800383a:	d148      	bne.n	80038ce <Event_Handler+0xe2>
                    (status == APP_BLE_IDLE))
            {
              /* Handle deconnected */

              aP2PClientContext[index].state = APP_BLE_IDLE;
 800383c:	7028      	strb	r0, [r5, #0]
             * 2 or 16 bytes data
             * we are interested only if the UUID is 16 bit.
             * So check if the data length is 6
             */
#if (UUID_128BIT_FORMAT==1)           
          if (pr->Attribute_Data_Length == 20)
 800383e:	79e3      	ldrb	r3, [r4, #7]
            aP2PClientContext[index].connHandle= handle;
 8003840:	806e      	strh	r6, [r5, #2]
          if (pr->Attribute_Data_Length == 20)
 8003842:	2b14      	cmp	r3, #20
 8003844:	d143      	bne.n	80038ce <Event_Handler+0xe2>
            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 8003846:	2100      	movs	r1, #0
 8003848:	f894 e008 	ldrb.w	lr, [r4, #8]
 800384c:	88ae      	ldrh	r6, [r5, #4]
 800384e:	fbbe fef3 	udiv	lr, lr, r3
 8003852:	88e8      	ldrh	r0, [r5, #6]
 8003854:	f895 a000 	ldrb.w	sl, [r5]
 8003858:	4689      	mov	r9, r1
 800385a:	4688      	mov	r8, r1
 800385c:	460a      	mov	r2, r1
 800385e:	1d67      	adds	r7, r4, #5
 8003860:	e023      	b.n	80038aa <Event_Handler+0xbe>
          {
            idx = 4;
#endif             
              for (i=0; i<numServ; i++)
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 8003862:	eb07 0c03 	add.w	ip, r7, r3
 8003866:	f89c b005 	ldrb.w	fp, [ip, #5]
 800386a:	eb04 0c03 	add.w	ip, r4, r3
 800386e:	f89c c009 	ldrb.w	ip, [ip, #9]
                if(uuid == P2P_SERVICE_UUID)
 8003872:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
 8003876:	f64f 6b40 	movw	fp, #65088	; 0xfe40
 800387a:	45dc      	cmp	ip, fp
 800387c:	d113      	bne.n	80038a6 <Event_Handler+0xba>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
#endif
#if (UUID_128BIT_FORMAT==1)                     
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 800387e:	f1a3 0110 	sub.w	r1, r3, #16
 8003882:	1878      	adds	r0, r7, r1
 8003884:	4421      	add	r1, r4
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 8003886:	3b0e      	subs	r3, #14
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 8003888:	7940      	ldrb	r0, [r0, #5]
 800388a:	7a4e      	ldrb	r6, [r1, #9]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 800388c:	18f9      	adds	r1, r7, r3
 800388e:	4423      	add	r3, r4
 8003890:	7949      	ldrb	r1, [r1, #5]
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 8003892:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 8003896:	7a58      	ldrb	r0, [r3, #9]
 8003898:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800389c:	2101      	movs	r1, #1
 800389e:	4689      	mov	r9, r1
 80038a0:	4688      	mov	r8, r1
#else   
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-4]);
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-2]);
#endif                  
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 80038a2:	f04f 0a08 	mov.w	sl, #8
              for (i=0; i<numServ; i++)
 80038a6:	3201      	adds	r2, #1
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	3310      	adds	r3, #16
 80038b2:	4596      	cmp	lr, r2
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	d1d4      	bne.n	8003862 <Event_Handler+0x76>
 80038b8:	f1b8 0f00 	cmp.w	r8, #0
 80038bc:	d001      	beq.n	80038c2 <Event_Handler+0xd6>
 80038be:	f885 a000 	strb.w	sl, [r5]
 80038c2:	f1b9 0f00 	cmp.w	r9, #0
 80038c6:	d000      	beq.n	80038ca <Event_Handler+0xde>
 80038c8:	80ae      	strh	r6, [r5, #4]
 80038ca:	b101      	cbz	r1, 80038ce <Event_Handler+0xe2>
 80038cc:	80e8      	strh	r0, [r5, #6]
    default:
      break;
  }

  return(return_value);
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 80038ce:	2000      	movs	r0, #0
 80038d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 80038d4:	4b44      	ldr	r3, [pc, #272]	; (80039e8 <Event_Handler+0x1fc>)
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80038d6:	f8b0 2005 	ldrh.w	r2, [r0, #5]
 80038da:	8859      	ldrh	r1, [r3, #2]
 80038dc:	4291      	cmp	r1, r2
 80038de:	d1f6      	bne.n	80038ce <Event_Handler+0xe2>
            if (pr->Handle_Value_Pair_Length == 21)
 80038e0:	79c2      	ldrb	r2, [r0, #7]
 80038e2:	2a15      	cmp	r2, #21
 80038e4:	d1f3      	bne.n	80038ce <Event_Handler+0xe2>
              pr->Data_Length -= 1;
 80038e6:	7a22      	ldrb	r2, [r4, #8]
 80038e8:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80038ec:	f893 e000 	ldrb.w	lr, [r3]
 80038f0:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80038f4:	3a01      	subs	r2, #1
 80038f6:	2100      	movs	r1, #0
 80038f8:	7222      	strb	r2, [r4, #8]
 80038fa:	460f      	mov	r7, r1
 80038fc:	468c      	mov	ip, r1
            idx = 17;
 80038fe:	2211      	movs	r2, #17
 8003900:	f104 0a05 	add.w	sl, r4, #5
              while(pr->Data_Length > 0)
 8003904:	7a20      	ldrb	r0, [r4, #8]
 8003906:	b960      	cbnz	r0, 8003922 <Event_Handler+0x136>
 8003908:	f1bc 0f00 	cmp.w	ip, #0
 800390c:	d001      	beq.n	8003912 <Event_Handler+0x126>
 800390e:	f883 e000 	strb.w	lr, [r3]
 8003912:	b10f      	cbz	r7, 8003918 <Event_Handler+0x12c>
 8003914:	f8a3 900c 	strh.w	r9, [r3, #12]
 8003918:	2900      	cmp	r1, #0
 800391a:	d0d8      	beq.n	80038ce <Event_Handler+0xe2>
 800391c:	f8a3 8008 	strh.w	r8, [r3, #8]
 8003920:	e7d5      	b.n	80038ce <Event_Handler+0xe2>
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 8003922:	eb0a 0502 	add.w	r5, sl, r2
 8003926:	18a6      	adds	r6, r4, r2
 8003928:	796d      	ldrb	r5, [r5, #5]
 800392a:	7a76      	ldrb	r6, [r6, #9]
 800392c:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 8003930:	f1a2 050e 	sub.w	r5, r2, #14
 8003934:	eb0a 0b05 	add.w	fp, sl, r5
 8003938:	4425      	add	r5, r4
 800393a:	f89b b005 	ldrb.w	fp, [fp, #5]
 800393e:	7a6d      	ldrb	r5, [r5, #9]
 8003940:	ea45 250b 	orr.w	r5, r5, fp, lsl #8
                if(uuid == P2P_WRITE_CHAR_UUID)
 8003944:	f64f 6b41 	movw	fp, #65089	; 0xfe41
 8003948:	455e      	cmp	r6, fp
 800394a:	d00d      	beq.n	8003968 <Event_Handler+0x17c>
                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 800394c:	f64f 6b42 	movw	fp, #65090	; 0xfe42
 8003950:	455e      	cmp	r6, fp
 8003952:	d104      	bne.n	800395e <Event_Handler+0x172>
 8003954:	2701      	movs	r7, #1
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 8003956:	46a9      	mov	r9, r5
                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 8003958:	46bc      	mov	ip, r7
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 800395a:	f04f 0e0a 	mov.w	lr, #10
                pr->Data_Length -= 21;
 800395e:	3815      	subs	r0, #21
                idx += 21;
 8003960:	3215      	adds	r2, #21
                pr->Data_Length -= 21;
 8003962:	7220      	strb	r0, [r4, #8]
                idx += 21;
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	e7cd      	b.n	8003904 <Event_Handler+0x118>
                if(uuid == P2P_WRITE_CHAR_UUID)
 8003968:	2101      	movs	r1, #1
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 800396a:	46a8      	mov	r8, r5
                if(uuid == P2P_WRITE_CHAR_UUID)
 800396c:	468c      	mov	ip, r1
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 800396e:	f04f 0e09 	mov.w	lr, #9
 8003972:	e7f4      	b.n	800395e <Event_Handler+0x172>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8003974:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <Event_Handler+0x1fc>)
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003976:	f8b0 2005 	ldrh.w	r2, [r0, #5]
 800397a:	8859      	ldrh	r1, [r3, #2]
 800397c:	4291      	cmp	r1, r2
 800397e:	d1a6      	bne.n	80038ce <Event_Handler+0xe2>
            if (pr->Format == UUID_TYPE_16)
 8003980:	79c2      	ldrb	r2, [r0, #7]
 8003982:	2a01      	cmp	r2, #1
 8003984:	d1a3      	bne.n	80038ce <Event_Handler+0xe2>
            numDesc = (pr->Event_Data_Length) / 4;
 8003986:	7a22      	ldrb	r2, [r4, #8]
 8003988:	781d      	ldrb	r5, [r3, #0]
 800398a:	89d8      	ldrh	r0, [r3, #14]
 800398c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8003990:	2100      	movs	r1, #0
 8003992:	4422      	add	r2, r4
 8003994:	460f      	mov	r7, r1
                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 8003996:	f642 1e02 	movw	lr, #10498	; 0x2902
 800399a:	e010      	b.n	80039be <Event_Handler+0x1d2>
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 800399c:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80039a0:	7ae6      	ldrb	r6, [r4, #11]
                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 80039a2:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
 80039a6:	4576      	cmp	r6, lr
 80039a8:	d108      	bne.n	80039bc <Event_Handler+0x1d0>
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 80039aa:	2d0a      	cmp	r5, #10
 80039ac:	d106      	bne.n	80039bc <Event_Handler+0x1d0>
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 80039ae:	7aa1      	ldrb	r1, [r4, #10]
 80039b0:	7a60      	ldrb	r0, [r4, #9]
 80039b2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80039b6:	2101      	movs	r1, #1
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 80039b8:	250b      	movs	r5, #11
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 80039ba:	460f      	mov	r7, r1
 80039bc:	3404      	adds	r4, #4
              for (i=0; i<numDesc; i++)
 80039be:	4294      	cmp	r4, r2
 80039c0:	d1ec      	bne.n	800399c <Event_Handler+0x1b0>
 80039c2:	b107      	cbz	r7, 80039c6 <Event_Handler+0x1da>
 80039c4:	81d8      	strh	r0, [r3, #14]
 80039c6:	2900      	cmp	r1, #0
 80039c8:	d081      	beq.n	80038ce <Event_Handler+0xe2>
 80039ca:	701d      	strb	r5, [r3, #0]
 80039cc:	e77f      	b.n	80038ce <Event_Handler+0xe2>
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <Event_Handler+0x1fc>)
 80039d0:	885a      	ldrh	r2, [r3, #2]
 80039d2:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	f47f af79 	bne.w	80038ce <Event_Handler+0xe2>
            SCH_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 80039dc:	2100      	movs	r1, #0
 80039de:	2004      	movs	r0, #4
 80039e0:	f7ff fa06 	bl	8002df0 <SCH_SetTask>
  return(return_value);
 80039e4:	e773      	b.n	80038ce <Event_Handler+0xe2>
 80039e6:	bf00      	nop
 80039e8:	200000fc 	.word	0x200000fc

080039ec <P2PC_APP_Init>:
    aP2PClientContext[index].state= APP_BLE_IDLE;
 80039ec:	4b02      	ldr	r3, [pc, #8]	; (80039f8 <P2PC_APP_Init+0xc>)
  SVCCTL_RegisterCltHandler(Event_Handler);
 80039ee:	4803      	ldr	r0, [pc, #12]	; (80039fc <P2PC_APP_Init+0x10>)
    aP2PClientContext[index].state= APP_BLE_IDLE;
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]
  SVCCTL_RegisterCltHandler(Event_Handler);
 80039f4:	f7fe bc86 	b.w	8002304 <SVCCTL_RegisterCltHandler>
 80039f8:	200000fc 	.word	0x200000fc
 80039fc:	080037ed 	.word	0x080037ed

08003a00 <P2PC_APP_Notification>:
{
 8003a00:	4770      	bx	lr

08003a02 <HAL_MspInit>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a06:	b082      	sub	sp, #8
 8003a08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a0a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003a0e:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a16:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003a18:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a1a:	b002      	add	sp, #8
 8003a1c:	4770      	bx	lr
	...

08003a20 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8003a20:	6802      	ldr	r2, [r0, #0]
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RTC_MspInit+0x1c>)
 8003a24:	429a      	cmp	r2, r3
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003a26:	bf01      	itttt	eq
 8003a28:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
 8003a2c:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 8003a30:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8003a34:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40002800 	.word	0x40002800

08003a40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a40:	b510      	push	{r4, lr}
 8003a42:	4604      	mov	r4, r0
 8003a44:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a46:	2214      	movs	r2, #20
 8003a48:	2100      	movs	r1, #0
 8003a4a:	a803      	add	r0, sp, #12
 8003a4c:	f000 f947 	bl	8003cde <memset>
  if(hspi->Instance==SPI1)
 8003a50:	6822      	ldr	r2, [r4, #0]
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_SPI_MspInit+0x5c>)
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d11e      	bne.n	8003a96 <HAL_SPI_MspInit+0x56>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5c:	a903      	add	r1, sp, #12
 8003a5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a64:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003a66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a68:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a6c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8003a6e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003a70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003a80:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8003a82:	23c2      	movs	r3, #194	; 0xc2
 8003a84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a86:	2302      	movs	r3, #2
 8003a88:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a8e:	2305      	movs	r3, #5
 8003a90:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a92:	f7fc fdd5 	bl	8000640 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003a96:	b008      	add	sp, #32
 8003a98:	bd10      	pop	{r4, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40013000 	.word	0x40013000

08003aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003aa0:	b510      	push	{r4, lr}
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa6:	2214      	movs	r2, #20
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	a803      	add	r0, sp, #12
 8003aac:	f000 f917 	bl	8003cde <memset>
  if(huart->Instance==USART1)
 8003ab0:	6822      	ldr	r2, [r4, #0]
 8003ab2:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <HAL_UART_MspInit+0x60>)
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d121      	bne.n	8003afc <HAL_UART_MspInit+0x5c>
  SET_BIT(RCC->APB2ENR, Periphs);
 8003ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003abc:	a903      	add	r1, sp, #12
 8003abe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac4:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003ac6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ac8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003acc:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8003ace:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003ad0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003ae0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ae2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003ae6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003aec:	2301      	movs	r3, #1
 8003aee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003af4:	2307      	movs	r3, #7
 8003af6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af8:	f7fc fda2 	bl	8000640 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003afc:	b008      	add	sp, #32
 8003afe:	bd10      	pop	{r4, pc}
 8003b00:	40013800 	.word	0x40013800

08003b04 <NMI_Handler>:
 8003b04:	4770      	bx	lr

08003b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b06:	e7fe      	b.n	8003b06 <HardFault_Handler>

08003b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b08:	e7fe      	b.n	8003b08 <MemManage_Handler>

08003b0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b0a:	e7fe      	b.n	8003b0a <BusFault_Handler>

08003b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b0c:	e7fe      	b.n	8003b0c <UsageFault_Handler>

08003b0e <SVC_Handler>:
 8003b0e:	4770      	bx	lr

08003b10 <DebugMon_Handler>:
 8003b10:	4770      	bx	lr

08003b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b12:	4770      	bx	lr

08003b14 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b14:	f7fc bcf8 	b.w	8000508 <HAL_IncTick>

08003b18 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003b18:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <SystemInit+0x60>)
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003b1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b22:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003b26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003b2e:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8003b3a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003b3e:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8003b46:	4462      	add	r2, ip
 8003b48:	4002      	ands	r2, r0
 8003b4a:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003b4c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003b50:	f022 0205 	bic.w	r2, r2, #5
 8003b54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003b58:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003b5c:	f022 0201 	bic.w	r2, r2, #1
 8003b60:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003b64:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <SystemInit+0x64>)
 8003b66:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003b68:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b70:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b72:	6199      	str	r1, [r3, #24]
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	e000ed00 	.word	0xe000ed00
 8003b7c:	22041000 	.word	0x22041000

08003b80 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8003b80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b84:	4924      	ldr	r1, [pc, #144]	; (8003c18 <SystemCoreClockUpdate+0x98>)
 8003b86:	6813      	ldr	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b88:	6890      	ldr	r0, [r2, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8003b8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b8e:	f000 000c 	and.w	r0, r0, #12
{
 8003b92:	b510      	push	{r4, lr}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8003b94:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8003b98:	4611      	mov	r1, r2
 8003b9a:	4a20      	ldr	r2, [pc, #128]	; (8003c1c <SystemCoreClockUpdate+0x9c>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b9c:	280c      	cmp	r0, #12
 8003b9e:	d839      	bhi.n	8003c14 <SystemCoreClockUpdate+0x94>
 8003ba0:	e8df f000 	tbb	[pc, r0]
 8003ba4:	38383838 	.word	0x38383838
 8003ba8:	38383807 	.word	0x38383807
 8003bac:	38383816 	.word	0x38383816
 8003bb0:	18          	.byte	0x18
 8003bb1:	00          	.byte	0x00
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8003bb2:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <SystemCoreClockUpdate+0xa0>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 8003bb4:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8003bba:	481a      	ldr	r0, [pc, #104]	; (8003c24 <SystemCoreClockUpdate+0xa4>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003bbc:	6899      	ldr	r1, [r3, #8]
  SystemCoreClock = SystemCoreClock / tmp;
 8003bbe:	6813      	ldr	r3, [r2, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003bc0:	f3c1 1103 	ubfx	r1, r1, #4, #4
  SystemCoreClock = SystemCoreClock / tmp;
 8003bc4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8003bc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 8003bd0:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <SystemCoreClockUpdate+0xa8>)
 8003bd2:	e7ef      	b.n	8003bb4 <SystemCoreClockUpdate+0x34>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003bd4:	68c8      	ldr	r0, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003bd6:	68cb      	ldr	r3, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003bd8:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003bdc:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8003be0:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003be2:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8003be6:	d10e      	bne.n	8003c06 <SystemCoreClockUpdate+0x86>
        pllvco = (HSI_VALUE / pllm);
 8003be8:	490d      	ldr	r1, [pc, #52]	; (8003c20 <SystemCoreClockUpdate+0xa0>)
        pllvco = (HSE_VALUE / pllm);
 8003bea:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bf2:	68c8      	ldr	r0, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003bf4:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bf6:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003bfa:	0f49      	lsrs	r1, r1, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bfc:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003bfe:	3101      	adds	r1, #1
      SystemCoreClock = pllvco/pllr;
 8003c00:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c04:	e7d6      	b.n	8003bb4 <SystemCoreClockUpdate+0x34>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8003c06:	2803      	cmp	r0, #3
 8003c08:	d101      	bne.n	8003c0e <SystemCoreClockUpdate+0x8e>
        pllvco = (HSE_VALUE / pllm);
 8003c0a:	4907      	ldr	r1, [pc, #28]	; (8003c28 <SystemCoreClockUpdate+0xa8>)
 8003c0c:	e7ed      	b.n	8003bea <SystemCoreClockUpdate+0x6a>
        pllvco = (msirange / pllm);
 8003c0e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003c12:	e7ec      	b.n	8003bee <SystemCoreClockUpdate+0x6e>
      SystemCoreClock = msirange;
 8003c14:	6014      	str	r4, [r2, #0]
      break;
 8003c16:	e7ce      	b.n	8003bb6 <SystemCoreClockUpdate+0x36>
 8003c18:	08003df4 	.word	0x08003df4
 8003c1c:	20000014 	.word	0x20000014
 8003c20:	00f42400 	.word	0x00f42400
 8003c24:	08003d94 	.word	0x08003d94
 8003c28:	01e84800 	.word	0x01e84800

08003c2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c2c:	480d      	ldr	r0, [pc, #52]	; (8003c64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c30:	480d      	ldr	r0, [pc, #52]	; (8003c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c32:	490e      	ldr	r1, [pc, #56]	; (8003c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c34:	4a0e      	ldr	r2, [pc, #56]	; (8003c70 <LoopForever+0xe>)
  movs r3, #0
 8003c36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003c38:	e002      	b.n	8003c40 <LoopCopyDataInit>

08003c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c3e:	3304      	adds	r3, #4

08003c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c44:	d3f9      	bcc.n	8003c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c46:	4a0b      	ldr	r2, [pc, #44]	; (8003c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c48:	4c0b      	ldr	r4, [pc, #44]	; (8003c78 <LoopForever+0x16>)
  movs r3, #0
 8003c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c4c:	e001      	b.n	8003c52 <LoopFillZerobss>

08003c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c50:	3204      	adds	r2, #4

08003c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c54:	d3fb      	bcc.n	8003c4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003c56:	f7ff ff5f 	bl	8003b18 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003c5a:	f000 f811 	bl	8003c80 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003c5e:	f7ff fd5f 	bl	8003720 <main>

08003c62 <LoopForever>:

LoopForever:
  b LoopForever
 8003c62:	e7fe      	b.n	8003c62 <LoopForever>
  ldr   r0, =_estack
 8003c64:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003c68:	20000004 	.word	0x20000004
  ldr r1, =_edata
 8003c6c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8003c70:	08003e44 	.word	0x08003e44
  ldr r2, =_sbss
 8003c74:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8003c78:	200003ac 	.word	0x200003ac

08003c7c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c7c:	e7fe      	b.n	8003c7c <ADC1_IRQHandler>
	...

08003c80 <__libc_init_array>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	4e0d      	ldr	r6, [pc, #52]	; (8003cb8 <__libc_init_array+0x38>)
 8003c84:	4c0d      	ldr	r4, [pc, #52]	; (8003cbc <__libc_init_array+0x3c>)
 8003c86:	1ba4      	subs	r4, r4, r6
 8003c88:	10a4      	asrs	r4, r4, #2
 8003c8a:	2500      	movs	r5, #0
 8003c8c:	42a5      	cmp	r5, r4
 8003c8e:	d109      	bne.n	8003ca4 <__libc_init_array+0x24>
 8003c90:	4e0b      	ldr	r6, [pc, #44]	; (8003cc0 <__libc_init_array+0x40>)
 8003c92:	4c0c      	ldr	r4, [pc, #48]	; (8003cc4 <__libc_init_array+0x44>)
 8003c94:	f000 f82c 	bl	8003cf0 <_init>
 8003c98:	1ba4      	subs	r4, r4, r6
 8003c9a:	10a4      	asrs	r4, r4, #2
 8003c9c:	2500      	movs	r5, #0
 8003c9e:	42a5      	cmp	r5, r4
 8003ca0:	d105      	bne.n	8003cae <__libc_init_array+0x2e>
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
 8003ca4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ca8:	4798      	blx	r3
 8003caa:	3501      	adds	r5, #1
 8003cac:	e7ee      	b.n	8003c8c <__libc_init_array+0xc>
 8003cae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cb2:	4798      	blx	r3
 8003cb4:	3501      	adds	r5, #1
 8003cb6:	e7f2      	b.n	8003c9e <__libc_init_array+0x1e>
 8003cb8:	08003e3c 	.word	0x08003e3c
 8003cbc:	08003e3c 	.word	0x08003e3c
 8003cc0:	08003e3c 	.word	0x08003e3c
 8003cc4:	08003e40 	.word	0x08003e40

08003cc8 <memcpy>:
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	1e43      	subs	r3, r0, #1
 8003ccc:	440a      	add	r2, r1
 8003cce:	4291      	cmp	r1, r2
 8003cd0:	d100      	bne.n	8003cd4 <memcpy+0xc>
 8003cd2:	bd10      	pop	{r4, pc}
 8003cd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cdc:	e7f7      	b.n	8003cce <memcpy+0x6>

08003cde <memset>:
 8003cde:	4402      	add	r2, r0
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d100      	bne.n	8003ce8 <memset+0xa>
 8003ce6:	4770      	bx	lr
 8003ce8:	f803 1b01 	strb.w	r1, [r3], #1
 8003cec:	e7f9      	b.n	8003ce2 <memset+0x4>
	...

08003cf0 <_init>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	bf00      	nop
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr

08003cfc <_fini>:
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	bf00      	nop
 8003d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d02:	bc08      	pop	{r3}
 8003d04:	469e      	mov	lr, r3
 8003d06:	4770      	bx	lr
